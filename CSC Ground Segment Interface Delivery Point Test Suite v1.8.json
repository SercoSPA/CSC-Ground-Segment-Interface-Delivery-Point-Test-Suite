{
	"info": {
		"_postman_id": "08729a06-0a93-42d8-b9d5-9c7524ed4d3c",
		"name": "GCSC Ground Segment Interface Delivery Point Test Suite v1.8",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Sentinel-2",
			"item": [
				{
					"name": "LTA",
					"item": [
						{
							"name": "L0,_L1A,_L1B,_L1C,_L2A_DS_",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c37edf53-95f3-4aa0-a05f-fad8ca2b7451",
										"exec": [
											"var jsonDataElements = pm.response.json().value;",
											"pm.test(\"Response time is less than \" +  environment[\"query-timeout\"] + \"ms\", function(){",
											"    pm.expect(pm.response.responseTime).to.be.below(parseInt(environment[\"query-timeout\"]));",
											"});",
											"",
											"pm.test(\"Test OData context\", function(){",
											"    query_string = pm.request.url.getQueryString();",
											"    if(query_string.includes(\"$expand=Attributes\")){",
											"        pm.expect( pm.response.json()['@odata.context']).to.include(\"$metadata#Products(Attributes())\");",
											"    } else{",
											"        pm.expect( pm.response.json()['@odata.context']).to.include(\"$metadata#Products\");",
											"    }",
											"});",
											"",
											"var TRUE = true;",
											"var FALSE = false;",
											"",
											"test_map={};",
											"test_map.productGroupId=function (element) {pm.expect(element.Name).eq('productGroupId');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');};",
											"test_map.processorVersion=function (element) {pm.expect(element.Name).eq('processorVersion');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');};",
											"test_map.processingDate=function (element) {pm.expect(element.Name).eq('processingDate');pm.expect(element.ValueType).eq('DateTimeOffset');pm.expect(element.Value).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);};",
											"test_map.beginningDateTime=function (element) {pm.expect(element.Name).eq('beginningDateTime');pm.expect(element.ValueType).eq('DateTimeOffset');pm.expect(element.Value).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);};",
											"test_map.endingDateTime=function (element) {pm.expect(element.Name).eq('endingDateTime');pm.expect(element.ValueType).eq('DateTimeOffset');pm.expect(element.Value).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);};",
											"test_map.orbitNumber=function (element) {pm.expect(element.Name).eq('orbitNumber');pm.expect(element.ValueType).eq('Integer');pm.expect(element.Value).to.be.a(\"number\");};",
											"test_map.coordinates=function (element) {pm.expect(element.Name).eq('coordinates');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.match(/(-?\\d+(\\.\\d+)?),\\s*(-?\\d+(\\.\\d+)?)/);};",
											"test_map.qualityStatus=function (element, product) {pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"NOMINAL\",\"DEGRADED\"]);",
											"    var qualityInfo = \"\";",
											"    product.Attributes.forEach(function(el){if(el.Name == \"qualityInfo\"){qualityInfo = el.Value;}});",
											"    if(element.Value == \"NOMINAL\" ){pm.expect(qualityInfo == \"100\");}",
											"    else if(element.Value == \"DEGRADED\"){pm.expect(qualityInfo != \"100\");}",
											"    pm.expect(qualityInfo).to.not.eql(\"\");",
											"};",
											"test_map.productType=function (element) {pm.expect(element.Name).eq('productType');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"MSI_L0__DS\",\"MSI_L1A_DS\",\"MSI_L1B_DS\",\"MSI_L1C_DS\",\"MSI_L2A_DS\"]);",
											"",
											"};",
											"test_map.instrumentShortName=function (element) {pm.expect(element.Name).eq('instrumentShortName');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"MSI\"]);};",
											"test_map.processingCenter=function (element) {pm.expect(element.Name).eq('processingCenter');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"SGS_\",\"MPS_\",\"MTI_\",\"EPA_\",\"MPC_\",\"UPA_\",\"XXXX\",\"VGS2\"]);};",
											"test_map.platformSerialIdentifier=function (element) {pm.expect(element.Name).eq('platformSerialIdentifier');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"A\",\"B\",\"C\",\"D\",\"_\"]);};",
											"test_map.platformShortName=function (element) {pm.expect(element.Name).eq('platformShortName');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"SENTINEL-2\"]);};",
											"test_map.operationalMode=function (element) {pm.expect(element.Name).eq('operationalMode');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"INS-NOBS\",\"INS-EOBS\",\"INS-DASC\",\"INS-ABSR\",\"INS-VIC\",\"INS-RAW\",\"INS-TST\"]);};",
											"test_map.relativeOrbitNumber=function (element) {pm.expect(element.Name).eq('relativeOrbitNumber');pm.expect(element.ValueType).eq('Integer');pm.expect(element.Value).to.be.a(\"number\");pm.expect(element.Value).to.match(/([1-9]|[1-8][0-9]|9[0-9]|1[0-3][0-9]|14[0-3])/);};",
											"test_map.qualityInfo=function (element, product) {pm.expect(element.Value).to.be.a(\"number\");pm.expect(element.Value).to.be.oneOf([0,1,3,5,9,11,15,19,24,26,30,34,39,43,48,53,59,60,61,64,65,68,71,75,76,78,80,84,86,90,94,100]);};",
											"",
											"test_schema={};",
											"test_schema.productGroupId=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.processorVersion=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.processingDate=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.beginningDateTime=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.endingDateTime=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.orbitNumber=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.coordinates=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.qualityStatus=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.productType=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.instrumentShortName=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.processingCenter=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.platformSerialIdentifier=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.platformShortName=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.operationalMode=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.relativeOrbitNumber=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.qualityInfo=function (num) {pm.expect(num).to.be.eq(1)};",
											"",
											"            ",
											"properties_map = {};",
											"properties_map.Id=function (element) {pm.expect(element.Id).to.match(/[0-9a-fA-F]{8}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{12}/);};",
											"properties_map.Name=function (element) {pm.expect(element.Name).to.be.a(\"string\");};",
											"properties_map.ContentType=function (element) {pm.expect(element.ContentType).to.be.a(\"string\");};",
											"properties_map.ContentLength=function (element) {pm.expect(element.ContentLength).to.be.a(\"number\");};",
											"properties_map.OriginDate=function (element) {pm.expect(element.OriginDate).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d+([+-][0-2]\\d:[0-5]\\d|Z)/);};",
											"properties_map.PublicationDate=function (element) {pm.expect(element.PublicationDate).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);};",
											"properties_map.ModificationDate=function (element) {pm.expect(element.ModificationDate).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d+([+-][0-2]\\d:[0-5]\\d|Z)/);};",
											"properties_map.Online=function (element) {pm.expect(element.Online).to.be.oneOf([TRUE,FALSE,true,false]);};",
											"properties_map.EvictionDate=function (element) {if(element.EvictionDate){ pm.expect(element.EvictionDate).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d+([+-][0-2]\\d:[0-5]\\d|Z)/); }};",
											"properties_map.Checksum=function (element) {for(i=0; i<element.Checksum.length; i++ ){pm.expect(element.Checksum[i].Algorithm).to.be.oneOf([\"MD5\",\"SHA-1\",\"SHA-256\",\"SHA-512\"]);checksum_algorithm = {'MD5': '[a-fA-F0-9]{32}', 'SHA-1': '[0-9a-f]{5,40}', 'SHA-256': '[A-Fa-f0-9]{64}', 'SHA-512': '[A-Fa-f0-9]{128}'};pm.expect(element.Checksum[i].Value).to.match(new RegExp(checksum_algorithm[element.Checksum[i].Algorithm]));}};",
											"properties_map.ContentDate=function (element) {pm.expect(element.ContentDate[\"Start\"]).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);pm.expect(element.ContentDate[\"End\"]).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);};",
											"properties_map.Footprint=function (element) {if(element.Footprint){ pm.expect(element.Footprint).to.match(/geography'SRID=\\d+;[Polygon|Multipolygon|Point](.*)/); }};",
											"",
											"let schema_seen = {};",
											"",
											"function testSpecific(value, product){",
											"",
											"    if (schema_seen[value.Name]){",
											"        schema_seen[value.Name]++;",
											"    }else{",
											"        schema_seen[value.Name]=1;",
											"    }",
											"",
											"    if (test_map[value.Name]) {",
											"        pm.test(\"Test Attribute \"+value.Name + \" for Product: \"+product.Name+\" - \"+product.Id, function(){test_map[value.Name](value, product)});",
											"    }",
											"    else {",
											"        pm.test.skip(\"Test Attribute \"+value.Name + \" for Product: \"+product.Name+\" - \"+product.Id);",
											"    }",
											"}",
											"function propertySpecific(key, product){",
											"    if (properties_map[key]) {",
											"        pm.test(\"Test Property \"+key+\" for Product: \"+product.Name+\" - \"+product.Id, function(){properties_map[key](product)});",
											"    }",
											"    else {",
											"        pm.test.skip(\"Test Property \"+key+\" for Product: \"+product.Name+\" - \"+product.Id);",
											"    }",
											"}",
											"",
											"for (var counter = 0;  counter  < jsonDataElements.length; counter++){",
											"    var product = jsonDataElements[counter];",
											"    console.log(\"Processing Product: \"+product.Name+\" - \"+product.Id);",
											"",
											"    for (const[key, value] of Object.entries(properties_map)){",
											"        propertySpecific(key, jsonDataElements[counter]);",
											"    }",
											"",
											"    if(\"Attributes\" in jsonDataElements[counter]){",
											"        schema_seen = {};",
											"",
											"        pm.test(\"Test Attributes list\", function(){",
											"            pm.expect(jsonDataElements[counter].Attributes.length).to.be.above(0);",
											"        });",
											"",
											"        jsonDataElements[counter].Attributes.forEach(function(elem){",
											"            testSpecific(elem, jsonDataElements[counter]);",
											"        });",
											"        var product = jsonDataElements[counter];",
											"        for (const[key, value] of Object.entries(test_schema)) {pm.test(\"Schema Attribute \"+key+\" Product \"+product.Name+\" - \"+product.Id, function(){",
											"        if(schema_seen[key] == undefined){",
											"            schema_seen[key] = 0;",
											"        }",
											"        value(schema_seen[key], product)});}",
											"    }",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{service-root-uri}}/odata/v1/Products?$expand=Attributes&$top=1&$filter=(contains(Name,'MSI_L0__DS') or contains(Name,'MSI_L1A_DS') or contains(Name,'MSI_L1B_DS') or contains(Name,'MSI_L1C_DS') or contains(Name,'MSI_L2A_DS')) and startswith(Name,'S2')\n",
									"host": [
										"{{service-root-uri}}"
									],
									"path": [
										"odata",
										"v1",
										"Products"
									],
									"query": [
										{
											"key": "$expand",
											"value": "Attributes"
										},
										{
											"key": "$top",
											"value": "1"
										},
										{
											"key": "$filter",
											"value": "(contains(Name,'MSI_L0__DS') or contains(Name,'MSI_L1A_DS') or contains(Name,'MSI_L1B_DS') or contains(Name,'MSI_L1C_DS') or contains(Name,'MSI_L2A_DS')) and startswith(Name,'S2')\n"
										},
										{
											"key": "$filter",
											"value": "contains(Name,'MSI_L0__DS') and startswith(Name,'S2')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'MSI_L1A_DS') and startswith(Name,'S2')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'MSI_L1B_DS') and startswith(Name,'S2')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'MSI_L1C_DS') and startswith(Name,'S2')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'MSI_L2A_DS') and startswith(Name,'S2')\n",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "L1C,_L2A_True_Colour_Image",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "810e2893-ace5-45ee-860e-b2c59dc212bf",
										"exec": [
											"var jsonDataElements = pm.response.json().value;",
											"pm.test(\"Response time is less than \" +  environment[\"query-timeout\"] + \"ms\", function(){",
											"    pm.expect(pm.response.responseTime).to.be.below(parseInt(environment[\"query-timeout\"]));",
											"});",
											"",
											"pm.test(\"Test OData context\", function(){",
											"    query_string = pm.request.url.getQueryString();",
											"    if(query_string.includes(\"$expand=Attributes\")){",
											"        pm.expect( pm.response.json()['@odata.context']).to.include(\"$metadata#Products(Attributes())\");",
											"    } else{",
											"        pm.expect( pm.response.json()['@odata.context']).to.include(\"$metadata#Products\");",
											"    }",
											"});",
											"",
											"var TRUE = true;",
											"var FALSE = false;",
											"",
											"test_map={};",
											"test_map.productGroupId=function (element) {pm.expect(element.Name).eq('productGroupId');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');};",
											"test_map.processorVersion=function (element) {pm.expect(element.Name).eq('processorVersion');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');};",
											"test_map.processingDate=function (element) {pm.expect(element.Name).eq('processingDate');pm.expect(element.ValueType).eq('DateTimeOffset');pm.expect(element.Value).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);};",
											"test_map.beginningDateTime=function (element) {pm.expect(element.Name).eq('beginningDateTime');pm.expect(element.ValueType).eq('DateTimeOffset');pm.expect(element.Value).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);};",
											"test_map.endingDateTime=function (element) {pm.expect(element.Name).eq('endingDateTime');pm.expect(element.ValueType).eq('DateTimeOffset');pm.expect(element.Value).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);};",
											"test_map.orbitNumber=function (element) {pm.expect(element.Name).eq('orbitNumber');pm.expect(element.ValueType).eq('Integer');pm.expect(element.Value).to.be.a(\"number\");};",
											"test_map.coordinates=function (element) {pm.expect(element.Name).eq('coordinates');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');};",
											"test_map.qualityStatus=function (element, product) {pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"NOMINAL\",\"DEGRADED\"]);",
											"    var qualityInfo = \"\";",
											"    product.Attributes.forEach(function(el){if(el.Name == \"qualityInfo\"){qualityInfo = el.Value;}});",
											"    if(element.Value == \"NOMINAL\" ){pm.expect(qualityInfo == \"100\");}",
											"    else if(element.Value == \"DEGRADED\"){pm.expect(qualityInfo != \"100\");}",
											"    pm.expect(qualityInfo).to.not.eql(\"\");",
											"};",
											"test_map.productType=function (element) {pm.expect(element.Name).eq('productType');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"MSI_L1C_TC\",\"MSI_L2A_TC\"]);",
											"",
											"};",
											"test_map.instrumentShortName=function (element) {pm.expect(element.Name).eq('instrumentShortName');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');};",
											"test_map.processingCenter=function (element) {pm.expect(element.Name).eq('processingCenter');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');};",
											"test_map.platformSerialIdentifier=function (element) {pm.expect(element.Name).eq('platformSerialIdentifier');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"A\",\"B\",\"C\",\"D\",\"_\"]);};",
											"test_map.cloudCover=function (element) {pm.expect(element.Name).eq('cloudCover');pm.expect(element.ValueType).eq('Double');pm.expect(element.Value).to.be.a(\"number\");};",
											"test_map.platformShortName=function (element) {pm.expect(element.Name).eq('platformShortName');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"SENTINEL-2\"]);};",
											"test_map.tileId=function (element) {pm.expect(element.Name).eq('tileId');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');};",
											"test_map.qualityInfo=function (element, product) {pm.expect(element.Value).to.be.a(\"number\");pm.expect(element.Value).to.be.oneOf([0,1,3,5,9,11,15,19,24,26,30,34,39,43,48,53,59,60,61,64,65,68,71,75,76,78,80,84,86,90,94,100]);};",
											"",
											"test_schema={};",
											"test_schema.productGroupId=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.processorVersion=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.processingDate=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.beginningDateTime=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.endingDateTime=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.orbitNumber=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.coordinates=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.qualityStatus=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.productType=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.instrumentShortName=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.processingCenter=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.platformSerialIdentifier=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.cloudCover=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.platformShortName=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.tileId=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.qualityInfo=function (num) {pm.expect(num).to.be.eq(1)};",
											"",
											"            ",
											"properties_map = {};",
											"properties_map.Id=function (element) {pm.expect(element.Id).to.match(/[0-9a-fA-F]{8}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{12}/);};",
											"properties_map.Name=function (element) {pm.expect(element.Name).to.be.a(\"string\");};",
											"properties_map.ContentType=function (element) {pm.expect(element.ContentType).to.be.a(\"string\");};",
											"properties_map.ContentLength=function (element) {pm.expect(element.ContentLength).to.be.a(\"number\");};",
											"properties_map.OriginDate=function (element) {pm.expect(element.OriginDate).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d+([+-][0-2]\\d:[0-5]\\d|Z)/);};",
											"properties_map.PublicationDate=function (element) {pm.expect(element.PublicationDate).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);};",
											"properties_map.ModificationDate=function (element) {pm.expect(element.ModificationDate).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d+([+-][0-2]\\d:[0-5]\\d|Z)/);};",
											"properties_map.Online=function (element) {pm.expect(element.Online).to.be.oneOf([TRUE,FALSE,true,false]);};",
											"properties_map.EvictionDate=function (element) {if(element.EvictionDate){ pm.expect(element.EvictionDate).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d+([+-][0-2]\\d:[0-5]\\d|Z)/); }};",
											"properties_map.Checksum=function (element) {for(i=0; i<element.Checksum.length; i++ ){pm.expect(element.Checksum[i].Algorithm).to.be.oneOf([\"MD5\",\"SHA-1\",\"SHA-256\",\"SHA-512\"]);checksum_algorithm = {'MD5': '[a-fA-F0-9]{32}', 'SHA-1': '[0-9a-f]{5,40}', 'SHA-256': '[A-Fa-f0-9]{64}', 'SHA-512': '[A-Fa-f0-9]{128}'};pm.expect(element.Checksum[i].Value).to.match(new RegExp(checksum_algorithm[element.Checksum[i].Algorithm]));}};",
											"properties_map.ContentDate=function (element) {pm.expect(element.ContentDate[\"Start\"]).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);pm.expect(element.ContentDate[\"End\"]).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);};",
											"properties_map.Footprint=function (element) {if(element.Footprint){ pm.expect(element.Footprint).to.match(/geography'SRID=\\d+;[Polygon|Multipolygon|Point](.*)/); }};",
											"",
											"let schema_seen = {};",
											"",
											"function testSpecific(value, product){",
											"",
											"    if (schema_seen[value.Name]){",
											"        schema_seen[value.Name]++;",
											"    }else{",
											"        schema_seen[value.Name]=1;",
											"    }",
											"",
											"    if (test_map[value.Name]) {",
											"        pm.test(\"Test Attribute \"+value.Name + \" for Product: \"+product.Name+\" - \"+product.Id, function(){test_map[value.Name](value, product)});",
											"    }",
											"    else {",
											"        pm.test.skip(\"Test Attribute \"+value.Name + \" for Product: \"+product.Name+\" - \"+product.Id);",
											"    }",
											"}",
											"function propertySpecific(key, product){",
											"    if (properties_map[key]) {",
											"        pm.test(\"Test Property \"+key+\" for Product: \"+product.Name+\" - \"+product.Id, function(){properties_map[key](product)});",
											"    }",
											"    else {",
											"        pm.test.skip(\"Test Property \"+key+\" for Product: \"+product.Name+\" - \"+product.Id);",
											"    }",
											"}",
											"",
											"for (var counter = 0;  counter  < jsonDataElements.length; counter++){",
											"    var product = jsonDataElements[counter];",
											"    console.log(\"Processing Product: \"+product.Name+\" - \"+product.Id);",
											"",
											"    for (const[key, value] of Object.entries(properties_map)){",
											"        propertySpecific(key, jsonDataElements[counter]);",
											"    }",
											"",
											"    if(\"Attributes\" in jsonDataElements[counter]){",
											"        schema_seen = {};",
											"",
											"        pm.test(\"Test Attributes list\", function(){",
											"            pm.expect(jsonDataElements[counter].Attributes.length).to.be.above(0);",
											"        });",
											"",
											"        jsonDataElements[counter].Attributes.forEach(function(elem){",
											"            testSpecific(elem, jsonDataElements[counter]);",
											"        });",
											"        var product = jsonDataElements[counter];",
											"        for (const[key, value] of Object.entries(test_schema)) {pm.test(\"Schema Attribute \"+key+\" Product \"+product.Name+\" - \"+product.Id, function(){",
											"        if(schema_seen[key] == undefined){",
											"            schema_seen[key] = 0;",
											"        }",
											"        value(schema_seen[key], product)});}",
											"    }",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{service-root-uri}}/odata/v1/Products?$expand=Attributes&$top=1&$filter=(contains(Name,'MSI_L1C_TC') or contains(Name,'MSI_L2A_TC')) and startswith(Name,'S2')\n",
									"host": [
										"{{service-root-uri}}"
									],
									"path": [
										"odata",
										"v1",
										"Products"
									],
									"query": [
										{
											"key": "$expand",
											"value": "Attributes"
										},
										{
											"key": "$top",
											"value": "1"
										},
										{
											"key": "$filter",
											"value": "(contains(Name,'MSI_L1C_TC') or contains(Name,'MSI_L2A_TC')) and startswith(Name,'S2')\n"
										},
										{
											"key": "$filter",
											"value": "contains(Name,'MSI_L1C_TC') and startswith(Name,'S2')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'MSI_L2A_TC') and startswith(Name,'S2')\n",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "S2_SAD_(Ancillary)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "350492b9-fd66-4d7a-b4ec-e9f6feeb88a4",
										"exec": [
											"var jsonDataElements = pm.response.json().value;",
											"pm.test(\"Response time is less than \" +  environment[\"query-timeout\"] + \"ms\", function(){",
											"    pm.expect(pm.response.responseTime).to.be.below(parseInt(environment[\"query-timeout\"]));",
											"});",
											"",
											"pm.test(\"Test OData context\", function(){",
											"    query_string = pm.request.url.getQueryString();",
											"    if(query_string.includes(\"$expand=Attributes\")){",
											"        pm.expect( pm.response.json()['@odata.context']).to.include(\"$metadata#Products(Attributes())\");",
											"    } else{",
											"        pm.expect( pm.response.json()['@odata.context']).to.include(\"$metadata#Products\");",
											"    }",
											"});",
											"",
											"var TRUE = true;",
											"var FALSE = false;",
											"",
											"test_map={};",
											"test_map.processingDate=function (element) {pm.expect(element.Name).eq('processingDate');pm.expect(element.ValueType).eq('DateTimeOffset');pm.expect(element.Value).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);};",
											"test_map.beginningDateTime=function (element) {pm.expect(element.Name).eq('beginningDateTime');pm.expect(element.ValueType).eq('DateTimeOffset');pm.expect(element.Value).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);};",
											"test_map.endingDateTime=function (element) {pm.expect(element.Name).eq('endingDateTime');pm.expect(element.ValueType).eq('DateTimeOffset');pm.expect(element.Value).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);};",
											"test_map.orbitNumber=function (element) {pm.expect(element.Name).eq('orbitNumber');pm.expect(element.ValueType).eq('Integer');pm.expect(element.Value).to.be.a(\"number\");};",
											"test_map.lastOrbitNumber=function (element) {pm.expect(element.Name).eq('lastOrbitNumber');pm.expect(element.ValueType).eq('Integer');pm.expect(element.Value).to.be.a(\"number\");};",
											"test_map.qualityStatus=function (element, product) {pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"NOMINAL\",\"DEGRADED\"]);",
											"    var qualityInfo = \"\";",
											"    product.Attributes.forEach(function(el){if(el.Name == \"qualityInfo\"){qualityInfo = el.Value;}});",
											"    if(element.Value == \"NOMINAL\" ){pm.expect(qualityInfo == \"100\");}",
											"    else if(element.Value == \"DEGRADED\"){pm.expect(qualityInfo != \"100\");}",
											"    pm.expect(qualityInfo).to.not.eql(\"\");",
											"};",
											"test_map.productType=function (element) {pm.expect(element.Name).eq('productType');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"AUX_SADATA\"]);",
											"",
											"};",
											"test_map.instrumentShortName=function (element) {pm.expect(element.Name).eq('instrumentShortName');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"MSI\"]);};",
											"test_map.processingCenter=function (element) {pm.expect(element.Name).eq('processingCenter');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');};",
											"test_map.platformSerialIdentifier=function (element) {pm.expect(element.Name).eq('platformSerialIdentifier');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"A\",\"B\",\"C\",\"D\",\"_\"]);};",
											"test_map.platformShortName=function (element) {pm.expect(element.Name).eq('platformShortName');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"SENTINEL-2\"]);};",
											"test_map.qualityInfo=function (element, product) {pm.expect(element.Value).to.be.a(\"number\");pm.expect(element.Value).to.be.oneOf([0,1,3,5,9,11,15,19,24,26,30,34,39,43,48,53,59,60,61,64,65,68,71,75,76,78,80,84,86,90,94,100]);};",
											"",
											"test_schema={};",
											"test_schema.processingDate=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.beginningDateTime=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.endingDateTime=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.orbitNumber=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.lastOrbitNumber=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.qualityStatus=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.productType=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.instrumentShortName=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.processingCenter=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.platformSerialIdentifier=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.platformShortName=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.qualityInfo=function (num) {pm.expect(num).to.be.eq(1)};",
											"",
											"            ",
											"properties_map = {};",
											"properties_map.Id=function (element) {pm.expect(element.Id).to.match(/[0-9a-fA-F]{8}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{12}/);};",
											"properties_map.Name=function (element) {pm.expect(element.Name).to.be.a(\"string\");};",
											"properties_map.ContentType=function (element) {pm.expect(element.ContentType).to.be.a(\"string\");};",
											"properties_map.ContentLength=function (element) {pm.expect(element.ContentLength).to.be.a(\"number\");};",
											"properties_map.OriginDate=function (element) {pm.expect(element.OriginDate).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d+([+-][0-2]\\d:[0-5]\\d|Z)/);};",
											"properties_map.PublicationDate=function (element) {pm.expect(element.PublicationDate).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);};",
											"properties_map.ModificationDate=function (element) {pm.expect(element.ModificationDate).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d+([+-][0-2]\\d:[0-5]\\d|Z)/);};",
											"properties_map.Online=function (element) {pm.expect(element.Online).to.be.oneOf([TRUE,FALSE,true,false]);};",
											"properties_map.EvictionDate=function (element) {if(element.EvictionDate){ pm.expect(element.EvictionDate).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d+([+-][0-2]\\d:[0-5]\\d|Z)/); }};",
											"properties_map.Checksum=function (element) {for(i=0; i<element.Checksum.length; i++ ){pm.expect(element.Checksum[i].Algorithm).to.be.oneOf([\"MD5\",\"SHA-1\",\"SHA-256\",\"SHA-512\"]);checksum_algorithm = {'MD5': '[a-fA-F0-9]{32}', 'SHA-1': '[0-9a-f]{5,40}', 'SHA-256': '[A-Fa-f0-9]{64}', 'SHA-512': '[A-Fa-f0-9]{128}'};pm.expect(element.Checksum[i].Value).to.match(new RegExp(checksum_algorithm[element.Checksum[i].Algorithm]));}};",
											"properties_map.ContentDate=function (element) {pm.expect(element.ContentDate[\"Start\"]).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);pm.expect(element.ContentDate[\"End\"]).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);};",
											"properties_map.Footprint=function (element) {if(element.Footprint){ pm.expect(element.Footprint).to.match(/geography'SRID=\\d+;[Polygon|Multipolygon|Point](.*)/); }};",
											"",
											"let schema_seen = {};",
											"",
											"function testSpecific(value, product){",
											"",
											"    if (schema_seen[value.Name]){",
											"        schema_seen[value.Name]++;",
											"    }else{",
											"        schema_seen[value.Name]=1;",
											"    }",
											"",
											"    if (test_map[value.Name]) {",
											"        pm.test(\"Test Attribute \"+value.Name + \" for Product: \"+product.Name+\" - \"+product.Id, function(){test_map[value.Name](value, product)});",
											"    }",
											"    else {",
											"        pm.test.skip(\"Test Attribute \"+value.Name + \" for Product: \"+product.Name+\" - \"+product.Id);",
											"    }",
											"}",
											"function propertySpecific(key, product){",
											"    if (properties_map[key]) {",
											"        pm.test(\"Test Property \"+key+\" for Product: \"+product.Name+\" - \"+product.Id, function(){properties_map[key](product)});",
											"    }",
											"    else {",
											"        pm.test.skip(\"Test Property \"+key+\" for Product: \"+product.Name+\" - \"+product.Id);",
											"    }",
											"}",
											"",
											"for (var counter = 0;  counter  < jsonDataElements.length; counter++){",
											"    var product = jsonDataElements[counter];",
											"    console.log(\"Processing Product: \"+product.Name+\" - \"+product.Id);",
											"",
											"    for (const[key, value] of Object.entries(properties_map)){",
											"        propertySpecific(key, jsonDataElements[counter]);",
											"    }",
											"",
											"    if(\"Attributes\" in jsonDataElements[counter]){",
											"        schema_seen = {};",
											"",
											"        pm.test(\"Test Attributes list\", function(){",
											"            pm.expect(jsonDataElements[counter].Attributes.length).to.be.above(0);",
											"        });",
											"",
											"        jsonDataElements[counter].Attributes.forEach(function(elem){",
											"            testSpecific(elem, jsonDataElements[counter]);",
											"        });",
											"        var product = jsonDataElements[counter];",
											"        for (const[key, value] of Object.entries(test_schema)) {pm.test(\"Schema Attribute \"+key+\" Product \"+product.Name+\" - \"+product.Id, function(){",
											"        if(schema_seen[key] == undefined){",
											"            schema_seen[key] = 0;",
											"        }",
											"        value(schema_seen[key], product)});}",
											"    }",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{service-root-uri}}/odata/v1/Products?$expand=Attributes&$top=1&$filter=(contains(Name,'AUX_SADATA')) and startswith(Name,'S2')\n",
									"host": [
										"{{service-root-uri}}"
									],
									"path": [
										"odata",
										"v1",
										"Products"
									],
									"query": [
										{
											"key": "$expand",
											"value": "Attributes"
										},
										{
											"key": "$top",
											"value": "1"
										},
										{
											"key": "$filter",
											"value": "(contains(Name,'AUX_SADATA')) and startswith(Name,'S2')\n"
										},
										{
											"key": "$filter",
											"value": "contains(Name,'AUX_SADATA') and startswith(Name,'S2')\n",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "S2_HKTM",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2500951d-c960-4d56-9a5d-54dc112eb630",
										"exec": [
											"var jsonDataElements = pm.response.json().value;",
											"pm.test(\"Response time is less than \" +  environment[\"query-timeout\"] + \"ms\", function(){",
											"    pm.expect(pm.response.responseTime).to.be.below(parseInt(environment[\"query-timeout\"]));",
											"});",
											"",
											"pm.test(\"Test OData context\", function(){",
											"    query_string = pm.request.url.getQueryString();",
											"    if(query_string.includes(\"$expand=Attributes\")){",
											"        pm.expect( pm.response.json()['@odata.context']).to.include(\"$metadata#Products(Attributes())\");",
											"    } else{",
											"        pm.expect( pm.response.json()['@odata.context']).to.include(\"$metadata#Products\");",
											"    }",
											"});",
											"",
											"var TRUE = true;",
											"var FALSE = false;",
											"",
											"test_map={};",
											"test_map.beginningDateTime=function (element) {pm.expect(element.Name).eq('beginningDateTime');pm.expect(element.ValueType).eq('DateTimeOffset');pm.expect(element.Value).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);};",
											"test_map.endingDateTime=function (element) {pm.expect(element.Name).eq('endingDateTime');pm.expect(element.ValueType).eq('DateTimeOffset');pm.expect(element.Value).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);};",
											"test_map.platformShortName=function (element) {pm.expect(element.Name).eq('platformShortName');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"SENTINEL-2\"]);};",
											"test_map.platformSerialIdentifier=function (element) {pm.expect(element.Name).eq('platformSerialIdentifier');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"A\",\"B\",\"C\",\"D\",\"_\"]);};",
											"test_map.orbitNumber=function (element) {pm.expect(element.Name).eq('orbitNumber');pm.expect(element.ValueType).eq('Integer');pm.expect(element.Value).to.be.a(\"number\");};",
											"test_map.lastOrbitNumber=function (element) {pm.expect(element.Name).eq('lastOrbitNumber');pm.expect(element.ValueType).eq('Integer');pm.expect(element.Value).to.be.a(\"number\");};",
											"test_map.relativeOrbitNumber=function (element) {pm.expect(element.Name).eq('relativeOrbitNumber');pm.expect(element.ValueType).eq('Integer');pm.expect(element.Value).to.be.a(\"number\");pm.expect(element.Value).to.match(/([1-9]|[1-8][0-9]|9[0-9]|1[0-3][0-9]|14[0-3])/);};",
											"test_map.processingDate=function (element) {pm.expect(element.Name).eq('processingDate');pm.expect(element.ValueType).eq('DateTimeOffset');pm.expect(element.Value).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);};",
											"test_map.processingCenter=function (element) {pm.expect(element.Name).eq('processingCenter');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');};",
											"test_map.instrumentShortName=function (element) {pm.expect(element.Name).eq('instrumentShortName');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"HKTM\"]);};",
											"test_map.productType=function (element) {pm.expect(element.Name).eq('productType');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"PRD_HKTM__\"]);",
											"",
											"};",
											"",
											"test_schema={};",
											"test_schema.beginningDateTime=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.endingDateTime=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.platformShortName=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.platformSerialIdentifier=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.orbitNumber=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.lastOrbitNumber=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.relativeOrbitNumber=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.processingDate=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.processingCenter=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.instrumentShortName=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.productType=function (num) {pm.expect(num).to.be.eq(1)};",
											"",
											"            ",
											"properties_map = {};",
											"properties_map.Id=function (element) {pm.expect(element.Id).to.match(/[0-9a-fA-F]{8}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{12}/);};",
											"properties_map.Name=function (element) {pm.expect(element.Name).to.be.a(\"string\");};",
											"properties_map.ContentType=function (element) {pm.expect(element.ContentType).to.be.a(\"string\");};",
											"properties_map.ContentLength=function (element) {pm.expect(element.ContentLength).to.be.a(\"number\");};",
											"properties_map.OriginDate=function (element) {pm.expect(element.OriginDate).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d+([+-][0-2]\\d:[0-5]\\d|Z)/);};",
											"properties_map.PublicationDate=function (element) {pm.expect(element.PublicationDate).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);};",
											"properties_map.ModificationDate=function (element) {pm.expect(element.ModificationDate).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d+([+-][0-2]\\d:[0-5]\\d|Z)/);};",
											"properties_map.Online=function (element) {pm.expect(element.Online).to.be.oneOf([TRUE,FALSE,true,false]);};",
											"properties_map.EvictionDate=function (element) {if(element.EvictionDate){ pm.expect(element.EvictionDate).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d+([+-][0-2]\\d:[0-5]\\d|Z)/); }};",
											"properties_map.Checksum=function (element) {for(i=0; i<element.Checksum.length; i++ ){pm.expect(element.Checksum[i].Algorithm).to.be.oneOf([\"MD5\",\"SHA-1\",\"SHA-256\",\"SHA-512\"]);checksum_algorithm = {'MD5': '[a-fA-F0-9]{32}', 'SHA-1': '[0-9a-f]{5,40}', 'SHA-256': '[A-Fa-f0-9]{64}', 'SHA-512': '[A-Fa-f0-9]{128}'};pm.expect(element.Checksum[i].Value).to.match(new RegExp(checksum_algorithm[element.Checksum[i].Algorithm]));}};",
											"properties_map.ContentDate=function (element) {pm.expect(element.ContentDate[\"Start\"]).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);pm.expect(element.ContentDate[\"End\"]).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);};",
											"properties_map.Footprint=function (element) {if(element.Footprint){ pm.expect(element.Footprint).to.match(/geography'SRID=\\d+;[Polygon|Multipolygon|Point](.*)/); }};",
											"",
											"let schema_seen = {};",
											"",
											"function testSpecific(value, product){",
											"",
											"    if (schema_seen[value.Name]){",
											"        schema_seen[value.Name]++;",
											"    }else{",
											"        schema_seen[value.Name]=1;",
											"    }",
											"",
											"    if (test_map[value.Name]) {",
											"        pm.test(\"Test Attribute \"+value.Name + \" for Product: \"+product.Name+\" - \"+product.Id, function(){test_map[value.Name](value, product)});",
											"    }",
											"    else {",
											"        pm.test.skip(\"Test Attribute \"+value.Name + \" for Product: \"+product.Name+\" - \"+product.Id);",
											"    }",
											"}",
											"function propertySpecific(key, product){",
											"    if (properties_map[key]) {",
											"        pm.test(\"Test Property \"+key+\" for Product: \"+product.Name+\" - \"+product.Id, function(){properties_map[key](product)});",
											"    }",
											"    else {",
											"        pm.test.skip(\"Test Property \"+key+\" for Product: \"+product.Name+\" - \"+product.Id);",
											"    }",
											"}",
											"",
											"for (var counter = 0;  counter  < jsonDataElements.length; counter++){",
											"    var product = jsonDataElements[counter];",
											"    console.log(\"Processing Product: \"+product.Name+\" - \"+product.Id);",
											"",
											"    for (const[key, value] of Object.entries(properties_map)){",
											"        propertySpecific(key, jsonDataElements[counter]);",
											"    }",
											"",
											"    if(\"Attributes\" in jsonDataElements[counter]){",
											"        schema_seen = {};",
											"",
											"        pm.test(\"Test Attributes list\", function(){",
											"            pm.expect(jsonDataElements[counter].Attributes.length).to.be.above(0);",
											"        });",
											"",
											"        jsonDataElements[counter].Attributes.forEach(function(elem){",
											"            testSpecific(elem, jsonDataElements[counter]);",
											"        });",
											"        var product = jsonDataElements[counter];",
											"        for (const[key, value] of Object.entries(test_schema)) {pm.test(\"Schema Attribute \"+key+\" Product \"+product.Name+\" - \"+product.Id, function(){",
											"        if(schema_seen[key] == undefined){",
											"            schema_seen[key] = 0;",
											"        }",
											"        value(schema_seen[key], product)});}",
											"    }",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{service-root-uri}}/odata/v1/Products?$expand=Attributes&$top=1&$filter=(contains(Name,'PRD_HKTM__')) and startswith(Name,'S2')\n",
									"host": [
										"{{service-root-uri}}"
									],
									"path": [
										"odata",
										"v1",
										"Products"
									],
									"query": [
										{
											"key": "$expand",
											"value": "Attributes"
										},
										{
											"key": "$top",
											"value": "1"
										},
										{
											"key": "$filter",
											"value": "(contains(Name,'PRD_HKTM__')) and startswith(Name,'S2')\n"
										},
										{
											"key": "$filter",
											"value": "contains(Name,'PRD_HKTM__') and startswith(Name,'S2')\n",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "L0,_L1A,_L1B,_L1C,_L2A_Granule",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4465159e-ff3f-4bcd-adb2-1dbaaf237e3e",
										"exec": [
											"var jsonDataElements = pm.response.json().value;",
											"pm.test(\"Response time is less than \" +  environment[\"query-timeout\"] + \"ms\", function(){",
											"    pm.expect(pm.response.responseTime).to.be.below(parseInt(environment[\"query-timeout\"]));",
											"});",
											"",
											"pm.test(\"Test OData context\", function(){",
											"    query_string = pm.request.url.getQueryString();",
											"    if(query_string.includes(\"$expand=Attributes\")){",
											"        pm.expect( pm.response.json()['@odata.context']).to.include(\"$metadata#Products(Attributes())\");",
											"    } else{",
											"        pm.expect( pm.response.json()['@odata.context']).to.include(\"$metadata#Products\");",
											"    }",
											"});",
											"",
											"var TRUE = true;",
											"var FALSE = false;",
											"",
											"test_map={};",
											"test_map.productGroupId=function (element) {pm.expect(element.Name).eq('productGroupId');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');};",
											"test_map.processorVersion=function (element) {pm.expect(element.Name).eq('processorVersion');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');};",
											"test_map.processingDate=function (element) {pm.expect(element.Name).eq('processingDate');pm.expect(element.ValueType).eq('DateTimeOffset');pm.expect(element.Value).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d+([+-][0-2]\\d:[0-5]\\d|Z)/);};",
											"test_map.beginningDateTime=function (element) {pm.expect(element.Name).eq('beginningDateTime');pm.expect(element.ValueType).eq('DateTimeOffset');pm.expect(element.Value).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);};",
											"test_map.endingDateTime=function (element) {pm.expect(element.Name).eq('endingDateTime');pm.expect(element.ValueType).eq('DateTimeOffset');pm.expect(element.Value).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);};",
											"test_map.orbitNumber=function (element) {pm.expect(element.Name).eq('orbitNumber');pm.expect(element.ValueType).eq('Integer');pm.expect(element.Value).to.be.a(\"number\");};",
											"test_map.coordinates=function (element) {pm.expect(element.Name).eq('coordinates');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.match(/(-?\\d+(\\.\\d+)?),\\s*(-?\\d+(\\.\\d+)?)/);};",
											"test_map.qualityStatus=function (element, product) {pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"NOMINAL\",\"DEGRADED\"]);",
											"    var qualityInfo = \"\";",
											"    product.Attributes.forEach(function(el){if(el.Name == \"qualityInfo\"){qualityInfo = el.Value;}});",
											"    if(element.Value == \"NOMINAL\" ){pm.expect(qualityInfo == \"100\");}",
											"    else if(element.Value == \"DEGRADED\"){pm.expect(qualityInfo != \"100\");}",
											"    pm.expect(qualityInfo).to.not.eql(\"\");",
											"};",
											"test_map.productType=function (element) {pm.expect(element.Name).eq('productType');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"MSI_L0__GR\",\"MSI_L1A_GR\",\"MSI_L1B_GR\",\"MSI_L1C_TL\",\"MSI_L2A_TL\"]);",
											"",
											"};",
											"test_map.instrumentShortName=function (element) {pm.expect(element.Name).eq('instrumentShortName');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"MSI\"]);};",
											"test_map.processingCenter=function (element) {pm.expect(element.Name).eq('processingCenter');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"SGS_\",\"MPS_\",\"MTI_\",\"EPA_\",\"MPC_\",\"UPA_\",\"XXXX\",\"VGS2\"]);};",
											"test_map.platformSerialIdentifier=function (element) {pm.expect(element.Name).eq('platformSerialIdentifier');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"A\",\"B\",\"C\",\"D\",\"_\"]);};",
											"test_map.cloudCover=function (element) {pm.expect(element.Name).eq('cloudCover');pm.expect(element.ValueType).eq('Double');pm.expect(element.Value).to.be.a(\"number\");};",
											"test_map.platformShortName=function (element) {pm.expect(element.Name).eq('platformShortName');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"SENTINEL-2\"]);};",
											"test_map.tileId=function (element, product) {",
											"    if(product.Name.includes(\"MSI_L1C_TL\") || product.Name.includes(\"MSI_L2A_TL\")){",
											"        pm.expect(element.Name).eq('tileId');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');    ",
											"    }",
											"};",
											"test_map.illuminationZenithAngle=function (element, product) {",
											"    if(product.Name.includes(\"MSI_L1C_TL\") || product.Name.includes(\"MSI_L2A_TL\")){",
											"        pm.expect(element.Name).eq('illuminationZenithAngle');pm.expect(element.ValueType).eq('Double');pm.expect(element.Value).to.be.a(\"number\");    ",
											"    }",
											"};",
											"test_map.datastripId=function (element) {pm.expect(element.Name).eq('datastripId');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');};",
											"test_map.qualityInfo=function (element, product) {pm.expect(element.Value).to.be.a(\"number\");pm.expect(element.Value).to.be.oneOf([0,1,3,5,9,11,15,19,24,26,30,34,39,43,48,53,59,60,61,64,65,68,71,75,76,78,80,84,86,90,94,100]);};",
											"",
											"test_schema={};",
											"test_schema.productGroupId=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.processorVersion=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.processingDate=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.beginningDateTime=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.endingDateTime=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.orbitNumber=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.coordinates=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.qualityStatus=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.productType=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.instrumentShortName=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.processingCenter=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.platformSerialIdentifier=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.cloudCover=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.platformShortName=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.tileId=function (num, product) {",
											"    if(product.Name.includes(\"MSI_L1C_TL\") || product.Name.includes(\"MSI_L2A_TL\")){",
											"        pm.expect(num).to.be.eq(1)   ",
											"    }",
											"};",
											"test_schema.illuminationZenithAngle=function (num, product) {",
											"    if(product.Name.includes(\"MSI_L1C_TL\") || product.Name.includes(\"MSI_L2A_TL\")){",
											"        pm.expect(num).to.be.eq(1)   ",
											"    }",
											"};",
											"test_schema.datastripId=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.qualityInfo=function (num) {pm.expect(num).to.be.eq(1)};",
											"",
											"            ",
											"properties_map = {};",
											"properties_map.Id=function (element) {pm.expect(element.Id).to.match(/[0-9a-fA-F]{8}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{12}/);};",
											"properties_map.Name=function (element) {pm.expect(element.Name).to.be.a(\"string\");};",
											"properties_map.ContentType=function (element) {pm.expect(element.ContentType).to.be.a(\"string\");};",
											"properties_map.ContentLength=function (element) {pm.expect(element.ContentLength).to.be.a(\"number\");};",
											"properties_map.OriginDate=function (element) {pm.expect(element.OriginDate).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d+([+-][0-2]\\d:[0-5]\\d|Z)/);};",
											"properties_map.PublicationDate=function (element) {pm.expect(element.PublicationDate).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);};",
											"properties_map.ModificationDate=function (element) {pm.expect(element.ModificationDate).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d+([+-][0-2]\\d:[0-5]\\d|Z)/);};",
											"properties_map.Online=function (element) {pm.expect(element.Online).to.be.oneOf([TRUE,FALSE,true,false]);};",
											"properties_map.EvictionDate=function (element) {if(element.EvictionDate){ pm.expect(element.EvictionDate).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d+([+-][0-2]\\d:[0-5]\\d|Z)/); }};",
											"properties_map.Checksum=function (element) {for(i=0; i<element.Checksum.length; i++ ){pm.expect(element.Checksum[i].Algorithm).to.be.oneOf([\"MD5\",\"SHA-1\",\"SHA-256\",\"SHA-512\"]);checksum_algorithm = {'MD5': '[a-fA-F0-9]{32}', 'SHA-1': '[0-9a-f]{5,40}', 'SHA-256': '[A-Fa-f0-9]{64}', 'SHA-512': '[A-Fa-f0-9]{128}'};pm.expect(element.Checksum[i].Value).to.match(new RegExp(checksum_algorithm[element.Checksum[i].Algorithm]));}};",
											"properties_map.ContentDate=function (element) {pm.expect(element.ContentDate[\"Start\"]).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);pm.expect(element.ContentDate[\"End\"]).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);};",
											"properties_map.Footprint=function (element) {if(element.Footprint){ pm.expect(element.Footprint).to.match(/geography'SRID=\\d+;[Polygon|Multipolygon|Point](.*)/); }};",
											"",
											"let schema_seen = {};",
											"",
											"function testSpecific(value, product){",
											"",
											"    if (schema_seen[value.Name]){",
											"        schema_seen[value.Name]++;",
											"    }else{",
											"        schema_seen[value.Name]=1;",
											"    }",
											"",
											"    if (test_map[value.Name]) {",
											"        pm.test(\"Test Attribute \"+value.Name + \" for Product: \"+product.Name+\" - \"+product.Id, function(){test_map[value.Name](value, product)});",
											"    }",
											"    else {",
											"        pm.test.skip(\"Test Attribute \"+value.Name + \" for Product: \"+product.Name+\" - \"+product.Id);",
											"    }",
											"}",
											"function propertySpecific(key, product){",
											"    if (properties_map[key]) {",
											"        pm.test(\"Test Property \"+key+\" for Product: \"+product.Name+\" - \"+product.Id, function(){properties_map[key](product)});",
											"    }",
											"    else {",
											"        pm.test.skip(\"Test Property \"+key+\" for Product: \"+product.Name+\" - \"+product.Id);",
											"    }",
											"}",
											"",
											"for (var counter = 0;  counter  < jsonDataElements.length; counter++){",
											"    var product = jsonDataElements[counter];",
											"    console.log(\"Processing Product: \"+product.Name+\" - \"+product.Id);",
											"",
											"    for (const[key, value] of Object.entries(properties_map)){",
											"        propertySpecific(key, jsonDataElements[counter]);",
											"    }",
											"",
											"    if(\"Attributes\" in jsonDataElements[counter]){",
											"        schema_seen = {};",
											"",
											"        pm.test(\"Test Attributes list\", function(){",
											"            pm.expect(jsonDataElements[counter].Attributes.length).to.be.above(0);",
											"        });",
											"",
											"        jsonDataElements[counter].Attributes.forEach(function(elem){",
											"            testSpecific(elem, jsonDataElements[counter]);",
											"        });",
											"        var product = jsonDataElements[counter];",
											"        for (const[key, value] of Object.entries(test_schema)) {pm.test(\"Schema Attribute \"+key+\" Product \"+product.Name+\" - \"+product.Id, function(){",
											"        if(schema_seen[key] == undefined){",
											"            schema_seen[key] = 0;",
											"        }",
											"        value(schema_seen[key], product)});}",
											"    }",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{service-root-uri}}/odata/v1/Products?$expand=Attributes&$top=1&$filter=(contains(Name,'MSI_L0__GR') or contains(Name,'MSI_L1A_GR') or contains(Name,'MSI_L1B_GR') or contains(Name,'MSI_L1C_TL') or contains(Name,'MSI_L2A_TL')) and startswith(Name,'S2')\n",
									"host": [
										"{{service-root-uri}}"
									],
									"path": [
										"odata",
										"v1",
										"Products"
									],
									"query": [
										{
											"key": "$expand",
											"value": "Attributes"
										},
										{
											"key": "$top",
											"value": "1"
										},
										{
											"key": "$filter",
											"value": "(contains(Name,'MSI_L0__GR') or contains(Name,'MSI_L1A_GR') or contains(Name,'MSI_L1B_GR') or contains(Name,'MSI_L1C_TL') or contains(Name,'MSI_L2A_TL')) and startswith(Name,'S2')\n"
										},
										{
											"key": "$filter",
											"value": "contains(Name,'MSI_L0__GR') and startswith(Name,'S2')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'MSI_L1A_GR') and startswith(Name,'S2')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'MSI_L1B_GR') and startswith(Name,'S2')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'MSI_L1C_TL') and startswith(Name,'S2')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'MSI_L2A_TL') and startswith(Name,'S2')\n",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "S2_AUX",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "bd0e7ded-a8d7-418e-867e-8121dd8eb002",
										"exec": [
											"var jsonDataElements = pm.response.json().value;",
											"pm.test(\"Response time is less than \" +  environment[\"query-timeout\"] + \"ms\", function(){",
											"    pm.expect(pm.response.responseTime).to.be.below(parseInt(environment[\"query-timeout\"]));",
											"});",
											"",
											"pm.test(\"Test OData context\", function(){",
											"    query_string = pm.request.url.getQueryString();",
											"    if(query_string.includes(\"$expand=Attributes\")){",
											"        pm.expect( pm.response.json()['@odata.context']).to.include(\"$metadata#Products(Attributes())\");",
											"    } else{",
											"        pm.expect( pm.response.json()['@odata.context']).to.include(\"$metadata#Products\");",
											"    }",
											"});",
											"",
											"var TRUE = true;",
											"var FALSE = false;",
											"",
											"test_map={};",
											"test_map.platformShortName=function (element, product) {",
											"    if(product.Name.includes(\"AUX_PREORB\") || product.Name.includes(\"AUX_RESORB\") || product.Name.includes(\"GIP_\")){",
											"        pm.expect(element.Name).eq('platformShortName');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"SENTINEL-2\"]);    ",
											"    }",
											"};",
											"test_map.platformSerialIdentifier=function (element, product) {",
											"    if(product.Name.includes(\"AUX_PREORB\") || product.Name.includes(\"AUX_RESORB\") || product.Name.includes(\"GIP_\")){",
											"        pm.expect(element.Name).eq('platformSerialIdentifier');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"A\",\"B\",\"C\",\"D\",\"_¹\"]);    ",
											"    }",
											"};",
											"test_map.productType=function (element, product) {pm.expect(element.Name).eq('productType');pm.expect(element.ValueType).eq('String');",
											"    pm.expect(element.Value).to.be.a('string');",
											"    var auxWithBand = [\"GIP_VIEDIR\", \"GIP_R2EQOG\", \"GIP_R2DEFI\", \"GIP_R2WAFI\", \"GIP_R2L2NC\", \"GIP_R2DENT\", \"GIP_R2DECT\", \"GIP_R2EOB2\"];",
											"    var productType_prefix = element.Value.split(\"_\")[0] + \"_\" + element.Value.split(\"_\")[1];",
											"",
											"    if(auxWithBand.includes(productType_prefix)){",
											"        var band = product.Name.split(\".TGZ\")[0].split(\"_\").pop();",
											"        var correctProductType = productType_prefix + \"_\" + band;",
											"        pm.expect(element.Value).to.be.eq(correctProductType);",
											"    } else {",
											"        pm.expect(element.Value).to.be.oneOf([\"AUX_ECMWFD\",\"AUX_PREORB\",\"AUX_RESORB\",\"AUX_UT1UTC\",\"GIP_ATMIMA\",\"GIP_ATMSAD\",\"GIP_DATATI\",\"GIP_LREXTR\",\"GIP_INVLOC\",\"GIP_VIEDIR\",\"GIP_SPAMOD\",\"GIP_BLINDP\",\"GIP_CLOINV\",\"GIP_PRDLOC\",\"GIP_R2PARA\",\"GIP_R2SWIR\",\"GIP_R2EQOG\",\"GIP_R2DEPI\",\"GIP_R2DEFI\",\"GIP_R2WAFI\",\"GIP_R2L2NC\",\"GIP_R2DENT\",\"GIP_R2DECT\",\"GIP_R2NOMO\",\"GIP_R2ABCA\",\"GIP_R2BINN\",\"GIP_R2CRCO\",\"GIP_G2PARA\",\"GIP_G2PARE\",\"GIP_EARMOD\",\"GIP_GEOPAR\",\"GIP_INTDET\",\"GIP_TILPAR\",\"GIP_RESPAR\",\"GIP_MASPAR\",\"GIP_JP2KPA\",\"GIP_ECMWFP\",\"GIP_DECOMP\",\"GIP_OLQCPA\",\"GIP_PROBAS\",\"GIP_CONVER\",\"GIP_R2EOB2\",\"GIP_L2ACAC\",\"GIP_L2ACSC\",\"GIP_PROBA2\"]);",
											"    }",
											"",
											"",
											"};",
											"test_map.beginningDateTime=function (element) {pm.expect(element.Name).eq('beginningDateTime');pm.expect(element.ValueType).eq('DateTimeOffset');pm.expect(element.Value).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);};",
											"test_map.endingDateTime=function (element) {pm.expect(element.Name).eq('endingDateTime');pm.expect(element.ValueType).eq('DateTimeOffset');pm.expect(element.Value).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);};",
											"test_map.processingCenter=function (element) {pm.expect(element.Name).eq('processingCenter');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');};",
											"test_map.processorVersion=function (element) {pm.expect(element.Name).eq('processorVersion');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');};",
											"test_map.processingDate=function (element) {pm.expect(element.Name).eq('processingDate');pm.expect(element.ValueType).eq('DateTimeOffset');pm.expect(element.Value).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);};",
											"",
											"test_schema={};",
											"test_schema.platformShortName=function (num, product) {",
											"    if(product.Name.includes(\"AUX_PREORB\") || product.Name.includes(\"AUX_RESORB\") || product.Name.includes(\"GIP_\")){",
											"        pm.expect(num).to.be.eq(1)    ",
											"    }",
											"};",
											"test_schema.platformSerialIdentifier=function (num, product) {",
											"    if(product.Name.includes(\"AUX_PREORB\") || product.Name.includes(\"AUX_RESORB\") || product.Name.includes(\"GIP_\")){",
											"        pm.expect(num).to.be.eq(1)    ",
											"    }",
											"};",
											"test_schema.productType=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.beginningDateTime=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.endingDateTime=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.processingCenter=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.processorVersion=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.processingDate=function (num) {pm.expect(num).to.be.eq(1)};",
											"",
											"            ",
											"properties_map = {};",
											"properties_map.Id=function (element) {pm.expect(element.Id).to.match(/[0-9a-fA-F]{8}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{12}/);};",
											"properties_map.Name=function (element) {pm.expect(element.Name).to.be.a(\"string\");};",
											"properties_map.ContentType=function (element) {pm.expect(element.ContentType).to.be.a(\"string\");};",
											"properties_map.ContentLength=function (element) {pm.expect(element.ContentLength).to.be.a(\"number\");};",
											"properties_map.OriginDate=function (element) {pm.expect(element.OriginDate).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d+([+-][0-2]\\d:[0-5]\\d|Z)/);};",
											"properties_map.PublicationDate=function (element) {pm.expect(element.PublicationDate).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);};",
											"properties_map.ModificationDate=function (element) {pm.expect(element.ModificationDate).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d+([+-][0-2]\\d:[0-5]\\d|Z)/);};",
											"properties_map.Online=function (element) {pm.expect(element.Online).to.be.oneOf([TRUE,FALSE,true,false]);};",
											"properties_map.EvictionDate=function (element) {if(element.EvictionDate){ pm.expect(element.EvictionDate).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d+([+-][0-2]\\d:[0-5]\\d|Z)/); }};",
											"properties_map.Checksum=function (element) {for(i=0; i<element.Checksum.length; i++ ){pm.expect(element.Checksum[i].Algorithm).to.be.oneOf([\"MD5\",\"SHA-1\",\"SHA-256\",\"SHA-512\"]);checksum_algorithm = {'MD5': '[a-fA-F0-9]{32}', 'SHA-1': '[0-9a-f]{5,40}', 'SHA-256': '[A-Fa-f0-9]{64}', 'SHA-512': '[A-Fa-f0-9]{128}'};pm.expect(element.Checksum[i].Value).to.match(new RegExp(checksum_algorithm[element.Checksum[i].Algorithm]));}};",
											"properties_map.ContentDate=function (element) {pm.expect(element.ContentDate[\"Start\"]).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);pm.expect(element.ContentDate[\"End\"]).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);};",
											"properties_map.Footprint=function (element) {if(element.Footprint){ pm.expect(element.Footprint).to.match(/geography'SRID=\\d+;[Polygon|Multipolygon|Point](.*)/); }};",
											"",
											"let schema_seen = {};",
											"",
											"function testSpecific(value, product){",
											"",
											"    if (schema_seen[value.Name]){",
											"        schema_seen[value.Name]++;",
											"    }else{",
											"        schema_seen[value.Name]=1;",
											"    }",
											"",
											"    if (test_map[value.Name]) {",
											"        pm.test(\"Test Attribute \"+value.Name + \" for Product: \"+product.Name+\" - \"+product.Id, function(){test_map[value.Name](value, product)});",
											"    }",
											"    else {",
											"        pm.test.skip(\"Test Attribute \"+value.Name + \" for Product: \"+product.Name+\" - \"+product.Id);",
											"    }",
											"}",
											"function propertySpecific(key, product){",
											"    if (properties_map[key]) {",
											"        pm.test(\"Test Property \"+key+\" for Product: \"+product.Name+\" - \"+product.Id, function(){properties_map[key](product)});",
											"    }",
											"    else {",
											"        pm.test.skip(\"Test Property \"+key+\" for Product: \"+product.Name+\" - \"+product.Id);",
											"    }",
											"}",
											"",
											"for (var counter = 0;  counter  < jsonDataElements.length; counter++){",
											"    var product = jsonDataElements[counter];",
											"    console.log(\"Processing Product: \"+product.Name+\" - \"+product.Id);",
											"",
											"    for (const[key, value] of Object.entries(properties_map)){",
											"        propertySpecific(key, jsonDataElements[counter]);",
											"    }",
											"",
											"    if(\"Attributes\" in jsonDataElements[counter]){",
											"        schema_seen = {};",
											"",
											"        pm.test(\"Test Attributes list\", function(){",
											"            pm.expect(jsonDataElements[counter].Attributes.length).to.be.above(0);",
											"        });",
											"",
											"        jsonDataElements[counter].Attributes.forEach(function(elem){",
											"            testSpecific(elem, jsonDataElements[counter]);",
											"        });",
											"        var product = jsonDataElements[counter];",
											"        for (const[key, value] of Object.entries(test_schema)) {pm.test(\"Schema Attribute \"+key+\" Product \"+product.Name+\" - \"+product.Id, function(){",
											"        if(schema_seen[key] == undefined){",
											"            schema_seen[key] = 0;",
											"        }",
											"        value(schema_seen[key], product)});}",
											"    }",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{service-root-uri}}/odata/v1/Products?$expand=Attributes&$top=1&$filter=(contains(Name,'AUX_ECMWFD') or contains(Name,'AUX_PREORB') or contains(Name,'AUX_RESORB') or contains(Name,'AUX_UT1UTC') or contains(Name,'GIP_ATMIMA') or contains(Name,'GIP_ATMSAD') or contains(Name,'GIP_DATATI') or contains(Name,'GIP_LREXTR') or contains(Name,'GIP_INVLOC') or contains(Name,'GIP_VIEDIR') or contains(Name,'GIP_SPAMOD') or contains(Name,'GIP_BLINDP') or contains(Name,'GIP_CLOINV') or contains(Name,'GIP_PRDLOC') or contains(Name,'GIP_R2PARA') or contains(Name,'GIP_R2SWIR') or contains(Name,'GIP_R2EQOG') or contains(Name,'GIP_R2DEPI') or contains(Name,'GIP_R2DEFI') or contains(Name,'GIP_R2WAFI') or contains(Name,'GIP_R2L2NC') or contains(Name,'GIP_R2DENT') or contains(Name,'GIP_R2DECT') or contains(Name,'GIP_R2NOMO') or contains(Name,'GIP_R2ABCA') or contains(Name,'GIP_R2BINN') or contains(Name,'GIP_R2CRCO') or contains(Name,'GIP_G2PARA') or contains(Name,'GIP_G2PARE') or contains(Name,'GIP_EARMOD') or contains(Name,'GIP_GEOPAR') or contains(Name,'GIP_INTDET') or contains(Name,'GIP_TILPAR') or contains(Name,'GIP_RESPAR') or contains(Name,'GIP_MASPAR') or contains(Name,'GIP_JP2KPA') or contains(Name,'GIP_ECMWFP') or contains(Name,'GIP_DECOMP') or contains(Name,'GIP_OLQCPA') or contains(Name,'GIP_PROBAS') or contains(Name,'GIP_CONVER') or contains(Name,'GIP_R2EOB2') or contains(Name,'GIP_L2ACAC') or contains(Name,'GIP_L2ACSC') or contains(Name,'GIP_PROBA2')) and startswith(Name,'S2')\n",
									"host": [
										"{{service-root-uri}}"
									],
									"path": [
										"odata",
										"v1",
										"Products"
									],
									"query": [
										{
											"key": "$expand",
											"value": "Attributes"
										},
										{
											"key": "$top",
											"value": "1"
										},
										{
											"key": "$filter",
											"value": "(contains(Name,'AUX_ECMWFD') or contains(Name,'AUX_PREORB') or contains(Name,'AUX_RESORB') or contains(Name,'AUX_UT1UTC') or contains(Name,'GIP_ATMIMA') or contains(Name,'GIP_ATMSAD') or contains(Name,'GIP_DATATI') or contains(Name,'GIP_LREXTR') or contains(Name,'GIP_INVLOC') or contains(Name,'GIP_VIEDIR') or contains(Name,'GIP_SPAMOD') or contains(Name,'GIP_BLINDP') or contains(Name,'GIP_CLOINV') or contains(Name,'GIP_PRDLOC') or contains(Name,'GIP_R2PARA') or contains(Name,'GIP_R2SWIR') or contains(Name,'GIP_R2EQOG') or contains(Name,'GIP_R2DEPI') or contains(Name,'GIP_R2DEFI') or contains(Name,'GIP_R2WAFI') or contains(Name,'GIP_R2L2NC') or contains(Name,'GIP_R2DENT') or contains(Name,'GIP_R2DECT') or contains(Name,'GIP_R2NOMO') or contains(Name,'GIP_R2ABCA') or contains(Name,'GIP_R2BINN') or contains(Name,'GIP_R2CRCO') or contains(Name,'GIP_G2PARA') or contains(Name,'GIP_G2PARE') or contains(Name,'GIP_EARMOD') or contains(Name,'GIP_GEOPAR') or contains(Name,'GIP_INTDET') or contains(Name,'GIP_TILPAR') or contains(Name,'GIP_RESPAR') or contains(Name,'GIP_MASPAR') or contains(Name,'GIP_JP2KPA') or contains(Name,'GIP_ECMWFP') or contains(Name,'GIP_DECOMP') or contains(Name,'GIP_OLQCPA') or contains(Name,'GIP_PROBAS') or contains(Name,'GIP_CONVER') or contains(Name,'GIP_R2EOB2') or contains(Name,'GIP_L2ACAC') or contains(Name,'GIP_L2ACSC') or contains(Name,'GIP_PROBA2')) and startswith(Name,'S2')\n"
										},
										{
											"key": "$filter",
											"value": "contains(Name,'AUX_ECMWFD') and startswith(Name,'S2')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'AUX_PREORB') and startswith(Name,'S2')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'AUX_RESORB') and startswith(Name,'S2')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'AUX_UT1UTC') and startswith(Name,'S2')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'GIP_ATMIMA') and startswith(Name,'S2')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'GIP_ATMSAD') and startswith(Name,'S2')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'GIP_DATATI') and startswith(Name,'S2')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'GIP_LREXTR') and startswith(Name,'S2')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'GIP_INVLOC') and startswith(Name,'S2')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'GIP_VIEDIR') and startswith(Name,'S2')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'GIP_SPAMOD') and startswith(Name,'S2')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'GIP_BLINDP') and startswith(Name,'S2')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'GIP_CLOINV') and startswith(Name,'S2')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'GIP_PRDLOC') and startswith(Name,'S2')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'GIP_R2PARA') and startswith(Name,'S2')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'GIP_R2SWIR') and startswith(Name,'S2')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'GIP_R2EQOG') and startswith(Name,'S2')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'GIP_R2DEPI') and startswith(Name,'S2')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'GIP_R2DEFI') and startswith(Name,'S2')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'GIP_R2WAFI') and startswith(Name,'S2')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'GIP_R2L2NC') and startswith(Name,'S2')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'GIP_R2DENT') and startswith(Name,'S2')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'GIP_R2DECT') and startswith(Name,'S2')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'GIP_R2NOMO') and startswith(Name,'S2')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'GIP_R2ABCA') and startswith(Name,'S2')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'GIP_R2BINN') and startswith(Name,'S2')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'GIP_R2CRCO') and startswith(Name,'S2')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'GIP_G2PARA') and startswith(Name,'S2')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'GIP_G2PARE') and startswith(Name,'S2')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'GIP_EARMOD') and startswith(Name,'S2')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'GIP_GEOPAR') and startswith(Name,'S2')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'GIP_INTDET') and startswith(Name,'S2')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'GIP_TILPAR') and startswith(Name,'S2')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'GIP_RESPAR') and startswith(Name,'S2')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'GIP_MASPAR') and startswith(Name,'S2')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'GIP_JP2KPA') and startswith(Name,'S2')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'GIP_ECMWFP') and startswith(Name,'S2')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'GIP_DECOMP') and startswith(Name,'S2')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'GIP_OLQCPA') and startswith(Name,'S2')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'GIP_PROBAS') and startswith(Name,'S2')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'GIP_CONVER') and startswith(Name,'S2')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'GIP_R2EOB2') and startswith(Name,'S2')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'GIP_L2ACAC') and startswith(Name,'S2')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'GIP_L2ACSC') and startswith(Name,'S2')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'GIP_PROBA2') and startswith(Name,'S2')\n",
											"disabled": true
										}
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "POD",
					"item": [
						{
							"name": "S2_AUX",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6c67b1d1-1136-44de-9916-44873b28fdd0",
										"exec": [
											"var jsonDataElements = pm.response.json().value;",
											"pm.test(\"Response time is less than \" +  environment[\"query-timeout\"] + \"ms\", function(){",
											"    pm.expect(pm.response.responseTime).to.be.below(parseInt(environment[\"query-timeout\"]));",
											"});",
											"",
											"pm.test(\"Test OData context\", function(){",
											"    query_string = pm.request.url.getQueryString();",
											"    if(query_string.includes(\"$expand=Attributes\")){",
											"        pm.expect( pm.response.json()['@odata.context']).to.include(\"$metadata#Products(Attributes())\");",
											"    } else{",
											"        pm.expect( pm.response.json()['@odata.context']).to.include(\"$metadata#Products\");",
											"    }",
											"});",
											"",
											"var TRUE = true;",
											"var FALSE = false;",
											"",
											"test_map={};",
											"test_map.platformShortName=function (element, product) {",
											"    if(product.Name.includes(\"AUX_PREORB\") || product.Name.includes(\"AUX_RESORB\") || product.Name.includes(\"GIP_\")){",
											"        pm.expect(element.Name).eq('platformShortName');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"SENTINEL-2\"]);    ",
											"    }",
											"};",
											"test_map.platformSerialIdentifier=function (element, product) {",
											"    if(product.Name.includes(\"AUX_PREORB\") || product.Name.includes(\"AUX_RESORB\") || product.Name.includes(\"GIP_\")){",
											"        pm.expect(element.Name).eq('platformSerialIdentifier');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"A\",\"B\",\"C\",\"D\",\"_¹\"]);    ",
											"    }",
											"};",
											"test_map.productType=function (element, product) {pm.expect(element.Name).eq('productType');pm.expect(element.ValueType).eq('String');",
											"    pm.expect(element.Value).to.be.a('string');",
											"    var auxWithBand = [\"GIP_VIEDIR\", \"GIP_R2EQOG\", \"GIP_R2DEFI\", \"GIP_R2WAFI\", \"GIP_R2L2NC\", \"GIP_R2DENT\", \"GIP_R2DECT\", \"GIP_R2EOB2\"];",
											"    var productType_prefix = element.Value.split(\"_\")[0] + \"_\" + element.Value.split(\"_\")[1];",
											"",
											"    if(auxWithBand.includes(productType_prefix)){",
											"        var band = product.Name.split(\".TGZ\")[0].split(\"_\").pop();",
											"        var correctProductType = productType_prefix + \"_\" + band;",
											"        pm.expect(element.Value).to.be.eq(correctProductType);",
											"    } else {",
											"        pm.expect(element.Value).to.be.oneOf([\"AUX_ECMWFD\",\"AUX_PREORB\",\"AUX_RESORB\",\"AUX_UT1UTC\",\"GIP_ATMIMA\",\"GIP_ATMSAD\",\"GIP_DATATI\",\"GIP_LREXTR\",\"GIP_INVLOC\",\"GIP_VIEDIR\",\"GIP_SPAMOD\",\"GIP_BLINDP\",\"GIP_CLOINV\",\"GIP_PRDLOC\",\"GIP_R2PARA\",\"GIP_R2SWIR\",\"GIP_R2EQOG\",\"GIP_R2DEPI\",\"GIP_R2DEFI\",\"GIP_R2WAFI\",\"GIP_R2L2NC\",\"GIP_R2DENT\",\"GIP_R2DECT\",\"GIP_R2NOMO\",\"GIP_R2ABCA\",\"GIP_R2BINN\",\"GIP_R2CRCO\",\"GIP_G2PARA\",\"GIP_G2PARE\",\"GIP_EARMOD\",\"GIP_GEOPAR\",\"GIP_INTDET\",\"GIP_TILPAR\",\"GIP_RESPAR\",\"GIP_MASPAR\",\"GIP_JP2KPA\",\"GIP_ECMWFP\",\"GIP_DECOMP\",\"GIP_OLQCPA\",\"GIP_PROBAS\",\"GIP_CONVER\",\"GIP_R2EOB2\",\"GIP_L2ACAC\",\"GIP_L2ACSC\",\"GIP_PROBA2\"]);",
											"    }",
											"",
											"",
											"};",
											"test_map.beginningDateTime=function (element) {pm.expect(element.Name).eq('beginningDateTime');pm.expect(element.ValueType).eq('DateTimeOffset');pm.expect(element.Value).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);};",
											"test_map.endingDateTime=function (element) {pm.expect(element.Name).eq('endingDateTime');pm.expect(element.ValueType).eq('DateTimeOffset');pm.expect(element.Value).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);};",
											"test_map.processingCenter=function (element) {pm.expect(element.Name).eq('processingCenter');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');};",
											"test_map.processorVersion=function (element) {pm.expect(element.Name).eq('processorVersion');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');};",
											"test_map.processingDate=function (element) {pm.expect(element.Name).eq('processingDate');pm.expect(element.ValueType).eq('DateTimeOffset');pm.expect(element.Value).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);};",
											"",
											"test_schema={};",
											"test_schema.platformShortName=function (num, product) {",
											"    if(product.Name.includes(\"AUX_PREORB\") || product.Name.includes(\"AUX_RESORB\") || product.Name.includes(\"GIP_\")){",
											"        pm.expect(num).to.be.eq(1)    ",
											"    }",
											"};",
											"test_schema.platformSerialIdentifier=function (num, product) {",
											"    if(product.Name.includes(\"AUX_PREORB\") || product.Name.includes(\"AUX_RESORB\") || product.Name.includes(\"GIP_\")){",
											"        pm.expect(num).to.be.eq(1)    ",
											"    }",
											"};",
											"test_schema.productType=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.beginningDateTime=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.endingDateTime=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.processingCenter=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.processorVersion=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.processingDate=function (num) {pm.expect(num).to.be.eq(1)};",
											"",
											"            ",
											"properties_map = {};",
											"properties_map.Name=function (element) {pm.expect(element.Name).to.be.a(\"string\");};",
											"properties_map.ContentDate=function (element) {pm.expect(element.ContentDate[\"Start\"]).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);pm.expect(element.ContentDate[\"End\"]).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);};",
											"",
											"let schema_seen = {};",
											"",
											"function testSpecific(value, product){",
											"",
											"    if (schema_seen[value.Name]){",
											"        schema_seen[value.Name]++;",
											"    }else{",
											"        schema_seen[value.Name]=1;",
											"    }",
											"",
											"    if (test_map[value.Name]) {",
											"        pm.test(\"Test Attribute \"+value.Name + \" for Product: \"+product.Name+\" - \"+product.Id, function(){test_map[value.Name](value, product)});",
											"    }",
											"    else {",
											"        pm.test.skip(\"Test Attribute \"+value.Name + \" for Product: \"+product.Name+\" - \"+product.Id);",
											"    }",
											"}",
											"function propertySpecific(key, product){",
											"    if (properties_map[key]) {",
											"        pm.test(\"Test Property \"+key+\" for Product: \"+product.Name+\" - \"+product.Id, function(){properties_map[key](product)});",
											"    }",
											"    else {",
											"        pm.test.skip(\"Test Property \"+key+\" for Product: \"+product.Name+\" - \"+product.Id);",
											"    }",
											"}",
											"",
											"for (var counter = 0;  counter  < jsonDataElements.length; counter++){",
											"    var product = jsonDataElements[counter];",
											"    console.log(\"Processing Product: \"+product.Name+\" - \"+product.Id);",
											"",
											"    for (const[key, value] of Object.entries(properties_map)){",
											"        propertySpecific(key, jsonDataElements[counter]);",
											"    }",
											"",
											"    if(\"Attributes\" in jsonDataElements[counter]){",
											"        schema_seen = {};",
											"",
											"        pm.test(\"Test Attributes list\", function(){",
											"            pm.expect(jsonDataElements[counter].Attributes.length).to.be.above(0);",
											"        });",
											"",
											"        jsonDataElements[counter].Attributes.forEach(function(elem){",
											"            testSpecific(elem, jsonDataElements[counter]);",
											"        });",
											"        var product = jsonDataElements[counter];",
											"        for (const[key, value] of Object.entries(test_schema)) {pm.test(\"Schema Attribute \"+key+\" Product \"+product.Name+\" - \"+product.Id, function(){",
											"        if(schema_seen[key] == undefined){",
											"            schema_seen[key] = 0;",
											"        }",
											"        value(schema_seen[key], product)});}",
											"    }",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{service-root-uri}}/odata/v1/Products?$expand=Attributes&$top=1&$filter=(contains(Name,'AUX_ECMWFD') or contains(Name,'AUX_PREORB') or contains(Name,'AUX_RESORB') or contains(Name,'AUX_UT1UTC') or contains(Name,'GIP_ATMIMA') or contains(Name,'GIP_ATMSAD') or contains(Name,'GIP_DATATI') or contains(Name,'GIP_LREXTR') or contains(Name,'GIP_INVLOC') or contains(Name,'GIP_VIEDIR') or contains(Name,'GIP_SPAMOD') or contains(Name,'GIP_BLINDP') or contains(Name,'GIP_CLOINV') or contains(Name,'GIP_PRDLOC') or contains(Name,'GIP_R2PARA') or contains(Name,'GIP_R2SWIR') or contains(Name,'GIP_R2EQOG') or contains(Name,'GIP_R2DEPI') or contains(Name,'GIP_R2DEFI') or contains(Name,'GIP_R2WAFI') or contains(Name,'GIP_R2L2NC') or contains(Name,'GIP_R2DENT') or contains(Name,'GIP_R2DECT') or contains(Name,'GIP_R2NOMO') or contains(Name,'GIP_R2ABCA') or contains(Name,'GIP_R2BINN') or contains(Name,'GIP_R2CRCO') or contains(Name,'GIP_G2PARA') or contains(Name,'GIP_G2PARE') or contains(Name,'GIP_EARMOD') or contains(Name,'GIP_GEOPAR') or contains(Name,'GIP_INTDET') or contains(Name,'GIP_TILPAR') or contains(Name,'GIP_RESPAR') or contains(Name,'GIP_MASPAR') or contains(Name,'GIP_JP2KPA') or contains(Name,'GIP_ECMWFP') or contains(Name,'GIP_DECOMP') or contains(Name,'GIP_OLQCPA') or contains(Name,'GIP_PROBAS') or contains(Name,'GIP_CONVER') or contains(Name,'GIP_R2EOB2') or contains(Name,'GIP_L2ACAC') or contains(Name,'GIP_L2ACSC') or contains(Name,'GIP_PROBA2')) and startswith(Name,'S2')\n",
									"host": [
										"{{service-root-uri}}"
									],
									"path": [
										"odata",
										"v1",
										"Products"
									],
									"query": [
										{
											"key": "$expand",
											"value": "Attributes"
										},
										{
											"key": "$top",
											"value": "1"
										},
										{
											"key": "$filter",
											"value": "(contains(Name,'AUX_ECMWFD') or contains(Name,'AUX_PREORB') or contains(Name,'AUX_RESORB') or contains(Name,'AUX_UT1UTC') or contains(Name,'GIP_ATMIMA') or contains(Name,'GIP_ATMSAD') or contains(Name,'GIP_DATATI') or contains(Name,'GIP_LREXTR') or contains(Name,'GIP_INVLOC') or contains(Name,'GIP_VIEDIR') or contains(Name,'GIP_SPAMOD') or contains(Name,'GIP_BLINDP') or contains(Name,'GIP_CLOINV') or contains(Name,'GIP_PRDLOC') or contains(Name,'GIP_R2PARA') or contains(Name,'GIP_R2SWIR') or contains(Name,'GIP_R2EQOG') or contains(Name,'GIP_R2DEPI') or contains(Name,'GIP_R2DEFI') or contains(Name,'GIP_R2WAFI') or contains(Name,'GIP_R2L2NC') or contains(Name,'GIP_R2DENT') or contains(Name,'GIP_R2DECT') or contains(Name,'GIP_R2NOMO') or contains(Name,'GIP_R2ABCA') or contains(Name,'GIP_R2BINN') or contains(Name,'GIP_R2CRCO') or contains(Name,'GIP_G2PARA') or contains(Name,'GIP_G2PARE') or contains(Name,'GIP_EARMOD') or contains(Name,'GIP_GEOPAR') or contains(Name,'GIP_INTDET') or contains(Name,'GIP_TILPAR') or contains(Name,'GIP_RESPAR') or contains(Name,'GIP_MASPAR') or contains(Name,'GIP_JP2KPA') or contains(Name,'GIP_ECMWFP') or contains(Name,'GIP_DECOMP') or contains(Name,'GIP_OLQCPA') or contains(Name,'GIP_PROBAS') or contains(Name,'GIP_CONVER') or contains(Name,'GIP_R2EOB2') or contains(Name,'GIP_L2ACAC') or contains(Name,'GIP_L2ACSC') or contains(Name,'GIP_PROBA2')) and startswith(Name,'S2')\n"
										},
										{
											"key": "$filter",
											"value": "contains(Name,'AUX_ECMWFD') and startswith(Name,'S2')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'AUX_PREORB') and startswith(Name,'S2')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'AUX_RESORB') and startswith(Name,'S2')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'AUX_UT1UTC') and startswith(Name,'S2')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'GIP_ATMIMA') and startswith(Name,'S2')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'GIP_ATMSAD') and startswith(Name,'S2')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'GIP_DATATI') and startswith(Name,'S2')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'GIP_LREXTR') and startswith(Name,'S2')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'GIP_INVLOC') and startswith(Name,'S2')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'GIP_VIEDIR') and startswith(Name,'S2')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'GIP_SPAMOD') and startswith(Name,'S2')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'GIP_BLINDP') and startswith(Name,'S2')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'GIP_CLOINV') and startswith(Name,'S2')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'GIP_PRDLOC') and startswith(Name,'S2')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'GIP_R2PARA') and startswith(Name,'S2')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'GIP_R2SWIR') and startswith(Name,'S2')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'GIP_R2EQOG') and startswith(Name,'S2')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'GIP_R2DEPI') and startswith(Name,'S2')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'GIP_R2DEFI') and startswith(Name,'S2')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'GIP_R2WAFI') and startswith(Name,'S2')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'GIP_R2L2NC') and startswith(Name,'S2')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'GIP_R2DENT') and startswith(Name,'S2')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'GIP_R2DECT') and startswith(Name,'S2')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'GIP_R2NOMO') and startswith(Name,'S2')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'GIP_R2ABCA') and startswith(Name,'S2')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'GIP_R2BINN') and startswith(Name,'S2')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'GIP_R2CRCO') and startswith(Name,'S2')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'GIP_G2PARA') and startswith(Name,'S2')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'GIP_G2PARE') and startswith(Name,'S2')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'GIP_EARMOD') and startswith(Name,'S2')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'GIP_GEOPAR') and startswith(Name,'S2')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'GIP_INTDET') and startswith(Name,'S2')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'GIP_TILPAR') and startswith(Name,'S2')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'GIP_RESPAR') and startswith(Name,'S2')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'GIP_MASPAR') and startswith(Name,'S2')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'GIP_JP2KPA') and startswith(Name,'S2')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'GIP_ECMWFP') and startswith(Name,'S2')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'GIP_DECOMP') and startswith(Name,'S2')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'GIP_OLQCPA') and startswith(Name,'S2')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'GIP_PROBAS') and startswith(Name,'S2')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'GIP_CONVER') and startswith(Name,'S2')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'GIP_R2EOB2') and startswith(Name,'S2')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'GIP_L2ACAC') and startswith(Name,'S2')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'GIP_L2ACSC') and startswith(Name,'S2')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'GIP_PROBA2') and startswith(Name,'S2')\n",
											"disabled": true
										}
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "DD",
					"item": [
						{
							"name": "L0,_L1A,_L1B,_L1C,_L2A_DS_",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f4f4f69b-e68d-46df-982f-a08d0722bcb8",
										"exec": [
											"var jsonDataElements = pm.response.json().value;",
											"pm.test(\"Response time is less than \" +  environment[\"query-timeout\"] + \"ms\", function(){",
											"    pm.expect(pm.response.responseTime).to.be.below(parseInt(environment[\"query-timeout\"]));",
											"});",
											"",
											"pm.test(\"Test OData context\", function(){",
											"    query_string = pm.request.url.getQueryString();",
											"    if(query_string.includes(\"$expand=Attributes\")){",
											"        pm.expect( pm.response.json()['@odata.context']).to.include(\"$metadata#Products(Attributes())\");",
											"    } else{",
											"        pm.expect( pm.response.json()['@odata.context']).to.include(\"$metadata#Products\");",
											"    }",
											"});",
											"",
											"var TRUE = true;",
											"var FALSE = false;",
											"",
											"test_map={};",
											"test_map.productGroupId=function (element) {pm.expect(element.Name).eq('productGroupId');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');};",
											"test_map.processorVersion=function (element) {pm.expect(element.Name).eq('processorVersion');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');};",
											"test_map.processingDate=function (element) {pm.expect(element.Name).eq('processingDate');pm.expect(element.ValueType).eq('DateTimeOffset');pm.expect(element.Value).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);};",
											"test_map.beginningDateTime=function (element) {pm.expect(element.Name).eq('beginningDateTime');pm.expect(element.ValueType).eq('DateTimeOffset');pm.expect(element.Value).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);};",
											"test_map.endingDateTime=function (element) {pm.expect(element.Name).eq('endingDateTime');pm.expect(element.ValueType).eq('DateTimeOffset');pm.expect(element.Value).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);};",
											"test_map.orbitNumber=function (element) {pm.expect(element.Name).eq('orbitNumber');pm.expect(element.ValueType).eq('Integer');pm.expect(element.Value).to.be.a(\"number\");};",
											"test_map.coordinates=function (element) {pm.expect(element.Name).eq('coordinates');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.match(/(-?\\d+(\\.\\d+)?),\\s*(-?\\d+(\\.\\d+)?)/);};",
											"test_map.qualityStatus=function (element, product) {pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"NOMINAL\",\"DEGRADED\"]);",
											"    var qualityInfo = \"\";",
											"    product.Attributes.forEach(function(el){if(el.Name == \"qualityInfo\"){qualityInfo = el.Value;}});",
											"    if(element.Value == \"NOMINAL\" ){pm.expect(qualityInfo == \"100\");}",
											"    else if(element.Value == \"DEGRADED\"){pm.expect(qualityInfo != \"100\");}",
											"    pm.expect(qualityInfo).to.not.eql(\"\");",
											"};",
											"test_map.productType=function (element) {pm.expect(element.Name).eq('productType');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"MSI_L0__DS\",\"MSI_L1A_DS\",\"MSI_L1B_DS\",\"MSI_L1C_DS\",\"MSI_L2A_DS\"]);",
											"",
											"};",
											"test_map.instrumentShortName=function (element) {pm.expect(element.Name).eq('instrumentShortName');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"MSI\"]);};",
											"test_map.processingCenter=function (element) {pm.expect(element.Name).eq('processingCenter');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"SGS_\",\"MPS_\",\"MTI_\",\"EPA_\",\"MPC_\",\"UPA_\",\"XXXX\",\"VGS2\"]);};",
											"test_map.platformSerialIdentifier=function (element) {pm.expect(element.Name).eq('platformSerialIdentifier');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"A\",\"B\",\"C\",\"D\",\"_\"]);};",
											"test_map.platformShortName=function (element) {pm.expect(element.Name).eq('platformShortName');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"SENTINEL-2\"]);};",
											"test_map.operationalMode=function (element) {pm.expect(element.Name).eq('operationalMode');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"INS-NOBS\",\"INS-EOBS\",\"INS-DASC\",\"INS-ABSR\",\"INS-VIC\",\"INS-RAW\",\"INS-TST\"]);};",
											"test_map.relativeOrbitNumber=function (element) {pm.expect(element.Name).eq('relativeOrbitNumber');pm.expect(element.ValueType).eq('Integer');pm.expect(element.Value).to.be.a(\"number\");pm.expect(element.Value).to.match(/([1-9]|[1-8][0-9]|9[0-9]|1[0-3][0-9]|14[0-3])/);};",
											"test_map.qualityInfo=function (element, product) {pm.expect(element.Value).to.be.a(\"number\");pm.expect(element.Value).to.be.oneOf([0,1,3,5,9,11,15,19,24,26,30,34,39,43,48,53,59,60,61,64,65,68,71,75,76,78,80,84,86,90,94,100]);};",
											"",
											"test_schema={};",
											"test_schema.productGroupId=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.processorVersion=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.processingDate=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.beginningDateTime=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.endingDateTime=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.orbitNumber=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.coordinates=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.qualityStatus=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.productType=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.instrumentShortName=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.processingCenter=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.platformSerialIdentifier=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.platformShortName=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.operationalMode=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.relativeOrbitNumber=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.qualityInfo=function (num) {pm.expect(num).to.be.eq(1)};",
											"",
											"            ",
											"properties_map = {};",
											"properties_map.Name=function (element) {pm.expect(element.Name).to.be.a(\"string\");};",
											"properties_map.ContentDate=function (element) {pm.expect(element.ContentDate[\"Start\"]).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);pm.expect(element.ContentDate[\"End\"]).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);};",
											"",
											"let schema_seen = {};",
											"",
											"function testSpecific(value, product){",
											"",
											"    if (schema_seen[value.Name]){",
											"        schema_seen[value.Name]++;",
											"    }else{",
											"        schema_seen[value.Name]=1;",
											"    }",
											"",
											"    if (test_map[value.Name]) {",
											"        pm.test(\"Test Attribute \"+value.Name + \" for Product: \"+product.Name+\" - \"+product.Id, function(){test_map[value.Name](value, product)});",
											"    }",
											"    else {",
											"        pm.test.skip(\"Test Attribute \"+value.Name + \" for Product: \"+product.Name+\" - \"+product.Id);",
											"    }",
											"}",
											"function propertySpecific(key, product){",
											"    if (properties_map[key]) {",
											"        pm.test(\"Test Property \"+key+\" for Product: \"+product.Name+\" - \"+product.Id, function(){properties_map[key](product)});",
											"    }",
											"    else {",
											"        pm.test.skip(\"Test Property \"+key+\" for Product: \"+product.Name+\" - \"+product.Id);",
											"    }",
											"}",
											"",
											"for (var counter = 0;  counter  < jsonDataElements.length; counter++){",
											"    var product = jsonDataElements[counter];",
											"    console.log(\"Processing Product: \"+product.Name+\" - \"+product.Id);",
											"",
											"    for (const[key, value] of Object.entries(properties_map)){",
											"        propertySpecific(key, jsonDataElements[counter]);",
											"    }",
											"",
											"    if(\"Attributes\" in jsonDataElements[counter]){",
											"        schema_seen = {};",
											"",
											"        pm.test(\"Test Attributes list\", function(){",
											"            pm.expect(jsonDataElements[counter].Attributes.length).to.be.above(0);",
											"        });",
											"",
											"        jsonDataElements[counter].Attributes.forEach(function(elem){",
											"            testSpecific(elem, jsonDataElements[counter]);",
											"        });",
											"        var product = jsonDataElements[counter];",
											"        for (const[key, value] of Object.entries(test_schema)) {pm.test(\"Schema Attribute \"+key+\" Product \"+product.Name+\" - \"+product.Id, function(){",
											"        if(schema_seen[key] == undefined){",
											"            schema_seen[key] = 0;",
											"        }",
											"        value(schema_seen[key], product)});}",
											"    }",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{service-root-uri}}/odata/v1/Products?$expand=Attributes&$top=1&$filter=(contains(Name,'MSI_L0__DS') or contains(Name,'MSI_L1A_DS') or contains(Name,'MSI_L1B_DS') or contains(Name,'MSI_L1C_DS') or contains(Name,'MSI_L2A_DS')) and startswith(Name,'S2')\n",
									"host": [
										"{{service-root-uri}}"
									],
									"path": [
										"odata",
										"v1",
										"Products"
									],
									"query": [
										{
											"key": "$expand",
											"value": "Attributes"
										},
										{
											"key": "$top",
											"value": "1"
										},
										{
											"key": "$filter",
											"value": "(contains(Name,'MSI_L0__DS') or contains(Name,'MSI_L1A_DS') or contains(Name,'MSI_L1B_DS') or contains(Name,'MSI_L1C_DS') or contains(Name,'MSI_L2A_DS')) and startswith(Name,'S2')\n"
										},
										{
											"key": "$filter",
											"value": "contains(Name,'MSI_L0__DS') and startswith(Name,'S2')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'MSI_L1A_DS') and startswith(Name,'S2')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'MSI_L1B_DS') and startswith(Name,'S2')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'MSI_L1C_DS') and startswith(Name,'S2')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'MSI_L2A_DS') and startswith(Name,'S2')\n",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "L1C,_L2A_True_Colour_Image",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "38226c29-200d-4d9b-8068-a30c9ed8f791",
										"exec": [
											"var jsonDataElements = pm.response.json().value;",
											"pm.test(\"Response time is less than \" +  environment[\"query-timeout\"] + \"ms\", function(){",
											"    pm.expect(pm.response.responseTime).to.be.below(parseInt(environment[\"query-timeout\"]));",
											"});",
											"",
											"pm.test(\"Test OData context\", function(){",
											"    query_string = pm.request.url.getQueryString();",
											"    if(query_string.includes(\"$expand=Attributes\")){",
											"        pm.expect( pm.response.json()['@odata.context']).to.include(\"$metadata#Products(Attributes())\");",
											"    } else{",
											"        pm.expect( pm.response.json()['@odata.context']).to.include(\"$metadata#Products\");",
											"    }",
											"});",
											"",
											"var TRUE = true;",
											"var FALSE = false;",
											"",
											"test_map={};",
											"test_map.productGroupId=function (element) {pm.expect(element.Name).eq('productGroupId');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');};",
											"test_map.processorVersion=function (element) {pm.expect(element.Name).eq('processorVersion');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');};",
											"test_map.processingDate=function (element) {pm.expect(element.Name).eq('processingDate');pm.expect(element.ValueType).eq('DateTimeOffset');pm.expect(element.Value).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);};",
											"test_map.beginningDateTime=function (element) {pm.expect(element.Name).eq('beginningDateTime');pm.expect(element.ValueType).eq('DateTimeOffset');pm.expect(element.Value).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);};",
											"test_map.endingDateTime=function (element) {pm.expect(element.Name).eq('endingDateTime');pm.expect(element.ValueType).eq('DateTimeOffset');pm.expect(element.Value).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);};",
											"test_map.orbitNumber=function (element) {pm.expect(element.Name).eq('orbitNumber');pm.expect(element.ValueType).eq('Integer');pm.expect(element.Value).to.be.a(\"number\");};",
											"test_map.coordinates=function (element) {pm.expect(element.Name).eq('coordinates');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');};",
											"test_map.qualityStatus=function (element, product) {pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"NOMINAL\",\"DEGRADED\"]);",
											"    var qualityInfo = \"\";",
											"    product.Attributes.forEach(function(el){if(el.Name == \"qualityInfo\"){qualityInfo = el.Value;}});",
											"    if(element.Value == \"NOMINAL\" ){pm.expect(qualityInfo == \"100\");}",
											"    else if(element.Value == \"DEGRADED\"){pm.expect(qualityInfo != \"100\");}",
											"    pm.expect(qualityInfo).to.not.eql(\"\");",
											"};",
											"test_map.productType=function (element) {pm.expect(element.Name).eq('productType');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"MSI_L1C_TC\",\"MSI_L2A_TC\"]);",
											"",
											"};",
											"test_map.instrumentShortName=function (element) {pm.expect(element.Name).eq('instrumentShortName');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');};",
											"test_map.processingCenter=function (element) {pm.expect(element.Name).eq('processingCenter');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');};",
											"test_map.platformSerialIdentifier=function (element) {pm.expect(element.Name).eq('platformSerialIdentifier');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"A\",\"B\",\"C\",\"D\",\"_\"]);};",
											"test_map.cloudCover=function (element) {pm.expect(element.Name).eq('cloudCover');pm.expect(element.ValueType).eq('Double');pm.expect(element.Value).to.be.a(\"number\");};",
											"test_map.platformShortName=function (element) {pm.expect(element.Name).eq('platformShortName');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"SENTINEL-2\"]);};",
											"test_map.tileId=function (element) {pm.expect(element.Name).eq('tileId');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');};",
											"test_map.qualityInfo=function (element, product) {pm.expect(element.Value).to.be.a(\"number\");pm.expect(element.Value).to.be.oneOf([0,1,3,5,9,11,15,19,24,26,30,34,39,43,48,53,59,60,61,64,65,68,71,75,76,78,80,84,86,90,94,100]);};",
											"",
											"test_schema={};",
											"test_schema.productGroupId=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.processorVersion=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.processingDate=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.beginningDateTime=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.endingDateTime=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.orbitNumber=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.coordinates=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.qualityStatus=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.productType=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.instrumentShortName=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.processingCenter=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.platformSerialIdentifier=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.cloudCover=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.platformShortName=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.tileId=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.qualityInfo=function (num) {pm.expect(num).to.be.eq(1)};",
											"",
											"            ",
											"properties_map = {};",
											"properties_map.Name=function (element) {pm.expect(element.Name).to.be.a(\"string\");};",
											"properties_map.ContentDate=function (element) {pm.expect(element.ContentDate[\"Start\"]).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);pm.expect(element.ContentDate[\"End\"]).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);};",
											"",
											"let schema_seen = {};",
											"",
											"function testSpecific(value, product){",
											"",
											"    if (schema_seen[value.Name]){",
											"        schema_seen[value.Name]++;",
											"    }else{",
											"        schema_seen[value.Name]=1;",
											"    }",
											"",
											"    if (test_map[value.Name]) {",
											"        pm.test(\"Test Attribute \"+value.Name + \" for Product: \"+product.Name+\" - \"+product.Id, function(){test_map[value.Name](value, product)});",
											"    }",
											"    else {",
											"        pm.test.skip(\"Test Attribute \"+value.Name + \" for Product: \"+product.Name+\" - \"+product.Id);",
											"    }",
											"}",
											"function propertySpecific(key, product){",
											"    if (properties_map[key]) {",
											"        pm.test(\"Test Property \"+key+\" for Product: \"+product.Name+\" - \"+product.Id, function(){properties_map[key](product)});",
											"    }",
											"    else {",
											"        pm.test.skip(\"Test Property \"+key+\" for Product: \"+product.Name+\" - \"+product.Id);",
											"    }",
											"}",
											"",
											"for (var counter = 0;  counter  < jsonDataElements.length; counter++){",
											"    var product = jsonDataElements[counter];",
											"    console.log(\"Processing Product: \"+product.Name+\" - \"+product.Id);",
											"",
											"    for (const[key, value] of Object.entries(properties_map)){",
											"        propertySpecific(key, jsonDataElements[counter]);",
											"    }",
											"",
											"    if(\"Attributes\" in jsonDataElements[counter]){",
											"        schema_seen = {};",
											"",
											"        pm.test(\"Test Attributes list\", function(){",
											"            pm.expect(jsonDataElements[counter].Attributes.length).to.be.above(0);",
											"        });",
											"",
											"        jsonDataElements[counter].Attributes.forEach(function(elem){",
											"            testSpecific(elem, jsonDataElements[counter]);",
											"        });",
											"        var product = jsonDataElements[counter];",
											"        for (const[key, value] of Object.entries(test_schema)) {pm.test(\"Schema Attribute \"+key+\" Product \"+product.Name+\" - \"+product.Id, function(){",
											"        if(schema_seen[key] == undefined){",
											"            schema_seen[key] = 0;",
											"        }",
											"        value(schema_seen[key], product)});}",
											"    }",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{service-root-uri}}/odata/v1/Products?$expand=Attributes&$top=1&$filter=(contains(Name,'MSI_L1C_TC') or contains(Name,'MSI_L2A_TC')) and startswith(Name,'S2')\n",
									"host": [
										"{{service-root-uri}}"
									],
									"path": [
										"odata",
										"v1",
										"Products"
									],
									"query": [
										{
											"key": "$expand",
											"value": "Attributes"
										},
										{
											"key": "$top",
											"value": "1"
										},
										{
											"key": "$filter",
											"value": "(contains(Name,'MSI_L1C_TC') or contains(Name,'MSI_L2A_TC')) and startswith(Name,'S2')\n"
										},
										{
											"key": "$filter",
											"value": "contains(Name,'MSI_L1C_TC') and startswith(Name,'S2')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'MSI_L2A_TC') and startswith(Name,'S2')\n",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "L0,_L1A,_L1B,_L1C,_L2A_Granule",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a0839f0f-7697-44b3-80cd-efcba7e90d23",
										"exec": [
											"var jsonDataElements = pm.response.json().value;",
											"pm.test(\"Response time is less than \" +  environment[\"query-timeout\"] + \"ms\", function(){",
											"    pm.expect(pm.response.responseTime).to.be.below(parseInt(environment[\"query-timeout\"]));",
											"});",
											"",
											"pm.test(\"Test OData context\", function(){",
											"    query_string = pm.request.url.getQueryString();",
											"    if(query_string.includes(\"$expand=Attributes\")){",
											"        pm.expect( pm.response.json()['@odata.context']).to.include(\"$metadata#Products(Attributes())\");",
											"    } else{",
											"        pm.expect( pm.response.json()['@odata.context']).to.include(\"$metadata#Products\");",
											"    }",
											"});",
											"",
											"var TRUE = true;",
											"var FALSE = false;",
											"",
											"test_map={};",
											"test_map.productGroupId=function (element) {pm.expect(element.Name).eq('productGroupId');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');};",
											"test_map.processorVersion=function (element) {pm.expect(element.Name).eq('processorVersion');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');};",
											"test_map.processingDate=function (element) {pm.expect(element.Name).eq('processingDate');pm.expect(element.ValueType).eq('DateTimeOffset');pm.expect(element.Value).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d+([+-][0-2]\\d:[0-5]\\d|Z)/);};",
											"test_map.beginningDateTime=function (element) {pm.expect(element.Name).eq('beginningDateTime');pm.expect(element.ValueType).eq('DateTimeOffset');pm.expect(element.Value).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);};",
											"test_map.endingDateTime=function (element) {pm.expect(element.Name).eq('endingDateTime');pm.expect(element.ValueType).eq('DateTimeOffset');pm.expect(element.Value).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);};",
											"test_map.orbitNumber=function (element) {pm.expect(element.Name).eq('orbitNumber');pm.expect(element.ValueType).eq('Integer');pm.expect(element.Value).to.be.a(\"number\");};",
											"test_map.coordinates=function (element) {pm.expect(element.Name).eq('coordinates');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.match(/(-?\\d+(\\.\\d+)?),\\s*(-?\\d+(\\.\\d+)?)/);};",
											"test_map.qualityStatus=function (element, product) {pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"NOMINAL\",\"DEGRADED\"]);",
											"    var qualityInfo = \"\";",
											"    product.Attributes.forEach(function(el){if(el.Name == \"qualityInfo\"){qualityInfo = el.Value;}});",
											"    if(element.Value == \"NOMINAL\" ){pm.expect(qualityInfo == \"100\");}",
											"    else if(element.Value == \"DEGRADED\"){pm.expect(qualityInfo != \"100\");}",
											"    pm.expect(qualityInfo).to.not.eql(\"\");",
											"};",
											"test_map.productType=function (element) {pm.expect(element.Name).eq('productType');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"MSI_L0__GR\",\"MSI_L1A_GR\",\"MSI_L1B_GR\",\"MSI_L1C_TL\",\"MSI_L2A_TL\"]);",
											"",
											"};",
											"test_map.instrumentShortName=function (element) {pm.expect(element.Name).eq('instrumentShortName');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"MSI\"]);};",
											"test_map.processingCenter=function (element) {pm.expect(element.Name).eq('processingCenter');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"SGS_\",\"MPS_\",\"MTI_\",\"EPA_\",\"MPC_\",\"UPA_\",\"XXXX\",\"VGS2\"]);};",
											"test_map.platformSerialIdentifier=function (element) {pm.expect(element.Name).eq('platformSerialIdentifier');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"A\",\"B\",\"C\",\"D\",\"_\"]);};",
											"test_map.cloudCover=function (element) {pm.expect(element.Name).eq('cloudCover');pm.expect(element.ValueType).eq('Double');pm.expect(element.Value).to.be.a(\"number\");};",
											"test_map.platformShortName=function (element) {pm.expect(element.Name).eq('platformShortName');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"SENTINEL-2\"]);};",
											"test_map.tileId=function (element, product) {",
											"    if(product.Name.includes(\"MSI_L1C_TL\") || product.Name.includes(\"MSI_L2A_TL\")){",
											"        pm.expect(element.Name).eq('tileId');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');    ",
											"    }",
											"};",
											"test_map.illuminationZenithAngle=function (element, product) {",
											"    if(product.Name.includes(\"MSI_L1C_TL\") || product.Name.includes(\"MSI_L2A_TL\")){",
											"        pm.expect(element.Name).eq('illuminationZenithAngle');pm.expect(element.ValueType).eq('Double');pm.expect(element.Value).to.be.a(\"number\");    ",
											"    }",
											"};",
											"test_map.datastripId=function (element) {pm.expect(element.Name).eq('datastripId');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');};",
											"test_map.qualityInfo=function (element, product) {pm.expect(element.Value).to.be.a(\"number\");pm.expect(element.Value).to.be.oneOf([0,1,3,5,9,11,15,19,24,26,30,34,39,43,48,53,59,60,61,64,65,68,71,75,76,78,80,84,86,90,94,100]);};",
											"",
											"test_schema={};",
											"test_schema.productGroupId=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.processorVersion=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.processingDate=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.beginningDateTime=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.endingDateTime=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.orbitNumber=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.coordinates=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.qualityStatus=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.productType=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.instrumentShortName=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.processingCenter=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.platformSerialIdentifier=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.cloudCover=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.platformShortName=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.tileId=function (num, product) {",
											"    if(product.Name.includes(\"MSI_L1C_TL\") || product.Name.includes(\"MSI_L2A_TL\")){",
											"        pm.expect(num).to.be.eq(1)   ",
											"    }",
											"};",
											"test_schema.illuminationZenithAngle=function (num, product) {",
											"    if(product.Name.includes(\"MSI_L1C_TL\") || product.Name.includes(\"MSI_L2A_TL\")){",
											"        pm.expect(num).to.be.eq(1)   ",
											"    }",
											"};",
											"test_schema.datastripId=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.qualityInfo=function (num) {pm.expect(num).to.be.eq(1)};",
											"",
											"            ",
											"properties_map = {};",
											"properties_map.Name=function (element) {pm.expect(element.Name).to.be.a(\"string\");};",
											"properties_map.ContentDate=function (element) {pm.expect(element.ContentDate[\"Start\"]).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);pm.expect(element.ContentDate[\"End\"]).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);};",
											"",
											"let schema_seen = {};",
											"",
											"function testSpecific(value, product){",
											"",
											"    if (schema_seen[value.Name]){",
											"        schema_seen[value.Name]++;",
											"    }else{",
											"        schema_seen[value.Name]=1;",
											"    }",
											"",
											"    if (test_map[value.Name]) {",
											"        pm.test(\"Test Attribute \"+value.Name + \" for Product: \"+product.Name+\" - \"+product.Id, function(){test_map[value.Name](value, product)});",
											"    }",
											"    else {",
											"        pm.test.skip(\"Test Attribute \"+value.Name + \" for Product: \"+product.Name+\" - \"+product.Id);",
											"    }",
											"}",
											"function propertySpecific(key, product){",
											"    if (properties_map[key]) {",
											"        pm.test(\"Test Property \"+key+\" for Product: \"+product.Name+\" - \"+product.Id, function(){properties_map[key](product)});",
											"    }",
											"    else {",
											"        pm.test.skip(\"Test Property \"+key+\" for Product: \"+product.Name+\" - \"+product.Id);",
											"    }",
											"}",
											"",
											"for (var counter = 0;  counter  < jsonDataElements.length; counter++){",
											"    var product = jsonDataElements[counter];",
											"    console.log(\"Processing Product: \"+product.Name+\" - \"+product.Id);",
											"",
											"    for (const[key, value] of Object.entries(properties_map)){",
											"        propertySpecific(key, jsonDataElements[counter]);",
											"    }",
											"",
											"    if(\"Attributes\" in jsonDataElements[counter]){",
											"        schema_seen = {};",
											"",
											"        pm.test(\"Test Attributes list\", function(){",
											"            pm.expect(jsonDataElements[counter].Attributes.length).to.be.above(0);",
											"        });",
											"",
											"        jsonDataElements[counter].Attributes.forEach(function(elem){",
											"            testSpecific(elem, jsonDataElements[counter]);",
											"        });",
											"        var product = jsonDataElements[counter];",
											"        for (const[key, value] of Object.entries(test_schema)) {pm.test(\"Schema Attribute \"+key+\" Product \"+product.Name+\" - \"+product.Id, function(){",
											"        if(schema_seen[key] == undefined){",
											"            schema_seen[key] = 0;",
											"        }",
											"        value(schema_seen[key], product)});}",
											"    }",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{service-root-uri}}/odata/v1/Products?$expand=Attributes&$top=1&$filter=(contains(Name,'MSI_L0__GR') or contains(Name,'MSI_L1A_GR') or contains(Name,'MSI_L1B_GR') or contains(Name,'MSI_L1C_TL') or contains(Name,'MSI_L2A_TL')) and startswith(Name,'S2')\n",
									"host": [
										"{{service-root-uri}}"
									],
									"path": [
										"odata",
										"v1",
										"Products"
									],
									"query": [
										{
											"key": "$expand",
											"value": "Attributes"
										},
										{
											"key": "$top",
											"value": "1"
										},
										{
											"key": "$filter",
											"value": "(contains(Name,'MSI_L0__GR') or contains(Name,'MSI_L1A_GR') or contains(Name,'MSI_L1B_GR') or contains(Name,'MSI_L1C_TL') or contains(Name,'MSI_L2A_TL')) and startswith(Name,'S2')\n"
										},
										{
											"key": "$filter",
											"value": "contains(Name,'MSI_L0__GR') and startswith(Name,'S2')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'MSI_L1A_GR') and startswith(Name,'S2')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'MSI_L1B_GR') and startswith(Name,'S2')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'MSI_L1C_TL') and startswith(Name,'S2')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'MSI_L2A_TL') and startswith(Name,'S2')\n",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "S2_AUX",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6fe0d572-fca9-4fc7-b2be-73c4815ea595",
										"exec": [
											"var jsonDataElements = pm.response.json().value;",
											"pm.test(\"Response time is less than \" +  environment[\"query-timeout\"] + \"ms\", function(){",
											"    pm.expect(pm.response.responseTime).to.be.below(parseInt(environment[\"query-timeout\"]));",
											"});",
											"",
											"pm.test(\"Test OData context\", function(){",
											"    query_string = pm.request.url.getQueryString();",
											"    if(query_string.includes(\"$expand=Attributes\")){",
											"        pm.expect( pm.response.json()['@odata.context']).to.include(\"$metadata#Products(Attributes())\");",
											"    } else{",
											"        pm.expect( pm.response.json()['@odata.context']).to.include(\"$metadata#Products\");",
											"    }",
											"});",
											"",
											"var TRUE = true;",
											"var FALSE = false;",
											"",
											"test_map={};",
											"test_map.platformShortName=function (element, product) {",
											"    if(product.Name.includes(\"AUX_PREORB\") || product.Name.includes(\"AUX_RESORB\") || product.Name.includes(\"GIP_\")){",
											"        pm.expect(element.Name).eq('platformShortName');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"SENTINEL-2\"]);    ",
											"    }",
											"};",
											"test_map.platformSerialIdentifier=function (element, product) {",
											"    if(product.Name.includes(\"AUX_PREORB\") || product.Name.includes(\"AUX_RESORB\") || product.Name.includes(\"GIP_\")){",
											"        pm.expect(element.Name).eq('platformSerialIdentifier');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"A\",\"B\",\"C\",\"D\",\"_¹\"]);    ",
											"    }",
											"};",
											"test_map.productType=function (element, product) {pm.expect(element.Name).eq('productType');pm.expect(element.ValueType).eq('String');",
											"    pm.expect(element.Value).to.be.a('string');",
											"    var auxWithBand = [\"GIP_VIEDIR\", \"GIP_R2EQOG\", \"GIP_R2DEFI\", \"GIP_R2WAFI\", \"GIP_R2L2NC\", \"GIP_R2DENT\", \"GIP_R2DECT\", \"GIP_R2EOB2\"];",
											"    var productType_prefix = element.Value.split(\"_\")[0] + \"_\" + element.Value.split(\"_\")[1];",
											"",
											"    if(auxWithBand.includes(productType_prefix)){",
											"        var band = product.Name.split(\".TGZ\")[0].split(\"_\").pop();",
											"        var correctProductType = productType_prefix + \"_\" + band;",
											"        pm.expect(element.Value).to.be.eq(correctProductType);",
											"    } else {",
											"        pm.expect(element.Value).to.be.oneOf([\"AUX_ECMWFD\",\"AUX_PREORB\",\"AUX_RESORB\",\"AUX_UT1UTC\",\"GIP_ATMIMA\",\"GIP_ATMSAD\",\"GIP_DATATI\",\"GIP_LREXTR\",\"GIP_INVLOC\",\"GIP_VIEDIR\",\"GIP_SPAMOD\",\"GIP_BLINDP\",\"GIP_CLOINV\",\"GIP_PRDLOC\",\"GIP_R2PARA\",\"GIP_R2SWIR\",\"GIP_R2EQOG\",\"GIP_R2DEPI\",\"GIP_R2DEFI\",\"GIP_R2WAFI\",\"GIP_R2L2NC\",\"GIP_R2DENT\",\"GIP_R2DECT\",\"GIP_R2NOMO\",\"GIP_R2ABCA\",\"GIP_R2BINN\",\"GIP_R2CRCO\",\"GIP_G2PARA\",\"GIP_G2PARE\",\"GIP_EARMOD\",\"GIP_GEOPAR\",\"GIP_INTDET\",\"GIP_TILPAR\",\"GIP_RESPAR\",\"GIP_MASPAR\",\"GIP_JP2KPA\",\"GIP_ECMWFP\",\"GIP_DECOMP\",\"GIP_OLQCPA\",\"GIP_PROBAS\",\"GIP_CONVER\",\"GIP_R2EOB2\",\"GIP_L2ACAC\",\"GIP_L2ACSC\",\"GIP_PROBA2\"]);",
											"    }",
											"",
											"",
											"};",
											"test_map.beginningDateTime=function (element) {pm.expect(element.Name).eq('beginningDateTime');pm.expect(element.ValueType).eq('DateTimeOffset');pm.expect(element.Value).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);};",
											"test_map.endingDateTime=function (element) {pm.expect(element.Name).eq('endingDateTime');pm.expect(element.ValueType).eq('DateTimeOffset');pm.expect(element.Value).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);};",
											"test_map.processingCenter=function (element) {pm.expect(element.Name).eq('processingCenter');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');};",
											"test_map.processorVersion=function (element) {pm.expect(element.Name).eq('processorVersion');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');};",
											"test_map.processingDate=function (element) {pm.expect(element.Name).eq('processingDate');pm.expect(element.ValueType).eq('DateTimeOffset');pm.expect(element.Value).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);};",
											"",
											"test_schema={};",
											"test_schema.platformShortName=function (num, product) {",
											"    if(product.Name.includes(\"AUX_PREORB\") || product.Name.includes(\"AUX_RESORB\") || product.Name.includes(\"GIP_\")){",
											"        pm.expect(num).to.be.eq(1)    ",
											"    }",
											"};",
											"test_schema.platformSerialIdentifier=function (num, product) {",
											"    if(product.Name.includes(\"AUX_PREORB\") || product.Name.includes(\"AUX_RESORB\") || product.Name.includes(\"GIP_\")){",
											"        pm.expect(num).to.be.eq(1)    ",
											"    }",
											"};",
											"test_schema.productType=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.beginningDateTime=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.endingDateTime=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.processingCenter=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.processorVersion=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.processingDate=function (num) {pm.expect(num).to.be.eq(1)};",
											"",
											"            ",
											"properties_map = {};",
											"properties_map.Name=function (element) {pm.expect(element.Name).to.be.a(\"string\");};",
											"properties_map.ContentDate=function (element) {pm.expect(element.ContentDate[\"Start\"]).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);pm.expect(element.ContentDate[\"End\"]).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);};",
											"",
											"let schema_seen = {};",
											"",
											"function testSpecific(value, product){",
											"",
											"    if (schema_seen[value.Name]){",
											"        schema_seen[value.Name]++;",
											"    }else{",
											"        schema_seen[value.Name]=1;",
											"    }",
											"",
											"    if (test_map[value.Name]) {",
											"        pm.test(\"Test Attribute \"+value.Name + \" for Product: \"+product.Name+\" - \"+product.Id, function(){test_map[value.Name](value, product)});",
											"    }",
											"    else {",
											"        pm.test.skip(\"Test Attribute \"+value.Name + \" for Product: \"+product.Name+\" - \"+product.Id);",
											"    }",
											"}",
											"function propertySpecific(key, product){",
											"    if (properties_map[key]) {",
											"        pm.test(\"Test Property \"+key+\" for Product: \"+product.Name+\" - \"+product.Id, function(){properties_map[key](product)});",
											"    }",
											"    else {",
											"        pm.test.skip(\"Test Property \"+key+\" for Product: \"+product.Name+\" - \"+product.Id);",
											"    }",
											"}",
											"",
											"for (var counter = 0;  counter  < jsonDataElements.length; counter++){",
											"    var product = jsonDataElements[counter];",
											"    console.log(\"Processing Product: \"+product.Name+\" - \"+product.Id);",
											"",
											"    for (const[key, value] of Object.entries(properties_map)){",
											"        propertySpecific(key, jsonDataElements[counter]);",
											"    }",
											"",
											"    if(\"Attributes\" in jsonDataElements[counter]){",
											"        schema_seen = {};",
											"",
											"        pm.test(\"Test Attributes list\", function(){",
											"            pm.expect(jsonDataElements[counter].Attributes.length).to.be.above(0);",
											"        });",
											"",
											"        jsonDataElements[counter].Attributes.forEach(function(elem){",
											"            testSpecific(elem, jsonDataElements[counter]);",
											"        });",
											"        var product = jsonDataElements[counter];",
											"        for (const[key, value] of Object.entries(test_schema)) {pm.test(\"Schema Attribute \"+key+\" Product \"+product.Name+\" - \"+product.Id, function(){",
											"        if(schema_seen[key] == undefined){",
											"            schema_seen[key] = 0;",
											"        }",
											"        value(schema_seen[key], product)});}",
											"    }",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{service-root-uri}}/odata/v1/Products?$expand=Attributes&$top=1&$filter=(contains(Name,'AUX_ECMWFD') or contains(Name,'AUX_PREORB') or contains(Name,'AUX_RESORB') or contains(Name,'AUX_UT1UTC') or contains(Name,'GIP_ATMIMA') or contains(Name,'GIP_ATMSAD') or contains(Name,'GIP_DATATI') or contains(Name,'GIP_LREXTR') or contains(Name,'GIP_INVLOC') or contains(Name,'GIP_VIEDIR') or contains(Name,'GIP_SPAMOD') or contains(Name,'GIP_BLINDP') or contains(Name,'GIP_CLOINV') or contains(Name,'GIP_PRDLOC') or contains(Name,'GIP_R2PARA') or contains(Name,'GIP_R2SWIR') or contains(Name,'GIP_R2EQOG') or contains(Name,'GIP_R2DEPI') or contains(Name,'GIP_R2DEFI') or contains(Name,'GIP_R2WAFI') or contains(Name,'GIP_R2L2NC') or contains(Name,'GIP_R2DENT') or contains(Name,'GIP_R2DECT') or contains(Name,'GIP_R2NOMO') or contains(Name,'GIP_R2ABCA') or contains(Name,'GIP_R2BINN') or contains(Name,'GIP_R2CRCO') or contains(Name,'GIP_G2PARA') or contains(Name,'GIP_G2PARE') or contains(Name,'GIP_EARMOD') or contains(Name,'GIP_GEOPAR') or contains(Name,'GIP_INTDET') or contains(Name,'GIP_TILPAR') or contains(Name,'GIP_RESPAR') or contains(Name,'GIP_MASPAR') or contains(Name,'GIP_JP2KPA') or contains(Name,'GIP_ECMWFP') or contains(Name,'GIP_DECOMP') or contains(Name,'GIP_OLQCPA') or contains(Name,'GIP_PROBAS') or contains(Name,'GIP_CONVER') or contains(Name,'GIP_R2EOB2') or contains(Name,'GIP_L2ACAC') or contains(Name,'GIP_L2ACSC') or contains(Name,'GIP_PROBA2')) and startswith(Name,'S2')\n",
									"host": [
										"{{service-root-uri}}"
									],
									"path": [
										"odata",
										"v1",
										"Products"
									],
									"query": [
										{
											"key": "$expand",
											"value": "Attributes"
										},
										{
											"key": "$top",
											"value": "1"
										},
										{
											"key": "$filter",
											"value": "(contains(Name,'AUX_ECMWFD') or contains(Name,'AUX_PREORB') or contains(Name,'AUX_RESORB') or contains(Name,'AUX_UT1UTC') or contains(Name,'GIP_ATMIMA') or contains(Name,'GIP_ATMSAD') or contains(Name,'GIP_DATATI') or contains(Name,'GIP_LREXTR') or contains(Name,'GIP_INVLOC') or contains(Name,'GIP_VIEDIR') or contains(Name,'GIP_SPAMOD') or contains(Name,'GIP_BLINDP') or contains(Name,'GIP_CLOINV') or contains(Name,'GIP_PRDLOC') or contains(Name,'GIP_R2PARA') or contains(Name,'GIP_R2SWIR') or contains(Name,'GIP_R2EQOG') or contains(Name,'GIP_R2DEPI') or contains(Name,'GIP_R2DEFI') or contains(Name,'GIP_R2WAFI') or contains(Name,'GIP_R2L2NC') or contains(Name,'GIP_R2DENT') or contains(Name,'GIP_R2DECT') or contains(Name,'GIP_R2NOMO') or contains(Name,'GIP_R2ABCA') or contains(Name,'GIP_R2BINN') or contains(Name,'GIP_R2CRCO') or contains(Name,'GIP_G2PARA') or contains(Name,'GIP_G2PARE') or contains(Name,'GIP_EARMOD') or contains(Name,'GIP_GEOPAR') or contains(Name,'GIP_INTDET') or contains(Name,'GIP_TILPAR') or contains(Name,'GIP_RESPAR') or contains(Name,'GIP_MASPAR') or contains(Name,'GIP_JP2KPA') or contains(Name,'GIP_ECMWFP') or contains(Name,'GIP_DECOMP') or contains(Name,'GIP_OLQCPA') or contains(Name,'GIP_PROBAS') or contains(Name,'GIP_CONVER') or contains(Name,'GIP_R2EOB2') or contains(Name,'GIP_L2ACAC') or contains(Name,'GIP_L2ACSC') or contains(Name,'GIP_PROBA2')) and startswith(Name,'S2')\n"
										},
										{
											"key": "$filter",
											"value": "contains(Name,'AUX_ECMWFD') and startswith(Name,'S2')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'AUX_PREORB') and startswith(Name,'S2')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'AUX_RESORB') and startswith(Name,'S2')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'AUX_UT1UTC') and startswith(Name,'S2')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'GIP_ATMIMA') and startswith(Name,'S2')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'GIP_ATMSAD') and startswith(Name,'S2')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'GIP_DATATI') and startswith(Name,'S2')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'GIP_LREXTR') and startswith(Name,'S2')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'GIP_INVLOC') and startswith(Name,'S2')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'GIP_VIEDIR') and startswith(Name,'S2')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'GIP_SPAMOD') and startswith(Name,'S2')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'GIP_BLINDP') and startswith(Name,'S2')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'GIP_CLOINV') and startswith(Name,'S2')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'GIP_PRDLOC') and startswith(Name,'S2')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'GIP_R2PARA') and startswith(Name,'S2')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'GIP_R2SWIR') and startswith(Name,'S2')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'GIP_R2EQOG') and startswith(Name,'S2')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'GIP_R2DEPI') and startswith(Name,'S2')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'GIP_R2DEFI') and startswith(Name,'S2')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'GIP_R2WAFI') and startswith(Name,'S2')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'GIP_R2L2NC') and startswith(Name,'S2')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'GIP_R2DENT') and startswith(Name,'S2')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'GIP_R2DECT') and startswith(Name,'S2')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'GIP_R2NOMO') and startswith(Name,'S2')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'GIP_R2ABCA') and startswith(Name,'S2')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'GIP_R2BINN') and startswith(Name,'S2')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'GIP_R2CRCO') and startswith(Name,'S2')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'GIP_G2PARA') and startswith(Name,'S2')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'GIP_G2PARE') and startswith(Name,'S2')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'GIP_EARMOD') and startswith(Name,'S2')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'GIP_GEOPAR') and startswith(Name,'S2')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'GIP_INTDET') and startswith(Name,'S2')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'GIP_TILPAR') and startswith(Name,'S2')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'GIP_RESPAR') and startswith(Name,'S2')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'GIP_MASPAR') and startswith(Name,'S2')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'GIP_JP2KPA') and startswith(Name,'S2')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'GIP_ECMWFP') and startswith(Name,'S2')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'GIP_DECOMP') and startswith(Name,'S2')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'GIP_OLQCPA') and startswith(Name,'S2')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'GIP_PROBAS') and startswith(Name,'S2')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'GIP_CONVER') and startswith(Name,'S2')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'GIP_R2EOB2') and startswith(Name,'S2')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'GIP_L2ACAC') and startswith(Name,'S2')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'GIP_L2ACSC') and startswith(Name,'S2')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'GIP_PROBA2') and startswith(Name,'S2')\n",
											"disabled": true
										}
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "PR",
					"item": [
						{
							"name": "L0,_L1A,_L1B,_L1C,_L2A_DS_",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "399aa2e8-c548-492c-bd69-2615bd6bd0c4",
										"exec": [
											"var jsonDataElements = pm.response.json().value;",
											"pm.test(\"Response time is less than \" +  environment[\"query-timeout\"] + \"ms\", function(){",
											"    pm.expect(pm.response.responseTime).to.be.below(parseInt(environment[\"query-timeout\"]));",
											"});",
											"",
											"pm.test(\"Test OData context\", function(){",
											"    query_string = pm.request.url.getQueryString();",
											"    if(query_string.includes(\"$expand=Attributes\")){",
											"        pm.expect( pm.response.json()['@odata.context']).to.include(\"$metadata#Products(Attributes())\");",
											"    } else{",
											"        pm.expect( pm.response.json()['@odata.context']).to.include(\"$metadata#Products\");",
											"    }",
											"});",
											"",
											"var TRUE = true;",
											"var FALSE = false;",
											"",
											"test_map={};",
											"test_map.productGroupId=function (element) {pm.expect(element.Name).eq('productGroupId');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');};",
											"test_map.processorVersion=function (element) {pm.expect(element.Name).eq('processorVersion');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');};",
											"test_map.processingDate=function (element) {pm.expect(element.Name).eq('processingDate');pm.expect(element.ValueType).eq('DateTimeOffset');pm.expect(element.Value).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);};",
											"test_map.beginningDateTime=function (element) {pm.expect(element.Name).eq('beginningDateTime');pm.expect(element.ValueType).eq('DateTimeOffset');pm.expect(element.Value).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);};",
											"test_map.endingDateTime=function (element) {pm.expect(element.Name).eq('endingDateTime');pm.expect(element.ValueType).eq('DateTimeOffset');pm.expect(element.Value).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);};",
											"test_map.orbitNumber=function (element) {pm.expect(element.Name).eq('orbitNumber');pm.expect(element.ValueType).eq('Integer');pm.expect(element.Value).to.be.a(\"number\");};",
											"test_map.coordinates=function (element) {pm.expect(element.Name).eq('coordinates');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.match(/(-?\\d+(\\.\\d+)?),\\s*(-?\\d+(\\.\\d+)?)/);};",
											"test_map.qualityStatus=function (element, product) {pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"NOMINAL\",\"DEGRADED\"]);",
											"    var qualityInfo = \"\";",
											"    product.Attributes.forEach(function(el){if(el.Name == \"qualityInfo\"){qualityInfo = el.Value;}});",
											"    if(element.Value == \"NOMINAL\" ){pm.expect(qualityInfo == \"100\");}",
											"    else if(element.Value == \"DEGRADED\"){pm.expect(qualityInfo != \"100\");}",
											"    pm.expect(qualityInfo).to.not.eql(\"\");",
											"};",
											"test_map.productType=function (element) {pm.expect(element.Name).eq('productType');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"MSI_L0__DS\",\"MSI_L1A_DS\",\"MSI_L1B_DS\",\"MSI_L1C_DS\",\"MSI_L2A_DS\"]);",
											"",
											"};",
											"test_map.instrumentShortName=function (element) {pm.expect(element.Name).eq('instrumentShortName');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"MSI\"]);};",
											"test_map.processingCenter=function (element) {pm.expect(element.Name).eq('processingCenter');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"SGS_\",\"MPS_\",\"MTI_\",\"EPA_\",\"MPC_\",\"UPA_\",\"XXXX\",\"VGS2\"]);};",
											"test_map.platformSerialIdentifier=function (element) {pm.expect(element.Name).eq('platformSerialIdentifier');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"A\",\"B\",\"C\",\"D\",\"_\"]);};",
											"test_map.platformShortName=function (element) {pm.expect(element.Name).eq('platformShortName');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"SENTINEL-2\"]);};",
											"test_map.operationalMode=function (element) {pm.expect(element.Name).eq('operationalMode');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"INS-NOBS\",\"INS-EOBS\",\"INS-DASC\",\"INS-ABSR\",\"INS-VIC\",\"INS-RAW\",\"INS-TST\"]);};",
											"test_map.relativeOrbitNumber=function (element) {pm.expect(element.Name).eq('relativeOrbitNumber');pm.expect(element.ValueType).eq('Integer');pm.expect(element.Value).to.be.a(\"number\");pm.expect(element.Value).to.match(/([1-9]|[1-8][0-9]|9[0-9]|1[0-3][0-9]|14[0-3])/);};",
											"test_map.qualityInfo=function (element, product) {pm.expect(element.Value).to.be.a(\"number\");pm.expect(element.Value).to.be.oneOf([0,1,3,5,9,11,15,19,24,26,30,34,39,43,48,53,59,60,61,64,65,68,71,75,76,78,80,84,86,90,94,100]);};",
											"",
											"test_schema={};",
											"test_schema.productGroupId=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.processorVersion=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.processingDate=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.beginningDateTime=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.endingDateTime=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.orbitNumber=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.coordinates=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.qualityStatus=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.productType=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.instrumentShortName=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.processingCenter=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.platformSerialIdentifier=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.platformShortName=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.operationalMode=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.relativeOrbitNumber=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.qualityInfo=function (num) {pm.expect(num).to.be.eq(1)};",
											"",
											"            ",
											"properties_map = {};",
											"properties_map.Id=function (element) {pm.expect(element.Id).to.match(/[0-9a-fA-F]{8}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{12}/);};",
											"properties_map.Name=function (element) {pm.expect(element.Name).to.be.a(\"string\");};",
											"properties_map.ContentType=function (element) {pm.expect(element.ContentType).to.be.a(\"string\");};",
											"properties_map.ContentLength=function (element) {pm.expect(element.ContentLength).to.be.a(\"number\");};",
											"properties_map.PublicationDate=function (element) {pm.expect(element.PublicationDate).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);};",
											"properties_map.EvictionDate=function (element) {if(element.EvictionDate){ pm.expect(element.EvictionDate).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d+([+-][0-2]\\d:[0-5]\\d|Z)/); }};",
											"properties_map.Checksum=function (element) {for(i=0; i<element.Checksum.length; i++ ){pm.expect(element.Checksum[i].Algorithm).to.be.oneOf([\"MD5\",\"SHA-1\",\"SHA-256\",\"SHA-512\"]);checksum_algorithm = {'MD5': '[a-fA-F0-9]{32}', 'SHA-1': '[0-9a-f]{5,40}', 'SHA-256': '[A-Fa-f0-9]{64}', 'SHA-512': '[A-Fa-f0-9]{128}'};pm.expect(element.Checksum[i].Value).to.match(new RegExp(checksum_algorithm[element.Checksum[i].Algorithm]));}};",
											"properties_map.ContentDate=function (element) {pm.expect(element.ContentDate[\"Start\"]).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);pm.expect(element.ContentDate[\"End\"]).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);};",
											"properties_map.ProductionType=function (element) {pm.expect(element.ProductionType).to.be.oneOf([\"systematic_production\",\"on-demand default\",\"on-demand non-default\"]);};",
											"properties_map.Footprint=function (element) {if(element.Footprint){ pm.expect(element.Footprint).to.match(/geography'SRID=\\d+;[Polygon|Multipolygon|Point](.*)/); }};",
											"",
											"let schema_seen = {};",
											"",
											"function testSpecific(value, product){",
											"",
											"    if (schema_seen[value.Name]){",
											"        schema_seen[value.Name]++;",
											"    }else{",
											"        schema_seen[value.Name]=1;",
											"    }",
											"",
											"    if (test_map[value.Name]) {",
											"        pm.test(\"Test Attribute \"+value.Name + \" for Product: \"+product.Name+\" - \"+product.Id, function(){test_map[value.Name](value, product)});",
											"    }",
											"    else {",
											"        pm.test.skip(\"Test Attribute \"+value.Name + \" for Product: \"+product.Name+\" - \"+product.Id);",
											"    }",
											"}",
											"function propertySpecific(key, product){",
											"    if (properties_map[key]) {",
											"        pm.test(\"Test Property \"+key+\" for Product: \"+product.Name+\" - \"+product.Id, function(){properties_map[key](product)});",
											"    }",
											"    else {",
											"        pm.test.skip(\"Test Property \"+key+\" for Product: \"+product.Name+\" - \"+product.Id);",
											"    }",
											"}",
											"",
											"for (var counter = 0;  counter  < jsonDataElements.length; counter++){",
											"    var product = jsonDataElements[counter];",
											"    console.log(\"Processing Product: \"+product.Name+\" - \"+product.Id);",
											"",
											"    for (const[key, value] of Object.entries(properties_map)){",
											"        propertySpecific(key, jsonDataElements[counter]);",
											"    }",
											"",
											"    if(\"Attributes\" in jsonDataElements[counter]){",
											"        schema_seen = {};",
											"",
											"        pm.test(\"Test Attributes list\", function(){",
											"            pm.expect(jsonDataElements[counter].Attributes.length).to.be.above(0);",
											"        });",
											"",
											"        jsonDataElements[counter].Attributes.forEach(function(elem){",
											"            testSpecific(elem, jsonDataElements[counter]);",
											"        });",
											"        var product = jsonDataElements[counter];",
											"        for (const[key, value] of Object.entries(test_schema)) {pm.test(\"Schema Attribute \"+key+\" Product \"+product.Name+\" - \"+product.Id, function(){",
											"        if(schema_seen[key] == undefined){",
											"            schema_seen[key] = 0;",
											"        }",
											"        value(schema_seen[key], product)});}",
											"    }",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{service-root-uri}}/odata/v1/Products?$expand=Attributes&$top=1&$filter=(contains(Name,'MSI_L0__DS') or contains(Name,'MSI_L1A_DS') or contains(Name,'MSI_L1B_DS') or contains(Name,'MSI_L1C_DS') or contains(Name,'MSI_L2A_DS')) and startswith(Name,'S2')\n",
									"host": [
										"{{service-root-uri}}"
									],
									"path": [
										"odata",
										"v1",
										"Products"
									],
									"query": [
										{
											"key": "$expand",
											"value": "Attributes"
										},
										{
											"key": "$top",
											"value": "1"
										},
										{
											"key": "$filter",
											"value": "(contains(Name,'MSI_L0__DS') or contains(Name,'MSI_L1A_DS') or contains(Name,'MSI_L1B_DS') or contains(Name,'MSI_L1C_DS') or contains(Name,'MSI_L2A_DS')) and startswith(Name,'S2')\n"
										},
										{
											"key": "$filter",
											"value": "contains(Name,'MSI_L0__DS') and startswith(Name,'S2')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'MSI_L1A_DS') and startswith(Name,'S2')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'MSI_L1B_DS') and startswith(Name,'S2')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'MSI_L1C_DS') and startswith(Name,'S2')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'MSI_L2A_DS') and startswith(Name,'S2')\n",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "L1C,_L2A_True_Colour_Image",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1825abf3-6e11-47aa-8ad7-e8b04c67dbf3",
										"exec": [
											"var jsonDataElements = pm.response.json().value;",
											"pm.test(\"Response time is less than \" +  environment[\"query-timeout\"] + \"ms\", function(){",
											"    pm.expect(pm.response.responseTime).to.be.below(parseInt(environment[\"query-timeout\"]));",
											"});",
											"",
											"pm.test(\"Test OData context\", function(){",
											"    query_string = pm.request.url.getQueryString();",
											"    if(query_string.includes(\"$expand=Attributes\")){",
											"        pm.expect( pm.response.json()['@odata.context']).to.include(\"$metadata#Products(Attributes())\");",
											"    } else{",
											"        pm.expect( pm.response.json()['@odata.context']).to.include(\"$metadata#Products\");",
											"    }",
											"});",
											"",
											"var TRUE = true;",
											"var FALSE = false;",
											"",
											"test_map={};",
											"test_map.productGroupId=function (element) {pm.expect(element.Name).eq('productGroupId');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');};",
											"test_map.processorVersion=function (element) {pm.expect(element.Name).eq('processorVersion');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');};",
											"test_map.processingDate=function (element) {pm.expect(element.Name).eq('processingDate');pm.expect(element.ValueType).eq('DateTimeOffset');pm.expect(element.Value).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);};",
											"test_map.beginningDateTime=function (element) {pm.expect(element.Name).eq('beginningDateTime');pm.expect(element.ValueType).eq('DateTimeOffset');pm.expect(element.Value).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);};",
											"test_map.endingDateTime=function (element) {pm.expect(element.Name).eq('endingDateTime');pm.expect(element.ValueType).eq('DateTimeOffset');pm.expect(element.Value).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);};",
											"test_map.orbitNumber=function (element) {pm.expect(element.Name).eq('orbitNumber');pm.expect(element.ValueType).eq('Integer');pm.expect(element.Value).to.be.a(\"number\");};",
											"test_map.coordinates=function (element) {pm.expect(element.Name).eq('coordinates');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');};",
											"test_map.qualityStatus=function (element, product) {pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"NOMINAL\",\"DEGRADED\"]);",
											"    var qualityInfo = \"\";",
											"    product.Attributes.forEach(function(el){if(el.Name == \"qualityInfo\"){qualityInfo = el.Value;}});",
											"    if(element.Value == \"NOMINAL\" ){pm.expect(qualityInfo == \"100\");}",
											"    else if(element.Value == \"DEGRADED\"){pm.expect(qualityInfo != \"100\");}",
											"    pm.expect(qualityInfo).to.not.eql(\"\");",
											"};",
											"test_map.productType=function (element) {pm.expect(element.Name).eq('productType');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"MSI_L1C_TC\",\"MSI_L2A_TC\"]);",
											"",
											"};",
											"test_map.instrumentShortName=function (element) {pm.expect(element.Name).eq('instrumentShortName');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');};",
											"test_map.processingCenter=function (element) {pm.expect(element.Name).eq('processingCenter');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');};",
											"test_map.platformSerialIdentifier=function (element) {pm.expect(element.Name).eq('platformSerialIdentifier');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"A\",\"B\",\"C\",\"D\",\"_\"]);};",
											"test_map.cloudCover=function (element) {pm.expect(element.Name).eq('cloudCover');pm.expect(element.ValueType).eq('Double');pm.expect(element.Value).to.be.a(\"number\");};",
											"test_map.platformShortName=function (element) {pm.expect(element.Name).eq('platformShortName');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"SENTINEL-2\"]);};",
											"test_map.tileId=function (element) {pm.expect(element.Name).eq('tileId');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');};",
											"test_map.qualityInfo=function (element, product) {pm.expect(element.Value).to.be.a(\"number\");pm.expect(element.Value).to.be.oneOf([0,1,3,5,9,11,15,19,24,26,30,34,39,43,48,53,59,60,61,64,65,68,71,75,76,78,80,84,86,90,94,100]);};",
											"",
											"test_schema={};",
											"test_schema.productGroupId=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.processorVersion=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.processingDate=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.beginningDateTime=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.endingDateTime=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.orbitNumber=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.coordinates=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.qualityStatus=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.productType=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.instrumentShortName=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.processingCenter=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.platformSerialIdentifier=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.cloudCover=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.platformShortName=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.tileId=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.qualityInfo=function (num) {pm.expect(num).to.be.eq(1)};",
											"",
											"            ",
											"properties_map = {};",
											"properties_map.Id=function (element) {pm.expect(element.Id).to.match(/[0-9a-fA-F]{8}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{12}/);};",
											"properties_map.Name=function (element) {pm.expect(element.Name).to.be.a(\"string\");};",
											"properties_map.ContentType=function (element) {pm.expect(element.ContentType).to.be.a(\"string\");};",
											"properties_map.ContentLength=function (element) {pm.expect(element.ContentLength).to.be.a(\"number\");};",
											"properties_map.PublicationDate=function (element) {pm.expect(element.PublicationDate).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);};",
											"properties_map.EvictionDate=function (element) {if(element.EvictionDate){ pm.expect(element.EvictionDate).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d+([+-][0-2]\\d:[0-5]\\d|Z)/); }};",
											"properties_map.Checksum=function (element) {for(i=0; i<element.Checksum.length; i++ ){pm.expect(element.Checksum[i].Algorithm).to.be.oneOf([\"MD5\",\"SHA-1\",\"SHA-256\",\"SHA-512\"]);checksum_algorithm = {'MD5': '[a-fA-F0-9]{32}', 'SHA-1': '[0-9a-f]{5,40}', 'SHA-256': '[A-Fa-f0-9]{64}', 'SHA-512': '[A-Fa-f0-9]{128}'};pm.expect(element.Checksum[i].Value).to.match(new RegExp(checksum_algorithm[element.Checksum[i].Algorithm]));}};",
											"properties_map.ContentDate=function (element) {pm.expect(element.ContentDate[\"Start\"]).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);pm.expect(element.ContentDate[\"End\"]).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);};",
											"properties_map.ProductionType=function (element) {pm.expect(element.ProductionType).to.be.oneOf([\"systematic_production\",\"on-demand default\",\"on-demand non-default\"]);};",
											"properties_map.Footprint=function (element) {if(element.Footprint){ pm.expect(element.Footprint).to.match(/geography'SRID=\\d+;[Polygon|Multipolygon|Point](.*)/); }};",
											"",
											"let schema_seen = {};",
											"",
											"function testSpecific(value, product){",
											"",
											"    if (schema_seen[value.Name]){",
											"        schema_seen[value.Name]++;",
											"    }else{",
											"        schema_seen[value.Name]=1;",
											"    }",
											"",
											"    if (test_map[value.Name]) {",
											"        pm.test(\"Test Attribute \"+value.Name + \" for Product: \"+product.Name+\" - \"+product.Id, function(){test_map[value.Name](value, product)});",
											"    }",
											"    else {",
											"        pm.test.skip(\"Test Attribute \"+value.Name + \" for Product: \"+product.Name+\" - \"+product.Id);",
											"    }",
											"}",
											"function propertySpecific(key, product){",
											"    if (properties_map[key]) {",
											"        pm.test(\"Test Property \"+key+\" for Product: \"+product.Name+\" - \"+product.Id, function(){properties_map[key](product)});",
											"    }",
											"    else {",
											"        pm.test.skip(\"Test Property \"+key+\" for Product: \"+product.Name+\" - \"+product.Id);",
											"    }",
											"}",
											"",
											"for (var counter = 0;  counter  < jsonDataElements.length; counter++){",
											"    var product = jsonDataElements[counter];",
											"    console.log(\"Processing Product: \"+product.Name+\" - \"+product.Id);",
											"",
											"    for (const[key, value] of Object.entries(properties_map)){",
											"        propertySpecific(key, jsonDataElements[counter]);",
											"    }",
											"",
											"    if(\"Attributes\" in jsonDataElements[counter]){",
											"        schema_seen = {};",
											"",
											"        pm.test(\"Test Attributes list\", function(){",
											"            pm.expect(jsonDataElements[counter].Attributes.length).to.be.above(0);",
											"        });",
											"",
											"        jsonDataElements[counter].Attributes.forEach(function(elem){",
											"            testSpecific(elem, jsonDataElements[counter]);",
											"        });",
											"        var product = jsonDataElements[counter];",
											"        for (const[key, value] of Object.entries(test_schema)) {pm.test(\"Schema Attribute \"+key+\" Product \"+product.Name+\" - \"+product.Id, function(){",
											"        if(schema_seen[key] == undefined){",
											"            schema_seen[key] = 0;",
											"        }",
											"        value(schema_seen[key], product)});}",
											"    }",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{service-root-uri}}/odata/v1/Products?$expand=Attributes&$top=1&$filter=(contains(Name,'MSI_L1C_TC') or contains(Name,'MSI_L2A_TC')) and startswith(Name,'S2')\n",
									"host": [
										"{{service-root-uri}}"
									],
									"path": [
										"odata",
										"v1",
										"Products"
									],
									"query": [
										{
											"key": "$expand",
											"value": "Attributes"
										},
										{
											"key": "$top",
											"value": "1"
										},
										{
											"key": "$filter",
											"value": "(contains(Name,'MSI_L1C_TC') or contains(Name,'MSI_L2A_TC')) and startswith(Name,'S2')\n"
										},
										{
											"key": "$filter",
											"value": "contains(Name,'MSI_L1C_TC') and startswith(Name,'S2')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'MSI_L2A_TC') and startswith(Name,'S2')\n",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "S2_SAD_(Ancillary)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0a02c5a4-8b69-4a14-874e-c25aeb2a765d",
										"exec": [
											"var jsonDataElements = pm.response.json().value;",
											"pm.test(\"Response time is less than \" +  environment[\"query-timeout\"] + \"ms\", function(){",
											"    pm.expect(pm.response.responseTime).to.be.below(parseInt(environment[\"query-timeout\"]));",
											"});",
											"",
											"pm.test(\"Test OData context\", function(){",
											"    query_string = pm.request.url.getQueryString();",
											"    if(query_string.includes(\"$expand=Attributes\")){",
											"        pm.expect( pm.response.json()['@odata.context']).to.include(\"$metadata#Products(Attributes())\");",
											"    } else{",
											"        pm.expect( pm.response.json()['@odata.context']).to.include(\"$metadata#Products\");",
											"    }",
											"});",
											"",
											"var TRUE = true;",
											"var FALSE = false;",
											"",
											"test_map={};",
											"test_map.processingDate=function (element) {pm.expect(element.Name).eq('processingDate');pm.expect(element.ValueType).eq('DateTimeOffset');pm.expect(element.Value).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);};",
											"test_map.beginningDateTime=function (element) {pm.expect(element.Name).eq('beginningDateTime');pm.expect(element.ValueType).eq('DateTimeOffset');pm.expect(element.Value).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);};",
											"test_map.endingDateTime=function (element) {pm.expect(element.Name).eq('endingDateTime');pm.expect(element.ValueType).eq('DateTimeOffset');pm.expect(element.Value).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);};",
											"test_map.orbitNumber=function (element) {pm.expect(element.Name).eq('orbitNumber');pm.expect(element.ValueType).eq('Integer');pm.expect(element.Value).to.be.a(\"number\");};",
											"test_map.lastOrbitNumber=function (element) {pm.expect(element.Name).eq('lastOrbitNumber');pm.expect(element.ValueType).eq('Integer');pm.expect(element.Value).to.be.a(\"number\");};",
											"test_map.qualityStatus=function (element, product) {pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"NOMINAL\",\"DEGRADED\"]);",
											"    var qualityInfo = \"\";",
											"    product.Attributes.forEach(function(el){if(el.Name == \"qualityInfo\"){qualityInfo = el.Value;}});",
											"    if(element.Value == \"NOMINAL\" ){pm.expect(qualityInfo == \"100\");}",
											"    else if(element.Value == \"DEGRADED\"){pm.expect(qualityInfo != \"100\");}",
											"    pm.expect(qualityInfo).to.not.eql(\"\");",
											"};",
											"test_map.productType=function (element) {pm.expect(element.Name).eq('productType');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"AUX_SADATA\"]);",
											"",
											"};",
											"test_map.instrumentShortName=function (element) {pm.expect(element.Name).eq('instrumentShortName');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"MSI\"]);};",
											"test_map.processingCenter=function (element) {pm.expect(element.Name).eq('processingCenter');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');};",
											"test_map.platformSerialIdentifier=function (element) {pm.expect(element.Name).eq('platformSerialIdentifier');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"A\",\"B\",\"C\",\"D\",\"_\"]);};",
											"test_map.platformShortName=function (element) {pm.expect(element.Name).eq('platformShortName');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"SENTINEL-2\"]);};",
											"test_map.qualityInfo=function (element, product) {pm.expect(element.Value).to.be.a(\"number\");pm.expect(element.Value).to.be.oneOf([0,1,3,5,9,11,15,19,24,26,30,34,39,43,48,53,59,60,61,64,65,68,71,75,76,78,80,84,86,90,94,100]);};",
											"",
											"test_schema={};",
											"test_schema.processingDate=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.beginningDateTime=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.endingDateTime=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.orbitNumber=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.lastOrbitNumber=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.qualityStatus=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.productType=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.instrumentShortName=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.processingCenter=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.platformSerialIdentifier=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.platformShortName=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.qualityInfo=function (num) {pm.expect(num).to.be.eq(1)};",
											"",
											"            ",
											"properties_map = {};",
											"properties_map.Id=function (element) {pm.expect(element.Id).to.match(/[0-9a-fA-F]{8}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{12}/);};",
											"properties_map.Name=function (element) {pm.expect(element.Name).to.be.a(\"string\");};",
											"properties_map.ContentType=function (element) {pm.expect(element.ContentType).to.be.a(\"string\");};",
											"properties_map.ContentLength=function (element) {pm.expect(element.ContentLength).to.be.a(\"number\");};",
											"properties_map.PublicationDate=function (element) {pm.expect(element.PublicationDate).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);};",
											"properties_map.EvictionDate=function (element) {if(element.EvictionDate){ pm.expect(element.EvictionDate).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d+([+-][0-2]\\d:[0-5]\\d|Z)/); }};",
											"properties_map.Checksum=function (element) {for(i=0; i<element.Checksum.length; i++ ){pm.expect(element.Checksum[i].Algorithm).to.be.oneOf([\"MD5\",\"SHA-1\",\"SHA-256\",\"SHA-512\"]);checksum_algorithm = {'MD5': '[a-fA-F0-9]{32}', 'SHA-1': '[0-9a-f]{5,40}', 'SHA-256': '[A-Fa-f0-9]{64}', 'SHA-512': '[A-Fa-f0-9]{128}'};pm.expect(element.Checksum[i].Value).to.match(new RegExp(checksum_algorithm[element.Checksum[i].Algorithm]));}};",
											"properties_map.ContentDate=function (element) {pm.expect(element.ContentDate[\"Start\"]).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);pm.expect(element.ContentDate[\"End\"]).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);};",
											"properties_map.ProductionType=function (element) {pm.expect(element.ProductionType).to.be.oneOf([\"systematic_production\",\"on-demand default\",\"on-demand non-default\"]);};",
											"properties_map.Footprint=function (element) {if(element.Footprint){ pm.expect(element.Footprint).to.match(/geography'SRID=\\d+;[Polygon|Multipolygon|Point](.*)/); }};",
											"",
											"let schema_seen = {};",
											"",
											"function testSpecific(value, product){",
											"",
											"    if (schema_seen[value.Name]){",
											"        schema_seen[value.Name]++;",
											"    }else{",
											"        schema_seen[value.Name]=1;",
											"    }",
											"",
											"    if (test_map[value.Name]) {",
											"        pm.test(\"Test Attribute \"+value.Name + \" for Product: \"+product.Name+\" - \"+product.Id, function(){test_map[value.Name](value, product)});",
											"    }",
											"    else {",
											"        pm.test.skip(\"Test Attribute \"+value.Name + \" for Product: \"+product.Name+\" - \"+product.Id);",
											"    }",
											"}",
											"function propertySpecific(key, product){",
											"    if (properties_map[key]) {",
											"        pm.test(\"Test Property \"+key+\" for Product: \"+product.Name+\" - \"+product.Id, function(){properties_map[key](product)});",
											"    }",
											"    else {",
											"        pm.test.skip(\"Test Property \"+key+\" for Product: \"+product.Name+\" - \"+product.Id);",
											"    }",
											"}",
											"",
											"for (var counter = 0;  counter  < jsonDataElements.length; counter++){",
											"    var product = jsonDataElements[counter];",
											"    console.log(\"Processing Product: \"+product.Name+\" - \"+product.Id);",
											"",
											"    for (const[key, value] of Object.entries(properties_map)){",
											"        propertySpecific(key, jsonDataElements[counter]);",
											"    }",
											"",
											"    if(\"Attributes\" in jsonDataElements[counter]){",
											"        schema_seen = {};",
											"",
											"        pm.test(\"Test Attributes list\", function(){",
											"            pm.expect(jsonDataElements[counter].Attributes.length).to.be.above(0);",
											"        });",
											"",
											"        jsonDataElements[counter].Attributes.forEach(function(elem){",
											"            testSpecific(elem, jsonDataElements[counter]);",
											"        });",
											"        var product = jsonDataElements[counter];",
											"        for (const[key, value] of Object.entries(test_schema)) {pm.test(\"Schema Attribute \"+key+\" Product \"+product.Name+\" - \"+product.Id, function(){",
											"        if(schema_seen[key] == undefined){",
											"            schema_seen[key] = 0;",
											"        }",
											"        value(schema_seen[key], product)});}",
											"    }",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{service-root-uri}}/odata/v1/Products?$expand=Attributes&$top=1&$filter=(contains(Name,'AUX_SADATA')) and startswith(Name,'S2')\n",
									"host": [
										"{{service-root-uri}}"
									],
									"path": [
										"odata",
										"v1",
										"Products"
									],
									"query": [
										{
											"key": "$expand",
											"value": "Attributes"
										},
										{
											"key": "$top",
											"value": "1"
										},
										{
											"key": "$filter",
											"value": "(contains(Name,'AUX_SADATA')) and startswith(Name,'S2')\n"
										},
										{
											"key": "$filter",
											"value": "contains(Name,'AUX_SADATA') and startswith(Name,'S2')\n",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "S2_OLQC_Reports",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "01be2b9e-ffc3-4df6-9730-6561f6f5d026",
										"exec": [
											"var jsonDataElements = pm.response.json().value;",
											"pm.test(\"Response time is less than \" +  environment[\"query-timeout\"] + \"ms\", function(){",
											"    pm.expect(pm.response.responseTime).to.be.below(parseInt(environment[\"query-timeout\"]));",
											"});",
											"",
											"pm.test(\"Test OData context\", function(){",
											"    query_string = pm.request.url.getQueryString();",
											"    if(query_string.includes(\"$expand=Attributes\")){",
											"        pm.expect( pm.response.json()['@odata.context']).to.include(\"$metadata#Products(Attributes())\");",
											"    } else{",
											"        pm.expect( pm.response.json()['@odata.context']).to.include(\"$metadata#Products\");",
											"    }",
											"});",
											"",
											"var TRUE = true;",
											"var FALSE = false;",
											"",
											"test_map={};",
											"test_map.platformShortName=function (element) {pm.expect(element.Name).eq('platformShortName');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"SENTINEL-2\"]);};",
											"test_map.platformSerialIdentifier=function (element) {pm.expect(element.Name).eq('platformSerialIdentifier');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"A\",\"B\",\"C\",\"D\",\"_¹\"]);};",
											"test_map.productType=function (element) {pm.expect(element.Name).eq('productType');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');};",
											"test_map.processingDate=function (element) {pm.expect(element.Name).eq('processingDate');pm.expect(element.ValueType).eq('DateTimeOffset');pm.expect(element.Value).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);};",
											"test_map.beginningDateTime=function (element) {pm.expect(element.Name).eq('beginningDateTime');pm.expect(element.ValueType).eq('DateTimeOffset');pm.expect(element.Value).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);};",
											"test_map.endingDateTime=function (element) {pm.expect(element.Name).eq('endingDateTime');pm.expect(element.ValueType).eq('DateTimeOffset');pm.expect(element.Value).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);};",
											"test_map.processingCenter=function (element) {pm.expect(element.Name).eq('processingCenter');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');};",
											"test_map.processorVersion=function (element) {pm.expect(element.Name).eq('processorVersion');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');};",
											"test_map.checklistResult=function (element) {pm.expect(element.Name).eq('checklistResult');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"PASSED\",\"FAILED\",\"N/A\"]);};",
											"test_map.checklistParentId=function (element) {pm.expect(element.Name).eq('checklistParentId');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');};",
											"test_map.checklistName=function (element) {pm.expect(element.Name).eq('checklistName');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');};",
											"test_map.inspectedProduct=function (element) {pm.expect(element.Name).eq('inspectedProduct');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');};",
											"test_map.inspectedProductType=function (element) {pm.expect(element.Name).eq('inspectedProductType');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"MSI_L0__DS\",\"MSI_L1A_DS\",\"MSI_L1B_DS\",\"MSI_L1C_DS\",\"MSI_L2A_DS\",\"MSI_L0__GR\",\"MSI_L1A_GR\",\"MSI_L1B_GR\",\"MSI_L1C_TL\",\"MSI_L2A_TL\"]);};",
											"",
											"test_schema={};",
											"test_schema.platformShortName=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.platformSerialIdentifier=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.productType=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.processingDate=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.beginningDateTime=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.endingDateTime=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.processingCenter=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.processorVersion=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.checklistResult=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.checklistParentId=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.checklistName=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.inspectedProduct=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.inspectedProductType=function (num) {pm.expect(num).to.be.eq(1)};",
											"",
											"            ",
											"properties_map = {};",
											"properties_map.Id=function (element) {pm.expect(element.Id).to.match(/[0-9a-fA-F]{8}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{12}/);};",
											"properties_map.Name=function (element) {pm.expect(element.Name).to.be.a(\"string\");};",
											"properties_map.ContentType=function (element) {pm.expect(element.ContentType).to.be.a(\"string\");};",
											"properties_map.ContentLength=function (element) {pm.expect(element.ContentLength).to.be.a(\"number\");};",
											"properties_map.PublicationDate=function (element) {pm.expect(element.PublicationDate).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);};",
											"properties_map.EvictionDate=function (element) {if(element.EvictionDate){ pm.expect(element.EvictionDate).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d+([+-][0-2]\\d:[0-5]\\d|Z)/); }};",
											"properties_map.Checksum=function (element) {for(i=0; i<element.Checksum.length; i++ ){pm.expect(element.Checksum[i].Algorithm).to.be.oneOf([\"MD5\",\"SHA-1\",\"SHA-256\",\"SHA-512\"]);checksum_algorithm = {'MD5': '[a-fA-F0-9]{32}', 'SHA-1': '[0-9a-f]{5,40}', 'SHA-256': '[A-Fa-f0-9]{64}', 'SHA-512': '[A-Fa-f0-9]{128}'};pm.expect(element.Checksum[i].Value).to.match(new RegExp(checksum_algorithm[element.Checksum[i].Algorithm]));}};",
											"properties_map.ContentDate=function (element) {pm.expect(element.ContentDate[\"Start\"]).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);pm.expect(element.ContentDate[\"End\"]).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);};",
											"properties_map.ProductionType=function (element) {pm.expect(element.ProductionType).to.be.oneOf([\"systematic_production\",\"on-demand default\",\"on-demand non-default\"]);};",
											"properties_map.Footprint=function (element) {if(element.Footprint){ pm.expect(element.Footprint).to.match(/geography'SRID=\\d+;[Polygon|Multipolygon|Point](.*)/); }};",
											"",
											"let schema_seen = {};",
											"",
											"function testSpecific(value, product){",
											"",
											"    if (schema_seen[value.Name]){",
											"        schema_seen[value.Name]++;",
											"    }else{",
											"        schema_seen[value.Name]=1;",
											"    }",
											"",
											"    if (test_map[value.Name]) {",
											"        pm.test(\"Test Attribute \"+value.Name + \" for Product: \"+product.Name+\" - \"+product.Id, function(){test_map[value.Name](value, product)});",
											"    }",
											"    else {",
											"        pm.test.skip(\"Test Attribute \"+value.Name + \" for Product: \"+product.Name+\" - \"+product.Id);",
											"    }",
											"}",
											"function propertySpecific(key, product){",
											"    if (properties_map[key]) {",
											"        pm.test(\"Test Property \"+key+\" for Product: \"+product.Name+\" - \"+product.Id, function(){properties_map[key](product)});",
											"    }",
											"    else {",
											"        pm.test.skip(\"Test Property \"+key+\" for Product: \"+product.Name+\" - \"+product.Id);",
											"    }",
											"}",
											"",
											"for (var counter = 0;  counter  < jsonDataElements.length; counter++){",
											"    var product = jsonDataElements[counter];",
											"    console.log(\"Processing Product: \"+product.Name+\" - \"+product.Id);",
											"",
											"    for (const[key, value] of Object.entries(properties_map)){",
											"        propertySpecific(key, jsonDataElements[counter]);",
											"    }",
											"",
											"    if(\"Attributes\" in jsonDataElements[counter]){",
											"        schema_seen = {};",
											"",
											"        pm.test(\"Test Attributes list\", function(){",
											"            pm.expect(jsonDataElements[counter].Attributes.length).to.be.above(0);",
											"        });",
											"",
											"        jsonDataElements[counter].Attributes.forEach(function(elem){",
											"            testSpecific(elem, jsonDataElements[counter]);",
											"        });",
											"        var product = jsonDataElements[counter];",
											"        for (const[key, value] of Object.entries(test_schema)) {pm.test(\"Schema Attribute \"+key+\" Product \"+product.Name+\" - \"+product.Id, function(){",
											"        if(schema_seen[key] == undefined){",
											"            schema_seen[key] = 0;",
											"        }",
											"        value(schema_seen[key], product)});}",
											"    }",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{service-root-uri}}/odata/v1/Products?$expand=Attributes&$top=1",
									"host": [
										"{{service-root-uri}}"
									],
									"path": [
										"odata",
										"v1",
										"Products"
									],
									"query": [
										{
											"key": "$expand",
											"value": "Attributes"
										},
										{
											"key": "$top",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "S2_HKTM",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0b68b0a7-cd78-45f1-ad8a-77a617e82c02",
										"exec": [
											"var jsonDataElements = pm.response.json().value;",
											"pm.test(\"Response time is less than \" +  environment[\"query-timeout\"] + \"ms\", function(){",
											"    pm.expect(pm.response.responseTime).to.be.below(parseInt(environment[\"query-timeout\"]));",
											"});",
											"",
											"pm.test(\"Test OData context\", function(){",
											"    query_string = pm.request.url.getQueryString();",
											"    if(query_string.includes(\"$expand=Attributes\")){",
											"        pm.expect( pm.response.json()['@odata.context']).to.include(\"$metadata#Products(Attributes())\");",
											"    } else{",
											"        pm.expect( pm.response.json()['@odata.context']).to.include(\"$metadata#Products\");",
											"    }",
											"});",
											"",
											"var TRUE = true;",
											"var FALSE = false;",
											"",
											"test_map={};",
											"test_map.beginningDateTime=function (element) {pm.expect(element.Name).eq('beginningDateTime');pm.expect(element.ValueType).eq('DateTimeOffset');pm.expect(element.Value).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);};",
											"test_map.endingDateTime=function (element) {pm.expect(element.Name).eq('endingDateTime');pm.expect(element.ValueType).eq('DateTimeOffset');pm.expect(element.Value).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);};",
											"test_map.platformShortName=function (element) {pm.expect(element.Name).eq('platformShortName');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"SENTINEL-2\"]);};",
											"test_map.platformSerialIdentifier=function (element) {pm.expect(element.Name).eq('platformSerialIdentifier');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"A\",\"B\",\"C\",\"D\",\"_\"]);};",
											"test_map.orbitNumber=function (element) {pm.expect(element.Name).eq('orbitNumber');pm.expect(element.ValueType).eq('Integer');pm.expect(element.Value).to.be.a(\"number\");};",
											"test_map.lastOrbitNumber=function (element) {pm.expect(element.Name).eq('lastOrbitNumber');pm.expect(element.ValueType).eq('Integer');pm.expect(element.Value).to.be.a(\"number\");};",
											"test_map.relativeOrbitNumber=function (element) {pm.expect(element.Name).eq('relativeOrbitNumber');pm.expect(element.ValueType).eq('Integer');pm.expect(element.Value).to.be.a(\"number\");pm.expect(element.Value).to.match(/([1-9]|[1-8][0-9]|9[0-9]|1[0-3][0-9]|14[0-3])/);};",
											"test_map.processingDate=function (element) {pm.expect(element.Name).eq('processingDate');pm.expect(element.ValueType).eq('DateTimeOffset');pm.expect(element.Value).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);};",
											"test_map.processingCenter=function (element) {pm.expect(element.Name).eq('processingCenter');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');};",
											"test_map.instrumentShortName=function (element) {pm.expect(element.Name).eq('instrumentShortName');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"HKTM\"]);};",
											"test_map.productType=function (element) {pm.expect(element.Name).eq('productType');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"PRD_HKTM__\"]);",
											"",
											"};",
											"",
											"test_schema={};",
											"test_schema.beginningDateTime=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.endingDateTime=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.platformShortName=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.platformSerialIdentifier=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.orbitNumber=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.lastOrbitNumber=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.relativeOrbitNumber=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.processingDate=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.processingCenter=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.instrumentShortName=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.productType=function (num) {pm.expect(num).to.be.eq(1)};",
											"",
											"            ",
											"properties_map = {};",
											"properties_map.Id=function (element) {pm.expect(element.Id).to.match(/[0-9a-fA-F]{8}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{12}/);};",
											"properties_map.Name=function (element) {pm.expect(element.Name).to.be.a(\"string\");};",
											"properties_map.ContentType=function (element) {pm.expect(element.ContentType).to.be.a(\"string\");};",
											"properties_map.ContentLength=function (element) {pm.expect(element.ContentLength).to.be.a(\"number\");};",
											"properties_map.PublicationDate=function (element) {pm.expect(element.PublicationDate).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);};",
											"properties_map.EvictionDate=function (element) {if(element.EvictionDate){ pm.expect(element.EvictionDate).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d+([+-][0-2]\\d:[0-5]\\d|Z)/); }};",
											"properties_map.Checksum=function (element) {for(i=0; i<element.Checksum.length; i++ ){pm.expect(element.Checksum[i].Algorithm).to.be.oneOf([\"MD5\",\"SHA-1\",\"SHA-256\",\"SHA-512\"]);checksum_algorithm = {'MD5': '[a-fA-F0-9]{32}', 'SHA-1': '[0-9a-f]{5,40}', 'SHA-256': '[A-Fa-f0-9]{64}', 'SHA-512': '[A-Fa-f0-9]{128}'};pm.expect(element.Checksum[i].Value).to.match(new RegExp(checksum_algorithm[element.Checksum[i].Algorithm]));}};",
											"properties_map.ContentDate=function (element) {pm.expect(element.ContentDate[\"Start\"]).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);pm.expect(element.ContentDate[\"End\"]).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);};",
											"properties_map.ProductionType=function (element) {pm.expect(element.ProductionType).to.be.oneOf([\"systematic_production\",\"on-demand default\",\"on-demand non-default\"]);};",
											"properties_map.Footprint=function (element) {if(element.Footprint){ pm.expect(element.Footprint).to.match(/geography'SRID=\\d+;[Polygon|Multipolygon|Point](.*)/); }};",
											"",
											"let schema_seen = {};",
											"",
											"function testSpecific(value, product){",
											"",
											"    if (schema_seen[value.Name]){",
											"        schema_seen[value.Name]++;",
											"    }else{",
											"        schema_seen[value.Name]=1;",
											"    }",
											"",
											"    if (test_map[value.Name]) {",
											"        pm.test(\"Test Attribute \"+value.Name + \" for Product: \"+product.Name+\" - \"+product.Id, function(){test_map[value.Name](value, product)});",
											"    }",
											"    else {",
											"        pm.test.skip(\"Test Attribute \"+value.Name + \" for Product: \"+product.Name+\" - \"+product.Id);",
											"    }",
											"}",
											"function propertySpecific(key, product){",
											"    if (properties_map[key]) {",
											"        pm.test(\"Test Property \"+key+\" for Product: \"+product.Name+\" - \"+product.Id, function(){properties_map[key](product)});",
											"    }",
											"    else {",
											"        pm.test.skip(\"Test Property \"+key+\" for Product: \"+product.Name+\" - \"+product.Id);",
											"    }",
											"}",
											"",
											"for (var counter = 0;  counter  < jsonDataElements.length; counter++){",
											"    var product = jsonDataElements[counter];",
											"    console.log(\"Processing Product: \"+product.Name+\" - \"+product.Id);",
											"",
											"    for (const[key, value] of Object.entries(properties_map)){",
											"        propertySpecific(key, jsonDataElements[counter]);",
											"    }",
											"",
											"    if(\"Attributes\" in jsonDataElements[counter]){",
											"        schema_seen = {};",
											"",
											"        pm.test(\"Test Attributes list\", function(){",
											"            pm.expect(jsonDataElements[counter].Attributes.length).to.be.above(0);",
											"        });",
											"",
											"        jsonDataElements[counter].Attributes.forEach(function(elem){",
											"            testSpecific(elem, jsonDataElements[counter]);",
											"        });",
											"        var product = jsonDataElements[counter];",
											"        for (const[key, value] of Object.entries(test_schema)) {pm.test(\"Schema Attribute \"+key+\" Product \"+product.Name+\" - \"+product.Id, function(){",
											"        if(schema_seen[key] == undefined){",
											"            schema_seen[key] = 0;",
											"        }",
											"        value(schema_seen[key], product)});}",
											"    }",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{service-root-uri}}/odata/v1/Products?$expand=Attributes&$top=1&$filter=(contains(Name,'PRD_HKTM__')) and startswith(Name,'S2')\n",
									"host": [
										"{{service-root-uri}}"
									],
									"path": [
										"odata",
										"v1",
										"Products"
									],
									"query": [
										{
											"key": "$expand",
											"value": "Attributes"
										},
										{
											"key": "$top",
											"value": "1"
										},
										{
											"key": "$filter",
											"value": "(contains(Name,'PRD_HKTM__')) and startswith(Name,'S2')\n"
										},
										{
											"key": "$filter",
											"value": "contains(Name,'PRD_HKTM__') and startswith(Name,'S2')\n",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "L0,_L1A,_L1B,_L1C,_L2A_Granule",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "251a9a58-e7c8-45a5-b31e-0ccdb4331715",
										"exec": [
											"var jsonDataElements = pm.response.json().value;",
											"pm.test(\"Response time is less than \" +  environment[\"query-timeout\"] + \"ms\", function(){",
											"    pm.expect(pm.response.responseTime).to.be.below(parseInt(environment[\"query-timeout\"]));",
											"});",
											"",
											"pm.test(\"Test OData context\", function(){",
											"    query_string = pm.request.url.getQueryString();",
											"    if(query_string.includes(\"$expand=Attributes\")){",
											"        pm.expect( pm.response.json()['@odata.context']).to.include(\"$metadata#Products(Attributes())\");",
											"    } else{",
											"        pm.expect( pm.response.json()['@odata.context']).to.include(\"$metadata#Products\");",
											"    }",
											"});",
											"",
											"var TRUE = true;",
											"var FALSE = false;",
											"",
											"test_map={};",
											"test_map.productGroupId=function (element) {pm.expect(element.Name).eq('productGroupId');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');};",
											"test_map.processorVersion=function (element) {pm.expect(element.Name).eq('processorVersion');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');};",
											"test_map.processingDate=function (element) {pm.expect(element.Name).eq('processingDate');pm.expect(element.ValueType).eq('DateTimeOffset');pm.expect(element.Value).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d+([+-][0-2]\\d:[0-5]\\d|Z)/);};",
											"test_map.beginningDateTime=function (element) {pm.expect(element.Name).eq('beginningDateTime');pm.expect(element.ValueType).eq('DateTimeOffset');pm.expect(element.Value).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);};",
											"test_map.endingDateTime=function (element) {pm.expect(element.Name).eq('endingDateTime');pm.expect(element.ValueType).eq('DateTimeOffset');pm.expect(element.Value).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);};",
											"test_map.orbitNumber=function (element) {pm.expect(element.Name).eq('orbitNumber');pm.expect(element.ValueType).eq('Integer');pm.expect(element.Value).to.be.a(\"number\");};",
											"test_map.coordinates=function (element) {pm.expect(element.Name).eq('coordinates');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.match(/(-?\\d+(\\.\\d+)?),\\s*(-?\\d+(\\.\\d+)?)/);};",
											"test_map.qualityStatus=function (element, product) {pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"NOMINAL\",\"DEGRADED\"]);",
											"    var qualityInfo = \"\";",
											"    product.Attributes.forEach(function(el){if(el.Name == \"qualityInfo\"){qualityInfo = el.Value;}});",
											"    if(element.Value == \"NOMINAL\" ){pm.expect(qualityInfo == \"100\");}",
											"    else if(element.Value == \"DEGRADED\"){pm.expect(qualityInfo != \"100\");}",
											"    pm.expect(qualityInfo).to.not.eql(\"\");",
											"};",
											"test_map.productType=function (element) {pm.expect(element.Name).eq('productType');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"MSI_L0__GR\",\"MSI_L1A_GR\",\"MSI_L1B_GR\",\"MSI_L1C_TL\",\"MSI_L2A_TL\"]);",
											"",
											"};",
											"test_map.instrumentShortName=function (element) {pm.expect(element.Name).eq('instrumentShortName');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"MSI\"]);};",
											"test_map.processingCenter=function (element) {pm.expect(element.Name).eq('processingCenter');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"SGS_\",\"MPS_\",\"MTI_\",\"EPA_\",\"MPC_\",\"UPA_\",\"XXXX\",\"VGS2\"]);};",
											"test_map.platformSerialIdentifier=function (element) {pm.expect(element.Name).eq('platformSerialIdentifier');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"A\",\"B\",\"C\",\"D\",\"_\"]);};",
											"test_map.cloudCover=function (element) {pm.expect(element.Name).eq('cloudCover');pm.expect(element.ValueType).eq('Double');pm.expect(element.Value).to.be.a(\"number\");};",
											"test_map.platformShortName=function (element) {pm.expect(element.Name).eq('platformShortName');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"SENTINEL-2\"]);};",
											"test_map.tileId=function (element, product) {",
											"    if(product.Name.includes(\"MSI_L1C_TL\") || product.Name.includes(\"MSI_L2A_TL\")){",
											"        pm.expect(element.Name).eq('tileId');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');    ",
											"    }",
											"};",
											"test_map.illuminationZenithAngle=function (element, product) {",
											"    if(product.Name.includes(\"MSI_L1C_TL\") || product.Name.includes(\"MSI_L2A_TL\")){",
											"        pm.expect(element.Name).eq('illuminationZenithAngle');pm.expect(element.ValueType).eq('Double');pm.expect(element.Value).to.be.a(\"number\");    ",
											"    }",
											"};",
											"test_map.datastripId=function (element) {pm.expect(element.Name).eq('datastripId');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');};",
											"test_map.qualityInfo=function (element, product) {pm.expect(element.Value).to.be.a(\"number\");pm.expect(element.Value).to.be.oneOf([0,1,3,5,9,11,15,19,24,26,30,34,39,43,48,53,59,60,61,64,65,68,71,75,76,78,80,84,86,90,94,100]);};",
											"",
											"test_schema={};",
											"test_schema.productGroupId=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.processorVersion=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.processingDate=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.beginningDateTime=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.endingDateTime=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.orbitNumber=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.coordinates=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.qualityStatus=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.productType=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.instrumentShortName=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.processingCenter=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.platformSerialIdentifier=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.cloudCover=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.platformShortName=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.tileId=function (num, product) {",
											"    if(product.Name.includes(\"MSI_L1C_TL\") || product.Name.includes(\"MSI_L2A_TL\")){",
											"        pm.expect(num).to.be.eq(1)   ",
											"    }",
											"};",
											"test_schema.illuminationZenithAngle=function (num, product) {",
											"    if(product.Name.includes(\"MSI_L1C_TL\") || product.Name.includes(\"MSI_L2A_TL\")){",
											"        pm.expect(num).to.be.eq(1)   ",
											"    }",
											"};",
											"test_schema.datastripId=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.qualityInfo=function (num) {pm.expect(num).to.be.eq(1)};",
											"",
											"            ",
											"properties_map = {};",
											"properties_map.Id=function (element) {pm.expect(element.Id).to.match(/[0-9a-fA-F]{8}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{12}/);};",
											"properties_map.Name=function (element) {pm.expect(element.Name).to.be.a(\"string\");};",
											"properties_map.ContentType=function (element) {pm.expect(element.ContentType).to.be.a(\"string\");};",
											"properties_map.ContentLength=function (element) {pm.expect(element.ContentLength).to.be.a(\"number\");};",
											"properties_map.PublicationDate=function (element) {pm.expect(element.PublicationDate).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);};",
											"properties_map.EvictionDate=function (element) {if(element.EvictionDate){ pm.expect(element.EvictionDate).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d+([+-][0-2]\\d:[0-5]\\d|Z)/); }};",
											"properties_map.Checksum=function (element) {for(i=0; i<element.Checksum.length; i++ ){pm.expect(element.Checksum[i].Algorithm).to.be.oneOf([\"MD5\",\"SHA-1\",\"SHA-256\",\"SHA-512\"]);checksum_algorithm = {'MD5': '[a-fA-F0-9]{32}', 'SHA-1': '[0-9a-f]{5,40}', 'SHA-256': '[A-Fa-f0-9]{64}', 'SHA-512': '[A-Fa-f0-9]{128}'};pm.expect(element.Checksum[i].Value).to.match(new RegExp(checksum_algorithm[element.Checksum[i].Algorithm]));}};",
											"properties_map.ContentDate=function (element) {pm.expect(element.ContentDate[\"Start\"]).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);pm.expect(element.ContentDate[\"End\"]).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);};",
											"properties_map.ProductionType=function (element) {pm.expect(element.ProductionType).to.be.oneOf([\"systematic_production\",\"on-demand default\",\"on-demand non-default\"]);};",
											"properties_map.Footprint=function (element) {if(element.Footprint){ pm.expect(element.Footprint).to.match(/geography'SRID=\\d+;[Polygon|Multipolygon|Point](.*)/); }};",
											"",
											"let schema_seen = {};",
											"",
											"function testSpecific(value, product){",
											"",
											"    if (schema_seen[value.Name]){",
											"        schema_seen[value.Name]++;",
											"    }else{",
											"        schema_seen[value.Name]=1;",
											"    }",
											"",
											"    if (test_map[value.Name]) {",
											"        pm.test(\"Test Attribute \"+value.Name + \" for Product: \"+product.Name+\" - \"+product.Id, function(){test_map[value.Name](value, product)});",
											"    }",
											"    else {",
											"        pm.test.skip(\"Test Attribute \"+value.Name + \" for Product: \"+product.Name+\" - \"+product.Id);",
											"    }",
											"}",
											"function propertySpecific(key, product){",
											"    if (properties_map[key]) {",
											"        pm.test(\"Test Property \"+key+\" for Product: \"+product.Name+\" - \"+product.Id, function(){properties_map[key](product)});",
											"    }",
											"    else {",
											"        pm.test.skip(\"Test Property \"+key+\" for Product: \"+product.Name+\" - \"+product.Id);",
											"    }",
											"}",
											"",
											"for (var counter = 0;  counter  < jsonDataElements.length; counter++){",
											"    var product = jsonDataElements[counter];",
											"    console.log(\"Processing Product: \"+product.Name+\" - \"+product.Id);",
											"",
											"    for (const[key, value] of Object.entries(properties_map)){",
											"        propertySpecific(key, jsonDataElements[counter]);",
											"    }",
											"",
											"    if(\"Attributes\" in jsonDataElements[counter]){",
											"        schema_seen = {};",
											"",
											"        pm.test(\"Test Attributes list\", function(){",
											"            pm.expect(jsonDataElements[counter].Attributes.length).to.be.above(0);",
											"        });",
											"",
											"        jsonDataElements[counter].Attributes.forEach(function(elem){",
											"            testSpecific(elem, jsonDataElements[counter]);",
											"        });",
											"        var product = jsonDataElements[counter];",
											"        for (const[key, value] of Object.entries(test_schema)) {pm.test(\"Schema Attribute \"+key+\" Product \"+product.Name+\" - \"+product.Id, function(){",
											"        if(schema_seen[key] == undefined){",
											"            schema_seen[key] = 0;",
											"        }",
											"        value(schema_seen[key], product)});}",
											"    }",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{service-root-uri}}/odata/v1/Products?$expand=Attributes&$top=1&$filter=(contains(Name,'MSI_L0__GR') or contains(Name,'MSI_L1A_GR') or contains(Name,'MSI_L1B_GR') or contains(Name,'MSI_L1C_TL') or contains(Name,'MSI_L2A_TL')) and startswith(Name,'S2')\n",
									"host": [
										"{{service-root-uri}}"
									],
									"path": [
										"odata",
										"v1",
										"Products"
									],
									"query": [
										{
											"key": "$expand",
											"value": "Attributes"
										},
										{
											"key": "$top",
											"value": "1"
										},
										{
											"key": "$filter",
											"value": "(contains(Name,'MSI_L0__GR') or contains(Name,'MSI_L1A_GR') or contains(Name,'MSI_L1B_GR') or contains(Name,'MSI_L1C_TL') or contains(Name,'MSI_L2A_TL')) and startswith(Name,'S2')\n"
										},
										{
											"key": "$filter",
											"value": "contains(Name,'MSI_L0__GR') and startswith(Name,'S2')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'MSI_L1A_GR') and startswith(Name,'S2')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'MSI_L1B_GR') and startswith(Name,'S2')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'MSI_L1C_TL') and startswith(Name,'S2')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'MSI_L2A_TL') and startswith(Name,'S2')\n",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "S2_AUX",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "24a41ba5-f48b-4be0-92c9-0a63688eea16",
										"exec": [
											"var jsonDataElements = pm.response.json().value;",
											"pm.test(\"Response time is less than \" +  environment[\"query-timeout\"] + \"ms\", function(){",
											"    pm.expect(pm.response.responseTime).to.be.below(parseInt(environment[\"query-timeout\"]));",
											"});",
											"",
											"pm.test(\"Test OData context\", function(){",
											"    query_string = pm.request.url.getQueryString();",
											"    if(query_string.includes(\"$expand=Attributes\")){",
											"        pm.expect( pm.response.json()['@odata.context']).to.include(\"$metadata#Products(Attributes())\");",
											"    } else{",
											"        pm.expect( pm.response.json()['@odata.context']).to.include(\"$metadata#Products\");",
											"    }",
											"});",
											"",
											"var TRUE = true;",
											"var FALSE = false;",
											"",
											"test_map={};",
											"test_map.platformShortName=function (element, product) {",
											"    if(product.Name.includes(\"AUX_PREORB\") || product.Name.includes(\"AUX_RESORB\") || product.Name.includes(\"GIP_\")){",
											"        pm.expect(element.Name).eq('platformShortName');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"SENTINEL-2\"]);    ",
											"    }",
											"};",
											"test_map.platformSerialIdentifier=function (element, product) {",
											"    if(product.Name.includes(\"AUX_PREORB\") || product.Name.includes(\"AUX_RESORB\") || product.Name.includes(\"GIP_\")){",
											"        pm.expect(element.Name).eq('platformSerialIdentifier');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"A\",\"B\",\"C\",\"D\",\"_¹\"]);    ",
											"    }",
											"};",
											"test_map.productType=function (element, product) {pm.expect(element.Name).eq('productType');pm.expect(element.ValueType).eq('String');",
											"    pm.expect(element.Value).to.be.a('string');",
											"    var auxWithBand = [\"GIP_VIEDIR\", \"GIP_R2EQOG\", \"GIP_R2DEFI\", \"GIP_R2WAFI\", \"GIP_R2L2NC\", \"GIP_R2DENT\", \"GIP_R2DECT\", \"GIP_R2EOB2\"];",
											"    var productType_prefix = element.Value.split(\"_\")[0] + \"_\" + element.Value.split(\"_\")[1];",
											"",
											"    if(auxWithBand.includes(productType_prefix)){",
											"        var band = product.Name.split(\".TGZ\")[0].split(\"_\").pop();",
											"        var correctProductType = productType_prefix + \"_\" + band;",
											"        pm.expect(element.Value).to.be.eq(correctProductType);",
											"    } else {",
											"        pm.expect(element.Value).to.be.oneOf([\"AUX_ECMWFD\",\"AUX_PREORB\",\"AUX_RESORB\",\"AUX_UT1UTC\",\"GIP_ATMIMA\",\"GIP_ATMSAD\",\"GIP_DATATI\",\"GIP_LREXTR\",\"GIP_INVLOC\",\"GIP_VIEDIR\",\"GIP_SPAMOD\",\"GIP_BLINDP\",\"GIP_CLOINV\",\"GIP_PRDLOC\",\"GIP_R2PARA\",\"GIP_R2SWIR\",\"GIP_R2EQOG\",\"GIP_R2DEPI\",\"GIP_R2DEFI\",\"GIP_R2WAFI\",\"GIP_R2L2NC\",\"GIP_R2DENT\",\"GIP_R2DECT\",\"GIP_R2NOMO\",\"GIP_R2ABCA\",\"GIP_R2BINN\",\"GIP_R2CRCO\",\"GIP_G2PARA\",\"GIP_G2PARE\",\"GIP_EARMOD\",\"GIP_GEOPAR\",\"GIP_INTDET\",\"GIP_TILPAR\",\"GIP_RESPAR\",\"GIP_MASPAR\",\"GIP_JP2KPA\",\"GIP_ECMWFP\",\"GIP_DECOMP\",\"GIP_OLQCPA\",\"GIP_PROBAS\",\"GIP_CONVER\",\"GIP_R2EOB2\",\"GIP_L2ACAC\",\"GIP_L2ACSC\",\"GIP_PROBA2\"]);",
											"    }",
											"",
											"",
											"};",
											"test_map.beginningDateTime=function (element) {pm.expect(element.Name).eq('beginningDateTime');pm.expect(element.ValueType).eq('DateTimeOffset');pm.expect(element.Value).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);};",
											"test_map.endingDateTime=function (element) {pm.expect(element.Name).eq('endingDateTime');pm.expect(element.ValueType).eq('DateTimeOffset');pm.expect(element.Value).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);};",
											"test_map.processingCenter=function (element) {pm.expect(element.Name).eq('processingCenter');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');};",
											"test_map.processorVersion=function (element) {pm.expect(element.Name).eq('processorVersion');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');};",
											"test_map.processingDate=function (element) {pm.expect(element.Name).eq('processingDate');pm.expect(element.ValueType).eq('DateTimeOffset');pm.expect(element.Value).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);};",
											"",
											"test_schema={};",
											"test_schema.platformShortName=function (num, product) {",
											"    if(product.Name.includes(\"AUX_PREORB\") || product.Name.includes(\"AUX_RESORB\") || product.Name.includes(\"GIP_\")){",
											"        pm.expect(num).to.be.eq(1)    ",
											"    }",
											"};",
											"test_schema.platformSerialIdentifier=function (num, product) {",
											"    if(product.Name.includes(\"AUX_PREORB\") || product.Name.includes(\"AUX_RESORB\") || product.Name.includes(\"GIP_\")){",
											"        pm.expect(num).to.be.eq(1)    ",
											"    }",
											"};",
											"test_schema.productType=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.beginningDateTime=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.endingDateTime=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.processingCenter=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.processorVersion=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.processingDate=function (num) {pm.expect(num).to.be.eq(1)};",
											"",
											"            ",
											"properties_map = {};",
											"properties_map.Id=function (element) {pm.expect(element.Id).to.match(/[0-9a-fA-F]{8}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{12}/);};",
											"properties_map.Name=function (element) {pm.expect(element.Name).to.be.a(\"string\");};",
											"properties_map.ContentType=function (element) {pm.expect(element.ContentType).to.be.a(\"string\");};",
											"properties_map.ContentLength=function (element) {pm.expect(element.ContentLength).to.be.a(\"number\");};",
											"properties_map.PublicationDate=function (element) {pm.expect(element.PublicationDate).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);};",
											"properties_map.EvictionDate=function (element) {if(element.EvictionDate){ pm.expect(element.EvictionDate).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d+([+-][0-2]\\d:[0-5]\\d|Z)/); }};",
											"properties_map.Checksum=function (element) {for(i=0; i<element.Checksum.length; i++ ){pm.expect(element.Checksum[i].Algorithm).to.be.oneOf([\"MD5\",\"SHA-1\",\"SHA-256\",\"SHA-512\"]);checksum_algorithm = {'MD5': '[a-fA-F0-9]{32}', 'SHA-1': '[0-9a-f]{5,40}', 'SHA-256': '[A-Fa-f0-9]{64}', 'SHA-512': '[A-Fa-f0-9]{128}'};pm.expect(element.Checksum[i].Value).to.match(new RegExp(checksum_algorithm[element.Checksum[i].Algorithm]));}};",
											"properties_map.ContentDate=function (element) {pm.expect(element.ContentDate[\"Start\"]).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);pm.expect(element.ContentDate[\"End\"]).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);};",
											"properties_map.ProductionType=function (element) {pm.expect(element.ProductionType).to.be.oneOf([\"systematic_production\",\"on-demand default\",\"on-demand non-default\"]);};",
											"properties_map.Footprint=function (element) {if(element.Footprint){ pm.expect(element.Footprint).to.match(/geography'SRID=\\d+;[Polygon|Multipolygon|Point](.*)/); }};",
											"",
											"let schema_seen = {};",
											"",
											"function testSpecific(value, product){",
											"",
											"    if (schema_seen[value.Name]){",
											"        schema_seen[value.Name]++;",
											"    }else{",
											"        schema_seen[value.Name]=1;",
											"    }",
											"",
											"    if (test_map[value.Name]) {",
											"        pm.test(\"Test Attribute \"+value.Name + \" for Product: \"+product.Name+\" - \"+product.Id, function(){test_map[value.Name](value, product)});",
											"    }",
											"    else {",
											"        pm.test.skip(\"Test Attribute \"+value.Name + \" for Product: \"+product.Name+\" - \"+product.Id);",
											"    }",
											"}",
											"function propertySpecific(key, product){",
											"    if (properties_map[key]) {",
											"        pm.test(\"Test Property \"+key+\" for Product: \"+product.Name+\" - \"+product.Id, function(){properties_map[key](product)});",
											"    }",
											"    else {",
											"        pm.test.skip(\"Test Property \"+key+\" for Product: \"+product.Name+\" - \"+product.Id);",
											"    }",
											"}",
											"",
											"for (var counter = 0;  counter  < jsonDataElements.length; counter++){",
											"    var product = jsonDataElements[counter];",
											"    console.log(\"Processing Product: \"+product.Name+\" - \"+product.Id);",
											"",
											"    for (const[key, value] of Object.entries(properties_map)){",
											"        propertySpecific(key, jsonDataElements[counter]);",
											"    }",
											"",
											"    if(\"Attributes\" in jsonDataElements[counter]){",
											"        schema_seen = {};",
											"",
											"        pm.test(\"Test Attributes list\", function(){",
											"            pm.expect(jsonDataElements[counter].Attributes.length).to.be.above(0);",
											"        });",
											"",
											"        jsonDataElements[counter].Attributes.forEach(function(elem){",
											"            testSpecific(elem, jsonDataElements[counter]);",
											"        });",
											"        var product = jsonDataElements[counter];",
											"        for (const[key, value] of Object.entries(test_schema)) {pm.test(\"Schema Attribute \"+key+\" Product \"+product.Name+\" - \"+product.Id, function(){",
											"        if(schema_seen[key] == undefined){",
											"            schema_seen[key] = 0;",
											"        }",
											"        value(schema_seen[key], product)});}",
											"    }",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{service-root-uri}}/odata/v1/Products?$expand=Attributes&$top=1&$filter=(contains(Name,'AUX_ECMWFD') or contains(Name,'AUX_PREORB') or contains(Name,'AUX_RESORB') or contains(Name,'AUX_UT1UTC') or contains(Name,'GIP_ATMIMA') or contains(Name,'GIP_ATMSAD') or contains(Name,'GIP_DATATI') or contains(Name,'GIP_LREXTR') or contains(Name,'GIP_INVLOC') or contains(Name,'GIP_VIEDIR') or contains(Name,'GIP_SPAMOD') or contains(Name,'GIP_BLINDP') or contains(Name,'GIP_CLOINV') or contains(Name,'GIP_PRDLOC') or contains(Name,'GIP_R2PARA') or contains(Name,'GIP_R2SWIR') or contains(Name,'GIP_R2EQOG') or contains(Name,'GIP_R2DEPI') or contains(Name,'GIP_R2DEFI') or contains(Name,'GIP_R2WAFI') or contains(Name,'GIP_R2L2NC') or contains(Name,'GIP_R2DENT') or contains(Name,'GIP_R2DECT') or contains(Name,'GIP_R2NOMO') or contains(Name,'GIP_R2ABCA') or contains(Name,'GIP_R2BINN') or contains(Name,'GIP_R2CRCO') or contains(Name,'GIP_G2PARA') or contains(Name,'GIP_G2PARE') or contains(Name,'GIP_EARMOD') or contains(Name,'GIP_GEOPAR') or contains(Name,'GIP_INTDET') or contains(Name,'GIP_TILPAR') or contains(Name,'GIP_RESPAR') or contains(Name,'GIP_MASPAR') or contains(Name,'GIP_JP2KPA') or contains(Name,'GIP_ECMWFP') or contains(Name,'GIP_DECOMP') or contains(Name,'GIP_OLQCPA') or contains(Name,'GIP_PROBAS') or contains(Name,'GIP_CONVER') or contains(Name,'GIP_R2EOB2') or contains(Name,'GIP_L2ACAC') or contains(Name,'GIP_L2ACSC') or contains(Name,'GIP_PROBA2')) and startswith(Name,'S2')\n",
									"host": [
										"{{service-root-uri}}"
									],
									"path": [
										"odata",
										"v1",
										"Products"
									],
									"query": [
										{
											"key": "$expand",
											"value": "Attributes"
										},
										{
											"key": "$top",
											"value": "1"
										},
										{
											"key": "$filter",
											"value": "(contains(Name,'AUX_ECMWFD') or contains(Name,'AUX_PREORB') or contains(Name,'AUX_RESORB') or contains(Name,'AUX_UT1UTC') or contains(Name,'GIP_ATMIMA') or contains(Name,'GIP_ATMSAD') or contains(Name,'GIP_DATATI') or contains(Name,'GIP_LREXTR') or contains(Name,'GIP_INVLOC') or contains(Name,'GIP_VIEDIR') or contains(Name,'GIP_SPAMOD') or contains(Name,'GIP_BLINDP') or contains(Name,'GIP_CLOINV') or contains(Name,'GIP_PRDLOC') or contains(Name,'GIP_R2PARA') or contains(Name,'GIP_R2SWIR') or contains(Name,'GIP_R2EQOG') or contains(Name,'GIP_R2DEPI') or contains(Name,'GIP_R2DEFI') or contains(Name,'GIP_R2WAFI') or contains(Name,'GIP_R2L2NC') or contains(Name,'GIP_R2DENT') or contains(Name,'GIP_R2DECT') or contains(Name,'GIP_R2NOMO') or contains(Name,'GIP_R2ABCA') or contains(Name,'GIP_R2BINN') or contains(Name,'GIP_R2CRCO') or contains(Name,'GIP_G2PARA') or contains(Name,'GIP_G2PARE') or contains(Name,'GIP_EARMOD') or contains(Name,'GIP_GEOPAR') or contains(Name,'GIP_INTDET') or contains(Name,'GIP_TILPAR') or contains(Name,'GIP_RESPAR') or contains(Name,'GIP_MASPAR') or contains(Name,'GIP_JP2KPA') or contains(Name,'GIP_ECMWFP') or contains(Name,'GIP_DECOMP') or contains(Name,'GIP_OLQCPA') or contains(Name,'GIP_PROBAS') or contains(Name,'GIP_CONVER') or contains(Name,'GIP_R2EOB2') or contains(Name,'GIP_L2ACAC') or contains(Name,'GIP_L2ACSC') or contains(Name,'GIP_PROBA2')) and startswith(Name,'S2')\n"
										},
										{
											"key": "$filter",
											"value": "contains(Name,'AUX_ECMWFD') and startswith(Name,'S2')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'AUX_PREORB') and startswith(Name,'S2')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'AUX_RESORB') and startswith(Name,'S2')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'AUX_UT1UTC') and startswith(Name,'S2')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'GIP_ATMIMA') and startswith(Name,'S2')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'GIP_ATMSAD') and startswith(Name,'S2')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'GIP_DATATI') and startswith(Name,'S2')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'GIP_LREXTR') and startswith(Name,'S2')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'GIP_INVLOC') and startswith(Name,'S2')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'GIP_VIEDIR') and startswith(Name,'S2')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'GIP_SPAMOD') and startswith(Name,'S2')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'GIP_BLINDP') and startswith(Name,'S2')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'GIP_CLOINV') and startswith(Name,'S2')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'GIP_PRDLOC') and startswith(Name,'S2')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'GIP_R2PARA') and startswith(Name,'S2')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'GIP_R2SWIR') and startswith(Name,'S2')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'GIP_R2EQOG') and startswith(Name,'S2')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'GIP_R2DEPI') and startswith(Name,'S2')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'GIP_R2DEFI') and startswith(Name,'S2')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'GIP_R2WAFI') and startswith(Name,'S2')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'GIP_R2L2NC') and startswith(Name,'S2')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'GIP_R2DENT') and startswith(Name,'S2')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'GIP_R2DECT') and startswith(Name,'S2')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'GIP_R2NOMO') and startswith(Name,'S2')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'GIP_R2ABCA') and startswith(Name,'S2')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'GIP_R2BINN') and startswith(Name,'S2')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'GIP_R2CRCO') and startswith(Name,'S2')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'GIP_G2PARA') and startswith(Name,'S2')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'GIP_G2PARE') and startswith(Name,'S2')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'GIP_EARMOD') and startswith(Name,'S2')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'GIP_GEOPAR') and startswith(Name,'S2')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'GIP_INTDET') and startswith(Name,'S2')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'GIP_TILPAR') and startswith(Name,'S2')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'GIP_RESPAR') and startswith(Name,'S2')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'GIP_MASPAR') and startswith(Name,'S2')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'GIP_JP2KPA') and startswith(Name,'S2')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'GIP_ECMWFP') and startswith(Name,'S2')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'GIP_DECOMP') and startswith(Name,'S2')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'GIP_OLQCPA') and startswith(Name,'S2')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'GIP_PROBAS') and startswith(Name,'S2')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'GIP_CONVER') and startswith(Name,'S2')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'GIP_R2EOB2') and startswith(Name,'S2')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'GIP_L2ACAC') and startswith(Name,'S2')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'GIP_L2ACSC') and startswith(Name,'S2')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'GIP_PROBA2') and startswith(Name,'S2')\n",
											"disabled": true
										}
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "POD",
			"item": [
				{
					"name": "LTA",
					"item": [
						{
							"name": "GNSS_L1b_Files",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f3f4a994-074d-4bf4-9102-d271ba415f11",
										"exec": [
											"var jsonDataElements = pm.response.json().value;",
											"pm.test(\"Response time is less than \" +  environment[\"query-timeout\"] + \"ms\", function(){",
											"    pm.expect(pm.response.responseTime).to.be.below(parseInt(environment[\"query-timeout\"]));",
											"});",
											"",
											"pm.test(\"Test OData context\", function(){",
											"    query_string = pm.request.url.getQueryString();",
											"    if(query_string.includes(\"$expand=Attributes\")){",
											"        pm.expect( pm.response.json()['@odata.context']).to.include(\"$metadata#Products(Attributes())\");",
											"    } else{",
											"        pm.expect( pm.response.json()['@odata.context']).to.include(\"$metadata#Products\");",
											"    }",
											"});",
											"",
											"var TRUE = true;",
											"var FALSE = false;",
											"",
											"test_map={};",
											"test_map.platformShortName=function (element) {pm.expect(element.Name).eq('platformShortName');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"SENTINEL-1\",\"SENTINEL-2\",\"SENTINEL-3\"]);};",
											"test_map.platformSerialIdentifier=function (element) {pm.expect(element.Name).eq('platformSerialIdentifier');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"A\",\"B\",\"C\",\"D\",\"_¹\"]);};",
											"test_map.productType=function (element) {pm.expect(element.Name).eq('productType');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"AUX_GNSSRX\",\"AUX_GNSSRD\",\"AUX_GNSRXD\"]);",
											"",
											"};",
											"test_map.beginningDateTime=function (element) {pm.expect(element.Name).eq('beginningDateTime');pm.expect(element.ValueType).eq('DateTimeOffset');pm.expect(element.Value).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);};",
											"test_map.endingDateTime=function (element) {pm.expect(element.Name).eq('endingDateTime');pm.expect(element.ValueType).eq('DateTimeOffset');pm.expect(element.Value).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);};",
											"test_map.processingCenter=function (element) {pm.expect(element.Name).eq('processingCenter');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');};",
											"test_map.processorVersion=function (element) {pm.expect(element.Name).eq('processorVersion');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');};",
											"test_map.processingDate=function (element) {pm.expect(element.Name).eq('processingDate');pm.expect(element.ValueType).eq('DateTimeOffset');pm.expect(element.Value).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);};",
											"",
											"test_schema={};",
											"test_schema.platformShortName=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.platformSerialIdentifier=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.productType=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.beginningDateTime=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.endingDateTime=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.processingCenter=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.processorVersion=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.processingDate=function (num) {pm.expect(num).to.be.eq(1)};",
											"",
											"            ",
											"properties_map = {};",
											"properties_map.Id=function (element) {pm.expect(element.Id).to.match(/[0-9a-fA-F]{8}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{12}/);};",
											"properties_map.Name=function (element) {pm.expect(element.Name).to.be.a(\"string\");};",
											"properties_map.ContentType=function (element) {pm.expect(element.ContentType).to.be.a(\"string\");};",
											"properties_map.ContentLength=function (element) {pm.expect(element.ContentLength).to.be.a(\"number\");};",
											"properties_map.OriginDate=function (element) {pm.expect(element.OriginDate).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d+([+-][0-2]\\d:[0-5]\\d|Z)/);};",
											"properties_map.PublicationDate=function (element) {pm.expect(element.PublicationDate).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);};",
											"properties_map.ModificationDate=function (element) {pm.expect(element.ModificationDate).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d+([+-][0-2]\\d:[0-5]\\d|Z)/);};",
											"properties_map.Online=function (element) {pm.expect(element.Online).to.be.oneOf([TRUE,FALSE,true,false]);};",
											"properties_map.EvictionDate=function (element) {if(element.EvictionDate){ pm.expect(element.EvictionDate).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d+([+-][0-2]\\d:[0-5]\\d|Z)/); }};",
											"properties_map.Checksum=function (element) {for(i=0; i<element.Checksum.length; i++ ){pm.expect(element.Checksum[i].Algorithm).to.be.oneOf([\"MD5\",\"SHA-1\",\"SHA-256\",\"SHA-512\"]);checksum_algorithm = {'MD5': '[a-fA-F0-9]{32}', 'SHA-1': '[0-9a-f]{5,40}', 'SHA-256': '[A-Fa-f0-9]{64}', 'SHA-512': '[A-Fa-f0-9]{128}'};pm.expect(element.Checksum[i].Value).to.match(new RegExp(checksum_algorithm[element.Checksum[i].Algorithm]));}};",
											"properties_map.ContentDate=function (element) {pm.expect(element.ContentDate[\"Start\"]).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);pm.expect(element.ContentDate[\"End\"]).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);};",
											"properties_map.Footprint=function (element) {if(element.Footprint){ pm.expect(element.Footprint).to.match(/geography'SRID=\\d+;[Polygon|Multipolygon|Point](.*)/); }};",
											"",
											"let schema_seen = {};",
											"",
											"function testSpecific(value, product){",
											"",
											"    if (schema_seen[value.Name]){",
											"        schema_seen[value.Name]++;",
											"    }else{",
											"        schema_seen[value.Name]=1;",
											"    }",
											"",
											"    if (test_map[value.Name]) {",
											"        pm.test(\"Test Attribute \"+value.Name + \" for Product: \"+product.Name+\" - \"+product.Id, function(){test_map[value.Name](value, product)});",
											"    }",
											"    else {",
											"        pm.test.skip(\"Test Attribute \"+value.Name + \" for Product: \"+product.Name+\" - \"+product.Id);",
											"    }",
											"}",
											"function propertySpecific(key, product){",
											"    if (properties_map[key]) {",
											"        pm.test(\"Test Property \"+key+\" for Product: \"+product.Name+\" - \"+product.Id, function(){properties_map[key](product)});",
											"    }",
											"    else {",
											"        pm.test.skip(\"Test Property \"+key+\" for Product: \"+product.Name+\" - \"+product.Id);",
											"    }",
											"}",
											"",
											"for (var counter = 0;  counter  < jsonDataElements.length; counter++){",
											"    var product = jsonDataElements[counter];",
											"    console.log(\"Processing Product: \"+product.Name+\" - \"+product.Id);",
											"",
											"    for (const[key, value] of Object.entries(properties_map)){",
											"        propertySpecific(key, jsonDataElements[counter]);",
											"    }",
											"",
											"    if(\"Attributes\" in jsonDataElements[counter]){",
											"        schema_seen = {};",
											"",
											"        pm.test(\"Test Attributes list\", function(){",
											"            pm.expect(jsonDataElements[counter].Attributes.length).to.be.above(0);",
											"        });",
											"",
											"        jsonDataElements[counter].Attributes.forEach(function(elem){",
											"            testSpecific(elem, jsonDataElements[counter]);",
											"        });",
											"        var product = jsonDataElements[counter];",
											"        for (const[key, value] of Object.entries(test_schema)) {pm.test(\"Schema Attribute \"+key+\" Product \"+product.Name+\" - \"+product.Id, function(){",
											"        if(schema_seen[key] == undefined){",
											"            schema_seen[key] = 0;",
											"        }",
											"        value(schema_seen[key], product)});}",
											"    }",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{service-root-uri}}/odata/v1/Products?$expand=Attributes&$top=1&$filter=(contains(Name,'AUX_GNSSRX') or contains(Name,'AUX_GNSSRD') or contains(Name,'AUX_GNSRXD'))\n",
									"host": [
										"{{service-root-uri}}"
									],
									"path": [
										"odata",
										"v1",
										"Products"
									],
									"query": [
										{
											"key": "$expand",
											"value": "Attributes"
										},
										{
											"key": "$top",
											"value": "1"
										},
										{
											"key": "$filter",
											"value": "(contains(Name,'AUX_GNSSRX') or contains(Name,'AUX_GNSSRD') or contains(Name,'AUX_GNSRXD'))\n"
										},
										{
											"key": "$filter",
											"value": "contains(Name,'AUX_GNSSRX') and startswith(Name,'S')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'AUX_GNSSRD') and startswith(Name,'S')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'AUX_GNSRXD') and startswith(Name,'S')\n",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "POD_Orbit_Files",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b68e5911-690c-498d-84af-4cadd120cc9b",
										"exec": [
											"var jsonDataElements = pm.response.json().value;",
											"pm.test(\"Response time is less than \" +  environment[\"query-timeout\"] + \"ms\", function(){",
											"    pm.expect(pm.response.responseTime).to.be.below(parseInt(environment[\"query-timeout\"]));",
											"});",
											"",
											"pm.test(\"Test OData context\", function(){",
											"    query_string = pm.request.url.getQueryString();",
											"    if(query_string.includes(\"$expand=Attributes\")){",
											"        pm.expect( pm.response.json()['@odata.context']).to.include(\"$metadata#Products(Attributes())\");",
											"    } else{",
											"        pm.expect( pm.response.json()['@odata.context']).to.include(\"$metadata#Products\");",
											"    }",
											"});",
											"",
											"var TRUE = true;",
											"var FALSE = false;",
											"",
											"test_map={};",
											"test_map.platformShortName=function (element) {pm.expect(element.Name).eq('platformShortName');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"SENTINEL-1\",\"SENTINEL-2\",\"SENTINEL-3\"]);};",
											"test_map.platformSerialIdentifier=function (element) {pm.expect(element.Name).eq('platformSerialIdentifier');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"A\",\"B\",\"C\",\"D\",\"_¹\"]);};",
											"test_map.productType=function (element) {pm.expect(element.Name).eq('productType');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"AUX_PREORB\",\"AUX_RESORB\",\"AUX_MOEORB\",\"AUX_POEORB\",\"SR___ROE_AX\"]);",
											"",
											"};",
											"test_map.beginningDateTime=function (element) {pm.expect(element.Name).eq('beginningDateTime');pm.expect(element.ValueType).eq('DateTimeOffset');pm.expect(element.Value).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);};",
											"test_map.endingDateTime=function (element) {pm.expect(element.Name).eq('endingDateTime');pm.expect(element.ValueType).eq('DateTimeOffset');pm.expect(element.Value).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);};",
											"test_map.processingCenter=function (element) {pm.expect(element.Name).eq('processingCenter');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');};",
											"test_map.processorVersion=function (element) {pm.expect(element.Name).eq('processorVersion');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');};",
											"test_map.processingDate=function (element) {pm.expect(element.Name).eq('processingDate');pm.expect(element.ValueType).eq('DateTimeOffset');pm.expect(element.Value).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);};",
											"",
											"test_schema={};",
											"test_schema.platformShortName=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.platformSerialIdentifier=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.productType=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.beginningDateTime=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.endingDateTime=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.processingCenter=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.processorVersion=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.processingDate=function (num) {pm.expect(num).to.be.eq(1)};",
											"",
											"            ",
											"properties_map = {};",
											"properties_map.Id=function (element) {pm.expect(element.Id).to.match(/[0-9a-fA-F]{8}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{12}/);};",
											"properties_map.Name=function (element) {pm.expect(element.Name).to.be.a(\"string\");};",
											"properties_map.ContentType=function (element) {pm.expect(element.ContentType).to.be.a(\"string\");};",
											"properties_map.ContentLength=function (element) {pm.expect(element.ContentLength).to.be.a(\"number\");};",
											"properties_map.OriginDate=function (element) {pm.expect(element.OriginDate).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d+([+-][0-2]\\d:[0-5]\\d|Z)/);};",
											"properties_map.PublicationDate=function (element) {pm.expect(element.PublicationDate).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);};",
											"properties_map.ModificationDate=function (element) {pm.expect(element.ModificationDate).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d+([+-][0-2]\\d:[0-5]\\d|Z)/);};",
											"properties_map.Online=function (element) {pm.expect(element.Online).to.be.oneOf([TRUE,FALSE,true,false]);};",
											"properties_map.EvictionDate=function (element) {if(element.EvictionDate){ pm.expect(element.EvictionDate).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d+([+-][0-2]\\d:[0-5]\\d|Z)/); }};",
											"properties_map.Checksum=function (element) {for(i=0; i<element.Checksum.length; i++ ){pm.expect(element.Checksum[i].Algorithm).to.be.oneOf([\"MD5\",\"SHA-1\",\"SHA-256\",\"SHA-512\"]);checksum_algorithm = {'MD5': '[a-fA-F0-9]{32}', 'SHA-1': '[0-9a-f]{5,40}', 'SHA-256': '[A-Fa-f0-9]{64}', 'SHA-512': '[A-Fa-f0-9]{128}'};pm.expect(element.Checksum[i].Value).to.match(new RegExp(checksum_algorithm[element.Checksum[i].Algorithm]));}};",
											"properties_map.ContentDate=function (element) {pm.expect(element.ContentDate[\"Start\"]).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);pm.expect(element.ContentDate[\"End\"]).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);};",
											"properties_map.Footprint=function (element) {if(element.Footprint){ pm.expect(element.Footprint).to.match(/geography'SRID=\\d+;[Polygon|Multipolygon|Point](.*)/); }};",
											"",
											"let schema_seen = {};",
											"",
											"function testSpecific(value, product){",
											"",
											"    if (schema_seen[value.Name]){",
											"        schema_seen[value.Name]++;",
											"    }else{",
											"        schema_seen[value.Name]=1;",
											"    }",
											"",
											"    if (test_map[value.Name]) {",
											"        pm.test(\"Test Attribute \"+value.Name + \" for Product: \"+product.Name+\" - \"+product.Id, function(){test_map[value.Name](value, product)});",
											"    }",
											"    else {",
											"        pm.test.skip(\"Test Attribute \"+value.Name + \" for Product: \"+product.Name+\" - \"+product.Id);",
											"    }",
											"}",
											"function propertySpecific(key, product){",
											"    if (properties_map[key]) {",
											"        pm.test(\"Test Property \"+key+\" for Product: \"+product.Name+\" - \"+product.Id, function(){properties_map[key](product)});",
											"    }",
											"    else {",
											"        pm.test.skip(\"Test Property \"+key+\" for Product: \"+product.Name+\" - \"+product.Id);",
											"    }",
											"}",
											"",
											"for (var counter = 0;  counter  < jsonDataElements.length; counter++){",
											"    var product = jsonDataElements[counter];",
											"    console.log(\"Processing Product: \"+product.Name+\" - \"+product.Id);",
											"",
											"    for (const[key, value] of Object.entries(properties_map)){",
											"        propertySpecific(key, jsonDataElements[counter]);",
											"    }",
											"",
											"    if(\"Attributes\" in jsonDataElements[counter]){",
											"        schema_seen = {};",
											"",
											"        pm.test(\"Test Attributes list\", function(){",
											"            pm.expect(jsonDataElements[counter].Attributes.length).to.be.above(0);",
											"        });",
											"",
											"        jsonDataElements[counter].Attributes.forEach(function(elem){",
											"            testSpecific(elem, jsonDataElements[counter]);",
											"        });",
											"        var product = jsonDataElements[counter];",
											"        for (const[key, value] of Object.entries(test_schema)) {pm.test(\"Schema Attribute \"+key+\" Product \"+product.Name+\" - \"+product.Id, function(){",
											"        if(schema_seen[key] == undefined){",
											"            schema_seen[key] = 0;",
											"        }",
											"        value(schema_seen[key], product)});}",
											"    }",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{service-root-uri}}/odata/v1/Products?$expand=Attributes&$top=1&$filter=(contains(Name,'AUX_PREORB') or contains(Name,'AUX_RESORB') or contains(Name,'AUX_MOEORB') or contains(Name,'AUX_POEORB') or contains(Name,'SR___ROE_AX'))\n",
									"host": [
										"{{service-root-uri}}"
									],
									"path": [
										"odata",
										"v1",
										"Products"
									],
									"query": [
										{
											"key": "$expand",
											"value": "Attributes"
										},
										{
											"key": "$top",
											"value": "1"
										},
										{
											"key": "$filter",
											"value": "(contains(Name,'AUX_PREORB') or contains(Name,'AUX_RESORB') or contains(Name,'AUX_MOEORB') or contains(Name,'AUX_POEORB') or contains(Name,'SR___ROE_AX'))\n"
										},
										{
											"key": "$filter",
											"value": "contains(Name,'AUX_PREORB') and startswith(Name,'S')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'AUX_RESORB') and startswith(Name,'S')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'AUX_MOEORB') and startswith(Name,'S')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'AUX_POEORB') and startswith(Name,'S')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR___ROE_AX') and startswith(Name,'S')\n",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Auxiliary_Files_for_Sentinels",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "dc893dc6-89e9-4f27-9177-adc819080b35",
										"exec": [
											"var jsonDataElements = pm.response.json().value;",
											"pm.test(\"Response time is less than \" +  environment[\"query-timeout\"] + \"ms\", function(){",
											"    pm.expect(pm.response.responseTime).to.be.below(parseInt(environment[\"query-timeout\"]));",
											"});",
											"",
											"pm.test(\"Test OData context\", function(){",
											"    query_string = pm.request.url.getQueryString();",
											"    if(query_string.includes(\"$expand=Attributes\")){",
											"        pm.expect( pm.response.json()['@odata.context']).to.include(\"$metadata#Products(Attributes())\");",
											"    } else{",
											"        pm.expect( pm.response.json()['@odata.context']).to.include(\"$metadata#Products\");",
											"    }",
											"});",
											"",
											"var TRUE = true;",
											"var FALSE = false;",
											"",
											"test_map={};",
											"test_map.platformShortName=function (element) {pm.expect(element.Name).eq('platformShortName');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"SENTINEL-1\",\"SENTINEL-2\",\"SENTINEL-3\"]);};",
											"test_map.platformSerialIdentifier=function (element) {pm.expect(element.Name).eq('platformSerialIdentifier');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"A\",\"B\",\"C\",\"D\",\"_¹\"]);};",
											"test_map.productType=function (element) {pm.expect(element.Name).eq('productType');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"AUX_RESATT\",\"AUX_PRLPTF\",\"AUX_PRCPTF\",\"SR_2_NRPPAX\"]);",
											"",
											"};",
											"test_map.beginningDateTime=function (element) {pm.expect(element.Name).eq('beginningDateTime');pm.expect(element.ValueType).eq('DateTimeOffset');pm.expect(element.Value).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);};",
											"test_map.endingDateTime=function (element) {pm.expect(element.Name).eq('endingDateTime');pm.expect(element.ValueType).eq('DateTimeOffset');pm.expect(element.Value).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);};",
											"test_map.processingCenter=function (element) {pm.expect(element.Name).eq('processingCenter');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');};",
											"test_map.processorVersion=function (element) {pm.expect(element.Name).eq('processorVersion');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');};",
											"test_map.processingDate=function (element) {pm.expect(element.Name).eq('processingDate');pm.expect(element.ValueType).eq('DateTimeOffset');pm.expect(element.Value).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);};",
											"",
											"test_schema={};",
											"test_schema.platformShortName=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.platformSerialIdentifier=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.productType=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.beginningDateTime=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.endingDateTime=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.processingCenter=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.processorVersion=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.processingDate=function (num) {pm.expect(num).to.be.eq(1)};",
											"",
											"            ",
											"properties_map = {};",
											"properties_map.Id=function (element) {pm.expect(element.Id).to.match(/[0-9a-fA-F]{8}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{12}/);};",
											"properties_map.Name=function (element) {pm.expect(element.Name).to.be.a(\"string\");};",
											"properties_map.ContentType=function (element) {pm.expect(element.ContentType).to.be.a(\"string\");};",
											"properties_map.ContentLength=function (element) {pm.expect(element.ContentLength).to.be.a(\"number\");};",
											"properties_map.OriginDate=function (element) {pm.expect(element.OriginDate).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d+([+-][0-2]\\d:[0-5]\\d|Z)/);};",
											"properties_map.PublicationDate=function (element) {pm.expect(element.PublicationDate).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);};",
											"properties_map.ModificationDate=function (element) {pm.expect(element.ModificationDate).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d+([+-][0-2]\\d:[0-5]\\d|Z)/);};",
											"properties_map.Online=function (element) {pm.expect(element.Online).to.be.oneOf([TRUE,FALSE,true,false]);};",
											"properties_map.EvictionDate=function (element) {if(element.EvictionDate){ pm.expect(element.EvictionDate).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d+([+-][0-2]\\d:[0-5]\\d|Z)/); }};",
											"properties_map.Checksum=function (element) {for(i=0; i<element.Checksum.length; i++ ){pm.expect(element.Checksum[i].Algorithm).to.be.oneOf([\"MD5\",\"SHA-1\",\"SHA-256\",\"SHA-512\"]);checksum_algorithm = {'MD5': '[a-fA-F0-9]{32}', 'SHA-1': '[0-9a-f]{5,40}', 'SHA-256': '[A-Fa-f0-9]{64}', 'SHA-512': '[A-Fa-f0-9]{128}'};pm.expect(element.Checksum[i].Value).to.match(new RegExp(checksum_algorithm[element.Checksum[i].Algorithm]));}};",
											"properties_map.ContentDate=function (element) {pm.expect(element.ContentDate[\"Start\"]).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);pm.expect(element.ContentDate[\"End\"]).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);};",
											"properties_map.Footprint=function (element) {if(element.Footprint){ pm.expect(element.Footprint).to.match(/geography'SRID=\\d+;[Polygon|Multipolygon|Point](.*)/); }};",
											"",
											"let schema_seen = {};",
											"",
											"function testSpecific(value, product){",
											"",
											"    if (schema_seen[value.Name]){",
											"        schema_seen[value.Name]++;",
											"    }else{",
											"        schema_seen[value.Name]=1;",
											"    }",
											"",
											"    if (test_map[value.Name]) {",
											"        pm.test(\"Test Attribute \"+value.Name + \" for Product: \"+product.Name+\" - \"+product.Id, function(){test_map[value.Name](value, product)});",
											"    }",
											"    else {",
											"        pm.test.skip(\"Test Attribute \"+value.Name + \" for Product: \"+product.Name+\" - \"+product.Id);",
											"    }",
											"}",
											"function propertySpecific(key, product){",
											"    if (properties_map[key]) {",
											"        pm.test(\"Test Property \"+key+\" for Product: \"+product.Name+\" - \"+product.Id, function(){properties_map[key](product)});",
											"    }",
											"    else {",
											"        pm.test.skip(\"Test Property \"+key+\" for Product: \"+product.Name+\" - \"+product.Id);",
											"    }",
											"}",
											"",
											"for (var counter = 0;  counter  < jsonDataElements.length; counter++){",
											"    var product = jsonDataElements[counter];",
											"    console.log(\"Processing Product: \"+product.Name+\" - \"+product.Id);",
											"",
											"    for (const[key, value] of Object.entries(properties_map)){",
											"        propertySpecific(key, jsonDataElements[counter]);",
											"    }",
											"",
											"    if(\"Attributes\" in jsonDataElements[counter]){",
											"        schema_seen = {};",
											"",
											"        pm.test(\"Test Attributes list\", function(){",
											"            pm.expect(jsonDataElements[counter].Attributes.length).to.be.above(0);",
											"        });",
											"",
											"        jsonDataElements[counter].Attributes.forEach(function(elem){",
											"            testSpecific(elem, jsonDataElements[counter]);",
											"        });",
											"        var product = jsonDataElements[counter];",
											"        for (const[key, value] of Object.entries(test_schema)) {pm.test(\"Schema Attribute \"+key+\" Product \"+product.Name+\" - \"+product.Id, function(){",
											"        if(schema_seen[key] == undefined){",
											"            schema_seen[key] = 0;",
											"        }",
											"        value(schema_seen[key], product)});}",
											"    }",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{service-root-uri}}/odata/v1/Products?$expand=Attributes&$top=1&$filter=(contains(Name,'AUX_RESATT') or contains(Name,'AUX_PRLPTF') or contains(Name,'AUX_PRCPTF') or contains(Name,'SR_2_NRPPAX'))\n",
									"host": [
										"{{service-root-uri}}"
									],
									"path": [
										"odata",
										"v1",
										"Products"
									],
									"query": [
										{
											"key": "$expand",
											"value": "Attributes"
										},
										{
											"key": "$top",
											"value": "1"
										},
										{
											"key": "$filter",
											"value": "(contains(Name,'AUX_RESATT') or contains(Name,'AUX_PRLPTF') or contains(Name,'AUX_PRCPTF') or contains(Name,'SR_2_NRPPAX'))\n"
										},
										{
											"key": "$filter",
											"value": "contains(Name,'AUX_RESATT') and startswith(Name,'S')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'AUX_PRLPTF') and startswith(Name,'S')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'AUX_PRCPTF') and startswith(Name,'S')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_NRPPAX') and startswith(Name,'S')\n",
											"disabled": true
										}
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "POD",
					"item": [
						{
							"name": "GNSS_L1b_Files",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2bb1d565-d212-4eb8-a67c-d92566b53627",
										"exec": [
											"var jsonDataElements = pm.response.json().value;",
											"pm.test(\"Response time is less than \" +  environment[\"query-timeout\"] + \"ms\", function(){",
											"    pm.expect(pm.response.responseTime).to.be.below(parseInt(environment[\"query-timeout\"]));",
											"});",
											"",
											"pm.test(\"Test OData context\", function(){",
											"    query_string = pm.request.url.getQueryString();",
											"    if(query_string.includes(\"$expand=Attributes\")){",
											"        pm.expect( pm.response.json()['@odata.context']).to.include(\"$metadata#Products(Attributes())\");",
											"    } else{",
											"        pm.expect( pm.response.json()['@odata.context']).to.include(\"$metadata#Products\");",
											"    }",
											"});",
											"",
											"var TRUE = true;",
											"var FALSE = false;",
											"",
											"test_map={};",
											"test_map.platformShortName=function (element) {pm.expect(element.Name).eq('platformShortName');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"SENTINEL-1\",\"SENTINEL-2\",\"SENTINEL-3\"]);};",
											"test_map.platformSerialIdentifier=function (element) {pm.expect(element.Name).eq('platformSerialIdentifier');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"A\",\"B\",\"C\",\"D\",\"_¹\"]);};",
											"test_map.productType=function (element) {pm.expect(element.Name).eq('productType');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"AUX_GNSSRX\",\"AUX_GNSSRD\",\"AUX_GNSRXD\"]);",
											"",
											"};",
											"test_map.beginningDateTime=function (element) {pm.expect(element.Name).eq('beginningDateTime');pm.expect(element.ValueType).eq('DateTimeOffset');pm.expect(element.Value).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);};",
											"test_map.endingDateTime=function (element) {pm.expect(element.Name).eq('endingDateTime');pm.expect(element.ValueType).eq('DateTimeOffset');pm.expect(element.Value).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);};",
											"test_map.processingCenter=function (element) {pm.expect(element.Name).eq('processingCenter');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');};",
											"test_map.processorVersion=function (element) {pm.expect(element.Name).eq('processorVersion');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');};",
											"test_map.processingDate=function (element) {pm.expect(element.Name).eq('processingDate');pm.expect(element.ValueType).eq('DateTimeOffset');pm.expect(element.Value).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);};",
											"",
											"test_schema={};",
											"test_schema.platformShortName=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.platformSerialIdentifier=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.productType=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.beginningDateTime=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.endingDateTime=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.processingCenter=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.processorVersion=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.processingDate=function (num) {pm.expect(num).to.be.eq(1)};",
											"",
											"            ",
											"properties_map = {};",
											"properties_map.Name=function (element) {pm.expect(element.Name).to.be.a(\"string\");};",
											"properties_map.ContentDate=function (element) {pm.expect(element.ContentDate[\"Start\"]).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);pm.expect(element.ContentDate[\"End\"]).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);};",
											"",
											"let schema_seen = {};",
											"",
											"function testSpecific(value, product){",
											"",
											"    if (schema_seen[value.Name]){",
											"        schema_seen[value.Name]++;",
											"    }else{",
											"        schema_seen[value.Name]=1;",
											"    }",
											"",
											"    if (test_map[value.Name]) {",
											"        pm.test(\"Test Attribute \"+value.Name + \" for Product: \"+product.Name+\" - \"+product.Id, function(){test_map[value.Name](value, product)});",
											"    }",
											"    else {",
											"        pm.test.skip(\"Test Attribute \"+value.Name + \" for Product: \"+product.Name+\" - \"+product.Id);",
											"    }",
											"}",
											"function propertySpecific(key, product){",
											"    if (properties_map[key]) {",
											"        pm.test(\"Test Property \"+key+\" for Product: \"+product.Name+\" - \"+product.Id, function(){properties_map[key](product)});",
											"    }",
											"    else {",
											"        pm.test.skip(\"Test Property \"+key+\" for Product: \"+product.Name+\" - \"+product.Id);",
											"    }",
											"}",
											"",
											"for (var counter = 0;  counter  < jsonDataElements.length; counter++){",
											"    var product = jsonDataElements[counter];",
											"    console.log(\"Processing Product: \"+product.Name+\" - \"+product.Id);",
											"",
											"    for (const[key, value] of Object.entries(properties_map)){",
											"        propertySpecific(key, jsonDataElements[counter]);",
											"    }",
											"",
											"    if(\"Attributes\" in jsonDataElements[counter]){",
											"        schema_seen = {};",
											"",
											"        pm.test(\"Test Attributes list\", function(){",
											"            pm.expect(jsonDataElements[counter].Attributes.length).to.be.above(0);",
											"        });",
											"",
											"        jsonDataElements[counter].Attributes.forEach(function(elem){",
											"            testSpecific(elem, jsonDataElements[counter]);",
											"        });",
											"        var product = jsonDataElements[counter];",
											"        for (const[key, value] of Object.entries(test_schema)) {pm.test(\"Schema Attribute \"+key+\" Product \"+product.Name+\" - \"+product.Id, function(){",
											"        if(schema_seen[key] == undefined){",
											"            schema_seen[key] = 0;",
											"        }",
											"        value(schema_seen[key], product)});}",
											"    }",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{service-root-uri}}/odata/v1/Products?$expand=Attributes&$top=1&$filter=(contains(Name,'AUX_GNSSRX') or contains(Name,'AUX_GNSSRD') or contains(Name,'AUX_GNSRXD'))\n",
									"host": [
										"{{service-root-uri}}"
									],
									"path": [
										"odata",
										"v1",
										"Products"
									],
									"query": [
										{
											"key": "$expand",
											"value": "Attributes"
										},
										{
											"key": "$top",
											"value": "1"
										},
										{
											"key": "$filter",
											"value": "(contains(Name,'AUX_GNSSRX') or contains(Name,'AUX_GNSSRD') or contains(Name,'AUX_GNSRXD'))\n"
										},
										{
											"key": "$filter",
											"value": "contains(Name,'AUX_GNSSRX') and startswith(Name,'S')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'AUX_GNSSRD') and startswith(Name,'S')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'AUX_GNSRXD') and startswith(Name,'S')\n",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "POD_Orbit_Files",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "07948d9a-db25-4fc2-8129-8eba1d188fbd",
										"exec": [
											"var jsonDataElements = pm.response.json().value;",
											"pm.test(\"Response time is less than \" +  environment[\"query-timeout\"] + \"ms\", function(){",
											"    pm.expect(pm.response.responseTime).to.be.below(parseInt(environment[\"query-timeout\"]));",
											"});",
											"",
											"pm.test(\"Test OData context\", function(){",
											"    query_string = pm.request.url.getQueryString();",
											"    if(query_string.includes(\"$expand=Attributes\")){",
											"        pm.expect( pm.response.json()['@odata.context']).to.include(\"$metadata#Products(Attributes())\");",
											"    } else{",
											"        pm.expect( pm.response.json()['@odata.context']).to.include(\"$metadata#Products\");",
											"    }",
											"});",
											"",
											"var TRUE = true;",
											"var FALSE = false;",
											"",
											"test_map={};",
											"test_map.platformShortName=function (element) {pm.expect(element.Name).eq('platformShortName');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"SENTINEL-1\",\"SENTINEL-2\",\"SENTINEL-3\"]);};",
											"test_map.platformSerialIdentifier=function (element) {pm.expect(element.Name).eq('platformSerialIdentifier');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"A\",\"B\",\"C\",\"D\",\"_¹\"]);};",
											"test_map.productType=function (element) {pm.expect(element.Name).eq('productType');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"AUX_PREORB\",\"AUX_RESORB\",\"AUX_MOEORB\",\"AUX_POEORB\",\"SR___ROE_AX\"]);",
											"",
											"};",
											"test_map.beginningDateTime=function (element) {pm.expect(element.Name).eq('beginningDateTime');pm.expect(element.ValueType).eq('DateTimeOffset');pm.expect(element.Value).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);};",
											"test_map.endingDateTime=function (element) {pm.expect(element.Name).eq('endingDateTime');pm.expect(element.ValueType).eq('DateTimeOffset');pm.expect(element.Value).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);};",
											"test_map.processingCenter=function (element) {pm.expect(element.Name).eq('processingCenter');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');};",
											"test_map.processorVersion=function (element) {pm.expect(element.Name).eq('processorVersion');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');};",
											"test_map.processingDate=function (element) {pm.expect(element.Name).eq('processingDate');pm.expect(element.ValueType).eq('DateTimeOffset');pm.expect(element.Value).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);};",
											"",
											"test_schema={};",
											"test_schema.platformShortName=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.platformSerialIdentifier=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.productType=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.beginningDateTime=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.endingDateTime=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.processingCenter=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.processorVersion=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.processingDate=function (num) {pm.expect(num).to.be.eq(1)};",
											"",
											"            ",
											"properties_map = {};",
											"properties_map.Name=function (element) {pm.expect(element.Name).to.be.a(\"string\");};",
											"properties_map.ContentDate=function (element) {pm.expect(element.ContentDate[\"Start\"]).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);pm.expect(element.ContentDate[\"End\"]).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);};",
											"",
											"let schema_seen = {};",
											"",
											"function testSpecific(value, product){",
											"",
											"    if (schema_seen[value.Name]){",
											"        schema_seen[value.Name]++;",
											"    }else{",
											"        schema_seen[value.Name]=1;",
											"    }",
											"",
											"    if (test_map[value.Name]) {",
											"        pm.test(\"Test Attribute \"+value.Name + \" for Product: \"+product.Name+\" - \"+product.Id, function(){test_map[value.Name](value, product)});",
											"    }",
											"    else {",
											"        pm.test.skip(\"Test Attribute \"+value.Name + \" for Product: \"+product.Name+\" - \"+product.Id);",
											"    }",
											"}",
											"function propertySpecific(key, product){",
											"    if (properties_map[key]) {",
											"        pm.test(\"Test Property \"+key+\" for Product: \"+product.Name+\" - \"+product.Id, function(){properties_map[key](product)});",
											"    }",
											"    else {",
											"        pm.test.skip(\"Test Property \"+key+\" for Product: \"+product.Name+\" - \"+product.Id);",
											"    }",
											"}",
											"",
											"for (var counter = 0;  counter  < jsonDataElements.length; counter++){",
											"    var product = jsonDataElements[counter];",
											"    console.log(\"Processing Product: \"+product.Name+\" - \"+product.Id);",
											"",
											"    for (const[key, value] of Object.entries(properties_map)){",
											"        propertySpecific(key, jsonDataElements[counter]);",
											"    }",
											"",
											"    if(\"Attributes\" in jsonDataElements[counter]){",
											"        schema_seen = {};",
											"",
											"        pm.test(\"Test Attributes list\", function(){",
											"            pm.expect(jsonDataElements[counter].Attributes.length).to.be.above(0);",
											"        });",
											"",
											"        jsonDataElements[counter].Attributes.forEach(function(elem){",
											"            testSpecific(elem, jsonDataElements[counter]);",
											"        });",
											"        var product = jsonDataElements[counter];",
											"        for (const[key, value] of Object.entries(test_schema)) {pm.test(\"Schema Attribute \"+key+\" Product \"+product.Name+\" - \"+product.Id, function(){",
											"        if(schema_seen[key] == undefined){",
											"            schema_seen[key] = 0;",
											"        }",
											"        value(schema_seen[key], product)});}",
											"    }",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{service-root-uri}}/odata/v1/Products?$expand=Attributes&$top=1&$filter=(contains(Name,'AUX_PREORB') or contains(Name,'AUX_RESORB') or contains(Name,'AUX_MOEORB') or contains(Name,'AUX_POEORB') or contains(Name,'SR___ROE_AX'))\n",
									"host": [
										"{{service-root-uri}}"
									],
									"path": [
										"odata",
										"v1",
										"Products"
									],
									"query": [
										{
											"key": "$expand",
											"value": "Attributes"
										},
										{
											"key": "$top",
											"value": "1"
										},
										{
											"key": "$filter",
											"value": "(contains(Name,'AUX_PREORB') or contains(Name,'AUX_RESORB') or contains(Name,'AUX_MOEORB') or contains(Name,'AUX_POEORB') or contains(Name,'SR___ROE_AX'))\n"
										},
										{
											"key": "$filter",
											"value": "contains(Name,'AUX_PREORB') and startswith(Name,'S')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'AUX_RESORB') and startswith(Name,'S')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'AUX_MOEORB') and startswith(Name,'S')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'AUX_POEORB') and startswith(Name,'S')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR___ROE_AX') and startswith(Name,'S')\n",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "External_Auxiliary_Data_Files",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "84ba7935-e424-44aa-a071-5b1c4cfac546",
										"exec": [
											"var jsonDataElements = pm.response.json().value;",
											"pm.test(\"Response time is less than \" +  environment[\"query-timeout\"] + \"ms\", function(){",
											"    pm.expect(pm.response.responseTime).to.be.below(parseInt(environment[\"query-timeout\"]));",
											"});",
											"",
											"pm.test(\"Test OData context\", function(){",
											"    query_string = pm.request.url.getQueryString();",
											"    if(query_string.includes(\"$expand=Attributes\")){",
											"        pm.expect( pm.response.json()['@odata.context']).to.include(\"$metadata#Products(Attributes())\");",
											"    } else{",
											"        pm.expect( pm.response.json()['@odata.context']).to.include(\"$metadata#Products\");",
											"    }",
											"});",
											"",
											"var TRUE = true;",
											"var FALSE = false;",
											"",
											"test_map={};",
											"test_map.productType=function (element) {pm.expect(element.Name).eq('productType');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"AUX_GSVMAX\",\"AUX_GSVHAX\",\"AUX_GCLHAX\",\"AUX_EOPHAX\",\"AUX_GSVSTC\",\"AUX_GCLSTC\",\"AUX_EOPSTC\",\"AUX_NAV_AX\",\"AUX_NSA_AX\",\"AUX_NTR_AX\",\"AUX_NPR_AX\",\"AUX_ATX_AX\",\"AUX_GSVNTC\",\"AUX_GCLNTC\",\"AUX_GSVREP\",\"AUX_GCLREP\",\"AUX_EOP_AX\",\"AUX_LSC_AX\",\"AUX_SAC_AX\",\"AUX_AGRA__\",\"AUX_AGRA__\",\"AUX_SLR___\",\"AUX_DORIS_\",\"AUX_NSA3AX\",\"AUX_NTR3AX\",\"AUX_ATX3AX\",\"AUX_ICDBAX\",\"AUX_EXTORB\",\"AUX_DCB___\",\"GN_1_GSVMAX\",\"GN_1_GSVHAX\",\"GN_1_GCLHAX\",\"GN_1_EOPHAX\",\"GN_1_NAV_AX\",\"GN_1_NSA_AX\",\"GN_1_NTR_AX\",\"GN_1_NPR_AX\",\"GN_1_ATX_AX\",\"GN_1_EOP_AX\",\"GN_1_LSC_AX\",\"GN_1_SAC_AX\",\"GN_1_NSA3AX\",\"GN_1_NTR3AX\",\"GN_1_ATX3AX\",\"GN_1_CHD_AX\",\"AX___MF1_AX\",\"AX___MFA_AX\",\"AX___MA1_AX\",\"AX___MF2_AX\",\"AX___MA2_AX\",\"AX___OSF_AX\",\"AX___FPO_AX\",\"AX___FRO_AX\",\"AX___BA__AX\",\"AX___BB2_AX\",\"AX___DEM_AX\",\"AX___LWM_AX\",\"AX___OOM_AX\",\"AX___CLM_AX\",\"AX___TRM_AX\",\"AX___CST_AX\",\"SR___CHDNAX\",\"SR___CHDRAX\",\"SR_1_CONMAX\",\"SR_1_CONCAX\",\"SR_2_CON_AX\",\"SR___LSM_AX\",\"SR_2_IC01AX\",\"SR_2_IC02AX\",\"SR_2_IC03AX\",\"SR_2_IC04AX\",\"SR_2_IC05AX\",\"SR_2_IC06AX\",\"SR_2_IC07AX\",\"SR_2_IC08AX\",\"SR_2_IC09AX\",\"SR_2_IC10AX\",\"SR_2_EOT1AX\",\"SR_2_EOT2AX\",\"SR_2_LT1_AX\",\"SR_2_LT2_AX\",\"SR_2_LNEQAX\",\"SR_2_GEO_AX\",\"SR_2_MSS1AX\",\"SR_2_MSS2AX\",\"SR_2_ODLEAX\",\"SR_2_WNDLAX\",\"SR_2_WNDSAX\",\"SR_2_SIGLAX\",\"SR_2_SIGSAX\",\"SR_2_SET_AX\",\"SR_2_SSM_AX\",\"SR_2_MSMGAX\",\"SR_2_CP00AX\",\"SR_2_CP06AX\",\"SR_2_CP12AX\",\"SR_2_CP18AX\",\"SR_2_S1AMAX\",\"SR_2_S2AMAX\",\"SR_2_S1PHAX\",\"SR_2_S2PHAX\",\"SR_2_MDT_AX\",\"SR_2_SHD_AX\",\"SR_2_SSBLAX\",\"SR_2_SSBSAX\",\"SR_2_SD01AX\",\"SR_2_SD02AX\",\"SR_2_SD03AX\",\"SR_2_SD04AX\",\"SR_2_SD05AX\",\"SR_2_SD06AX\",\"SR_2_SD07AX\",\"SR_2_SD08AX\",\"SR_2_SD09AX\",\"SR_2_SD10AX\",\"SR_2_SD11AX\",\"SR_2_SD12AX\",\"SR_2_SI01AX\",\"SR_2_SI02AX\",\"SR_2_SI03AX\",\"SR_2_SI04AX\",\"SR_2_SI05AX\",\"SR_2_SI06AX\",\"SR_2_SI07AX\",\"SR_2_SI08AX\",\"SR_2_SI09AX\",\"SR_2_SI10AX\",\"SR_2_SI11AX\",\"SR_2_SI12AX\",\"SR_2_SST_AX\",\"SR_2_LRC_AX\",\"SR_2_SFL_AX\",\"SR_2_FLT_AX\",\"SR_2_RRC_AX\",\"SR_2_CCT_AX\",\"SR_2_SURFAX\",\"SR_2_RET_AX\",\"SR_2_MLM_AX\",\"SR_2_MAG_AX\",\"SR_2_LUTFAX\",\"SR_2_LUTEAX\",\"SR_2_LUTSAX\",\"SR___ROE_AX\",\"SR_1_CA1LAX\",\"SR_1_CA1SAX\",\"SR_1_CA2KAX\",\"SR_1_CA2CAX\",\"CAL2_C_LTM\",\"MW_1_NIR_AX\",\"MW_1_DNB_AX\",\"MW_1_MON_AX\",\"SL_1_VSC_AX\",\"SR___MGNPAX\",\"SR___POEPAX\",\"SR_2_PMPPAX\",\"SR_2_PCPPAX\",\"SR___MDO_AX\",\"SR___POESAX\",\"SR_2_PMPSAX\",\"SR_2_RMO_AX\",\"SR_2_PMO_AX\",\"SR_2_POL_AX\",\"SR_2_PGI_AX\",\"SR_2_RGI_AX\",\"SR_1_USO_AX\",\"SR___MGNSAX\",\"SR_2_SIC_AX\",\"MW_1_SLC_AX\",\"MW___CHDNAX\",\"MW___CHDRAX\",\"MW___STD_AX\",\"OL_1_EO__AX\",\"OL_1_RAC_AX\",\"OL_1_SPC_AX\",\"OL_1_CLUTAX\",\"OL_1_INS_AX\",\"OL_1_CAL_AX\",\"OL_1_PRG_AX\",\"OL_2_PCP_AX\",\"OL_2_PPP_AX\",\"OL_2_CLP_AX\",\"OL_2_WVP_AX\",\"OL_2_ACP_AX\",\"OL_2_OCP_AX\",\"OL_2_VGP_AX\",\"SL_1_PCP_AX\",\"SL_1_ANC_AX\",\"SL_1_N_S1AX\",\"SL_1_N_S2AX\",\"SL_1_N_S3AX\",\"SL_1_O_S1AX\",\"SL_1_O_S2AX\",\"SL_1_O_S3AX\",\"SL_1_NAS4AX\",\"SL_1_NAS5AX\",\"SL_1_NAS6AX\",\"SL_1_NBS4AX\",\"SL_1_NBS5AX\",\"SL_1_NBS6AX\",\"SL_1_OAS4AX\",\"SL_1_OAS5AX\",\"SL_1_OAS6AX\",\"SL_1_OBS4AX\",\"SL_1_OBS5AX\",\"SL_1_OBS6AX\",\"SL_1_N_S7AX\",\"SL_1_N_S8AX\",\"SL_1_N_S9AX\",\"SL_1_N_F1AX\",\"SL_1_N_F2AX\",\"SL_1_O_S7AX\",\"SL_1_O_S8AX\",\"SL_1_O_S9AX\",\"SL_1_O_F1AX\",\"SL_1_O_F2AX\",\"SL_1_VIC_AX\",\"SL_1_GEO_AX\",\"SL_1_GEC_AX\",\"SL_1_CLO_AX\",\"SL_1_ESSTAX\",\"SL_2_PCP_AX\",\"SL_2_S6N_AX\",\"SL_2_S7N_AX\",\"SL_2_S8N_AX\",\"SL_2_S9N_AX\",\"SL_2_F1N_AX\",\"SL_2_F2N_AX\",\"SL_2_S7O_AX\",\"SL_2_S8O_AX\",\"SL_2_S9O_AX\",\"SL_2_N2_CAX\",\"SL_2_N3RCAX\",\"SL_2_N3_CAX\",\"SL_2_D2_CAX\",\"SL_2_D3_CAX\",\"SL_2_SST_AX\",\"SL_2_SDI3AX\",\"SL_2_SDI2AX\",\"SL_2_SSESAX\",\"SL_2_LSTCAX\",\"SL_2_LSTBAX\",\"SL_2_LSTVAX\",\"SL_2_LSTWAX\",\"SL_2_LSTEAX\",\"SL_2_FRPTAX\",\"SL_2_SSTAAX\",\"OL_1_PCPBAX\",\"SL_1_PCPBAX\",\"SL_1_PLTBAX\",\"OL_2_PCPBAX\",\"OL_2_PLTBAX\",\"SL_2_PCPBAX\",\"GN_1_GSVMAX\",\"GN_1_GSVHAX\",\"GN_1_GCLHAX\",\"GN_1_EOP_AX\",\"GN_1_EOPHAX\",\"GN_1_LSC_AX\",\"GN_1_NAV_AX\",\"GN_1_NSA_AX\",\"GN_1_NTR_AX\",\"GN_1_NPR_AX\",\"GN_1_ATX_AX\",\"GN_1_SAC_AX\",\"GN_1_CHD_AX\",\"GN_1_NSA3AX\",\"GN_1_NTR3AX\",\"GN_1_ATX3AX\",\"GN_1_MANHAX\",\"GN_1_MASSAX\",\"SR_2_NRPPAX\",\"OL_1_MCHDAX\",\"SL_1_MCHDAX\",\"SY_1_PCP_AX\",\"SY_1_CDIBAX\",\"SY_2_PCP_AX\",\"SY_2_PCPSAX\",\"SY_2_RAD_AX\",\"SY_2_RADPAX\",\"SY_2_SPCPAX\",\"SY_2_RADSAX\",\"SY_2_PCPBAX\",\"SY_2_PLTBAX\",\"SY_2_CVPBAX\",\"SY_2_PVPBAX\",\"SY_2_CVSBAX\",\"SY_2_PVSBAX\",\"SY_1_GCPBAX\",\"SL_2_ACLMAX\",\"SL_2_ART_AX\",\"SL_2_OSR_AX\",\"SL_2_PCPAAX\",\"SY_2_ACLMAX\",\"SY_2_ART_AX\",\"SY_2_LSR_AX\",\"SY_2_OSR_AX\",\"SY_2_PCPAAX\",\"SL_2_CFM_AX\",\"SL_2_FXPAAX\",\"SL_2_PCPFAX\",\"SL_2_PLFMAX\",\"SL_2_SXPAAX\",\"SL_1_IRE_AX\",\"SL_1_LCC_AX\",\"SL_1_CDP_AX\",\"SL_1_CLP_AX\",\"SL_1_ADJ_AX\",\"SL_1_RTT_AX\",\"SY_2_AODCAX\"]);",
											"",
											"};",
											"test_map.timeliness=function (element) {pm.expect(element.Name).eq('timeliness');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');};",
											"test_map.platformShortName=function (element) {pm.expect(element.Name).eq('platformShortName');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"SENTINEL-1\",\"SENTINEL-2\",\"SENTINEL-3\"]);};",
											"test_map.platformSerialIdentifier=function (element) {pm.expect(element.Name).eq('platformSerialIdentifier');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"A\",\"B\",\"C\",\"D\",\"_¹\"]);};",
											"test_map.beginningDateTime=function (element) {pm.expect(element.Name).eq('beginningDateTime');pm.expect(element.ValueType).eq('DateTimeOffset');pm.expect(element.Value).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);};",
											"test_map.endingDateTime=function (element) {pm.expect(element.Name).eq('endingDateTime');pm.expect(element.ValueType).eq('DateTimeOffset');pm.expect(element.Value).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);};",
											"test_map.processingCenter=function (element) {pm.expect(element.Name).eq('processingCenter');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');};",
											"test_map.processorName=function (element) {pm.expect(element.Name).eq('processorName');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');};",
											"test_map.processorVersion=function (element) {pm.expect(element.Name).eq('processorVersion');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');};",
											"",
											"test_schema={};",
											"test_schema.productType=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.timeliness=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.platformShortName=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.platformSerialIdentifier=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.beginningDateTime=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.endingDateTime=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.processingCenter=function (num) {pm.expect(num).to.be.within(0,1)};",
											"test_schema.processorName=function (num) {pm.expect(num).to.be.within(0,1)};",
											"test_schema.processorVersion=function (num) {pm.expect(num).to.be.within(0,1)};",
											"",
											"            ",
											"properties_map = {};",
											"properties_map.Name=function (element) {pm.expect(element.Name).to.be.a(\"string\");};",
											"properties_map.ContentDate=function (element) {pm.expect(element.ContentDate[\"Start\"]).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);pm.expect(element.ContentDate[\"End\"]).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);};",
											"",
											"let schema_seen = {};",
											"",
											"function testSpecific(value, product){",
											"",
											"    if (schema_seen[value.Name]){",
											"        schema_seen[value.Name]++;",
											"    }else{",
											"        schema_seen[value.Name]=1;",
											"    }",
											"",
											"    if (test_map[value.Name]) {",
											"        pm.test(\"Test Attribute \"+value.Name + \" for Product: \"+product.Name+\" - \"+product.Id, function(){test_map[value.Name](value, product)});",
											"    }",
											"    else {",
											"        pm.test.skip(\"Test Attribute \"+value.Name + \" for Product: \"+product.Name+\" - \"+product.Id);",
											"    }",
											"}",
											"function propertySpecific(key, product){",
											"    if (properties_map[key]) {",
											"        pm.test(\"Test Property \"+key+\" for Product: \"+product.Name+\" - \"+product.Id, function(){properties_map[key](product)});",
											"    }",
											"    else {",
											"        pm.test.skip(\"Test Property \"+key+\" for Product: \"+product.Name+\" - \"+product.Id);",
											"    }",
											"}",
											"",
											"for (var counter = 0;  counter  < jsonDataElements.length; counter++){",
											"    var product = jsonDataElements[counter];",
											"    console.log(\"Processing Product: \"+product.Name+\" - \"+product.Id);",
											"",
											"    for (const[key, value] of Object.entries(properties_map)){",
											"        propertySpecific(key, jsonDataElements[counter]);",
											"    }",
											"",
											"    if(\"Attributes\" in jsonDataElements[counter]){",
											"        schema_seen = {};",
											"",
											"        pm.test(\"Test Attributes list\", function(){",
											"            pm.expect(jsonDataElements[counter].Attributes.length).to.be.above(0);",
											"        });",
											"",
											"        jsonDataElements[counter].Attributes.forEach(function(elem){",
											"            testSpecific(elem, jsonDataElements[counter]);",
											"        });",
											"        var product = jsonDataElements[counter];",
											"        for (const[key, value] of Object.entries(test_schema)) {pm.test(\"Schema Attribute \"+key+\" Product \"+product.Name+\" - \"+product.Id, function(){",
											"        if(schema_seen[key] == undefined){",
											"            schema_seen[key] = 0;",
											"        }",
											"        value(schema_seen[key], product)});}",
											"    }",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{service-root-uri}}/odata/v1/Products?$expand=Attributes&$top=1&$filter=(contains(Name,'AX') or contains(Name, 'CAL2_C_LTM') or contains(Name, 'AUX_GSVSTC') or contains(Name, 'AUX_GCLSTC') or contains(Name, 'AUX_EOPSTC') or contains(Name, 'AUX_GSVNTC') or contains(Name, 'AUX_GCLNTC') or contains(Name, 'AUX_GSVREP') or contains(Name, 'AUX_GCLREP') or contains(Name, 'AUX_AGRA__') or contains(Name, 'AUX_AGRA__') or contains(Name, 'AUX_SLR___') or contains(Name, 'AUX_DORIS_') or contains(Name, 'AUX_EXTORB') or contains(Name, 'AUX_DCB___') or contains(Name, 'CAL2_C_LTM')) and startswith(Name,'S')\n",
									"host": [
										"{{service-root-uri}}"
									],
									"path": [
										"odata",
										"v1",
										"Products"
									],
									"query": [
										{
											"key": "$expand",
											"value": "Attributes"
										},
										{
											"key": "$top",
											"value": "1"
										},
										{
											"key": "$filter",
											"value": "(contains(Name,'AX') or contains(Name, 'CAL2_C_LTM') or contains(Name, 'AUX_GSVSTC') or contains(Name, 'AUX_GCLSTC') or contains(Name, 'AUX_EOPSTC') or contains(Name, 'AUX_GSVNTC') or contains(Name, 'AUX_GCLNTC') or contains(Name, 'AUX_GSVREP') or contains(Name, 'AUX_GCLREP') or contains(Name, 'AUX_AGRA__') or contains(Name, 'AUX_AGRA__') or contains(Name, 'AUX_SLR___') or contains(Name, 'AUX_DORIS_') or contains(Name, 'AUX_EXTORB') or contains(Name, 'AUX_DCB___') or contains(Name, 'CAL2_C_LTM')) and startswith(Name,'S')\n"
										},
										{
											"key": "$filter",
											"value": "contains(Name,'AUX_GSVMAX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'AUX_GSVHAX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'AUX_GCLHAX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'AUX_EOPHAX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'AUX_GSVSTC')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'AUX_GCLSTC')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'AUX_EOPSTC')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'AUX_NAV_AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'AUX_NSA_AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'AUX_NTR_AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'AUX_NPR_AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'AUX_ATX_AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'AUX_GSVNTC')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'AUX_GCLNTC')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'AUX_GSVREP')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'AUX_GCLREP')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'AUX_EOP_AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'AUX_LSC_AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'AUX_SAC_AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'AUX_AGRA__')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'AUX_AGRA__')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'AUX_SLR___')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'AUX_DORIS_')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'AUX_NSA3AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'AUX_NTR3AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'AUX_ATX3AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'AUX_ICDBAX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'AUX_EXTORB')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'AUX_DCB___')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'GN_1_GSVMAX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'GN_1_GSVHAX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'GN_1_GCLHAX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'GN_1_EOPHAX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'GN_1_NAV_AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'GN_1_NSA_AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'GN_1_NTR_AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'GN_1_NPR_AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'GN_1_ATX_AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'GN_1_EOP_AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'GN_1_LSC_AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'GN_1_SAC_AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'GN_1_NSA3AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'GN_1_NTR3AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'GN_1_ATX3AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'GN_1_CHD_AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'AX___MF1_AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'AX___MFA_AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'AX___MA1_AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'AX___MF2_AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'AX___MA2_AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'AX___OSF_AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'AX___FPO_AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'AX___FRO_AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'AX___BA__AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'AX___BB2_AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'AX___DEM_AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'AX___LWM_AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'AX___OOM_AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'AX___CLM_AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'AX___TRM_AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'AX___CST_AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR___CHDNAX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR___CHDRAX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_1_CONMAX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_1_CONCAX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_CON_AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR___LSM_AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_IC01AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_IC02AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_IC03AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_IC04AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_IC05AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_IC06AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_IC07AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_IC08AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_IC09AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_IC10AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_EOT1AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_EOT2AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_LT1_AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_LT2_AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_LNEQAX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_GEO_AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_MSS1AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_MSS2AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_ODLEAX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_WNDLAX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_WNDSAX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_SIGLAX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_SIGSAX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_SET_AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_SSM_AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_MSMGAX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_CP00AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_CP06AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_CP12AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_CP18AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_S1AMAX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_S2AMAX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_S1PHAX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_S2PHAX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_MDT_AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_SHD_AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_SSBLAX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_SSBSAX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_SD01AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_SD02AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_SD03AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_SD04AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_SD05AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_SD06AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_SD07AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_SD08AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_SD09AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_SD10AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_SD11AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_SD12AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_SI01AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_SI02AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_SI03AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_SI04AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_SI05AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_SI06AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_SI07AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_SI08AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_SI09AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_SI10AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_SI11AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_SI12AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_SST_AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_LRC_AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_SFL_AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_FLT_AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_RRC_AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_CCT_AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_SURFAX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_RET_AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_MLM_AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_MAG_AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_LUTFAX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_LUTEAX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_LUTSAX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR___ROE_AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_1_CA1LAX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_1_CA1SAX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_1_CA2KAX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_1_CA2CAX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'CAL2_C_LTM')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'MW_1_NIR_AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'MW_1_DNB_AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'MW_1_MON_AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_1_VSC_AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR___MGNPAX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR___POEPAX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_PMPPAX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_PCPPAX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR___MDO_AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR___POESAX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_PMPSAX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_RMO_AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_PMO_AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_POL_AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_PGI_AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_RGI_AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_1_USO_AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR___MGNSAX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_SIC_AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'MW_1_SLC_AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'MW___CHDNAX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'MW___CHDRAX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'MW___STD_AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'OL_1_EO__AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'OL_1_RAC_AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'OL_1_SPC_AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'OL_1_CLUTAX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'OL_1_INS_AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'OL_1_CAL_AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'OL_1_PRG_AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'OL_2_PCP_AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'OL_2_PPP_AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'OL_2_CLP_AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'OL_2_WVP_AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'OL_2_ACP_AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'OL_2_OCP_AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'OL_2_VGP_AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_1_PCP_AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_1_ANC_AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_1_N_S1AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_1_N_S2AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_1_N_S3AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_1_O_S1AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_1_O_S2AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_1_O_S3AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_1_NAS4AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_1_NAS5AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_1_NAS6AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_1_NBS4AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_1_NBS5AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_1_NBS6AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_1_OAS4AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_1_OAS5AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_1_OAS6AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_1_OBS4AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_1_OBS5AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_1_OBS6AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_1_N_S7AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_1_N_S8AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_1_N_S9AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_1_N_F1AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_1_N_F2AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_1_O_S7AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_1_O_S8AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_1_O_S9AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_1_O_F1AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_1_O_F2AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_1_VIC_AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_1_GEO_AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_1_GEC_AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_1_CLO_AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_1_ESSTAX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_2_PCP_AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_2_S6N_AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_2_S7N_AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_2_S8N_AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_2_S9N_AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_2_F1N_AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_2_F2N_AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_2_S7O_AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_2_S8O_AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_2_S9O_AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_2_N2_CAX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_2_N3RCAX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_2_N3_CAX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_2_D2_CAX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_2_D3_CAX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_2_SST_AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_2_SDI3AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_2_SDI2AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_2_SSESAX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_2_LSTCAX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_2_LSTBAX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_2_LSTVAX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_2_LSTWAX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_2_LSTEAX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_2_FRPTAX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_2_SSTAAX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'OL_1_PCPBAX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_1_PCPBAX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_1_PLTBAX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'OL_2_PCPBAX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'OL_2_PLTBAX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_2_PCPBAX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'GN_1_GSVMAX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'GN_1_GSVHAX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'GN_1_GCLHAX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'GN_1_EOP_AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'GN_1_EOPHAX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'GN_1_LSC_AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'GN_1_NAV_AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'GN_1_NSA_AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'GN_1_NTR_AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'GN_1_NPR_AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'GN_1_ATX_AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'GN_1_SAC_AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'GN_1_CHD_AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'GN_1_NSA3AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'GN_1_NTR3AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'GN_1_ATX3AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'GN_1_MANHAX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'GN_1_MASSAX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_NRPPAX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'OL_1_MCHDAX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_1_MCHDAX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SY_1_PCP_AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SY_1_CDIBAX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SY_2_PCP_AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SY_2_PCPSAX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SY_2_RAD_AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SY_2_RADPAX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SY_2_SPCPAX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SY_2_RADSAX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SY_2_PCPBAX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SY_2_PLTBAX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SY_2_CVPBAX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SY_2_PVPBAX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SY_2_CVSBAX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SY_2_PVSBAX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SY_1_GCPBAX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_2_ACLMAX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_2_ART_AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_2_OSR_AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_2_PCPAAX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SY_2_ACLMAX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SY_2_ART_AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SY_2_LSR_AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SY_2_OSR_AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SY_2_PCPAAX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_2_CFM_AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_2_FXPAAX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_2_PCPFAX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_2_PLFMAX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_2_SXPAAX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_1_IRE_AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_1_LCC_AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_1_CDP_AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_1_CLP_AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_1_ADJ_AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_1_RTT_AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SY_2_AODCAX')\n",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Quaternions_Files_(AUX_PROQUA)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "faa59804-c542-4e71-9077-d41e1a732b82",
										"exec": [
											"var jsonDataElements = pm.response.json().value;",
											"pm.test(\"Response time is less than \" +  environment[\"query-timeout\"] + \"ms\", function(){",
											"    pm.expect(pm.response.responseTime).to.be.below(parseInt(environment[\"query-timeout\"]));",
											"});",
											"",
											"pm.test(\"Test OData context\", function(){",
											"    query_string = pm.request.url.getQueryString();",
											"    if(query_string.includes(\"$expand=Attributes\")){",
											"        pm.expect( pm.response.json()['@odata.context']).to.include(\"$metadata#Products(Attributes())\");",
											"    } else{",
											"        pm.expect( pm.response.json()['@odata.context']).to.include(\"$metadata#Products\");",
											"    }",
											"});",
											"",
											"var TRUE = true;",
											"var FALSE = false;",
											"",
											"test_map={};",
											"test_map.platformShortName=function (element) {pm.expect(element.Name).eq('platformShortName');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"SENTINEL-1\",\"SENTINEL-2\",\"SENTINEL-3\"]);};",
											"test_map.platformSerialIdentifier=function (element) {pm.expect(element.Name).eq('platformSerialIdentifier');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"A\",\"B\",\"C\",\"D\",\"_¹\"]);};",
											"test_map.productType=function (element) {pm.expect(element.Name).eq('productType');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"AUX_PROQUA\"]);",
											"",
											"};",
											"test_map.beginningDateTime=function (element) {pm.expect(element.Name).eq('beginningDateTime');pm.expect(element.ValueType).eq('DateTimeOffset');pm.expect(element.Value).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);};",
											"test_map.endingDateTime=function (element) {pm.expect(element.Name).eq('endingDateTime');pm.expect(element.ValueType).eq('DateTimeOffset');pm.expect(element.Value).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);};",
											"test_map.processingCenter=function (element) {pm.expect(element.Name).eq('processingCenter');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');};",
											"test_map.processorVersion=function (element) {pm.expect(element.Name).eq('processorVersion');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');};",
											"test_map.processingDate=function (element) {pm.expect(element.Name).eq('processingDate');pm.expect(element.ValueType).eq('DateTimeOffset');pm.expect(element.Value).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);};",
											"",
											"test_schema={};",
											"test_schema.platformShortName=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.platformSerialIdentifier=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.productType=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.beginningDateTime=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.endingDateTime=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.processingCenter=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.processorVersion=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.processingDate=function (num) {pm.expect(num).to.be.eq(1)};",
											"",
											"            ",
											"properties_map = {};",
											"properties_map.Name=function (element) {pm.expect(element.Name).to.be.a(\"string\");};",
											"properties_map.ContentDate=function (element) {pm.expect(element.ContentDate[\"Start\"]).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);pm.expect(element.ContentDate[\"End\"]).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);};",
											"",
											"let schema_seen = {};",
											"",
											"function testSpecific(value, product){",
											"",
											"    if (schema_seen[value.Name]){",
											"        schema_seen[value.Name]++;",
											"    }else{",
											"        schema_seen[value.Name]=1;",
											"    }",
											"",
											"    if (test_map[value.Name]) {",
											"        pm.test(\"Test Attribute \"+value.Name + \" for Product: \"+product.Name+\" - \"+product.Id, function(){test_map[value.Name](value, product)});",
											"    }",
											"    else {",
											"        pm.test.skip(\"Test Attribute \"+value.Name + \" for Product: \"+product.Name+\" - \"+product.Id);",
											"    }",
											"}",
											"function propertySpecific(key, product){",
											"    if (properties_map[key]) {",
											"        pm.test(\"Test Property \"+key+\" for Product: \"+product.Name+\" - \"+product.Id, function(){properties_map[key](product)});",
											"    }",
											"    else {",
											"        pm.test.skip(\"Test Property \"+key+\" for Product: \"+product.Name+\" - \"+product.Id);",
											"    }",
											"}",
											"",
											"for (var counter = 0;  counter  < jsonDataElements.length; counter++){",
											"    var product = jsonDataElements[counter];",
											"    console.log(\"Processing Product: \"+product.Name+\" - \"+product.Id);",
											"",
											"    for (const[key, value] of Object.entries(properties_map)){",
											"        propertySpecific(key, jsonDataElements[counter]);",
											"    }",
											"",
											"    if(\"Attributes\" in jsonDataElements[counter]){",
											"        schema_seen = {};",
											"",
											"        pm.test(\"Test Attributes list\", function(){",
											"            pm.expect(jsonDataElements[counter].Attributes.length).to.be.above(0);",
											"        });",
											"",
											"        jsonDataElements[counter].Attributes.forEach(function(elem){",
											"            testSpecific(elem, jsonDataElements[counter]);",
											"        });",
											"        var product = jsonDataElements[counter];",
											"        for (const[key, value] of Object.entries(test_schema)) {pm.test(\"Schema Attribute \"+key+\" Product \"+product.Name+\" - \"+product.Id, function(){",
											"        if(schema_seen[key] == undefined){",
											"            schema_seen[key] = 0;",
											"        }",
											"        value(schema_seen[key], product)});}",
											"    }",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{service-root-uri}}/odata/v1/Products?$expand=Attributes&$top=1&$filter=(contains(Name,'AUX_PROQUA'))\n",
									"host": [
										"{{service-root-uri}}"
									],
									"path": [
										"odata",
										"v1",
										"Products"
									],
									"query": [
										{
											"key": "$expand",
											"value": "Attributes"
										},
										{
											"key": "$top",
											"value": "1"
										},
										{
											"key": "$filter",
											"value": "(contains(Name,'AUX_PROQUA'))\n"
										},
										{
											"key": "$filter",
											"value": "contains(Name,'AUX_PROQUA') and startswith(Name,'S')\n",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Auxiliary_Files_for_Sentinels",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d6d5ef69-450c-4150-a646-587a182f806f",
										"exec": [
											"var jsonDataElements = pm.response.json().value;",
											"pm.test(\"Response time is less than \" +  environment[\"query-timeout\"] + \"ms\", function(){",
											"    pm.expect(pm.response.responseTime).to.be.below(parseInt(environment[\"query-timeout\"]));",
											"});",
											"",
											"pm.test(\"Test OData context\", function(){",
											"    query_string = pm.request.url.getQueryString();",
											"    if(query_string.includes(\"$expand=Attributes\")){",
											"        pm.expect( pm.response.json()['@odata.context']).to.include(\"$metadata#Products(Attributes())\");",
											"    } else{",
											"        pm.expect( pm.response.json()['@odata.context']).to.include(\"$metadata#Products\");",
											"    }",
											"});",
											"",
											"var TRUE = true;",
											"var FALSE = false;",
											"",
											"test_map={};",
											"test_map.platformShortName=function (element) {pm.expect(element.Name).eq('platformShortName');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"SENTINEL-1\",\"SENTINEL-2\",\"SENTINEL-3\"]);};",
											"test_map.platformSerialIdentifier=function (element) {pm.expect(element.Name).eq('platformSerialIdentifier');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"A\",\"B\",\"C\",\"D\",\"_¹\"]);};",
											"test_map.productType=function (element) {pm.expect(element.Name).eq('productType');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"AUX_RESATT\",\"AUX_PRLPTF\",\"AUX_PRCPTF\",\"SR_2_NRPPAX\"]);",
											"",
											"};",
											"test_map.beginningDateTime=function (element) {pm.expect(element.Name).eq('beginningDateTime');pm.expect(element.ValueType).eq('DateTimeOffset');pm.expect(element.Value).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);};",
											"test_map.endingDateTime=function (element) {pm.expect(element.Name).eq('endingDateTime');pm.expect(element.ValueType).eq('DateTimeOffset');pm.expect(element.Value).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);};",
											"test_map.processingCenter=function (element) {pm.expect(element.Name).eq('processingCenter');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');};",
											"test_map.processorVersion=function (element) {pm.expect(element.Name).eq('processorVersion');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');};",
											"test_map.processingDate=function (element) {pm.expect(element.Name).eq('processingDate');pm.expect(element.ValueType).eq('DateTimeOffset');pm.expect(element.Value).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);};",
											"",
											"test_schema={};",
											"test_schema.platformShortName=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.platformSerialIdentifier=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.productType=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.beginningDateTime=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.endingDateTime=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.processingCenter=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.processorVersion=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.processingDate=function (num) {pm.expect(num).to.be.eq(1)};",
											"",
											"            ",
											"properties_map = {};",
											"properties_map.Name=function (element) {pm.expect(element.Name).to.be.a(\"string\");};",
											"properties_map.ContentDate=function (element) {pm.expect(element.ContentDate[\"Start\"]).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);pm.expect(element.ContentDate[\"End\"]).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);};",
											"",
											"let schema_seen = {};",
											"",
											"function testSpecific(value, product){",
											"",
											"    if (schema_seen[value.Name]){",
											"        schema_seen[value.Name]++;",
											"    }else{",
											"        schema_seen[value.Name]=1;",
											"    }",
											"",
											"    if (test_map[value.Name]) {",
											"        pm.test(\"Test Attribute \"+value.Name + \" for Product: \"+product.Name+\" - \"+product.Id, function(){test_map[value.Name](value, product)});",
											"    }",
											"    else {",
											"        pm.test.skip(\"Test Attribute \"+value.Name + \" for Product: \"+product.Name+\" - \"+product.Id);",
											"    }",
											"}",
											"function propertySpecific(key, product){",
											"    if (properties_map[key]) {",
											"        pm.test(\"Test Property \"+key+\" for Product: \"+product.Name+\" - \"+product.Id, function(){properties_map[key](product)});",
											"    }",
											"    else {",
											"        pm.test.skip(\"Test Property \"+key+\" for Product: \"+product.Name+\" - \"+product.Id);",
											"    }",
											"}",
											"",
											"for (var counter = 0;  counter  < jsonDataElements.length; counter++){",
											"    var product = jsonDataElements[counter];",
											"    console.log(\"Processing Product: \"+product.Name+\" - \"+product.Id);",
											"",
											"    for (const[key, value] of Object.entries(properties_map)){",
											"        propertySpecific(key, jsonDataElements[counter]);",
											"    }",
											"",
											"    if(\"Attributes\" in jsonDataElements[counter]){",
											"        schema_seen = {};",
											"",
											"        pm.test(\"Test Attributes list\", function(){",
											"            pm.expect(jsonDataElements[counter].Attributes.length).to.be.above(0);",
											"        });",
											"",
											"        jsonDataElements[counter].Attributes.forEach(function(elem){",
											"            testSpecific(elem, jsonDataElements[counter]);",
											"        });",
											"        var product = jsonDataElements[counter];",
											"        for (const[key, value] of Object.entries(test_schema)) {pm.test(\"Schema Attribute \"+key+\" Product \"+product.Name+\" - \"+product.Id, function(){",
											"        if(schema_seen[key] == undefined){",
											"            schema_seen[key] = 0;",
											"        }",
											"        value(schema_seen[key], product)});}",
											"    }",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{service-root-uri}}/odata/v1/Products?$expand=Attributes&$top=1&$filter=(contains(Name,'AUX_RESATT') or contains(Name,'AUX_PRLPTF') or contains(Name,'AUX_PRCPTF') or contains(Name,'SR_2_NRPPAX'))\n",
									"host": [
										"{{service-root-uri}}"
									],
									"path": [
										"odata",
										"v1",
										"Products"
									],
									"query": [
										{
											"key": "$expand",
											"value": "Attributes"
										},
										{
											"key": "$top",
											"value": "1"
										},
										{
											"key": "$filter",
											"value": "(contains(Name,'AUX_RESATT') or contains(Name,'AUX_PRLPTF') or contains(Name,'AUX_PRCPTF') or contains(Name,'SR_2_NRPPAX'))\n"
										},
										{
											"key": "$filter",
											"value": "contains(Name,'AUX_RESATT') and startswith(Name,'S')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'AUX_PRLPTF') and startswith(Name,'S')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'AUX_PRCPTF') and startswith(Name,'S')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_NRPPAX') and startswith(Name,'S')\n",
											"disabled": true
										}
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "DD",
					"item": [
						{
							"name": "GNSS_L1b_Files",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "754b356c-014e-488d-ae61-7bf30c840e0d",
										"exec": [
											"var jsonDataElements = pm.response.json().value;",
											"pm.test(\"Response time is less than \" +  environment[\"query-timeout\"] + \"ms\", function(){",
											"    pm.expect(pm.response.responseTime).to.be.below(parseInt(environment[\"query-timeout\"]));",
											"});",
											"",
											"pm.test(\"Test OData context\", function(){",
											"    query_string = pm.request.url.getQueryString();",
											"    if(query_string.includes(\"$expand=Attributes\")){",
											"        pm.expect( pm.response.json()['@odata.context']).to.include(\"$metadata#Products(Attributes())\");",
											"    } else{",
											"        pm.expect( pm.response.json()['@odata.context']).to.include(\"$metadata#Products\");",
											"    }",
											"});",
											"",
											"var TRUE = true;",
											"var FALSE = false;",
											"",
											"test_map={};",
											"test_map.platformShortName=function (element) {pm.expect(element.Name).eq('platformShortName');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"SENTINEL-1\",\"SENTINEL-2\",\"SENTINEL-3\"]);};",
											"test_map.platformSerialIdentifier=function (element) {pm.expect(element.Name).eq('platformSerialIdentifier');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"A\",\"B\",\"C\",\"D\",\"_¹\"]);};",
											"test_map.productType=function (element) {pm.expect(element.Name).eq('productType');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"AUX_GNSSRX\",\"AUX_GNSSRD\",\"AUX_GNSRXD\"]);",
											"",
											"};",
											"test_map.beginningDateTime=function (element) {pm.expect(element.Name).eq('beginningDateTime');pm.expect(element.ValueType).eq('DateTimeOffset');pm.expect(element.Value).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);};",
											"test_map.endingDateTime=function (element) {pm.expect(element.Name).eq('endingDateTime');pm.expect(element.ValueType).eq('DateTimeOffset');pm.expect(element.Value).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);};",
											"test_map.processingCenter=function (element) {pm.expect(element.Name).eq('processingCenter');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');};",
											"test_map.processorVersion=function (element) {pm.expect(element.Name).eq('processorVersion');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');};",
											"test_map.processingDate=function (element) {pm.expect(element.Name).eq('processingDate');pm.expect(element.ValueType).eq('DateTimeOffset');pm.expect(element.Value).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);};",
											"",
											"test_schema={};",
											"test_schema.platformShortName=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.platformSerialIdentifier=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.productType=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.beginningDateTime=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.endingDateTime=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.processingCenter=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.processorVersion=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.processingDate=function (num) {pm.expect(num).to.be.eq(1)};",
											"",
											"            ",
											"properties_map = {};",
											"properties_map.Name=function (element) {pm.expect(element.Name).to.be.a(\"string\");};",
											"properties_map.ContentDate=function (element) {pm.expect(element.ContentDate[\"Start\"]).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);pm.expect(element.ContentDate[\"End\"]).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);};",
											"",
											"let schema_seen = {};",
											"",
											"function testSpecific(value, product){",
											"",
											"    if (schema_seen[value.Name]){",
											"        schema_seen[value.Name]++;",
											"    }else{",
											"        schema_seen[value.Name]=1;",
											"    }",
											"",
											"    if (test_map[value.Name]) {",
											"        pm.test(\"Test Attribute \"+value.Name + \" for Product: \"+product.Name+\" - \"+product.Id, function(){test_map[value.Name](value, product)});",
											"    }",
											"    else {",
											"        pm.test.skip(\"Test Attribute \"+value.Name + \" for Product: \"+product.Name+\" - \"+product.Id);",
											"    }",
											"}",
											"function propertySpecific(key, product){",
											"    if (properties_map[key]) {",
											"        pm.test(\"Test Property \"+key+\" for Product: \"+product.Name+\" - \"+product.Id, function(){properties_map[key](product)});",
											"    }",
											"    else {",
											"        pm.test.skip(\"Test Property \"+key+\" for Product: \"+product.Name+\" - \"+product.Id);",
											"    }",
											"}",
											"",
											"for (var counter = 0;  counter  < jsonDataElements.length; counter++){",
											"    var product = jsonDataElements[counter];",
											"    console.log(\"Processing Product: \"+product.Name+\" - \"+product.Id);",
											"",
											"    for (const[key, value] of Object.entries(properties_map)){",
											"        propertySpecific(key, jsonDataElements[counter]);",
											"    }",
											"",
											"    if(\"Attributes\" in jsonDataElements[counter]){",
											"        schema_seen = {};",
											"",
											"        pm.test(\"Test Attributes list\", function(){",
											"            pm.expect(jsonDataElements[counter].Attributes.length).to.be.above(0);",
											"        });",
											"",
											"        jsonDataElements[counter].Attributes.forEach(function(elem){",
											"            testSpecific(elem, jsonDataElements[counter]);",
											"        });",
											"        var product = jsonDataElements[counter];",
											"        for (const[key, value] of Object.entries(test_schema)) {pm.test(\"Schema Attribute \"+key+\" Product \"+product.Name+\" - \"+product.Id, function(){",
											"        if(schema_seen[key] == undefined){",
											"            schema_seen[key] = 0;",
											"        }",
											"        value(schema_seen[key], product)});}",
											"    }",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{service-root-uri}}/odata/v1/Products?$expand=Attributes&$top=1&$filter=(contains(Name,'AUX_GNSSRX') or contains(Name,'AUX_GNSSRD') or contains(Name,'AUX_GNSRXD'))\n",
									"host": [
										"{{service-root-uri}}"
									],
									"path": [
										"odata",
										"v1",
										"Products"
									],
									"query": [
										{
											"key": "$expand",
											"value": "Attributes"
										},
										{
											"key": "$top",
											"value": "1"
										},
										{
											"key": "$filter",
											"value": "(contains(Name,'AUX_GNSSRX') or contains(Name,'AUX_GNSSRD') or contains(Name,'AUX_GNSRXD'))\n"
										},
										{
											"key": "$filter",
											"value": "contains(Name,'AUX_GNSSRX') and startswith(Name,'S')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'AUX_GNSSRD') and startswith(Name,'S')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'AUX_GNSRXD') and startswith(Name,'S')\n",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Quaternions_Files_(AUX_PROQUA)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e2c432f4-027c-47a0-b2af-05b4563d5f00",
										"exec": [
											"var jsonDataElements = pm.response.json().value;",
											"pm.test(\"Response time is less than \" +  environment[\"query-timeout\"] + \"ms\", function(){",
											"    pm.expect(pm.response.responseTime).to.be.below(parseInt(environment[\"query-timeout\"]));",
											"});",
											"",
											"pm.test(\"Test OData context\", function(){",
											"    query_string = pm.request.url.getQueryString();",
											"    if(query_string.includes(\"$expand=Attributes\")){",
											"        pm.expect( pm.response.json()['@odata.context']).to.include(\"$metadata#Products(Attributes())\");",
											"    } else{",
											"        pm.expect( pm.response.json()['@odata.context']).to.include(\"$metadata#Products\");",
											"    }",
											"});",
											"",
											"var TRUE = true;",
											"var FALSE = false;",
											"",
											"test_map={};",
											"test_map.platformShortName=function (element) {pm.expect(element.Name).eq('platformShortName');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"SENTINEL-1\",\"SENTINEL-2\",\"SENTINEL-3\"]);};",
											"test_map.platformSerialIdentifier=function (element) {pm.expect(element.Name).eq('platformSerialIdentifier');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"A\",\"B\",\"C\",\"D\",\"_¹\"]);};",
											"test_map.productType=function (element) {pm.expect(element.Name).eq('productType');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"AUX_PROQUA\"]);",
											"",
											"};",
											"test_map.beginningDateTime=function (element) {pm.expect(element.Name).eq('beginningDateTime');pm.expect(element.ValueType).eq('DateTimeOffset');pm.expect(element.Value).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);};",
											"test_map.endingDateTime=function (element) {pm.expect(element.Name).eq('endingDateTime');pm.expect(element.ValueType).eq('DateTimeOffset');pm.expect(element.Value).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);};",
											"test_map.processingCenter=function (element) {pm.expect(element.Name).eq('processingCenter');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');};",
											"test_map.processorVersion=function (element) {pm.expect(element.Name).eq('processorVersion');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');};",
											"test_map.processingDate=function (element) {pm.expect(element.Name).eq('processingDate');pm.expect(element.ValueType).eq('DateTimeOffset');pm.expect(element.Value).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);};",
											"",
											"test_schema={};",
											"test_schema.platformShortName=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.platformSerialIdentifier=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.productType=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.beginningDateTime=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.endingDateTime=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.processingCenter=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.processorVersion=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.processingDate=function (num) {pm.expect(num).to.be.eq(1)};",
											"",
											"            ",
											"properties_map = {};",
											"properties_map.Name=function (element) {pm.expect(element.Name).to.be.a(\"string\");};",
											"properties_map.ContentDate=function (element) {pm.expect(element.ContentDate[\"Start\"]).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);pm.expect(element.ContentDate[\"End\"]).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);};",
											"",
											"let schema_seen = {};",
											"",
											"function testSpecific(value, product){",
											"",
											"    if (schema_seen[value.Name]){",
											"        schema_seen[value.Name]++;",
											"    }else{",
											"        schema_seen[value.Name]=1;",
											"    }",
											"",
											"    if (test_map[value.Name]) {",
											"        pm.test(\"Test Attribute \"+value.Name + \" for Product: \"+product.Name+\" - \"+product.Id, function(){test_map[value.Name](value, product)});",
											"    }",
											"    else {",
											"        pm.test.skip(\"Test Attribute \"+value.Name + \" for Product: \"+product.Name+\" - \"+product.Id);",
											"    }",
											"}",
											"function propertySpecific(key, product){",
											"    if (properties_map[key]) {",
											"        pm.test(\"Test Property \"+key+\" for Product: \"+product.Name+\" - \"+product.Id, function(){properties_map[key](product)});",
											"    }",
											"    else {",
											"        pm.test.skip(\"Test Property \"+key+\" for Product: \"+product.Name+\" - \"+product.Id);",
											"    }",
											"}",
											"",
											"for (var counter = 0;  counter  < jsonDataElements.length; counter++){",
											"    var product = jsonDataElements[counter];",
											"    console.log(\"Processing Product: \"+product.Name+\" - \"+product.Id);",
											"",
											"    for (const[key, value] of Object.entries(properties_map)){",
											"        propertySpecific(key, jsonDataElements[counter]);",
											"    }",
											"",
											"    if(\"Attributes\" in jsonDataElements[counter]){",
											"        schema_seen = {};",
											"",
											"        pm.test(\"Test Attributes list\", function(){",
											"            pm.expect(jsonDataElements[counter].Attributes.length).to.be.above(0);",
											"        });",
											"",
											"        jsonDataElements[counter].Attributes.forEach(function(elem){",
											"            testSpecific(elem, jsonDataElements[counter]);",
											"        });",
											"        var product = jsonDataElements[counter];",
											"        for (const[key, value] of Object.entries(test_schema)) {pm.test(\"Schema Attribute \"+key+\" Product \"+product.Name+\" - \"+product.Id, function(){",
											"        if(schema_seen[key] == undefined){",
											"            schema_seen[key] = 0;",
											"        }",
											"        value(schema_seen[key], product)});}",
											"    }",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{service-root-uri}}/odata/v1/Products?$expand=Attributes&$top=1&$filter=(contains(Name,'AUX_PROQUA'))\n",
									"host": [
										"{{service-root-uri}}"
									],
									"path": [
										"odata",
										"v1",
										"Products"
									],
									"query": [
										{
											"key": "$expand",
											"value": "Attributes"
										},
										{
											"key": "$top",
											"value": "1"
										},
										{
											"key": "$filter",
											"value": "(contains(Name,'AUX_PROQUA'))\n"
										},
										{
											"key": "$filter",
											"value": "contains(Name,'AUX_PROQUA') and startswith(Name,'S')\n",
											"disabled": true
										}
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "PR",
					"item": [
						{
							"name": "POD_Orbit_Files",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fbde4ec9-56e2-4415-983b-85e8b332dfd1",
										"exec": [
											"var jsonDataElements = pm.response.json().value;",
											"pm.test(\"Response time is less than \" +  environment[\"query-timeout\"] + \"ms\", function(){",
											"    pm.expect(pm.response.responseTime).to.be.below(parseInt(environment[\"query-timeout\"]));",
											"});",
											"",
											"pm.test(\"Test OData context\", function(){",
											"    query_string = pm.request.url.getQueryString();",
											"    if(query_string.includes(\"$expand=Attributes\")){",
											"        pm.expect( pm.response.json()['@odata.context']).to.include(\"$metadata#Products(Attributes())\");",
											"    } else{",
											"        pm.expect( pm.response.json()['@odata.context']).to.include(\"$metadata#Products\");",
											"    }",
											"});",
											"",
											"var TRUE = true;",
											"var FALSE = false;",
											"",
											"test_map={};",
											"test_map.platformShortName=function (element) {pm.expect(element.Name).eq('platformShortName');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"SENTINEL-1\",\"SENTINEL-2\",\"SENTINEL-3\"]);};",
											"test_map.platformSerialIdentifier=function (element) {pm.expect(element.Name).eq('platformSerialIdentifier');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"A\",\"B\",\"C\",\"D\",\"_¹\"]);};",
											"test_map.productType=function (element) {pm.expect(element.Name).eq('productType');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"AUX_PREORB\",\"AUX_RESORB\",\"AUX_MOEORB\",\"AUX_POEORB\",\"SR___ROE_AX\"]);",
											"",
											"};",
											"test_map.beginningDateTime=function (element) {pm.expect(element.Name).eq('beginningDateTime');pm.expect(element.ValueType).eq('DateTimeOffset');pm.expect(element.Value).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);};",
											"test_map.endingDateTime=function (element) {pm.expect(element.Name).eq('endingDateTime');pm.expect(element.ValueType).eq('DateTimeOffset');pm.expect(element.Value).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);};",
											"test_map.processingCenter=function (element) {pm.expect(element.Name).eq('processingCenter');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');};",
											"test_map.processorVersion=function (element) {pm.expect(element.Name).eq('processorVersion');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');};",
											"test_map.processingDate=function (element) {pm.expect(element.Name).eq('processingDate');pm.expect(element.ValueType).eq('DateTimeOffset');pm.expect(element.Value).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);};",
											"",
											"test_schema={};",
											"test_schema.platformShortName=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.platformSerialIdentifier=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.productType=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.beginningDateTime=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.endingDateTime=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.processingCenter=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.processorVersion=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.processingDate=function (num) {pm.expect(num).to.be.eq(1)};",
											"",
											"            ",
											"properties_map = {};",
											"properties_map.Id=function (element) {pm.expect(element.Id).to.match(/[0-9a-fA-F]{8}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{12}/);};",
											"properties_map.Name=function (element) {pm.expect(element.Name).to.be.a(\"string\");};",
											"properties_map.ContentType=function (element) {pm.expect(element.ContentType).to.be.a(\"string\");};",
											"properties_map.ContentLength=function (element) {pm.expect(element.ContentLength).to.be.a(\"number\");};",
											"properties_map.PublicationDate=function (element) {pm.expect(element.PublicationDate).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);};",
											"properties_map.EvictionDate=function (element) {if(element.EvictionDate){ pm.expect(element.EvictionDate).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d+([+-][0-2]\\d:[0-5]\\d|Z)/); }};",
											"properties_map.Checksum=function (element) {for(i=0; i<element.Checksum.length; i++ ){pm.expect(element.Checksum[i].Algorithm).to.be.oneOf([\"MD5\",\"SHA-1\",\"SHA-256\",\"SHA-512\"]);checksum_algorithm = {'MD5': '[a-fA-F0-9]{32}', 'SHA-1': '[0-9a-f]{5,40}', 'SHA-256': '[A-Fa-f0-9]{64}', 'SHA-512': '[A-Fa-f0-9]{128}'};pm.expect(element.Checksum[i].Value).to.match(new RegExp(checksum_algorithm[element.Checksum[i].Algorithm]));}};",
											"properties_map.ContentDate=function (element) {pm.expect(element.ContentDate[\"Start\"]).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);pm.expect(element.ContentDate[\"End\"]).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);};",
											"properties_map.ProductionType=function (element) {pm.expect(element.ProductionType).to.be.oneOf([\"systematic_production\",\"on-demand default\",\"on-demand non-default\"]);};",
											"properties_map.Footprint=function (element) {if(element.Footprint){ pm.expect(element.Footprint).to.match(/geography'SRID=\\d+;[Polygon|Multipolygon|Point](.*)/); }};",
											"",
											"let schema_seen = {};",
											"",
											"function testSpecific(value, product){",
											"",
											"    if (schema_seen[value.Name]){",
											"        schema_seen[value.Name]++;",
											"    }else{",
											"        schema_seen[value.Name]=1;",
											"    }",
											"",
											"    if (test_map[value.Name]) {",
											"        pm.test(\"Test Attribute \"+value.Name + \" for Product: \"+product.Name+\" - \"+product.Id, function(){test_map[value.Name](value, product)});",
											"    }",
											"    else {",
											"        pm.test.skip(\"Test Attribute \"+value.Name + \" for Product: \"+product.Name+\" - \"+product.Id);",
											"    }",
											"}",
											"function propertySpecific(key, product){",
											"    if (properties_map[key]) {",
											"        pm.test(\"Test Property \"+key+\" for Product: \"+product.Name+\" - \"+product.Id, function(){properties_map[key](product)});",
											"    }",
											"    else {",
											"        pm.test.skip(\"Test Property \"+key+\" for Product: \"+product.Name+\" - \"+product.Id);",
											"    }",
											"}",
											"",
											"for (var counter = 0;  counter  < jsonDataElements.length; counter++){",
											"    var product = jsonDataElements[counter];",
											"    console.log(\"Processing Product: \"+product.Name+\" - \"+product.Id);",
											"",
											"    for (const[key, value] of Object.entries(properties_map)){",
											"        propertySpecific(key, jsonDataElements[counter]);",
											"    }",
											"",
											"    if(\"Attributes\" in jsonDataElements[counter]){",
											"        schema_seen = {};",
											"",
											"        pm.test(\"Test Attributes list\", function(){",
											"            pm.expect(jsonDataElements[counter].Attributes.length).to.be.above(0);",
											"        });",
											"",
											"        jsonDataElements[counter].Attributes.forEach(function(elem){",
											"            testSpecific(elem, jsonDataElements[counter]);",
											"        });",
											"        var product = jsonDataElements[counter];",
											"        for (const[key, value] of Object.entries(test_schema)) {pm.test(\"Schema Attribute \"+key+\" Product \"+product.Name+\" - \"+product.Id, function(){",
											"        if(schema_seen[key] == undefined){",
											"            schema_seen[key] = 0;",
											"        }",
											"        value(schema_seen[key], product)});}",
											"    }",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{service-root-uri}}/odata/v1/Products?$expand=Attributes&$top=1&$filter=(contains(Name,'AUX_PREORB') or contains(Name,'AUX_RESORB') or contains(Name,'AUX_MOEORB') or contains(Name,'AUX_POEORB') or contains(Name,'SR___ROE_AX'))\n",
									"host": [
										"{{service-root-uri}}"
									],
									"path": [
										"odata",
										"v1",
										"Products"
									],
									"query": [
										{
											"key": "$expand",
											"value": "Attributes"
										},
										{
											"key": "$top",
											"value": "1"
										},
										{
											"key": "$filter",
											"value": "(contains(Name,'AUX_PREORB') or contains(Name,'AUX_RESORB') or contains(Name,'AUX_MOEORB') or contains(Name,'AUX_POEORB') or contains(Name,'SR___ROE_AX'))\n"
										},
										{
											"key": "$filter",
											"value": "contains(Name,'AUX_PREORB') and startswith(Name,'S')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'AUX_RESORB') and startswith(Name,'S')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'AUX_MOEORB') and startswith(Name,'S')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'AUX_POEORB') and startswith(Name,'S')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR___ROE_AX') and startswith(Name,'S')\n",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "External_Auxiliary_Data_Files",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a8a695b7-3ab2-4811-8ca0-c1ff51a13755",
										"exec": [
											"var jsonDataElements = pm.response.json().value;",
											"pm.test(\"Response time is less than \" +  environment[\"query-timeout\"] + \"ms\", function(){",
											"    pm.expect(pm.response.responseTime).to.be.below(parseInt(environment[\"query-timeout\"]));",
											"});",
											"",
											"pm.test(\"Test OData context\", function(){",
											"    query_string = pm.request.url.getQueryString();",
											"    if(query_string.includes(\"$expand=Attributes\")){",
											"        pm.expect( pm.response.json()['@odata.context']).to.include(\"$metadata#Products(Attributes())\");",
											"    } else{",
											"        pm.expect( pm.response.json()['@odata.context']).to.include(\"$metadata#Products\");",
											"    }",
											"});",
											"",
											"var TRUE = true;",
											"var FALSE = false;",
											"",
											"test_map={};",
											"test_map.productType=function (element) {pm.expect(element.Name).eq('productType');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"AUX_GSVMAX\",\"AUX_GSVHAX\",\"AUX_GCLHAX\",\"AUX_EOPHAX\",\"AUX_GSVSTC\",\"AUX_GCLSTC\",\"AUX_EOPSTC\",\"AUX_NAV_AX\",\"AUX_NSA_AX\",\"AUX_NTR_AX\",\"AUX_NPR_AX\",\"AUX_ATX_AX\",\"AUX_GSVNTC\",\"AUX_GCLNTC\",\"AUX_GSVREP\",\"AUX_GCLREP\",\"AUX_EOP_AX\",\"AUX_LSC_AX\",\"AUX_SAC_AX\",\"AUX_AGRA__\",\"AUX_AGRA__\",\"AUX_SLR___\",\"AUX_DORIS_\",\"AUX_NSA3AX\",\"AUX_NTR3AX\",\"AUX_ATX3AX\",\"AUX_ICDBAX\",\"AUX_EXTORB\",\"AUX_DCB___\",\"GN_1_GSVMAX\",\"GN_1_GSVHAX\",\"GN_1_GCLHAX\",\"GN_1_EOPHAX\",\"GN_1_NAV_AX\",\"GN_1_NSA_AX\",\"GN_1_NTR_AX\",\"GN_1_NPR_AX\",\"GN_1_ATX_AX\",\"GN_1_EOP_AX\",\"GN_1_LSC_AX\",\"GN_1_SAC_AX\",\"GN_1_NSA3AX\",\"GN_1_NTR3AX\",\"GN_1_ATX3AX\",\"GN_1_CHD_AX\",\"AX___MF1_AX\",\"AX___MFA_AX\",\"AX___MA1_AX\",\"AX___MF2_AX\",\"AX___MA2_AX\",\"AX___OSF_AX\",\"AX___FPO_AX\",\"AX___FRO_AX\",\"AX___BA__AX\",\"AX___BB2_AX\",\"AX___DEM_AX\",\"AX___LWM_AX\",\"AX___OOM_AX\",\"AX___CLM_AX\",\"AX___TRM_AX\",\"AX___CST_AX\",\"SR___CHDNAX\",\"SR___CHDRAX\",\"SR_1_CONMAX\",\"SR_1_CONCAX\",\"SR_2_CON_AX\",\"SR___LSM_AX\",\"SR_2_IC01AX\",\"SR_2_IC02AX\",\"SR_2_IC03AX\",\"SR_2_IC04AX\",\"SR_2_IC05AX\",\"SR_2_IC06AX\",\"SR_2_IC07AX\",\"SR_2_IC08AX\",\"SR_2_IC09AX\",\"SR_2_IC10AX\",\"SR_2_EOT1AX\",\"SR_2_EOT2AX\",\"SR_2_LT1_AX\",\"SR_2_LT2_AX\",\"SR_2_LNEQAX\",\"SR_2_GEO_AX\",\"SR_2_MSS1AX\",\"SR_2_MSS2AX\",\"SR_2_ODLEAX\",\"SR_2_WNDLAX\",\"SR_2_WNDSAX\",\"SR_2_SIGLAX\",\"SR_2_SIGSAX\",\"SR_2_SET_AX\",\"SR_2_SSM_AX\",\"SR_2_MSMGAX\",\"SR_2_CP00AX\",\"SR_2_CP06AX\",\"SR_2_CP12AX\",\"SR_2_CP18AX\",\"SR_2_S1AMAX\",\"SR_2_S2AMAX\",\"SR_2_S1PHAX\",\"SR_2_S2PHAX\",\"SR_2_MDT_AX\",\"SR_2_SHD_AX\",\"SR_2_SSBLAX\",\"SR_2_SSBSAX\",\"SR_2_SD01AX\",\"SR_2_SD02AX\",\"SR_2_SD03AX\",\"SR_2_SD04AX\",\"SR_2_SD05AX\",\"SR_2_SD06AX\",\"SR_2_SD07AX\",\"SR_2_SD08AX\",\"SR_2_SD09AX\",\"SR_2_SD10AX\",\"SR_2_SD11AX\",\"SR_2_SD12AX\",\"SR_2_SI01AX\",\"SR_2_SI02AX\",\"SR_2_SI03AX\",\"SR_2_SI04AX\",\"SR_2_SI05AX\",\"SR_2_SI06AX\",\"SR_2_SI07AX\",\"SR_2_SI08AX\",\"SR_2_SI09AX\",\"SR_2_SI10AX\",\"SR_2_SI11AX\",\"SR_2_SI12AX\",\"SR_2_SST_AX\",\"SR_2_LRC_AX\",\"SR_2_SFL_AX\",\"SR_2_FLT_AX\",\"SR_2_RRC_AX\",\"SR_2_CCT_AX\",\"SR_2_SURFAX\",\"SR_2_RET_AX\",\"SR_2_MLM_AX\",\"SR_2_MAG_AX\",\"SR_2_LUTFAX\",\"SR_2_LUTEAX\",\"SR_2_LUTSAX\",\"SR___ROE_AX\",\"SR_1_CA1LAX\",\"SR_1_CA1SAX\",\"SR_1_CA2KAX\",\"SR_1_CA2CAX\",\"CAL2_C_LTM\",\"MW_1_NIR_AX\",\"MW_1_DNB_AX\",\"MW_1_MON_AX\",\"SL_1_VSC_AX\",\"SR___MGNPAX\",\"SR___POEPAX\",\"SR_2_PMPPAX\",\"SR_2_PCPPAX\",\"SR___MDO_AX\",\"SR___POESAX\",\"SR_2_PMPSAX\",\"SR_2_RMO_AX\",\"SR_2_PMO_AX\",\"SR_2_POL_AX\",\"SR_2_PGI_AX\",\"SR_2_RGI_AX\",\"SR_1_USO_AX\",\"SR___MGNSAX\",\"SR_2_SIC_AX\",\"MW_1_SLC_AX\",\"MW___CHDNAX\",\"MW___CHDRAX\",\"MW___STD_AX\",\"OL_1_EO__AX\",\"OL_1_RAC_AX\",\"OL_1_SPC_AX\",\"OL_1_CLUTAX\",\"OL_1_INS_AX\",\"OL_1_CAL_AX\",\"OL_1_PRG_AX\",\"OL_2_PCP_AX\",\"OL_2_PPP_AX\",\"OL_2_CLP_AX\",\"OL_2_WVP_AX\",\"OL_2_ACP_AX\",\"OL_2_OCP_AX\",\"OL_2_VGP_AX\",\"SL_1_PCP_AX\",\"SL_1_ANC_AX\",\"SL_1_N_S1AX\",\"SL_1_N_S2AX\",\"SL_1_N_S3AX\",\"SL_1_O_S1AX\",\"SL_1_O_S2AX\",\"SL_1_O_S3AX\",\"SL_1_NAS4AX\",\"SL_1_NAS5AX\",\"SL_1_NAS6AX\",\"SL_1_NBS4AX\",\"SL_1_NBS5AX\",\"SL_1_NBS6AX\",\"SL_1_OAS4AX\",\"SL_1_OAS5AX\",\"SL_1_OAS6AX\",\"SL_1_OBS4AX\",\"SL_1_OBS5AX\",\"SL_1_OBS6AX\",\"SL_1_N_S7AX\",\"SL_1_N_S8AX\",\"SL_1_N_S9AX\",\"SL_1_N_F1AX\",\"SL_1_N_F2AX\",\"SL_1_O_S7AX\",\"SL_1_O_S8AX\",\"SL_1_O_S9AX\",\"SL_1_O_F1AX\",\"SL_1_O_F2AX\",\"SL_1_VIC_AX\",\"SL_1_GEO_AX\",\"SL_1_GEC_AX\",\"SL_1_CLO_AX\",\"SL_1_ESSTAX\",\"SL_2_PCP_AX\",\"SL_2_S6N_AX\",\"SL_2_S7N_AX\",\"SL_2_S8N_AX\",\"SL_2_S9N_AX\",\"SL_2_F1N_AX\",\"SL_2_F2N_AX\",\"SL_2_S7O_AX\",\"SL_2_S8O_AX\",\"SL_2_S9O_AX\",\"SL_2_N2_CAX\",\"SL_2_N3RCAX\",\"SL_2_N3_CAX\",\"SL_2_D2_CAX\",\"SL_2_D3_CAX\",\"SL_2_SST_AX\",\"SL_2_SDI3AX\",\"SL_2_SDI2AX\",\"SL_2_SSESAX\",\"SL_2_LSTCAX\",\"SL_2_LSTBAX\",\"SL_2_LSTVAX\",\"SL_2_LSTWAX\",\"SL_2_LSTEAX\",\"SL_2_FRPTAX\",\"SL_2_SSTAAX\",\"OL_1_PCPBAX\",\"SL_1_PCPBAX\",\"SL_1_PLTBAX\",\"OL_2_PCPBAX\",\"OL_2_PLTBAX\",\"SL_2_PCPBAX\",\"GN_1_GSVMAX\",\"GN_1_GSVHAX\",\"GN_1_GCLHAX\",\"GN_1_EOP_AX\",\"GN_1_EOPHAX\",\"GN_1_LSC_AX\",\"GN_1_NAV_AX\",\"GN_1_NSA_AX\",\"GN_1_NTR_AX\",\"GN_1_NPR_AX\",\"GN_1_ATX_AX\",\"GN_1_SAC_AX\",\"GN_1_CHD_AX\",\"GN_1_NSA3AX\",\"GN_1_NTR3AX\",\"GN_1_ATX3AX\",\"GN_1_MANHAX\",\"GN_1_MASSAX\",\"SR_2_NRPPAX\",\"OL_1_MCHDAX\",\"SL_1_MCHDAX\",\"SY_1_PCP_AX\",\"SY_1_CDIBAX\",\"SY_2_PCP_AX\",\"SY_2_PCPSAX\",\"SY_2_RAD_AX\",\"SY_2_RADPAX\",\"SY_2_SPCPAX\",\"SY_2_RADSAX\",\"SY_2_PCPBAX\",\"SY_2_PLTBAX\",\"SY_2_CVPBAX\",\"SY_2_PVPBAX\",\"SY_2_CVSBAX\",\"SY_2_PVSBAX\",\"SY_1_GCPBAX\",\"SL_2_ACLMAX\",\"SL_2_ART_AX\",\"SL_2_OSR_AX\",\"SL_2_PCPAAX\",\"SY_2_ACLMAX\",\"SY_2_ART_AX\",\"SY_2_LSR_AX\",\"SY_2_OSR_AX\",\"SY_2_PCPAAX\",\"SL_2_CFM_AX\",\"SL_2_FXPAAX\",\"SL_2_PCPFAX\",\"SL_2_PLFMAX\",\"SL_2_SXPAAX\",\"SL_1_IRE_AX\",\"SL_1_LCC_AX\",\"SL_1_CDP_AX\",\"SL_1_CLP_AX\",\"SL_1_ADJ_AX\",\"SL_1_RTT_AX\",\"SY_2_AODCAX\"]);",
											"",
											"};",
											"test_map.timeliness=function (element) {pm.expect(element.Name).eq('timeliness');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');};",
											"test_map.platformShortName=function (element) {pm.expect(element.Name).eq('platformShortName');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"SENTINEL-1\",\"SENTINEL-2\",\"SENTINEL-3\"]);};",
											"test_map.platformSerialIdentifier=function (element) {pm.expect(element.Name).eq('platformSerialIdentifier');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"A\",\"B\",\"C\",\"D\",\"_¹\"]);};",
											"test_map.beginningDateTime=function (element) {pm.expect(element.Name).eq('beginningDateTime');pm.expect(element.ValueType).eq('DateTimeOffset');pm.expect(element.Value).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);};",
											"test_map.endingDateTime=function (element) {pm.expect(element.Name).eq('endingDateTime');pm.expect(element.ValueType).eq('DateTimeOffset');pm.expect(element.Value).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);};",
											"test_map.processingCenter=function (element) {pm.expect(element.Name).eq('processingCenter');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');};",
											"test_map.processorName=function (element) {pm.expect(element.Name).eq('processorName');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');};",
											"test_map.processorVersion=function (element) {pm.expect(element.Name).eq('processorVersion');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');};",
											"",
											"test_schema={};",
											"test_schema.productType=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.timeliness=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.platformShortName=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.platformSerialIdentifier=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.beginningDateTime=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.endingDateTime=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.processingCenter=function (num) {pm.expect(num).to.be.within(0,1)};",
											"test_schema.processorName=function (num) {pm.expect(num).to.be.within(0,1)};",
											"test_schema.processorVersion=function (num) {pm.expect(num).to.be.within(0,1)};",
											"",
											"            ",
											"properties_map = {};",
											"properties_map.Id=function (element) {pm.expect(element.Id).to.match(/[0-9a-fA-F]{8}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{12}/);};",
											"properties_map.Name=function (element) {pm.expect(element.Name).to.be.a(\"string\");};",
											"properties_map.ContentType=function (element) {pm.expect(element.ContentType).to.be.a(\"string\");};",
											"properties_map.ContentLength=function (element) {pm.expect(element.ContentLength).to.be.a(\"number\");};",
											"properties_map.PublicationDate=function (element) {pm.expect(element.PublicationDate).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);};",
											"properties_map.EvictionDate=function (element) {if(element.EvictionDate){ pm.expect(element.EvictionDate).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d+([+-][0-2]\\d:[0-5]\\d|Z)/); }};",
											"properties_map.Checksum=function (element) {for(i=0; i<element.Checksum.length; i++ ){pm.expect(element.Checksum[i].Algorithm).to.be.oneOf([\"MD5\",\"SHA-1\",\"SHA-256\",\"SHA-512\"]);checksum_algorithm = {'MD5': '[a-fA-F0-9]{32}', 'SHA-1': '[0-9a-f]{5,40}', 'SHA-256': '[A-Fa-f0-9]{64}', 'SHA-512': '[A-Fa-f0-9]{128}'};pm.expect(element.Checksum[i].Value).to.match(new RegExp(checksum_algorithm[element.Checksum[i].Algorithm]));}};",
											"properties_map.ContentDate=function (element) {pm.expect(element.ContentDate[\"Start\"]).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);pm.expect(element.ContentDate[\"End\"]).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);};",
											"properties_map.ProductionType=function (element) {pm.expect(element.ProductionType).to.be.oneOf([\"systematic_production\",\"on-demand default\",\"on-demand non-default\"]);};",
											"properties_map.Footprint=function (element) {if(element.Footprint){ pm.expect(element.Footprint).to.match(/geography'SRID=\\d+;[Polygon|Multipolygon|Point](.*)/); }};",
											"",
											"let schema_seen = {};",
											"",
											"function testSpecific(value, product){",
											"",
											"    if (schema_seen[value.Name]){",
											"        schema_seen[value.Name]++;",
											"    }else{",
											"        schema_seen[value.Name]=1;",
											"    }",
											"",
											"    if (test_map[value.Name]) {",
											"        pm.test(\"Test Attribute \"+value.Name + \" for Product: \"+product.Name+\" - \"+product.Id, function(){test_map[value.Name](value, product)});",
											"    }",
											"    else {",
											"        pm.test.skip(\"Test Attribute \"+value.Name + \" for Product: \"+product.Name+\" - \"+product.Id);",
											"    }",
											"}",
											"function propertySpecific(key, product){",
											"    if (properties_map[key]) {",
											"        pm.test(\"Test Property \"+key+\" for Product: \"+product.Name+\" - \"+product.Id, function(){properties_map[key](product)});",
											"    }",
											"    else {",
											"        pm.test.skip(\"Test Property \"+key+\" for Product: \"+product.Name+\" - \"+product.Id);",
											"    }",
											"}",
											"",
											"for (var counter = 0;  counter  < jsonDataElements.length; counter++){",
											"    var product = jsonDataElements[counter];",
											"    console.log(\"Processing Product: \"+product.Name+\" - \"+product.Id);",
											"",
											"    for (const[key, value] of Object.entries(properties_map)){",
											"        propertySpecific(key, jsonDataElements[counter]);",
											"    }",
											"",
											"    if(\"Attributes\" in jsonDataElements[counter]){",
											"        schema_seen = {};",
											"",
											"        pm.test(\"Test Attributes list\", function(){",
											"            pm.expect(jsonDataElements[counter].Attributes.length).to.be.above(0);",
											"        });",
											"",
											"        jsonDataElements[counter].Attributes.forEach(function(elem){",
											"            testSpecific(elem, jsonDataElements[counter]);",
											"        });",
											"        var product = jsonDataElements[counter];",
											"        for (const[key, value] of Object.entries(test_schema)) {pm.test(\"Schema Attribute \"+key+\" Product \"+product.Name+\" - \"+product.Id, function(){",
											"        if(schema_seen[key] == undefined){",
											"            schema_seen[key] = 0;",
											"        }",
											"        value(schema_seen[key], product)});}",
											"    }",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{service-root-uri}}/odata/v1/Products?$expand=Attributes&$top=1&$filter=(contains(Name,'AX') or contains(Name, 'CAL2_C_LTM') or contains(Name, 'AUX_GSVSTC') or contains(Name, 'AUX_GCLSTC') or contains(Name, 'AUX_EOPSTC') or contains(Name, 'AUX_GSVNTC') or contains(Name, 'AUX_GCLNTC') or contains(Name, 'AUX_GSVREP') or contains(Name, 'AUX_GCLREP') or contains(Name, 'AUX_AGRA__') or contains(Name, 'AUX_AGRA__') or contains(Name, 'AUX_SLR___') or contains(Name, 'AUX_DORIS_') or contains(Name, 'AUX_EXTORB') or contains(Name, 'AUX_DCB___') or contains(Name, 'CAL2_C_LTM')) and startswith(Name,'S')\n",
									"host": [
										"{{service-root-uri}}"
									],
									"path": [
										"odata",
										"v1",
										"Products"
									],
									"query": [
										{
											"key": "$expand",
											"value": "Attributes"
										},
										{
											"key": "$top",
											"value": "1"
										},
										{
											"key": "$filter",
											"value": "(contains(Name,'AX') or contains(Name, 'CAL2_C_LTM') or contains(Name, 'AUX_GSVSTC') or contains(Name, 'AUX_GCLSTC') or contains(Name, 'AUX_EOPSTC') or contains(Name, 'AUX_GSVNTC') or contains(Name, 'AUX_GCLNTC') or contains(Name, 'AUX_GSVREP') or contains(Name, 'AUX_GCLREP') or contains(Name, 'AUX_AGRA__') or contains(Name, 'AUX_AGRA__') or contains(Name, 'AUX_SLR___') or contains(Name, 'AUX_DORIS_') or contains(Name, 'AUX_EXTORB') or contains(Name, 'AUX_DCB___') or contains(Name, 'CAL2_C_LTM')) and startswith(Name,'S')\n"
										},
										{
											"key": "$filter",
											"value": "contains(Name,'AUX_GSVMAX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'AUX_GSVHAX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'AUX_GCLHAX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'AUX_EOPHAX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'AUX_GSVSTC')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'AUX_GCLSTC')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'AUX_EOPSTC')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'AUX_NAV_AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'AUX_NSA_AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'AUX_NTR_AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'AUX_NPR_AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'AUX_ATX_AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'AUX_GSVNTC')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'AUX_GCLNTC')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'AUX_GSVREP')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'AUX_GCLREP')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'AUX_EOP_AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'AUX_LSC_AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'AUX_SAC_AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'AUX_AGRA__')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'AUX_AGRA__')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'AUX_SLR___')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'AUX_DORIS_')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'AUX_NSA3AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'AUX_NTR3AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'AUX_ATX3AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'AUX_ICDBAX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'AUX_EXTORB')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'AUX_DCB___')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'GN_1_GSVMAX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'GN_1_GSVHAX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'GN_1_GCLHAX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'GN_1_EOPHAX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'GN_1_NAV_AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'GN_1_NSA_AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'GN_1_NTR_AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'GN_1_NPR_AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'GN_1_ATX_AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'GN_1_EOP_AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'GN_1_LSC_AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'GN_1_SAC_AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'GN_1_NSA3AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'GN_1_NTR3AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'GN_1_ATX3AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'GN_1_CHD_AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'AX___MF1_AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'AX___MFA_AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'AX___MA1_AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'AX___MF2_AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'AX___MA2_AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'AX___OSF_AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'AX___FPO_AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'AX___FRO_AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'AX___BA__AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'AX___BB2_AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'AX___DEM_AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'AX___LWM_AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'AX___OOM_AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'AX___CLM_AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'AX___TRM_AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'AX___CST_AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR___CHDNAX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR___CHDRAX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_1_CONMAX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_1_CONCAX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_CON_AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR___LSM_AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_IC01AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_IC02AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_IC03AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_IC04AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_IC05AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_IC06AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_IC07AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_IC08AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_IC09AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_IC10AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_EOT1AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_EOT2AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_LT1_AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_LT2_AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_LNEQAX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_GEO_AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_MSS1AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_MSS2AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_ODLEAX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_WNDLAX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_WNDSAX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_SIGLAX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_SIGSAX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_SET_AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_SSM_AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_MSMGAX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_CP00AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_CP06AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_CP12AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_CP18AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_S1AMAX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_S2AMAX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_S1PHAX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_S2PHAX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_MDT_AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_SHD_AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_SSBLAX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_SSBSAX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_SD01AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_SD02AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_SD03AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_SD04AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_SD05AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_SD06AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_SD07AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_SD08AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_SD09AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_SD10AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_SD11AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_SD12AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_SI01AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_SI02AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_SI03AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_SI04AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_SI05AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_SI06AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_SI07AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_SI08AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_SI09AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_SI10AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_SI11AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_SI12AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_SST_AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_LRC_AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_SFL_AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_FLT_AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_RRC_AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_CCT_AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_SURFAX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_RET_AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_MLM_AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_MAG_AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_LUTFAX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_LUTEAX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_LUTSAX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR___ROE_AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_1_CA1LAX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_1_CA1SAX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_1_CA2KAX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_1_CA2CAX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'CAL2_C_LTM')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'MW_1_NIR_AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'MW_1_DNB_AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'MW_1_MON_AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_1_VSC_AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR___MGNPAX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR___POEPAX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_PMPPAX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_PCPPAX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR___MDO_AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR___POESAX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_PMPSAX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_RMO_AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_PMO_AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_POL_AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_PGI_AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_RGI_AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_1_USO_AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR___MGNSAX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_SIC_AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'MW_1_SLC_AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'MW___CHDNAX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'MW___CHDRAX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'MW___STD_AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'OL_1_EO__AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'OL_1_RAC_AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'OL_1_SPC_AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'OL_1_CLUTAX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'OL_1_INS_AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'OL_1_CAL_AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'OL_1_PRG_AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'OL_2_PCP_AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'OL_2_PPP_AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'OL_2_CLP_AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'OL_2_WVP_AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'OL_2_ACP_AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'OL_2_OCP_AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'OL_2_VGP_AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_1_PCP_AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_1_ANC_AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_1_N_S1AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_1_N_S2AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_1_N_S3AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_1_O_S1AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_1_O_S2AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_1_O_S3AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_1_NAS4AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_1_NAS5AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_1_NAS6AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_1_NBS4AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_1_NBS5AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_1_NBS6AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_1_OAS4AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_1_OAS5AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_1_OAS6AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_1_OBS4AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_1_OBS5AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_1_OBS6AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_1_N_S7AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_1_N_S8AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_1_N_S9AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_1_N_F1AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_1_N_F2AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_1_O_S7AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_1_O_S8AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_1_O_S9AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_1_O_F1AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_1_O_F2AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_1_VIC_AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_1_GEO_AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_1_GEC_AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_1_CLO_AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_1_ESSTAX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_2_PCP_AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_2_S6N_AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_2_S7N_AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_2_S8N_AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_2_S9N_AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_2_F1N_AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_2_F2N_AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_2_S7O_AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_2_S8O_AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_2_S9O_AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_2_N2_CAX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_2_N3RCAX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_2_N3_CAX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_2_D2_CAX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_2_D3_CAX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_2_SST_AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_2_SDI3AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_2_SDI2AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_2_SSESAX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_2_LSTCAX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_2_LSTBAX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_2_LSTVAX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_2_LSTWAX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_2_LSTEAX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_2_FRPTAX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_2_SSTAAX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'OL_1_PCPBAX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_1_PCPBAX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_1_PLTBAX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'OL_2_PCPBAX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'OL_2_PLTBAX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_2_PCPBAX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'GN_1_GSVMAX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'GN_1_GSVHAX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'GN_1_GCLHAX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'GN_1_EOP_AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'GN_1_EOPHAX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'GN_1_LSC_AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'GN_1_NAV_AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'GN_1_NSA_AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'GN_1_NTR_AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'GN_1_NPR_AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'GN_1_ATX_AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'GN_1_SAC_AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'GN_1_CHD_AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'GN_1_NSA3AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'GN_1_NTR3AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'GN_1_ATX3AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'GN_1_MANHAX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'GN_1_MASSAX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_NRPPAX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'OL_1_MCHDAX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_1_MCHDAX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SY_1_PCP_AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SY_1_CDIBAX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SY_2_PCP_AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SY_2_PCPSAX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SY_2_RAD_AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SY_2_RADPAX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SY_2_SPCPAX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SY_2_RADSAX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SY_2_PCPBAX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SY_2_PLTBAX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SY_2_CVPBAX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SY_2_PVPBAX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SY_2_CVSBAX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SY_2_PVSBAX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SY_1_GCPBAX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_2_ACLMAX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_2_ART_AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_2_OSR_AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_2_PCPAAX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SY_2_ACLMAX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SY_2_ART_AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SY_2_LSR_AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SY_2_OSR_AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SY_2_PCPAAX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_2_CFM_AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_2_FXPAAX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_2_PCPFAX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_2_PLFMAX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_2_SXPAAX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_1_IRE_AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_1_LCC_AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_1_CDP_AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_1_CLP_AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_1_ADJ_AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_1_RTT_AX')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SY_2_AODCAX')\n",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Auxiliary_Files_for_Sentinels",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "89dba4e4-b299-4c98-b470-5cc71c628717",
										"exec": [
											"var jsonDataElements = pm.response.json().value;",
											"pm.test(\"Response time is less than \" +  environment[\"query-timeout\"] + \"ms\", function(){",
											"    pm.expect(pm.response.responseTime).to.be.below(parseInt(environment[\"query-timeout\"]));",
											"});",
											"",
											"pm.test(\"Test OData context\", function(){",
											"    query_string = pm.request.url.getQueryString();",
											"    if(query_string.includes(\"$expand=Attributes\")){",
											"        pm.expect( pm.response.json()['@odata.context']).to.include(\"$metadata#Products(Attributes())\");",
											"    } else{",
											"        pm.expect( pm.response.json()['@odata.context']).to.include(\"$metadata#Products\");",
											"    }",
											"});",
											"",
											"var TRUE = true;",
											"var FALSE = false;",
											"",
											"test_map={};",
											"test_map.platformShortName=function (element) {pm.expect(element.Name).eq('platformShortName');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"SENTINEL-1\",\"SENTINEL-2\",\"SENTINEL-3\"]);};",
											"test_map.platformSerialIdentifier=function (element) {pm.expect(element.Name).eq('platformSerialIdentifier');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"A\",\"B\",\"C\",\"D\",\"_¹\"]);};",
											"test_map.productType=function (element) {pm.expect(element.Name).eq('productType');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"AUX_RESATT\",\"AUX_PRLPTF\",\"AUX_PRCPTF\",\"SR_2_NRPPAX\"]);",
											"",
											"};",
											"test_map.beginningDateTime=function (element) {pm.expect(element.Name).eq('beginningDateTime');pm.expect(element.ValueType).eq('DateTimeOffset');pm.expect(element.Value).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);};",
											"test_map.endingDateTime=function (element) {pm.expect(element.Name).eq('endingDateTime');pm.expect(element.ValueType).eq('DateTimeOffset');pm.expect(element.Value).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);};",
											"test_map.processingCenter=function (element) {pm.expect(element.Name).eq('processingCenter');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');};",
											"test_map.processorVersion=function (element) {pm.expect(element.Name).eq('processorVersion');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');};",
											"test_map.processingDate=function (element) {pm.expect(element.Name).eq('processingDate');pm.expect(element.ValueType).eq('DateTimeOffset');pm.expect(element.Value).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);};",
											"",
											"test_schema={};",
											"test_schema.platformShortName=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.platformSerialIdentifier=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.productType=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.beginningDateTime=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.endingDateTime=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.processingCenter=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.processorVersion=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.processingDate=function (num) {pm.expect(num).to.be.eq(1)};",
											"",
											"            ",
											"properties_map = {};",
											"properties_map.Id=function (element) {pm.expect(element.Id).to.match(/[0-9a-fA-F]{8}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{12}/);};",
											"properties_map.Name=function (element) {pm.expect(element.Name).to.be.a(\"string\");};",
											"properties_map.ContentType=function (element) {pm.expect(element.ContentType).to.be.a(\"string\");};",
											"properties_map.ContentLength=function (element) {pm.expect(element.ContentLength).to.be.a(\"number\");};",
											"properties_map.PublicationDate=function (element) {pm.expect(element.PublicationDate).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);};",
											"properties_map.EvictionDate=function (element) {if(element.EvictionDate){ pm.expect(element.EvictionDate).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d+([+-][0-2]\\d:[0-5]\\d|Z)/); }};",
											"properties_map.Checksum=function (element) {for(i=0; i<element.Checksum.length; i++ ){pm.expect(element.Checksum[i].Algorithm).to.be.oneOf([\"MD5\",\"SHA-1\",\"SHA-256\",\"SHA-512\"]);checksum_algorithm = {'MD5': '[a-fA-F0-9]{32}', 'SHA-1': '[0-9a-f]{5,40}', 'SHA-256': '[A-Fa-f0-9]{64}', 'SHA-512': '[A-Fa-f0-9]{128}'};pm.expect(element.Checksum[i].Value).to.match(new RegExp(checksum_algorithm[element.Checksum[i].Algorithm]));}};",
											"properties_map.ContentDate=function (element) {pm.expect(element.ContentDate[\"Start\"]).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);pm.expect(element.ContentDate[\"End\"]).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);};",
											"properties_map.ProductionType=function (element) {pm.expect(element.ProductionType).to.be.oneOf([\"systematic_production\",\"on-demand default\",\"on-demand non-default\"]);};",
											"properties_map.Footprint=function (element) {if(element.Footprint){ pm.expect(element.Footprint).to.match(/geography'SRID=\\d+;[Polygon|Multipolygon|Point](.*)/); }};",
											"",
											"let schema_seen = {};",
											"",
											"function testSpecific(value, product){",
											"",
											"    if (schema_seen[value.Name]){",
											"        schema_seen[value.Name]++;",
											"    }else{",
											"        schema_seen[value.Name]=1;",
											"    }",
											"",
											"    if (test_map[value.Name]) {",
											"        pm.test(\"Test Attribute \"+value.Name + \" for Product: \"+product.Name+\" - \"+product.Id, function(){test_map[value.Name](value, product)});",
											"    }",
											"    else {",
											"        pm.test.skip(\"Test Attribute \"+value.Name + \" for Product: \"+product.Name+\" - \"+product.Id);",
											"    }",
											"}",
											"function propertySpecific(key, product){",
											"    if (properties_map[key]) {",
											"        pm.test(\"Test Property \"+key+\" for Product: \"+product.Name+\" - \"+product.Id, function(){properties_map[key](product)});",
											"    }",
											"    else {",
											"        pm.test.skip(\"Test Property \"+key+\" for Product: \"+product.Name+\" - \"+product.Id);",
											"    }",
											"}",
											"",
											"for (var counter = 0;  counter  < jsonDataElements.length; counter++){",
											"    var product = jsonDataElements[counter];",
											"    console.log(\"Processing Product: \"+product.Name+\" - \"+product.Id);",
											"",
											"    for (const[key, value] of Object.entries(properties_map)){",
											"        propertySpecific(key, jsonDataElements[counter]);",
											"    }",
											"",
											"    if(\"Attributes\" in jsonDataElements[counter]){",
											"        schema_seen = {};",
											"",
											"        pm.test(\"Test Attributes list\", function(){",
											"            pm.expect(jsonDataElements[counter].Attributes.length).to.be.above(0);",
											"        });",
											"",
											"        jsonDataElements[counter].Attributes.forEach(function(elem){",
											"            testSpecific(elem, jsonDataElements[counter]);",
											"        });",
											"        var product = jsonDataElements[counter];",
											"        for (const[key, value] of Object.entries(test_schema)) {pm.test(\"Schema Attribute \"+key+\" Product \"+product.Name+\" - \"+product.Id, function(){",
											"        if(schema_seen[key] == undefined){",
											"            schema_seen[key] = 0;",
											"        }",
											"        value(schema_seen[key], product)});}",
											"    }",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{service-root-uri}}/odata/v1/Products?$expand=Attributes&$top=1&$filter=(contains(Name,'AUX_RESATT') or contains(Name,'AUX_PRLPTF') or contains(Name,'AUX_PRCPTF') or contains(Name,'SR_2_NRPPAX'))\n",
									"host": [
										"{{service-root-uri}}"
									],
									"path": [
										"odata",
										"v1",
										"Products"
									],
									"query": [
										{
											"key": "$expand",
											"value": "Attributes"
										},
										{
											"key": "$top",
											"value": "1"
										},
										{
											"key": "$filter",
											"value": "(contains(Name,'AUX_RESATT') or contains(Name,'AUX_PRLPTF') or contains(Name,'AUX_PRCPTF') or contains(Name,'SR_2_NRPPAX'))\n"
										},
										{
											"key": "$filter",
											"value": "contains(Name,'AUX_RESATT') and startswith(Name,'S')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'AUX_PRLPTF') and startswith(Name,'S')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'AUX_PRCPTF') and startswith(Name,'S')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_NRPPAX') and startswith(Name,'S')\n",
											"disabled": true
										}
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Sentinel-1",
			"item": [
				{
					"name": "LTA",
					"item": [
						{
							"name": "S1_Level-0_HKTM",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1763ce14-faad-413f-8cde-f5054c28531a",
										"exec": [
											"var jsonDataElements = pm.response.json().value;",
											"pm.test(\"Response time is less than \" +  environment[\"query-timeout\"] + \"ms\", function(){",
											"    pm.expect(pm.response.responseTime).to.be.below(parseInt(environment[\"query-timeout\"]));",
											"});",
											"",
											"pm.test(\"Test OData context\", function(){",
											"    query_string = pm.request.url.getQueryString();",
											"    if(query_string.includes(\"$expand=Attributes\")){",
											"        pm.expect( pm.response.json()['@odata.context']).to.include(\"$metadata#Products(Attributes())\");",
											"    } else{",
											"        pm.expect( pm.response.json()['@odata.context']).to.include(\"$metadata#Products\");",
											"    }",
											"});",
											"",
											"var TRUE = true;",
											"var FALSE = false;",
											"",
											"test_map={};",
											"test_map.beginningDateTime=function (element) {pm.expect(element.Name).eq('beginningDateTime');pm.expect(element.ValueType).eq('DateTimeOffset');pm.expect(element.Value).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);};",
											"test_map.endingDateTime=function (element) {pm.expect(element.Name).eq('endingDateTime');pm.expect(element.ValueType).eq('DateTimeOffset');pm.expect(element.Value).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);};",
											"test_map.platformShortName=function (element) {pm.expect(element.Name).eq('platformShortName');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"SENTINEL-1\"]);};",
											"test_map.platformSerialIdentifier=function (element) {pm.expect(element.Name).eq('platformSerialIdentifier');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"A\",\"B\",\"C\",\"D\",\"_\"]);};",
											"test_map.orbitNumber=function (element) {pm.expect(element.Name).eq('orbitNumber');pm.expect(element.ValueType).eq('Integer');pm.expect(element.Value).to.be.a(\"number\");pm.expect(element.Value).to.match(/([1-9]|[1-8][0-9]|9[0-9]|[1-8][0-9]{2}|9[0-8][0-9]|99[0-9]|[1-8][0-9]{3}|9[0-8][0-9]{2}|99[0-8][0-9]|999[0-9]|[1-8][0-9]{4}|9[0-8][0-9]{3}|99[0-8][0-9]{2}|999[0-8][0-9]|9999[0-9]|[1-8][0-9]{5}|9[0-8][0-9]{4}|99[0-8][0-9]{3}|999[0-8][0-9]{2}|9999[0-8][0-9]|99999[0-9])/);};",
											"test_map.relativeOrbitNumber=function (element) {pm.expect(element.Name).eq('relativeOrbitNumber');pm.expect(element.ValueType).eq('Integer');pm.expect(element.Value).to.be.a(\"number\");pm.expect(element.Value).to.match(/([1-9]|[1-8][0-9]|9[0-9]|1[0-6][0-9]|17[0-5])/);};",
											"test_map.cycleNumber=function (element) {pm.expect(element.Name).eq('cycleNumber');pm.expect(element.ValueType).eq('Integer');pm.expect(element.Value).to.be.a(\"number\");pm.expect(element.Value).to.match(/([1-9]|[1-8][0-9]|9[0-9]|1[0-6][0-9]|17[0-5])/);};",
											"test_map.processingDate=function (element) {pm.expect(element.Name).eq('processingDate');pm.expect(element.ValueType).eq('DateTimeOffset');pm.expect(element.Value).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);};",
											"test_map.processingCenter=function (element) {pm.expect(element.Name).eq('processingCenter');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');};",
											"test_map.processorName=function (element) {pm.expect(element.Name).eq('processorName');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');};",
											"test_map.processorVersion=function (element) {pm.expect(element.Name).eq('processorVersion');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');};",
											"test_map.productType=function (element) {pm.expect(element.Name).eq('productType');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"HK_RAW__0_\"]);",
											"",
											"};",
											"",
											"test_schema={};",
											"test_schema.beginningDateTime=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.endingDateTime=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.platformShortName=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.platformSerialIdentifier=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.orbitNumber=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.relativeOrbitNumber=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.cycleNumber=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.processingDate=function (num) {pm.expect(num).to.be.within(0,1)};",
											"test_schema.processingCenter=function (num) {pm.expect(num).to.be.within(0,1)};",
											"test_schema.processorName=function (num) {pm.expect(num).to.be.within(0,1)};",
											"test_schema.processorVersion=function (num) {pm.expect(num).to.be.within(0,1)};",
											"test_schema.productType=function (num) {pm.expect(num).to.be.eq(1)};",
											"",
											"            ",
											"properties_map = {};",
											"properties_map.Id=function (element) {pm.expect(element.Id).to.match(/[0-9a-fA-F]{8}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{12}/);};",
											"properties_map.Name=function (element) {pm.expect(element.Name).to.be.a(\"string\");};",
											"properties_map.ContentType=function (element) {pm.expect(element.ContentType).to.be.a(\"string\");};",
											"properties_map.ContentLength=function (element) {pm.expect(element.ContentLength).to.be.a(\"number\");};",
											"properties_map.OriginDate=function (element) {pm.expect(element.OriginDate).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d+([+-][0-2]\\d:[0-5]\\d|Z)/);};",
											"properties_map.PublicationDate=function (element) {pm.expect(element.PublicationDate).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);};",
											"properties_map.ModificationDate=function (element) {pm.expect(element.ModificationDate).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d+([+-][0-2]\\d:[0-5]\\d|Z)/);};",
											"properties_map.Online=function (element) {pm.expect(element.Online).to.be.oneOf([TRUE,FALSE,true,false]);};",
											"properties_map.EvictionDate=function (element) {if(element.EvictionDate){ pm.expect(element.EvictionDate).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d+([+-][0-2]\\d:[0-5]\\d|Z)/); }};",
											"properties_map.Checksum=function (element) {for(i=0; i<element.Checksum.length; i++ ){pm.expect(element.Checksum[i].Algorithm).to.be.oneOf([\"MD5\",\"SHA-1\",\"SHA-256\",\"SHA-512\"]);checksum_algorithm = {'MD5': '[a-fA-F0-9]{32}', 'SHA-1': '[0-9a-f]{5,40}', 'SHA-256': '[A-Fa-f0-9]{64}', 'SHA-512': '[A-Fa-f0-9]{128}'};pm.expect(element.Checksum[i].Value).to.match(new RegExp(checksum_algorithm[element.Checksum[i].Algorithm]));}};",
											"properties_map.ContentDate=function (element) {pm.expect(element.ContentDate[\"Start\"]).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);pm.expect(element.ContentDate[\"End\"]).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);};",
											"properties_map.Footprint=function (element) {if(element.Footprint){ pm.expect(element.Footprint).to.match(/geography'SRID=\\d+;[Polygon|Multipolygon|Point](.*)/); }};",
											"",
											"let schema_seen = {};",
											"",
											"function testSpecific(value, product){",
											"",
											"    if (schema_seen[value.Name]){",
											"        schema_seen[value.Name]++;",
											"    }else{",
											"        schema_seen[value.Name]=1;",
											"    }",
											"",
											"    if (test_map[value.Name]) {",
											"        pm.test(\"Test Attribute \"+value.Name + \" for Product: \"+product.Name+\" - \"+product.Id, function(){test_map[value.Name](value, product)});",
											"    }",
											"    else {",
											"        pm.test.skip(\"Test Attribute \"+value.Name + \" for Product: \"+product.Name+\" - \"+product.Id);",
											"    }",
											"}",
											"function propertySpecific(key, product){",
											"    if (properties_map[key]) {",
											"        pm.test(\"Test Property \"+key+\" for Product: \"+product.Name+\" - \"+product.Id, function(){properties_map[key](product)});",
											"    }",
											"    else {",
											"        pm.test.skip(\"Test Property \"+key+\" for Product: \"+product.Name+\" - \"+product.Id);",
											"    }",
											"}",
											"",
											"for (var counter = 0;  counter  < jsonDataElements.length; counter++){",
											"    var product = jsonDataElements[counter];",
											"    console.log(\"Processing Product: \"+product.Name+\" - \"+product.Id);",
											"",
											"    for (const[key, value] of Object.entries(properties_map)){",
											"        propertySpecific(key, jsonDataElements[counter]);",
											"    }",
											"",
											"    if(\"Attributes\" in jsonDataElements[counter]){",
											"        schema_seen = {};",
											"",
											"        pm.test(\"Test Attributes list\", function(){",
											"            pm.expect(jsonDataElements[counter].Attributes.length).to.be.above(0);",
											"        });",
											"",
											"        jsonDataElements[counter].Attributes.forEach(function(elem){",
											"            testSpecific(elem, jsonDataElements[counter]);",
											"        });",
											"        var product = jsonDataElements[counter];",
											"        for (const[key, value] of Object.entries(test_schema)) {pm.test(\"Schema Attribute \"+key+\" Product \"+product.Name+\" - \"+product.Id, function(){",
											"        if(schema_seen[key] == undefined){",
											"            schema_seen[key] = 0;",
											"        }",
											"        value(schema_seen[key], product)});}",
											"    }",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{service-root-uri}}/odata/v1/Products?$expand=Attributes&$top=1&$filter=(contains(Name,'HK_RAW__0_')) and startswith(Name,'S1')\n",
									"host": [
										"{{service-root-uri}}"
									],
									"path": [
										"odata",
										"v1",
										"Products"
									],
									"query": [
										{
											"key": "$expand",
											"value": "Attributes"
										},
										{
											"key": "$top",
											"value": "1"
										},
										{
											"key": "$filter",
											"value": "(contains(Name,'HK_RAW__0_')) and startswith(Name,'S1')\n"
										},
										{
											"key": "$filter",
											"value": "contains(Name,'HK_RAW__0_') and startswith(Name,'S1')\n",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "S1_Level-0_Noise",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7b3df998-ac6b-4245-95de-83fcb988d6d4",
										"exec": [
											"var jsonDataElements = pm.response.json().value;",
											"pm.test(\"Response time is less than \" +  environment[\"query-timeout\"] + \"ms\", function(){",
											"    pm.expect(pm.response.responseTime).to.be.below(parseInt(environment[\"query-timeout\"]));",
											"});",
											"",
											"pm.test(\"Test OData context\", function(){",
											"    query_string = pm.request.url.getQueryString();",
											"    if(query_string.includes(\"$expand=Attributes\")){",
											"        pm.expect( pm.response.json()['@odata.context']).to.include(\"$metadata#Products(Attributes())\");",
											"    } else{",
											"        pm.expect( pm.response.json()['@odata.context']).to.include(\"$metadata#Products\");",
											"    }",
											"});",
											"",
											"var TRUE = true;",
											"var FALSE = false;",
											"",
											"test_map={};",
											"test_map.beginningDateTime=function (element) {pm.expect(element.Name).eq('beginningDateTime');pm.expect(element.ValueType).eq('DateTimeOffset');pm.expect(element.Value).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);};",
											"test_map.endingDateTime=function (element) {pm.expect(element.Name).eq('endingDateTime');pm.expect(element.ValueType).eq('DateTimeOffset');pm.expect(element.Value).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);};",
											"test_map.startTimeFromAscendingNode=function (element) {pm.expect(element.Name).eq('startTimeFromAscendingNode');pm.expect(element.ValueType).eq('Double');pm.expect(element.Value).to.be.a(\"number\");};",
											"test_map.completionTimeFromAscendingNode=function (element) {pm.expect(element.Name).eq('completionTimeFromAscendingNode');pm.expect(element.ValueType).eq('Double');pm.expect(element.Value).to.be.a(\"number\");};",
											"test_map.platformShortName=function (element) {pm.expect(element.Name).eq('platformShortName');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"SENTINEL-1\"]);};",
											"test_map.platformSerialIdentifier=function (element) {pm.expect(element.Name).eq('platformSerialIdentifier');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"A\",\"B\",\"C\",\"D\",\"_\"]);};",
											"test_map.instrumentShortName=function (element) {pm.expect(element.Name).eq('instrumentShortName');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"SAR\"]);};",
											"test_map.operationalMode=function (element) {pm.expect(element.Name).eq('operationalMode');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"SM\",\"IW\",\"EW\",\"WV\"]);};",
											"test_map.swathIdentifier=function (element) {pm.expect(element.Name).eq('swathIdentifier');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"1\",\"2\",\"3\",\"4\",\"5\",\"6\"]);};",
											"test_map.polarisationChannels=function (element) {pm.expect(element.Name).eq('polarisationChannels');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"HH\",\"VV\",\"HV\",\"VH\"]);};",
											"test_map.orbitNumber=function (element) {pm.expect(element.Name).eq('orbitNumber');pm.expect(element.ValueType).eq('Integer');pm.expect(element.Value).to.be.a(\"number\");pm.expect(element.Value).to.match(/([1-9]|[1-8][0-9]|9[0-9]|[1-8][0-9]{2}|9[0-8][0-9]|99[0-9]|[1-8][0-9]{3}|9[0-8][0-9]{2}|99[0-8][0-9]|999[0-9]|[1-8][0-9]{4}|9[0-8][0-9]{3}|99[0-8][0-9]{2}|999[0-8][0-9]|9999[0-9]|[1-8][0-9]{5}|9[0-8][0-9]{4}|99[0-8][0-9]{3}|999[0-8][0-9]{2}|9999[0-8][0-9]|99999[0-9])/);};",
											"test_map.relativeOrbitNumber=function (element) {pm.expect(element.Name).eq('relativeOrbitNumber');pm.expect(element.ValueType).eq('Integer');pm.expect(element.Value).to.be.a(\"number\");pm.expect(element.Value).to.match(/([1-9]|[1-8][0-9]|9[0-9]|1[0-6][0-9]|17[0-5])/);};",
											"test_map.cycleNumber=function (element) {pm.expect(element.Name).eq('cycleNumber');pm.expect(element.ValueType).eq('Integer');pm.expect(element.Value).to.be.a(\"number\");pm.expect(element.Value).to.match(/([1-9]|[1-8][0-9]|9[0-9]|1[0-6][0-9]|17[0-5])/);};",
											"test_map.orbitDirection=function (element) {pm.expect(element.Name).eq('orbitDirection');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"ASCENDING\",\"DESCENDING\",\"UNKNOWN\"]);};",
											"test_map.processingDate=function (element) {pm.expect(element.Name).eq('processingDate');pm.expect(element.ValueType).eq('DateTimeOffset');pm.expect(element.Value).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);};",
											"test_map.processingCenter=function (element) {pm.expect(element.Name).eq('processingCenter');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');};",
											"test_map.processorName=function (element) {pm.expect(element.Name).eq('processorName');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');};",
											"test_map.processorVersion=function (element) {pm.expect(element.Name).eq('processorVersion');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');};",
											"test_map.coordinates=function (element) {pm.expect(element.Name).eq('coordinates');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.match(/(-?\\d+(\\.\\d+)?),\\s*(-?\\d+(\\.\\d+)?)/);};",
											"test_map.productType=function (element) {pm.expect(element.Name).eq('productType');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"S1_RAW__0N\",\"S2_RAW__0N\",\"S3_RAW__0N\",\"S4_RAW__0N\",\"S5_RAW__0N\",\"S6_RAW__0N\",\"IW_RAW__0N\",\"EW_RAW__0N\",\"WV_RAW__0N\"]);",
											"",
											"};",
											"test_map.productClass=function (element) {pm.expect(element.Name).eq('productClass');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"N\"]);};",
											"test_map.productConsolidation=function (element) {pm.expect(element.Name).eq('productConsolidation');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"SLICE\",\"SLICE PARTIAL\",\"FULL\"]);};",
											"test_map.instrumentConfigurationID=function (element) {pm.expect(element.Name).eq('instrumentConfigurationID');pm.expect(element.ValueType).eq('Integer');pm.expect(element.Value).to.be.a(\"number\");pm.expect(element.Value).to.match(/([1-9]|[1-8][0-9]|9[0-9]|[1-8][0-9]{2}|9[0-8][0-9]|99[0-9]|[1-8][0-9]{3}|9[0-8][0-9]{2}|99[0-8][0-9]|999[0-9]|[1-8][0-9]{4}|9[0-8][0-9]{3}|99[0-8][0-9]{2}|999[0-8][0-9]|9999[0-9]|[1-8][0-9]{5}|9[0-8][0-9]{4}|99[0-8][0-9]{3}|999[0-8][0-9]{2}|9999[0-8][0-9]|99999[0-9]|[1-8][0-9]{6}|9[0-8][0-9]{5}|99[0-8][0-9]{4}|999[0-8][0-9]{3}|9999[0-8][0-9]{2}|99999[0-8][0-9]|999999[0-9]|1[0-5][0-9]{6}|16[0-6][0-9]{5}|167[0-6][0-9]{4}|1677[0-6][0-9]{3}|16777[01][0-9]{2}|1677720[0-9]|1677721[0-5])/);};",
											"test_map.datatakeID=function (element) {pm.expect(element.Name).eq('datatakeID');pm.expect(element.ValueType).eq('Integer');pm.expect(element.Value).to.be.a(\"number\");pm.expect(element.Value).to.match(/([1-9]|[1-8][0-9]|9[0-9]|[1-8][0-9]{2}|9[0-8][0-9]|99[0-9]|[1-8][0-9]{3}|9[0-8][0-9]{2}|99[0-8][0-9]|999[0-9]|[1-8][0-9]{4}|9[0-8][0-9]{3}|99[0-8][0-9]{2}|999[0-8][0-9]|9999[0-9]|[1-8][0-9]{5}|9[0-8][0-9]{4}|99[0-8][0-9]{3}|999[0-8][0-9]{2}|9999[0-8][0-9]|99999[0-9]|[1-7][0-9]{6}|8[0-2][0-9]{5}|83[0-7][0-9]{4}|838[0-7][0-9]{3}|8388[0-5][0-9]{2}|838860[0-7])/);};",
											"test_map.sliceProductFlag=function (element) {pm.expect(element.Name).eq('sliceProductFlag');pm.expect(element.ValueType).eq('Boolean');pm.expect(element.Value).to.be.oneOf([\"TRUE\",\"FALSE\",\"true\",\"false\"]);};",
											"test_map.sliceNumber=function (element) {pm.expect(element.Name).eq('sliceNumber');pm.expect(element.ValueType).eq('Integer');pm.expect(element.Value).to.be.a(\"number\");};",
											"test_map.totalSlices=function (element) {pm.expect(element.Name).eq('totalSlices');pm.expect(element.ValueType).eq('Integer');pm.expect(element.Value).to.be.a(\"number\");};",
											"",
											"test_schema={};",
											"test_schema.beginningDateTime=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.endingDateTime=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.startTimeFromAscendingNode=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.completionTimeFromAscendingNode=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.platformShortName=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.platformSerialIdentifier=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.instrumentShortName=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.operationalMode=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.swathIdentifier=function (num) {pm.expect(num).to.be.within(0,1)};",
											"test_schema.polarisationChannels=function (num) {pm.expect(num).to.be.within(1,2)};",
											"test_schema.orbitNumber=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.relativeOrbitNumber=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.cycleNumber=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.orbitDirection=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.processingDate=function (num) {pm.expect(num).to.be.within(0,1)};",
											"test_schema.processingCenter=function (num) {pm.expect(num).to.be.within(0,1)};",
											"test_schema.processorName=function (num) {pm.expect(num).to.be.within(0,1)};",
											"test_schema.processorVersion=function (num) {pm.expect(num).to.be.within(0,1)};",
											"test_schema.coordinates=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.productType=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.productClass=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.productConsolidation=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.instrumentConfigurationID=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.datatakeID=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.sliceProductFlag=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.sliceNumber=function (num) {pm.expect(num).to.be.within(0,1)};",
											"test_schema.totalSlices=function (num) {pm.expect(num).to.be.within(0,1)};",
											"",
											"            ",
											"properties_map = {};",
											"properties_map.Id=function (element) {pm.expect(element.Id).to.match(/[0-9a-fA-F]{8}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{12}/);};",
											"properties_map.Name=function (element) {pm.expect(element.Name).to.be.a(\"string\");};",
											"properties_map.ContentType=function (element) {pm.expect(element.ContentType).to.be.a(\"string\");};",
											"properties_map.ContentLength=function (element) {pm.expect(element.ContentLength).to.be.a(\"number\");};",
											"properties_map.OriginDate=function (element) {pm.expect(element.OriginDate).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d+([+-][0-2]\\d:[0-5]\\d|Z)/);};",
											"properties_map.PublicationDate=function (element) {pm.expect(element.PublicationDate).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);};",
											"properties_map.ModificationDate=function (element) {pm.expect(element.ModificationDate).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d+([+-][0-2]\\d:[0-5]\\d|Z)/);};",
											"properties_map.Online=function (element) {pm.expect(element.Online).to.be.oneOf([TRUE,FALSE,true,false]);};",
											"properties_map.EvictionDate=function (element) {if(element.EvictionDate){ pm.expect(element.EvictionDate).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d+([+-][0-2]\\d:[0-5]\\d|Z)/); }};",
											"properties_map.Checksum=function (element) {for(i=0; i<element.Checksum.length; i++ ){pm.expect(element.Checksum[i].Algorithm).to.be.oneOf([\"MD5\",\"SHA-1\",\"SHA-256\",\"SHA-512\"]);checksum_algorithm = {'MD5': '[a-fA-F0-9]{32}', 'SHA-1': '[0-9a-f]{5,40}', 'SHA-256': '[A-Fa-f0-9]{64}', 'SHA-512': '[A-Fa-f0-9]{128}'};pm.expect(element.Checksum[i].Value).to.match(new RegExp(checksum_algorithm[element.Checksum[i].Algorithm]));}};",
											"properties_map.ContentDate=function (element) {pm.expect(element.ContentDate[\"Start\"]).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);pm.expect(element.ContentDate[\"End\"]).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);};",
											"properties_map.Footprint=function (element) {if(element.Footprint){ pm.expect(element.Footprint).to.match(/geography'SRID=\\d+;[Polygon|Multipolygon|Point](.*)/); }};",
											"",
											"let schema_seen = {};",
											"",
											"function testSpecific(value, product){",
											"",
											"    if (schema_seen[value.Name]){",
											"        schema_seen[value.Name]++;",
											"    }else{",
											"        schema_seen[value.Name]=1;",
											"    }",
											"",
											"    if (test_map[value.Name]) {",
											"        pm.test(\"Test Attribute \"+value.Name + \" for Product: \"+product.Name+\" - \"+product.Id, function(){test_map[value.Name](value, product)});",
											"    }",
											"    else {",
											"        pm.test.skip(\"Test Attribute \"+value.Name + \" for Product: \"+product.Name+\" - \"+product.Id);",
											"    }",
											"}",
											"function propertySpecific(key, product){",
											"    if (properties_map[key]) {",
											"        pm.test(\"Test Property \"+key+\" for Product: \"+product.Name+\" - \"+product.Id, function(){properties_map[key](product)});",
											"    }",
											"    else {",
											"        pm.test.skip(\"Test Property \"+key+\" for Product: \"+product.Name+\" - \"+product.Id);",
											"    }",
											"}",
											"",
											"for (var counter = 0;  counter  < jsonDataElements.length; counter++){",
											"    var product = jsonDataElements[counter];",
											"    console.log(\"Processing Product: \"+product.Name+\" - \"+product.Id);",
											"",
											"    for (const[key, value] of Object.entries(properties_map)){",
											"        propertySpecific(key, jsonDataElements[counter]);",
											"    }",
											"",
											"    if(\"Attributes\" in jsonDataElements[counter]){",
											"        schema_seen = {};",
											"",
											"        pm.test(\"Test Attributes list\", function(){",
											"            pm.expect(jsonDataElements[counter].Attributes.length).to.be.above(0);",
											"        });",
											"",
											"        jsonDataElements[counter].Attributes.forEach(function(elem){",
											"            testSpecific(elem, jsonDataElements[counter]);",
											"        });",
											"        var product = jsonDataElements[counter];",
											"        for (const[key, value] of Object.entries(test_schema)) {pm.test(\"Schema Attribute \"+key+\" Product \"+product.Name+\" - \"+product.Id, function(){",
											"        if(schema_seen[key] == undefined){",
											"            schema_seen[key] = 0;",
											"        }",
											"        value(schema_seen[key], product)});}",
											"    }",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{service-root-uri}}/odata/v1/Products?$expand=Attributes&$top=1&$filter=(contains(Name,'S1_RAW__0N') or contains(Name,'S2_RAW__0N') or contains(Name,'S3_RAW__0N') or contains(Name,'S4_RAW__0N') or contains(Name,'S5_RAW__0N') or contains(Name,'S6_RAW__0N') or contains(Name,'IW_RAW__0N') or contains(Name,'EW_RAW__0N') or contains(Name,'WV_RAW__0N')) and startswith(Name,'S1')\n",
									"host": [
										"{{service-root-uri}}"
									],
									"path": [
										"odata",
										"v1",
										"Products"
									],
									"query": [
										{
											"key": "$expand",
											"value": "Attributes"
										},
										{
											"key": "$top",
											"value": "1"
										},
										{
											"key": "$filter",
											"value": "(contains(Name,'S1_RAW__0N') or contains(Name,'S2_RAW__0N') or contains(Name,'S3_RAW__0N') or contains(Name,'S4_RAW__0N') or contains(Name,'S5_RAW__0N') or contains(Name,'S6_RAW__0N') or contains(Name,'IW_RAW__0N') or contains(Name,'EW_RAW__0N') or contains(Name,'WV_RAW__0N')) and startswith(Name,'S1')\n"
										},
										{
											"key": "$filter",
											"value": "contains(Name,'S1_RAW__0N') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'S2_RAW__0N') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'S3_RAW__0N') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'S4_RAW__0N') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'S5_RAW__0N') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'S6_RAW__0N') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'IW_RAW__0N') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'EW_RAW__0N') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'WV_RAW__0N') and startswith(Name,'S1')\n",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "S1_AUX_in_.SAFE",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cf0c7a35-1c24-4b2d-bcbb-79a3b1d1e52a",
										"exec": [
											"var jsonDataElements = pm.response.json().value;",
											"pm.test(\"Response time is less than \" +  environment[\"query-timeout\"] + \"ms\", function(){",
											"    pm.expect(pm.response.responseTime).to.be.below(parseInt(environment[\"query-timeout\"]));",
											"});",
											"",
											"pm.test(\"Test OData context\", function(){",
											"    query_string = pm.request.url.getQueryString();",
											"    if(query_string.includes(\"$expand=Attributes\")){",
											"        pm.expect( pm.response.json()['@odata.context']).to.include(\"$metadata#Products(Attributes())\");",
											"    } else{",
											"        pm.expect( pm.response.json()['@odata.context']).to.include(\"$metadata#Products\");",
											"    }",
											"});",
											"",
											"var TRUE = true;",
											"var FALSE = false;",
											"",
											"test_map={};",
											"test_map.processingDate=function (element) {pm.expect(element.Name).eq('processingDate');pm.expect(element.ValueType).eq('DateTimeOffset');pm.expect(element.Value).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);};",
											"test_map.processingCenter=function (element) {pm.expect(element.Name).eq('processingCenter');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');};",
											"test_map.processorName=function (element) {pm.expect(element.Name).eq('processorName');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');};",
											"test_map.processorVersion=function (element) {pm.expect(element.Name).eq('processorVersion');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');};",
											"test_map.platformShortName=function (element) {pm.expect(element.Name).eq('platformShortName');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"SENTINEL-1\"]);};",
											"test_map.platformSerialIdentifier=function (element) {pm.expect(element.Name).eq('platformSerialIdentifier');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"A\",\"B\",\"C\",\"D\",\"_¹\"]);};",
											"test_map.instrumentShortName=function (element) {pm.expect(element.Name).eq('instrumentShortName');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');};",
											"test_map.productType=function (element) {pm.expect(element.Name).eq('productType');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"AUX_PP1\",\"AUX_CAL\",\"AUX_INS\",\"AUX_PP2\",\"AUX_SCS\",\"AUX_WND\",\"AUX_WAV\",\"AUX_ICE\",\"AUX_ECE\"]);",
											"",
											"};",
											"test_map.beginningDateTime=function (element) {pm.expect(element.Name).eq('beginningDateTime');pm.expect(element.ValueType).eq('DateTimeOffset');pm.expect(element.Value).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);};",
											"test_map.productGeneration=function (element) {pm.expect(element.Name).eq('productGeneration');pm.expect(element.ValueType).eq('DateTimeOffset');pm.expect(element.Value).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d+([+-][0-2]\\d:[0-5]\\d|Z)/);};",
											"test_map.instrumentConfigurationID=function (element) {pm.expect(element.Name).eq('instrumentConfigurationID');pm.expect(element.ValueType).eq('Integer');pm.expect(element.Value).to.be.a(\"number\");};",
											"",
											"test_schema={};",
											"test_schema.processingDate=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.processingCenter=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.processorName=function (num) {pm.expect(num).to.be.within(0,1)};",
											"test_schema.processorVersion=function (num) {pm.expect(num).to.be.within(0,1)};",
											"test_schema.platformShortName=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.platformSerialIdentifier=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.instrumentShortName=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.productType=function (num) {pm.expect(num).to.be.within(0,1)};",
											"test_schema.beginningDateTime=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.productGeneration=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.instrumentConfigurationID=function (num) {pm.expect(num).to.be.eq(1)};",
											"",
											"            ",
											"properties_map = {};",
											"properties_map.Id=function (element) {pm.expect(element.Id).to.match(/[0-9a-fA-F]{8}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{12}/);};",
											"properties_map.Name=function (element) {pm.expect(element.Name).to.be.a(\"string\");};",
											"properties_map.ContentType=function (element) {pm.expect(element.ContentType).to.be.a(\"string\");};",
											"properties_map.ContentLength=function (element) {pm.expect(element.ContentLength).to.be.a(\"number\");};",
											"properties_map.OriginDate=function (element) {pm.expect(element.OriginDate).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d+([+-][0-2]\\d:[0-5]\\d|Z)/);};",
											"properties_map.PublicationDate=function (element) {pm.expect(element.PublicationDate).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);};",
											"properties_map.ModificationDate=function (element) {pm.expect(element.ModificationDate).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d+([+-][0-2]\\d:[0-5]\\d|Z)/);};",
											"properties_map.Online=function (element) {pm.expect(element.Online).to.be.oneOf([TRUE,FALSE,true,false]);};",
											"properties_map.EvictionDate=function (element) {if(element.EvictionDate){ pm.expect(element.EvictionDate).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d+([+-][0-2]\\d:[0-5]\\d|Z)/); }};",
											"properties_map.Checksum=function (element) {for(i=0; i<element.Checksum.length; i++ ){pm.expect(element.Checksum[i].Algorithm).to.be.oneOf([\"MD5\",\"SHA-1\",\"SHA-256\",\"SHA-512\"]);checksum_algorithm = {'MD5': '[a-fA-F0-9]{32}', 'SHA-1': '[0-9a-f]{5,40}', 'SHA-256': '[A-Fa-f0-9]{64}', 'SHA-512': '[A-Fa-f0-9]{128}'};pm.expect(element.Checksum[i].Value).to.match(new RegExp(checksum_algorithm[element.Checksum[i].Algorithm]));}};",
											"properties_map.ContentDate=function (element) {pm.expect(element.ContentDate[\"Start\"]).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);pm.expect(element.ContentDate[\"End\"]).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);};",
											"properties_map.Footprint=function (element) {if(element.Footprint){ pm.expect(element.Footprint).to.match(/geography'SRID=\\d+;[Polygon|Multipolygon|Point](.*)/); }};",
											"",
											"let schema_seen = {};",
											"",
											"function testSpecific(value, product){",
											"",
											"    if (schema_seen[value.Name]){",
											"        schema_seen[value.Name]++;",
											"    }else{",
											"        schema_seen[value.Name]=1;",
											"    }",
											"",
											"    if (test_map[value.Name]) {",
											"        pm.test(\"Test Attribute \"+value.Name + \" for Product: \"+product.Name+\" - \"+product.Id, function(){test_map[value.Name](value, product)});",
											"    }",
											"    else {",
											"        pm.test.skip(\"Test Attribute \"+value.Name + \" for Product: \"+product.Name+\" - \"+product.Id);",
											"    }",
											"}",
											"function propertySpecific(key, product){",
											"    if (properties_map[key]) {",
											"        pm.test(\"Test Property \"+key+\" for Product: \"+product.Name+\" - \"+product.Id, function(){properties_map[key](product)});",
											"    }",
											"    else {",
											"        pm.test.skip(\"Test Property \"+key+\" for Product: \"+product.Name+\" - \"+product.Id);",
											"    }",
											"}",
											"",
											"for (var counter = 0;  counter  < jsonDataElements.length; counter++){",
											"    var product = jsonDataElements[counter];",
											"    console.log(\"Processing Product: \"+product.Name+\" - \"+product.Id);",
											"",
											"    for (const[key, value] of Object.entries(properties_map)){",
											"        propertySpecific(key, jsonDataElements[counter]);",
											"    }",
											"",
											"    if(\"Attributes\" in jsonDataElements[counter]){",
											"        schema_seen = {};",
											"",
											"        pm.test(\"Test Attributes list\", function(){",
											"            pm.expect(jsonDataElements[counter].Attributes.length).to.be.above(0);",
											"        });",
											"",
											"        jsonDataElements[counter].Attributes.forEach(function(elem){",
											"            testSpecific(elem, jsonDataElements[counter]);",
											"        });",
											"        var product = jsonDataElements[counter];",
											"        for (const[key, value] of Object.entries(test_schema)) {pm.test(\"Schema Attribute \"+key+\" Product \"+product.Name+\" - \"+product.Id, function(){",
											"        if(schema_seen[key] == undefined){",
											"            schema_seen[key] = 0;",
											"        }",
											"        value(schema_seen[key], product)});}",
											"    }",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{service-root-uri}}/odata/v1/Products?$expand=Attributes&$top=1&$filter=(contains(Name,'AUX_PP1') or contains(Name,'AUX_CAL') or contains(Name,'AUX_INS') or contains(Name,'AUX_PP2') or contains(Name,'AUX_SCS') or contains(Name,'AUX_WND') or contains(Name,'AUX_WAV') or contains(Name,'AUX_ICE') or contains(Name,'AUX_ECE')) and startswith(Name,'S1')\n",
									"host": [
										"{{service-root-uri}}"
									],
									"path": [
										"odata",
										"v1",
										"Products"
									],
									"query": [
										{
											"key": "$expand",
											"value": "Attributes"
										},
										{
											"key": "$top",
											"value": "1"
										},
										{
											"key": "$filter",
											"value": "(contains(Name,'AUX_PP1') or contains(Name,'AUX_CAL') or contains(Name,'AUX_INS') or contains(Name,'AUX_PP2') or contains(Name,'AUX_SCS') or contains(Name,'AUX_WND') or contains(Name,'AUX_WAV') or contains(Name,'AUX_ICE') or contains(Name,'AUX_ECE')) and startswith(Name,'S1')\n"
										},
										{
											"key": "$filter",
											"value": "contains(Name,'AUX_PP1') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'AUX_CAL') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'AUX_INS') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'AUX_PP2') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'AUX_SCS') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'AUX_WND') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'AUX_WAV') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'AUX_ICE') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'AUX_ECE') and startswith(Name,'S1')\n",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "S1_AUX_in_.EOF",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4ab13f24-0056-4bc5-b983-62b15e3899cd",
										"exec": [
											"var jsonDataElements = pm.response.json().value;",
											"pm.test(\"Response time is less than \" +  environment[\"query-timeout\"] + \"ms\", function(){",
											"    pm.expect(pm.response.responseTime).to.be.below(parseInt(environment[\"query-timeout\"]));",
											"});",
											"",
											"pm.test(\"Test OData context\", function(){",
											"    query_string = pm.request.url.getQueryString();",
											"    if(query_string.includes(\"$expand=Attributes\")){",
											"        pm.expect( pm.response.json()['@odata.context']).to.include(\"$metadata#Products(Attributes())\");",
											"    } else{",
											"        pm.expect( pm.response.json()['@odata.context']).to.include(\"$metadata#Products\");",
											"    }",
											"});",
											"",
											"var TRUE = true;",
											"var FALSE = false;",
											"",
											"test_map={};",
											"test_map.platformShortName=function (element) {pm.expect(element.Name).eq('platformShortName');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"SENTINEL-1\"]);};",
											"test_map.platformSerialIdentifier=function (element) {pm.expect(element.Name).eq('platformSerialIdentifier');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"A\",\"B\",\"C\",\"D\",\"_¹\"]);};",
											"test_map.productType=function (element) {pm.expect(element.Name).eq('productType');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"AUX_RESATT\",\"AUX_PREORB\",\"AUX_POEORB\",\"AUX_RESORB\"]);",
											"",
											"};",
											"test_map.beginningDateTime=function (element) {pm.expect(element.Name).eq('beginningDateTime');pm.expect(element.ValueType).eq('DateTimeOffset');pm.expect(element.Value).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);};",
											"test_map.endingDateTime=function (element) {pm.expect(element.Name).eq('endingDateTime');pm.expect(element.ValueType).eq('DateTimeOffset');pm.expect(element.Value).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);};",
											"test_map.processingCenter=function (element) {pm.expect(element.Name).eq('processingCenter');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');};",
											"test_map.processorVersion=function (element) {pm.expect(element.Name).eq('processorVersion');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');};",
											"test_map.processingDate=function (element) {pm.expect(element.Name).eq('processingDate');pm.expect(element.ValueType).eq('DateTimeOffset');pm.expect(element.Value).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);};",
											"",
											"test_schema={};",
											"test_schema.platformShortName=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.platformSerialIdentifier=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.productType=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.beginningDateTime=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.endingDateTime=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.processingCenter=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.processorVersion=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.processingDate=function (num) {pm.expect(num).to.be.eq(1)};",
											"",
											"            ",
											"properties_map = {};",
											"properties_map.Id=function (element) {pm.expect(element.Id).to.match(/[0-9a-fA-F]{8}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{12}/);};",
											"properties_map.Name=function (element) {pm.expect(element.Name).to.be.a(\"string\");};",
											"properties_map.ContentType=function (element) {pm.expect(element.ContentType).to.be.a(\"string\");};",
											"properties_map.ContentLength=function (element) {pm.expect(element.ContentLength).to.be.a(\"number\");};",
											"properties_map.OriginDate=function (element) {pm.expect(element.OriginDate).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d+([+-][0-2]\\d:[0-5]\\d|Z)/);};",
											"properties_map.PublicationDate=function (element) {pm.expect(element.PublicationDate).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);};",
											"properties_map.ModificationDate=function (element) {pm.expect(element.ModificationDate).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d+([+-][0-2]\\d:[0-5]\\d|Z)/);};",
											"properties_map.Online=function (element) {pm.expect(element.Online).to.be.oneOf([TRUE,FALSE,true,false]);};",
											"properties_map.EvictionDate=function (element) {if(element.EvictionDate){ pm.expect(element.EvictionDate).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d+([+-][0-2]\\d:[0-5]\\d|Z)/); }};",
											"properties_map.Checksum=function (element) {for(i=0; i<element.Checksum.length; i++ ){pm.expect(element.Checksum[i].Algorithm).to.be.oneOf([\"MD5\",\"SHA-1\",\"SHA-256\",\"SHA-512\"]);checksum_algorithm = {'MD5': '[a-fA-F0-9]{32}', 'SHA-1': '[0-9a-f]{5,40}', 'SHA-256': '[A-Fa-f0-9]{64}', 'SHA-512': '[A-Fa-f0-9]{128}'};pm.expect(element.Checksum[i].Value).to.match(new RegExp(checksum_algorithm[element.Checksum[i].Algorithm]));}};",
											"properties_map.ContentDate=function (element) {pm.expect(element.ContentDate[\"Start\"]).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);pm.expect(element.ContentDate[\"End\"]).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);};",
											"properties_map.Footprint=function (element) {if(element.Footprint){ pm.expect(element.Footprint).to.match(/geography'SRID=\\d+;[Polygon|Multipolygon|Point](.*)/); }};",
											"",
											"let schema_seen = {};",
											"",
											"function testSpecific(value, product){",
											"",
											"    if (schema_seen[value.Name]){",
											"        schema_seen[value.Name]++;",
											"    }else{",
											"        schema_seen[value.Name]=1;",
											"    }",
											"",
											"    if (test_map[value.Name]) {",
											"        pm.test(\"Test Attribute \"+value.Name + \" for Product: \"+product.Name+\" - \"+product.Id, function(){test_map[value.Name](value, product)});",
											"    }",
											"    else {",
											"        pm.test.skip(\"Test Attribute \"+value.Name + \" for Product: \"+product.Name+\" - \"+product.Id);",
											"    }",
											"}",
											"function propertySpecific(key, product){",
											"    if (properties_map[key]) {",
											"        pm.test(\"Test Property \"+key+\" for Product: \"+product.Name+\" - \"+product.Id, function(){properties_map[key](product)});",
											"    }",
											"    else {",
											"        pm.test.skip(\"Test Property \"+key+\" for Product: \"+product.Name+\" - \"+product.Id);",
											"    }",
											"}",
											"",
											"for (var counter = 0;  counter  < jsonDataElements.length; counter++){",
											"    var product = jsonDataElements[counter];",
											"    console.log(\"Processing Product: \"+product.Name+\" - \"+product.Id);",
											"",
											"    for (const[key, value] of Object.entries(properties_map)){",
											"        propertySpecific(key, jsonDataElements[counter]);",
											"    }",
											"",
											"    if(\"Attributes\" in jsonDataElements[counter]){",
											"        schema_seen = {};",
											"",
											"        pm.test(\"Test Attributes list\", function(){",
											"            pm.expect(jsonDataElements[counter].Attributes.length).to.be.above(0);",
											"        });",
											"",
											"        jsonDataElements[counter].Attributes.forEach(function(elem){",
											"            testSpecific(elem, jsonDataElements[counter]);",
											"        });",
											"        var product = jsonDataElements[counter];",
											"        for (const[key, value] of Object.entries(test_schema)) {pm.test(\"Schema Attribute \"+key+\" Product \"+product.Name+\" - \"+product.Id, function(){",
											"        if(schema_seen[key] == undefined){",
											"            schema_seen[key] = 0;",
											"        }",
											"        value(schema_seen[key], product)});}",
											"    }",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{service-root-uri}}/odata/v1/Products?$expand=Attributes&$top=1&$filter=(contains(Name,'AUX_RESATT') or contains(Name,'AUX_PREORB') or contains(Name,'AUX_POEORB') or contains(Name,'AUX_RESORB')) and startswith(Name,'S1')\n",
									"host": [
										"{{service-root-uri}}"
									],
									"path": [
										"odata",
										"v1",
										"Products"
									],
									"query": [
										{
											"key": "$expand",
											"value": "Attributes"
										},
										{
											"key": "$top",
											"value": "1"
										},
										{
											"key": "$filter",
											"value": "(contains(Name,'AUX_RESATT') or contains(Name,'AUX_PREORB') or contains(Name,'AUX_POEORB') or contains(Name,'AUX_RESORB')) and startswith(Name,'S1')\n"
										},
										{
											"key": "$filter",
											"value": "contains(Name,'AUX_RESATT') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'AUX_PREORB') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'AUX_POEORB') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'AUX_RESORB') and startswith(Name,'S1')\n",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "S1_Level-0_GPS",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "26b6245a-bf00-4f32-8072-36bd88e638bd",
										"exec": [
											"var jsonDataElements = pm.response.json().value;",
											"pm.test(\"Response time is less than \" +  environment[\"query-timeout\"] + \"ms\", function(){",
											"    pm.expect(pm.response.responseTime).to.be.below(parseInt(environment[\"query-timeout\"]));",
											"});",
											"",
											"pm.test(\"Test OData context\", function(){",
											"    query_string = pm.request.url.getQueryString();",
											"    if(query_string.includes(\"$expand=Attributes\")){",
											"        pm.expect( pm.response.json()['@odata.context']).to.include(\"$metadata#Products(Attributes())\");",
											"    } else{",
											"        pm.expect( pm.response.json()['@odata.context']).to.include(\"$metadata#Products\");",
											"    }",
											"});",
											"",
											"var TRUE = true;",
											"var FALSE = false;",
											"",
											"test_map={};",
											"test_map.beginningDateTime=function (element) {pm.expect(element.Name).eq('beginningDateTime');pm.expect(element.ValueType).eq('DateTimeOffset');pm.expect(element.Value).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);};",
											"test_map.endingDateTime=function (element) {pm.expect(element.Name).eq('endingDateTime');pm.expect(element.ValueType).eq('DateTimeOffset');pm.expect(element.Value).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);};",
											"test_map.startTimeFromAscendingNode=function (element) {pm.expect(element.Name).eq('startTimeFromAscendingNode');pm.expect(element.ValueType).eq('Double');pm.expect(element.Value).to.be.a(\"number\");};",
											"test_map.completionTimeFromAscendingNode=function (element) {pm.expect(element.Name).eq('completionTimeFromAscendingNode');pm.expect(element.ValueType).eq('Double');pm.expect(element.Value).to.be.a(\"number\");};",
											"test_map.platformShortName=function (element) {pm.expect(element.Name).eq('platformShortName');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"SENTINEL-1\"]);};",
											"test_map.platformSerialIdentifier=function (element) {pm.expect(element.Name).eq('platformSerialIdentifier');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"A\",\"B\",\"C\",\"D\",\"_\"]);};",
											"test_map.instrumentShortName=function (element) {pm.expect(element.Name).eq('instrumentShortName');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"GPSR\"]);};",
											"test_map.orbitNumber=function (element) {pm.expect(element.Name).eq('orbitNumber');pm.expect(element.ValueType).eq('Integer');pm.expect(element.Value).to.be.a(\"number\");pm.expect(element.Value).to.match(/([1-9]|[1-8][0-9]|9[0-9]|[1-8][0-9]{2}|9[0-8][0-9]|99[0-9]|[1-8][0-9]{3}|9[0-8][0-9]{2}|99[0-8][0-9]|999[0-9]|[1-8][0-9]{4}|9[0-8][0-9]{3}|99[0-8][0-9]{2}|999[0-8][0-9]|9999[0-9]|[1-8][0-9]{5}|9[0-8][0-9]{4}|99[0-8][0-9]{3}|999[0-8][0-9]{2}|9999[0-8][0-9]|99999[0-9])/);};",
											"test_map.relativeOrbitNumber=function (element) {pm.expect(element.Name).eq('relativeOrbitNumber');pm.expect(element.ValueType).eq('Integer');pm.expect(element.Value).to.be.a(\"number\");pm.expect(element.Value).to.match(/([1-9]|[1-8][0-9]|9[0-9]|1[0-6][0-9]|17[0-5])/);};",
											"test_map.cycleNumber=function (element) {pm.expect(element.Name).eq('cycleNumber');pm.expect(element.ValueType).eq('Integer');pm.expect(element.Value).to.be.a(\"number\");pm.expect(element.Value).to.match(/([1-9]|[1-8][0-9]|9[0-9]|1[0-6][0-9]|17[0-5])/);};",
											"test_map.orbitDirection=function (element) {pm.expect(element.Name).eq('orbitDirection');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"ASCENDING\",\"DESCENDING\",\"UNKNOWN\"]);};",
											"test_map.processingDate=function (element) {pm.expect(element.Name).eq('processingDate');pm.expect(element.ValueType).eq('DateTimeOffset');pm.expect(element.Value).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);};",
											"test_map.processingCenter=function (element) {pm.expect(element.Name).eq('processingCenter');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');};",
											"test_map.processorName=function (element) {pm.expect(element.Name).eq('processorName');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');};",
											"test_map.processorVersion=function (element) {pm.expect(element.Name).eq('processorVersion');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');};",
											"test_map.productType=function (element) {pm.expect(element.Name).eq('productType');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"GP_RAW__0_\"]);",
											"",
											"};",
											"",
											"test_schema={};",
											"test_schema.beginningDateTime=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.endingDateTime=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.startTimeFromAscendingNode=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.completionTimeFromAscendingNode=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.platformShortName=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.platformSerialIdentifier=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.instrumentShortName=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.orbitNumber=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.relativeOrbitNumber=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.cycleNumber=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.orbitDirection=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.processingDate=function (num) {pm.expect(num).to.be.within(0,1)};",
											"test_schema.processingCenter=function (num) {pm.expect(num).to.be.within(0,1)};",
											"test_schema.processorName=function (num) {pm.expect(num).to.be.within(0,1)};",
											"test_schema.processorVersion=function (num) {pm.expect(num).to.be.within(0,1)};",
											"test_schema.productType=function (num) {pm.expect(num).to.be.eq(1)};",
											"",
											"            ",
											"properties_map = {};",
											"properties_map.Id=function (element) {pm.expect(element.Id).to.match(/[0-9a-fA-F]{8}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{12}/);};",
											"properties_map.Name=function (element) {pm.expect(element.Name).to.be.a(\"string\");};",
											"properties_map.ContentType=function (element) {pm.expect(element.ContentType).to.be.a(\"string\");};",
											"properties_map.ContentLength=function (element) {pm.expect(element.ContentLength).to.be.a(\"number\");};",
											"properties_map.OriginDate=function (element) {pm.expect(element.OriginDate).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d+([+-][0-2]\\d:[0-5]\\d|Z)/);};",
											"properties_map.PublicationDate=function (element) {pm.expect(element.PublicationDate).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);};",
											"properties_map.ModificationDate=function (element) {pm.expect(element.ModificationDate).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d+([+-][0-2]\\d:[0-5]\\d|Z)/);};",
											"properties_map.Online=function (element) {pm.expect(element.Online).to.be.oneOf([TRUE,FALSE,true,false]);};",
											"properties_map.EvictionDate=function (element) {if(element.EvictionDate){ pm.expect(element.EvictionDate).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d+([+-][0-2]\\d:[0-5]\\d|Z)/); }};",
											"properties_map.Checksum=function (element) {for(i=0; i<element.Checksum.length; i++ ){pm.expect(element.Checksum[i].Algorithm).to.be.oneOf([\"MD5\",\"SHA-1\",\"SHA-256\",\"SHA-512\"]);checksum_algorithm = {'MD5': '[a-fA-F0-9]{32}', 'SHA-1': '[0-9a-f]{5,40}', 'SHA-256': '[A-Fa-f0-9]{64}', 'SHA-512': '[A-Fa-f0-9]{128}'};pm.expect(element.Checksum[i].Value).to.match(new RegExp(checksum_algorithm[element.Checksum[i].Algorithm]));}};",
											"properties_map.ContentDate=function (element) {pm.expect(element.ContentDate[\"Start\"]).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);pm.expect(element.ContentDate[\"End\"]).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);};",
											"properties_map.Footprint=function (element) {if(element.Footprint){ pm.expect(element.Footprint).to.match(/geography'SRID=\\d+;[Polygon|Multipolygon|Point](.*)/); }};",
											"",
											"let schema_seen = {};",
											"",
											"function testSpecific(value, product){",
											"",
											"    if (schema_seen[value.Name]){",
											"        schema_seen[value.Name]++;",
											"    }else{",
											"        schema_seen[value.Name]=1;",
											"    }",
											"",
											"    if (test_map[value.Name]) {",
											"        pm.test(\"Test Attribute \"+value.Name + \" for Product: \"+product.Name+\" - \"+product.Id, function(){test_map[value.Name](value, product)});",
											"    }",
											"    else {",
											"        pm.test.skip(\"Test Attribute \"+value.Name + \" for Product: \"+product.Name+\" - \"+product.Id);",
											"    }",
											"}",
											"function propertySpecific(key, product){",
											"    if (properties_map[key]) {",
											"        pm.test(\"Test Property \"+key+\" for Product: \"+product.Name+\" - \"+product.Id, function(){properties_map[key](product)});",
											"    }",
											"    else {",
											"        pm.test.skip(\"Test Property \"+key+\" for Product: \"+product.Name+\" - \"+product.Id);",
											"    }",
											"}",
											"",
											"for (var counter = 0;  counter  < jsonDataElements.length; counter++){",
											"    var product = jsonDataElements[counter];",
											"    console.log(\"Processing Product: \"+product.Name+\" - \"+product.Id);",
											"",
											"    for (const[key, value] of Object.entries(properties_map)){",
											"        propertySpecific(key, jsonDataElements[counter]);",
											"    }",
											"",
											"    if(\"Attributes\" in jsonDataElements[counter]){",
											"        schema_seen = {};",
											"",
											"        pm.test(\"Test Attributes list\", function(){",
											"            pm.expect(jsonDataElements[counter].Attributes.length).to.be.above(0);",
											"        });",
											"",
											"        jsonDataElements[counter].Attributes.forEach(function(elem){",
											"            testSpecific(elem, jsonDataElements[counter]);",
											"        });",
											"        var product = jsonDataElements[counter];",
											"        for (const[key, value] of Object.entries(test_schema)) {pm.test(\"Schema Attribute \"+key+\" Product \"+product.Name+\" - \"+product.Id, function(){",
											"        if(schema_seen[key] == undefined){",
											"            schema_seen[key] = 0;",
											"        }",
											"        value(schema_seen[key], product)});}",
											"    }",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{service-root-uri}}/odata/v1/Products?$expand=Attributes&$top=1&$filter=(contains(Name,'GP_RAW__0_')) and startswith(Name,'S1')\n",
									"host": [
										"{{service-root-uri}}"
									],
									"path": [
										"odata",
										"v1",
										"Products"
									],
									"query": [
										{
											"key": "$expand",
											"value": "Attributes"
										},
										{
											"key": "$top",
											"value": "1"
										},
										{
											"key": "$filter",
											"value": "(contains(Name,'GP_RAW__0_')) and startswith(Name,'S1')\n"
										},
										{
											"key": "$filter",
											"value": "contains(Name,'GP_RAW__0_') and startswith(Name,'S1')\n",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "S1_L1+L2_Products",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f9098e6b-8631-4ab1-ab2e-f379f8b9c45e",
										"exec": [
											"var jsonDataElements = pm.response.json().value;",
											"pm.test(\"Response time is less than \" +  environment[\"query-timeout\"] + \"ms\", function(){",
											"    pm.expect(pm.response.responseTime).to.be.below(parseInt(environment[\"query-timeout\"]));",
											"});",
											"",
											"pm.test(\"Test OData context\", function(){",
											"    query_string = pm.request.url.getQueryString();",
											"    if(query_string.includes(\"$expand=Attributes\")){",
											"        pm.expect( pm.response.json()['@odata.context']).to.include(\"$metadata#Products(Attributes())\");",
											"    } else{",
											"        pm.expect( pm.response.json()['@odata.context']).to.include(\"$metadata#Products\");",
											"    }",
											"});",
											"",
											"var TRUE = true;",
											"var FALSE = false;",
											"",
											"test_map={};",
											"test_map.processingDate=function (element) {pm.expect(element.Name).eq('processingDate');pm.expect(element.ValueType).eq('DateTimeOffset');pm.expect(element.Value).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);};",
											"test_map.processingCenter=function (element) {pm.expect(element.Name).eq('processingCenter');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');};",
											"test_map.processorName=function (element) {pm.expect(element.Name).eq('processorName');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');};",
											"test_map.processorVersion=function (element) {pm.expect(element.Name).eq('processorVersion');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');};",
											"test_map.beginningDateTime=function (element) {pm.expect(element.Name).eq('beginningDateTime');pm.expect(element.ValueType).eq('DateTimeOffset');pm.expect(element.Value).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);};",
											"test_map.endingDateTime=function (element) {pm.expect(element.Name).eq('endingDateTime');pm.expect(element.ValueType).eq('DateTimeOffset');pm.expect(element.Value).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);};",
											"test_map.startTimeFromAscendingNode=function (element) {pm.expect(element.Name).eq('startTimeFromAscendingNode');pm.expect(element.ValueType).eq('Double');pm.expect(element.Value).to.be.a(\"number\");};",
											"test_map.completionTimeFromAscendingNode=function (element) {pm.expect(element.Name).eq('completionTimeFromAscendingNode');pm.expect(element.ValueType).eq('Double');pm.expect(element.Value).to.be.a(\"number\");};",
											"test_map.platformShortName=function (element) {pm.expect(element.Name).eq('platformShortName');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"SENTINEL-1\"]);};",
											"test_map.platformSerialIdentifier=function (element) {pm.expect(element.Name).eq('platformSerialIdentifier');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"A\",\"B\",\"C\",\"D\",\"_\"]);};",
											"test_map.instrumentShortName=function (element) {pm.expect(element.Name).eq('instrumentShortName');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"SAR\"]);};",
											"test_map.operationalMode=function (element) {pm.expect(element.Name).eq('operationalMode');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"SM\",\"IW\",\"EW\",\"WV\"]);};",
											"test_map.swathIdentifier=function (element) {pm.expect(element.Name).eq('swathIdentifier');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');};",
											"test_map.orbitNumber=function (element) {pm.expect(element.Name).eq('orbitNumber');pm.expect(element.ValueType).eq('Integer');pm.expect(element.Value).to.be.a(\"number\");pm.expect(element.Value).to.match(/([1-9]|[1-8][0-9]|9[0-9]|[1-8][0-9]{2}|9[0-8][0-9]|99[0-9]|[1-8][0-9]{3}|9[0-8][0-9]{2}|99[0-8][0-9]|999[0-9]|[1-8][0-9]{4}|9[0-8][0-9]{3}|99[0-8][0-9]{2}|999[0-8][0-9]|9999[0-9]|[1-8][0-9]{5}|9[0-8][0-9]{4}|99[0-8][0-9]{3}|999[0-8][0-9]{2}|9999[0-8][0-9]|99999[0-9])/);};",
											"test_map.relativeOrbitNumber=function (element) {pm.expect(element.Name).eq('relativeOrbitNumber');pm.expect(element.ValueType).eq('Integer');pm.expect(element.Value).to.be.a(\"number\");pm.expect(element.Value).to.match(/([1-9]|[1-8][0-9]|9[0-9]|1[0-6][0-9]|17[0-5])/);};",
											"test_map.cycleNumber=function (element) {pm.expect(element.Name).eq('cycleNumber');pm.expect(element.ValueType).eq('Integer');pm.expect(element.Value).to.be.a(\"number\");pm.expect(element.Value).to.match(/([1-9]|[1-8][0-9]|9[0-9]|1[0-6][0-9]|17[0-5])/);};",
											"test_map.orbitDirection=function (element) {pm.expect(element.Name).eq('orbitDirection');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"ASCENDING\",\"DESCENDING\",\"UNKNOWN\"]);};",
											"test_map.coordinates=function (element) {pm.expect(element.Name).eq('coordinates');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.match(/(-?\\d+(\\.\\d+)?),\\s*(-?\\d+(\\.\\d+)?)/);};",
											"test_map.polarisationChannels=function (element) {pm.expect(element.Name).eq('polarisationChannels');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"HH\",\"VV\",\"HV\",\"VH\"]);};",
											"test_map.productType=function (element) {pm.expect(element.Name).eq('productType');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"S1_SLC__1S\",\"S2_SLC__1S\",\"S3_SLC__1S\",\"S4_SLC__1S\",\"S5_SLC__1S\",\"S6_SLC__1S\",\"S1_SLC__1A\",\"S2_SLC__1A\",\"S3_SLC__1A\",\"S4_SLC__1A\",\"S5_SLC__1A\",\"S6_SLC__1A\",\"S1_GRDF_1S\",\"S2_GRDF_1S\",\"S3_GRDF_1S\",\"S4_GRDF_1S\",\"S5_GRDF_1S\",\"S6_GRDF_1S\",\"S1_GRDF_1A\",\"S2_GRDF_1A\",\"S3_GRDF_1A\",\"S4_GRDF_1A\",\"S5_GRDF_1A\",\"S6_GRDF_1A\",\"S1_GRDH_1S\",\"S2_GRDH_1S\",\"S3_GRDH_1S\",\"S4_GRDH_1S\",\"S5_GRDH_1S\",\"S6_GRDH_1S\",\"S1_GRDH_1A\",\"S2_GRDH_1A\",\"S3_GRDH_1A\",\"S4_GRDH_1A\",\"S5_GRDH_1A\",\"S6_GRDH_1A\",\"S1_GRDM_1S\",\"S2_GRDM_1S\",\"S3_GRDM_1S\",\"S4_GRDM_1S\",\"S5_GRDM_1S\",\"S6_GRDM_1S\",\"S1_GRDM_1A\",\"S2_GRDM_1A\",\"S3_GRDM_1A\",\"S4_GRDM_1A\",\"S5_GRDM_1A\",\"S6_GRDM_1A\",\"S1_RTC__1S\",\"S2_RTC__1S\",\"S3_RTC__1S\",\"S4_RTC__1S\",\"S5_RTC__1S\",\"S6_RTC__1S\",\"S1_OCN__2S\",\"S2_OCN__2S\",\"S3_OCN__2S\",\"S4_OCN__2S\",\"S5_OCN__2S\",\"S6_OCN__2S\",\"S1_OCN__2A\",\"S2_OCN__2A\",\"S3_OCN__2A\",\"S4_OCN__2A\",\"S5_OCN__2A\",\"S6_OCN__2A\",\"IW_SLC__1S\",\"IW_SLC__1A\",\"IW_GRDH_1S\",\"IW_GRDH_1A\",\"IW_GRDM_1S\",\"IW_GRDM_1A\",\"IW_RTC__1S\",\"IW_OCN__2S\",\"IW_OCN__2A\",\"EW_SLC__1S\",\"EW_SLC__1A\",\"EW_GRDH_1S\",\"EW_GRDH_1A\",\"EW_GRDM_1S\",\"EW_GRDM_1A\",\"EW_RTC__1S\",\"EW_OCN__2S\",\"EW_OCN__2A\",\"WV_SLC__1S\",\"WV_SLC__1A\",\"WV_GRDM_1S\",\"WV_GRDM_1A\",\"WV_OCN__2S\",\"WV_OCN__2A\"]);",
											"",
											"};",
											"test_map.timeliness=function (element) {pm.expect(element.Name).eq('timeliness');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"NRT-10m\",\"NRT-1h\",\"NRT-3h\",\"Fast-24h\",\"Off-line\",\"Reprocessing\"]);};",
											"test_map.instrumentConfigurationID=function (element) {pm.expect(element.Name).eq('instrumentConfigurationID');pm.expect(element.ValueType).eq('Integer');pm.expect(element.Value).to.be.a(\"number\");};",
											"test_map.datatakeID=function (element) {pm.expect(element.Name).eq('datatakeID');pm.expect(element.ValueType).eq('Integer');pm.expect(element.Value).to.be.a(\"number\");};",
											"test_map.productClass=function (element) {pm.expect(element.Name).eq('productClass');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');};",
											"test_map.productComposition=function (element) {pm.expect(element.Name).eq('productComposition');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');};",
											"test_map.sliceProductFlag=function (element) {pm.expect(element.Name).eq('sliceProductFlag');pm.expect(element.ValueType).eq('Boolean');pm.expect(element.Value).to.be.oneOf([\"TRUE\",\"FALSE\",\"true\",\"false\"]);};",
											"test_map.segmentStartTime=function (element) {pm.expect(element.Name).eq('segmentStartTime');pm.expect(element.ValueType).eq('DateTimeOffset');pm.expect(element.Value).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d+([+-][0-2]\\d:[0-5]\\d|Z)/);};",
											"test_map.sliceNumber=function (element) {pm.expect(element.Name).eq('sliceNumber');pm.expect(element.ValueType).eq('Integer');pm.expect(element.Value).to.be.a(\"number\");};",
											"test_map.totalSlices=function (element) {pm.expect(element.Name).eq('totalSlices');pm.expect(element.ValueType).eq('Integer');pm.expect(element.Value).to.be.a(\"number\");};",
											"",
											"test_schema={};",
											"test_schema.processingDate=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.processingCenter=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.processorName=function (num) {pm.expect(num).to.be.within(0,1)};",
											"test_schema.processorVersion=function (num) {pm.expect(num).to.be.within(0,1)};",
											"test_schema.beginningDateTime=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.endingDateTime=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.startTimeFromAscendingNode=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.completionTimeFromAscendingNode=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.platformShortName=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.platformSerialIdentifier=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.instrumentShortName=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.operationalMode=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.swathIdentifier=function (num) {pm.expect(num).to.be.within(1,5)};",
											"test_schema.orbitNumber=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.relativeOrbitNumber=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.cycleNumber=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.orbitDirection=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.coordinates=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.polarisationChannels=function (num) {pm.expect(num).to.be.within(1,2)};",
											"test_schema.productType=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.timeliness=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.instrumentConfigurationID=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.datatakeID=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.productClass=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.productComposition=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.sliceProductFlag=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.segmentStartTime=function (num) {pm.expect(num).to.be.within(0,1)};",
											"test_schema.sliceNumber=function (num) {pm.expect(num).to.be.within(0,1)};",
											"test_schema.totalSlices=function (num) {pm.expect(num).to.be.within(0,1)};",
											"",
											"            ",
											"properties_map = {};",
											"properties_map.Id=function (element) {pm.expect(element.Id).to.match(/[0-9a-fA-F]{8}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{12}/);};",
											"properties_map.Name=function (element) {pm.expect(element.Name).to.be.a(\"string\");};",
											"properties_map.ContentType=function (element) {pm.expect(element.ContentType).to.be.a(\"string\");};",
											"properties_map.ContentLength=function (element) {pm.expect(element.ContentLength).to.be.a(\"number\");};",
											"properties_map.OriginDate=function (element) {pm.expect(element.OriginDate).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d+([+-][0-2]\\d:[0-5]\\d|Z)/);};",
											"properties_map.PublicationDate=function (element) {pm.expect(element.PublicationDate).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);};",
											"properties_map.ModificationDate=function (element) {pm.expect(element.ModificationDate).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d+([+-][0-2]\\d:[0-5]\\d|Z)/);};",
											"properties_map.Online=function (element) {pm.expect(element.Online).to.be.oneOf([TRUE,FALSE,true,false]);};",
											"properties_map.EvictionDate=function (element) {if(element.EvictionDate){ pm.expect(element.EvictionDate).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d+([+-][0-2]\\d:[0-5]\\d|Z)/); }};",
											"properties_map.Checksum=function (element) {for(i=0; i<element.Checksum.length; i++ ){pm.expect(element.Checksum[i].Algorithm).to.be.oneOf([\"MD5\",\"SHA-1\",\"SHA-256\",\"SHA-512\"]);checksum_algorithm = {'MD5': '[a-fA-F0-9]{32}', 'SHA-1': '[0-9a-f]{5,40}', 'SHA-256': '[A-Fa-f0-9]{64}', 'SHA-512': '[A-Fa-f0-9]{128}'};pm.expect(element.Checksum[i].Value).to.match(new RegExp(checksum_algorithm[element.Checksum[i].Algorithm]));}};",
											"properties_map.ContentDate=function (element) {pm.expect(element.ContentDate[\"Start\"]).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);pm.expect(element.ContentDate[\"End\"]).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);};",
											"properties_map.Footprint=function (element) {if(element.Footprint){ pm.expect(element.Footprint).to.match(/geography'SRID=\\d+;[Polygon|Multipolygon|Point](.*)/); }};",
											"",
											"let schema_seen = {};",
											"",
											"function testSpecific(value, product){",
											"",
											"    if (schema_seen[value.Name]){",
											"        schema_seen[value.Name]++;",
											"    }else{",
											"        schema_seen[value.Name]=1;",
											"    }",
											"",
											"    if (test_map[value.Name]) {",
											"        pm.test(\"Test Attribute \"+value.Name + \" for Product: \"+product.Name+\" - \"+product.Id, function(){test_map[value.Name](value, product)});",
											"    }",
											"    else {",
											"        pm.test.skip(\"Test Attribute \"+value.Name + \" for Product: \"+product.Name+\" - \"+product.Id);",
											"    }",
											"}",
											"function propertySpecific(key, product){",
											"    if (properties_map[key]) {",
											"        pm.test(\"Test Property \"+key+\" for Product: \"+product.Name+\" - \"+product.Id, function(){properties_map[key](product)});",
											"    }",
											"    else {",
											"        pm.test.skip(\"Test Property \"+key+\" for Product: \"+product.Name+\" - \"+product.Id);",
											"    }",
											"}",
											"",
											"for (var counter = 0;  counter  < jsonDataElements.length; counter++){",
											"    var product = jsonDataElements[counter];",
											"    console.log(\"Processing Product: \"+product.Name+\" - \"+product.Id);",
											"",
											"    for (const[key, value] of Object.entries(properties_map)){",
											"        propertySpecific(key, jsonDataElements[counter]);",
											"    }",
											"",
											"    if(\"Attributes\" in jsonDataElements[counter]){",
											"        schema_seen = {};",
											"",
											"        pm.test(\"Test Attributes list\", function(){",
											"            pm.expect(jsonDataElements[counter].Attributes.length).to.be.above(0);",
											"        });",
											"",
											"        jsonDataElements[counter].Attributes.forEach(function(elem){",
											"            testSpecific(elem, jsonDataElements[counter]);",
											"        });",
											"        var product = jsonDataElements[counter];",
											"        for (const[key, value] of Object.entries(test_schema)) {pm.test(\"Schema Attribute \"+key+\" Product \"+product.Name+\" - \"+product.Id, function(){",
											"        if(schema_seen[key] == undefined){",
											"            schema_seen[key] = 0;",
											"        }",
											"        value(schema_seen[key], product)});}",
											"    }",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{service-root-uri}}/odata/v1/Products?$expand=Attributes&$top=1&$filter=(contains(Name,'S1_SLC__1S') or contains(Name,'S2_SLC__1S') or contains(Name,'S3_SLC__1S') or contains(Name,'S4_SLC__1S') or contains(Name,'S5_SLC__1S') or contains(Name,'S6_SLC__1S') or contains(Name,'S1_SLC__1A') or contains(Name,'S2_SLC__1A') or contains(Name,'S3_SLC__1A') or contains(Name,'S4_SLC__1A') or contains(Name,'S5_SLC__1A') or contains(Name,'S6_SLC__1A') or contains(Name,'S1_GRDF_1S') or contains(Name,'S2_GRDF_1S') or contains(Name,'S3_GRDF_1S') or contains(Name,'S4_GRDF_1S') or contains(Name,'S5_GRDF_1S') or contains(Name,'S6_GRDF_1S') or contains(Name,'S1_GRDF_1A') or contains(Name,'S2_GRDF_1A') or contains(Name,'S3_GRDF_1A') or contains(Name,'S4_GRDF_1A') or contains(Name,'S5_GRDF_1A') or contains(Name,'S6_GRDF_1A') or contains(Name,'S1_GRDH_1S') or contains(Name,'S2_GRDH_1S') or contains(Name,'S3_GRDH_1S') or contains(Name,'S4_GRDH_1S') or contains(Name,'S5_GRDH_1S') or contains(Name,'S6_GRDH_1S') or contains(Name,'S1_GRDH_1A') or contains(Name,'S2_GRDH_1A') or contains(Name,'S3_GRDH_1A') or contains(Name,'S4_GRDH_1A') or contains(Name,'S5_GRDH_1A') or contains(Name,'S6_GRDH_1A') or contains(Name,'S1_GRDM_1S') or contains(Name,'S2_GRDM_1S') or contains(Name,'S3_GRDM_1S') or contains(Name,'S4_GRDM_1S') or contains(Name,'S5_GRDM_1S') or contains(Name,'S6_GRDM_1S') or contains(Name,'S1_GRDM_1A') or contains(Name,'S2_GRDM_1A') or contains(Name,'S3_GRDM_1A') or contains(Name,'S4_GRDM_1A') or contains(Name,'S5_GRDM_1A') or contains(Name,'S6_GRDM_1A') or contains(Name,'S1_RTC__1S') or contains(Name,'S2_RTC__1S') or contains(Name,'S3_RTC__1S') or contains(Name,'S4_RTC__1S') or contains(Name,'S5_RTC__1S') or contains(Name,'S6_RTC__1S') or contains(Name,'S1_OCN__2S') or contains(Name,'S2_OCN__2S') or contains(Name,'S3_OCN__2S') or contains(Name,'S4_OCN__2S') or contains(Name,'S5_OCN__2S') or contains(Name,'S6_OCN__2S') or contains(Name,'S1_OCN__2A') or contains(Name,'S2_OCN__2A') or contains(Name,'S3_OCN__2A') or contains(Name,'S4_OCN__2A') or contains(Name,'S5_OCN__2A') or contains(Name,'S6_OCN__2A') or contains(Name,'IW_SLC__1S') or contains(Name,'IW_SLC__1A') or contains(Name,'IW_GRDH_1S') or contains(Name,'IW_GRDH_1A') or contains(Name,'IW_GRDM_1S') or contains(Name,'IW_GRDM_1A') or contains(Name,'IW_RTC__1S') or contains(Name,'IW_OCN__2S') or contains(Name,'IW_OCN__2A') or contains(Name,'EW_SLC__1S') or contains(Name,'EW_SLC__1A') or contains(Name,'EW_GRDH_1S') or contains(Name,'EW_GRDH_1A') or contains(Name,'EW_GRDM_1S') or contains(Name,'EW_GRDM_1A') or contains(Name,'EW_RTC__1S') or contains(Name,'EW_OCN__2S') or contains(Name,'EW_OCN__2A') or contains(Name,'WV_SLC__1S') or contains(Name,'WV_SLC__1A') or contains(Name,'WV_GRDM_1S') or contains(Name,'WV_GRDM_1A') or contains(Name,'WV_OCN__2S') or contains(Name,'WV_OCN__2A')) and startswith(Name,'S1')\n",
									"host": [
										"{{service-root-uri}}"
									],
									"path": [
										"odata",
										"v1",
										"Products"
									],
									"query": [
										{
											"key": "$expand",
											"value": "Attributes"
										},
										{
											"key": "$top",
											"value": "1"
										},
										{
											"key": "$filter",
											"value": "(contains(Name,'S1_SLC__1S') or contains(Name,'S2_SLC__1S') or contains(Name,'S3_SLC__1S') or contains(Name,'S4_SLC__1S') or contains(Name,'S5_SLC__1S') or contains(Name,'S6_SLC__1S') or contains(Name,'S1_SLC__1A') or contains(Name,'S2_SLC__1A') or contains(Name,'S3_SLC__1A') or contains(Name,'S4_SLC__1A') or contains(Name,'S5_SLC__1A') or contains(Name,'S6_SLC__1A') or contains(Name,'S1_GRDF_1S') or contains(Name,'S2_GRDF_1S') or contains(Name,'S3_GRDF_1S') or contains(Name,'S4_GRDF_1S') or contains(Name,'S5_GRDF_1S') or contains(Name,'S6_GRDF_1S') or contains(Name,'S1_GRDF_1A') or contains(Name,'S2_GRDF_1A') or contains(Name,'S3_GRDF_1A') or contains(Name,'S4_GRDF_1A') or contains(Name,'S5_GRDF_1A') or contains(Name,'S6_GRDF_1A') or contains(Name,'S1_GRDH_1S') or contains(Name,'S2_GRDH_1S') or contains(Name,'S3_GRDH_1S') or contains(Name,'S4_GRDH_1S') or contains(Name,'S5_GRDH_1S') or contains(Name,'S6_GRDH_1S') or contains(Name,'S1_GRDH_1A') or contains(Name,'S2_GRDH_1A') or contains(Name,'S3_GRDH_1A') or contains(Name,'S4_GRDH_1A') or contains(Name,'S5_GRDH_1A') or contains(Name,'S6_GRDH_1A') or contains(Name,'S1_GRDM_1S') or contains(Name,'S2_GRDM_1S') or contains(Name,'S3_GRDM_1S') or contains(Name,'S4_GRDM_1S') or contains(Name,'S5_GRDM_1S') or contains(Name,'S6_GRDM_1S') or contains(Name,'S1_GRDM_1A') or contains(Name,'S2_GRDM_1A') or contains(Name,'S3_GRDM_1A') or contains(Name,'S4_GRDM_1A') or contains(Name,'S5_GRDM_1A') or contains(Name,'S6_GRDM_1A') or contains(Name,'S1_RTC__1S') or contains(Name,'S2_RTC__1S') or contains(Name,'S3_RTC__1S') or contains(Name,'S4_RTC__1S') or contains(Name,'S5_RTC__1S') or contains(Name,'S6_RTC__1S') or contains(Name,'S1_OCN__2S') or contains(Name,'S2_OCN__2S') or contains(Name,'S3_OCN__2S') or contains(Name,'S4_OCN__2S') or contains(Name,'S5_OCN__2S') or contains(Name,'S6_OCN__2S') or contains(Name,'S1_OCN__2A') or contains(Name,'S2_OCN__2A') or contains(Name,'S3_OCN__2A') or contains(Name,'S4_OCN__2A') or contains(Name,'S5_OCN__2A') or contains(Name,'S6_OCN__2A') or contains(Name,'IW_SLC__1S') or contains(Name,'IW_SLC__1A') or contains(Name,'IW_GRDH_1S') or contains(Name,'IW_GRDH_1A') or contains(Name,'IW_GRDM_1S') or contains(Name,'IW_GRDM_1A') or contains(Name,'IW_RTC__1S') or contains(Name,'IW_OCN__2S') or contains(Name,'IW_OCN__2A') or contains(Name,'EW_SLC__1S') or contains(Name,'EW_SLC__1A') or contains(Name,'EW_GRDH_1S') or contains(Name,'EW_GRDH_1A') or contains(Name,'EW_GRDM_1S') or contains(Name,'EW_GRDM_1A') or contains(Name,'EW_RTC__1S') or contains(Name,'EW_OCN__2S') or contains(Name,'EW_OCN__2A') or contains(Name,'WV_SLC__1S') or contains(Name,'WV_SLC__1A') or contains(Name,'WV_GRDM_1S') or contains(Name,'WV_GRDM_1A') or contains(Name,'WV_OCN__2S') or contains(Name,'WV_OCN__2A')) and startswith(Name,'S1')\n"
										},
										{
											"key": "$filter",
											"value": "contains(Name,'S1_SLC__1S') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'S2_SLC__1S') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'S3_SLC__1S') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'S4_SLC__1S') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'S5_SLC__1S') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'S6_SLC__1S') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'S1_SLC__1A') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'S2_SLC__1A') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'S3_SLC__1A') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'S4_SLC__1A') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'S5_SLC__1A') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'S6_SLC__1A') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'S1_GRDF_1S') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'S2_GRDF_1S') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'S3_GRDF_1S') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'S4_GRDF_1S') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'S5_GRDF_1S') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'S6_GRDF_1S') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'S1_GRDF_1A') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'S2_GRDF_1A') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'S3_GRDF_1A') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'S4_GRDF_1A') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'S5_GRDF_1A') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'S6_GRDF_1A') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'S1_GRDH_1S') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'S2_GRDH_1S') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'S3_GRDH_1S') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'S4_GRDH_1S') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'S5_GRDH_1S') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'S6_GRDH_1S') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'S1_GRDH_1A') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'S2_GRDH_1A') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'S3_GRDH_1A') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'S4_GRDH_1A') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'S5_GRDH_1A') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'S6_GRDH_1A') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'S1_GRDM_1S') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'S2_GRDM_1S') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'S3_GRDM_1S') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'S4_GRDM_1S') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'S5_GRDM_1S') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'S6_GRDM_1S') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'S1_GRDM_1A') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'S2_GRDM_1A') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'S3_GRDM_1A') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'S4_GRDM_1A') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'S5_GRDM_1A') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'S6_GRDM_1A') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'S1_RTC__1S') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'S2_RTC__1S') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'S3_RTC__1S') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'S4_RTC__1S') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'S5_RTC__1S') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'S6_RTC__1S') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'S1_OCN__2S') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'S2_OCN__2S') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'S3_OCN__2S') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'S4_OCN__2S') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'S5_OCN__2S') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'S6_OCN__2S') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'S1_OCN__2A') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'S2_OCN__2A') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'S3_OCN__2A') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'S4_OCN__2A') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'S5_OCN__2A') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'S6_OCN__2A') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'IW_SLC__1S') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'IW_SLC__1A') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'IW_GRDH_1S') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'IW_GRDH_1A') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'IW_GRDM_1S') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'IW_GRDM_1A') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'IW_RTC__1S') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'IW_OCN__2S') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'IW_OCN__2A') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'EW_SLC__1S') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'EW_SLC__1A') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'EW_GRDH_1S') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'EW_GRDH_1A') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'EW_GRDM_1S') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'EW_GRDM_1A') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'EW_RTC__1S') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'EW_OCN__2S') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'EW_OCN__2A') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'WV_SLC__1S') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'WV_SLC__1A') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'WV_GRDM_1S') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'WV_GRDM_1A') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'WV_OCN__2S') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'WV_OCN__2A') and startswith(Name,'S1')\n",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "S1_Level-0_Std+Ann",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8274066d-1dc8-4a7c-9a17-f9b2f71f5433",
										"exec": [
											"var jsonDataElements = pm.response.json().value;",
											"pm.test(\"Response time is less than \" +  environment[\"query-timeout\"] + \"ms\", function(){",
											"    pm.expect(pm.response.responseTime).to.be.below(parseInt(environment[\"query-timeout\"]));",
											"});",
											"",
											"pm.test(\"Test OData context\", function(){",
											"    query_string = pm.request.url.getQueryString();",
											"    if(query_string.includes(\"$expand=Attributes\")){",
											"        pm.expect( pm.response.json()['@odata.context']).to.include(\"$metadata#Products(Attributes())\");",
											"    } else{",
											"        pm.expect( pm.response.json()['@odata.context']).to.include(\"$metadata#Products\");",
											"    }",
											"});",
											"",
											"var TRUE = true;",
											"var FALSE = false;",
											"",
											"test_map={};",
											"test_map.beginningDateTime=function (element) {pm.expect(element.Name).eq('beginningDateTime');pm.expect(element.ValueType).eq('DateTimeOffset');pm.expect(element.Value).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);};",
											"test_map.endingDateTime=function (element) {pm.expect(element.Name).eq('endingDateTime');pm.expect(element.ValueType).eq('DateTimeOffset');pm.expect(element.Value).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);};",
											"test_map.startTimeFromAscendingNode=function (element) {pm.expect(element.Name).eq('startTimeFromAscendingNode');pm.expect(element.ValueType).eq('Double');pm.expect(element.Value).to.be.a(\"number\");};",
											"test_map.completionTimeFromAscendingNode=function (element) {pm.expect(element.Name).eq('completionTimeFromAscendingNode');pm.expect(element.ValueType).eq('Double');pm.expect(element.Value).to.be.a(\"number\");};",
											"test_map.platformShortName=function (element) {pm.expect(element.Name).eq('platformShortName');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"SENTINEL-1\"]);};",
											"test_map.platformSerialIdentifier=function (element) {pm.expect(element.Name).eq('platformSerialIdentifier');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"A\",\"B\",\"C\",\"D\",\"_\"]);};",
											"test_map.instrumentShortName=function (element) {pm.expect(element.Name).eq('instrumentShortName');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"SAR\"]);};",
											"test_map.operationalMode=function (element) {pm.expect(element.Name).eq('operationalMode');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"SM\",\"IW\",\"EW\",\"WV\",\"RF\",\"EN\",\"AN\"]);};",
											"test_map.swathIdentifier=function (element) {pm.expect(element.Name).eq('swathIdentifier');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"1\",\"2\",\"3\",\"4\",\"5\",\"6\"]);};",
											"test_map.polarisationChannels=function (element) {pm.expect(element.Name).eq('polarisationChannels');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"HH\",\"VV\",\"HV\",\"VH\"]);};",
											"test_map.orbitNumber=function (element) {pm.expect(element.Name).eq('orbitNumber');pm.expect(element.ValueType).eq('Integer');pm.expect(element.Value).to.be.a(\"number\");pm.expect(element.Value).to.match(/([1-9]|[1-8][0-9]|9[0-9]|[1-8][0-9]{2}|9[0-8][0-9]|99[0-9]|[1-8][0-9]{3}|9[0-8][0-9]{2}|99[0-8][0-9]|999[0-9]|[1-8][0-9]{4}|9[0-8][0-9]{3}|99[0-8][0-9]{2}|999[0-8][0-9]|9999[0-9]|[1-8][0-9]{5}|9[0-8][0-9]{4}|99[0-8][0-9]{3}|999[0-8][0-9]{2}|9999[0-8][0-9]|99999[0-9])/);};",
											"test_map.relativeOrbitNumber=function (element) {pm.expect(element.Name).eq('relativeOrbitNumber');pm.expect(element.ValueType).eq('Integer');pm.expect(element.Value).to.be.a(\"number\");pm.expect(element.Value).to.match(/([1-9]|[1-8][0-9]|9[0-9]|1[0-6][0-9]|17[0-5])/);};",
											"test_map.cycleNumber=function (element) {pm.expect(element.Name).eq('cycleNumber');pm.expect(element.ValueType).eq('Integer');pm.expect(element.Value).to.be.a(\"number\");pm.expect(element.Value).to.match(/([1-9]|[1-8][0-9]|9[0-9]|1[0-6][0-9]|17[0-5])/);};",
											"test_map.orbitDirection=function (element) {pm.expect(element.Name).eq('orbitDirection');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"ASCENDING\",\"DESCENDING\",\"UNKNOWN\"]);};",
											"test_map.processingDate=function (element) {pm.expect(element.Name).eq('processingDate');pm.expect(element.ValueType).eq('DateTimeOffset');pm.expect(element.Value).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);};",
											"test_map.processingCenter=function (element) {pm.expect(element.Name).eq('processingCenter');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');};",
											"test_map.processorName=function (element) {pm.expect(element.Name).eq('processorName');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');};",
											"test_map.processorVersion=function (element) {pm.expect(element.Name).eq('processorVersion');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');};",
											"test_map.coordinates=function (element) {pm.expect(element.Name).eq('coordinates');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.match(/(-?\\d+(\\.\\d+)?),\\s*(-?\\d+(\\.\\d+)?)/);};",
											"test_map.productType=function (element) {pm.expect(element.Name).eq('productType');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"S1_RAW__0S\",\"S2_RAW__0S\",\"S3_RAW__0S\",\"S4_RAW__0S\",\"S5_RAW__0S\",\"S6_RAW__0S\",\"IW_RAW__0S\",\"EW_RAW__0S\",\"WV_RAW__0S\",\"RF_RAW__0S\",\"EN_RAW__0S\",\"N1_RAW__0S\",\"N2_RAW__0S\",\"N3_RAW__0S\",\"N4_RAW__0S\",\"N5_RAW__0S\",\"N6_RAW__0S\",\"S1_RAW__0A\",\"S2_RAW__0A\",\"S3_RAW__0A\",\"S4_RAW__0A\",\"S5_RAW__0A\",\"S6_RAW__0A\",\"IW_RAW__0A\",\"EW_RAW__0A\",\"WV_RAW__0A\"]);",
											"",
											"};",
											"test_map.productClass=function (element) {pm.expect(element.Name).eq('productClass');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"A\",\"S\"]);};",
											"test_map.productConsolidation=function (element) {pm.expect(element.Name).eq('productConsolidation');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"SLICE\",\"SLICE PARTIAL\",\"FULL\"]);};",
											"test_map.instrumentConfigurationID=function (element) {pm.expect(element.Name).eq('instrumentConfigurationID');pm.expect(element.ValueType).eq('Integer');pm.expect(element.Value).to.be.a(\"number\");pm.expect(element.Value).to.match(/([1-9]|[1-8][0-9]|9[0-9]|[1-8][0-9]{2}|9[0-8][0-9]|99[0-9]|[1-8][0-9]{3}|9[0-8][0-9]{2}|99[0-8][0-9]|999[0-9]|[1-8][0-9]{4}|9[0-8][0-9]{3}|99[0-8][0-9]{2}|999[0-8][0-9]|9999[0-9]|[1-8][0-9]{5}|9[0-8][0-9]{4}|99[0-8][0-9]{3}|999[0-8][0-9]{2}|9999[0-8][0-9]|99999[0-9]|[1-8][0-9]{6}|9[0-8][0-9]{5}|99[0-8][0-9]{4}|999[0-8][0-9]{3}|9999[0-8][0-9]{2}|99999[0-8][0-9]|999999[0-9]|1[0-5][0-9]{6}|16[0-6][0-9]{5}|167[0-6][0-9]{4}|1677[0-6][0-9]{3}|16777[01][0-9]{2}|1677720[0-9]|1677721[0-5])/);};",
											"test_map.datatakeID=function (element) {pm.expect(element.Name).eq('datatakeID');pm.expect(element.ValueType).eq('Integer');pm.expect(element.Value).to.be.a(\"number\");pm.expect(element.Value).to.match(/([1-9]|[1-8][0-9]|9[0-9]|[1-8][0-9]{2}|9[0-8][0-9]|99[0-9]|[1-8][0-9]{3}|9[0-8][0-9]{2}|99[0-8][0-9]|999[0-9]|[1-8][0-9]{4}|9[0-8][0-9]{3}|99[0-8][0-9]{2}|999[0-8][0-9]|9999[0-9]|[1-8][0-9]{5}|9[0-8][0-9]{4}|99[0-8][0-9]{3}|999[0-8][0-9]{2}|9999[0-8][0-9]|99999[0-9]|[1-7][0-9]{6}|8[0-2][0-9]{5}|83[0-7][0-9]{4}|838[0-7][0-9]{3}|8388[0-5][0-9]{2}|838860[0-7])/);};",
											"test_map.sliceProductFlag=function (element) {pm.expect(element.Name).eq('sliceProductFlag');pm.expect(element.ValueType).eq('Boolean');pm.expect(element.Value).to.be.oneOf([\"TRUE\",\"FALSE\",\"true\",\"false\"]);};",
											"test_map.sliceNumber=function (element) {pm.expect(element.Name).eq('sliceNumber');pm.expect(element.ValueType).eq('Integer');pm.expect(element.Value).to.be.a(\"number\");};",
											"test_map.totalSlices=function (element) {pm.expect(element.Name).eq('totalSlices');pm.expect(element.ValueType).eq('Integer');pm.expect(element.Value).to.be.a(\"number\");};",
											"",
											"test_schema={};",
											"test_schema.beginningDateTime=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.endingDateTime=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.startTimeFromAscendingNode=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.completionTimeFromAscendingNode=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.platformShortName=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.platformSerialIdentifier=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.instrumentShortName=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.operationalMode=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.swathIdentifier=function (num) {pm.expect(num).to.be.within(0,1)};",
											"test_schema.polarisationChannels=function (num) {pm.expect(num).to.be.within(1,2)};",
											"test_schema.orbitNumber=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.relativeOrbitNumber=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.cycleNumber=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.orbitDirection=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.processingDate=function (num) {pm.expect(num).to.be.within(0,1)};",
											"test_schema.processingCenter=function (num) {pm.expect(num).to.be.within(0,1)};",
											"test_schema.processorName=function (num) {pm.expect(num).to.be.within(0,1)};",
											"test_schema.processorVersion=function (num) {pm.expect(num).to.be.within(0,1)};",
											"test_schema.coordinates=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.productType=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.productClass=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.productConsolidation=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.instrumentConfigurationID=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.datatakeID=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.sliceProductFlag=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.sliceNumber=function (num) {pm.expect(num).to.be.within(0,1)};",
											"test_schema.totalSlices=function (num) {pm.expect(num).to.be.within(0,1)};",
											"",
											"            ",
											"properties_map = {};",
											"properties_map.Id=function (element) {pm.expect(element.Id).to.match(/[0-9a-fA-F]{8}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{12}/);};",
											"properties_map.Name=function (element) {pm.expect(element.Name).to.be.a(\"string\");};",
											"properties_map.ContentType=function (element) {pm.expect(element.ContentType).to.be.a(\"string\");};",
											"properties_map.ContentLength=function (element) {pm.expect(element.ContentLength).to.be.a(\"number\");};",
											"properties_map.OriginDate=function (element) {pm.expect(element.OriginDate).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d+([+-][0-2]\\d:[0-5]\\d|Z)/);};",
											"properties_map.PublicationDate=function (element) {pm.expect(element.PublicationDate).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);};",
											"properties_map.ModificationDate=function (element) {pm.expect(element.ModificationDate).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d+([+-][0-2]\\d:[0-5]\\d|Z)/);};",
											"properties_map.Online=function (element) {pm.expect(element.Online).to.be.oneOf([TRUE,FALSE,true,false]);};",
											"properties_map.EvictionDate=function (element) {if(element.EvictionDate){ pm.expect(element.EvictionDate).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d+([+-][0-2]\\d:[0-5]\\d|Z)/); }};",
											"properties_map.Checksum=function (element) {for(i=0; i<element.Checksum.length; i++ ){pm.expect(element.Checksum[i].Algorithm).to.be.oneOf([\"MD5\",\"SHA-1\",\"SHA-256\",\"SHA-512\"]);checksum_algorithm = {'MD5': '[a-fA-F0-9]{32}', 'SHA-1': '[0-9a-f]{5,40}', 'SHA-256': '[A-Fa-f0-9]{64}', 'SHA-512': '[A-Fa-f0-9]{128}'};pm.expect(element.Checksum[i].Value).to.match(new RegExp(checksum_algorithm[element.Checksum[i].Algorithm]));}};",
											"properties_map.ContentDate=function (element) {pm.expect(element.ContentDate[\"Start\"]).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);pm.expect(element.ContentDate[\"End\"]).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);};",
											"properties_map.Footprint=function (element) {if(element.Footprint){ pm.expect(element.Footprint).to.match(/geography'SRID=\\d+;[Polygon|Multipolygon|Point](.*)/); }};",
											"",
											"let schema_seen = {};",
											"",
											"function testSpecific(value, product){",
											"",
											"    if (schema_seen[value.Name]){",
											"        schema_seen[value.Name]++;",
											"    }else{",
											"        schema_seen[value.Name]=1;",
											"    }",
											"",
											"    if (test_map[value.Name]) {",
											"        pm.test(\"Test Attribute \"+value.Name + \" for Product: \"+product.Name+\" - \"+product.Id, function(){test_map[value.Name](value, product)});",
											"    }",
											"    else {",
											"        pm.test.skip(\"Test Attribute \"+value.Name + \" for Product: \"+product.Name+\" - \"+product.Id);",
											"    }",
											"}",
											"function propertySpecific(key, product){",
											"    if (properties_map[key]) {",
											"        pm.test(\"Test Property \"+key+\" for Product: \"+product.Name+\" - \"+product.Id, function(){properties_map[key](product)});",
											"    }",
											"    else {",
											"        pm.test.skip(\"Test Property \"+key+\" for Product: \"+product.Name+\" - \"+product.Id);",
											"    }",
											"}",
											"",
											"for (var counter = 0;  counter  < jsonDataElements.length; counter++){",
											"    var product = jsonDataElements[counter];",
											"    console.log(\"Processing Product: \"+product.Name+\" - \"+product.Id);",
											"",
											"    for (const[key, value] of Object.entries(properties_map)){",
											"        propertySpecific(key, jsonDataElements[counter]);",
											"    }",
											"",
											"    if(\"Attributes\" in jsonDataElements[counter]){",
											"        schema_seen = {};",
											"",
											"        pm.test(\"Test Attributes list\", function(){",
											"            pm.expect(jsonDataElements[counter].Attributes.length).to.be.above(0);",
											"        });",
											"",
											"        jsonDataElements[counter].Attributes.forEach(function(elem){",
											"            testSpecific(elem, jsonDataElements[counter]);",
											"        });",
											"        var product = jsonDataElements[counter];",
											"        for (const[key, value] of Object.entries(test_schema)) {pm.test(\"Schema Attribute \"+key+\" Product \"+product.Name+\" - \"+product.Id, function(){",
											"        if(schema_seen[key] == undefined){",
											"            schema_seen[key] = 0;",
											"        }",
											"        value(schema_seen[key], product)});}",
											"    }",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{service-root-uri}}/odata/v1/Products?$expand=Attributes&$top=1&$filter=(contains(Name,'S1_RAW__0S') or contains(Name,'S2_RAW__0S') or contains(Name,'S3_RAW__0S') or contains(Name,'S4_RAW__0S') or contains(Name,'S5_RAW__0S') or contains(Name,'S6_RAW__0S') or contains(Name,'IW_RAW__0S') or contains(Name,'EW_RAW__0S') or contains(Name,'WV_RAW__0S') or contains(Name,'RF_RAW__0S') or contains(Name,'EN_RAW__0S') or contains(Name,'N1_RAW__0S') or contains(Name,'N2_RAW__0S') or contains(Name,'N3_RAW__0S') or contains(Name,'N4_RAW__0S') or contains(Name,'N5_RAW__0S') or contains(Name,'N6_RAW__0S') or contains(Name,'S1_RAW__0A') or contains(Name,'S2_RAW__0A') or contains(Name,'S3_RAW__0A') or contains(Name,'S4_RAW__0A') or contains(Name,'S5_RAW__0A') or contains(Name,'S6_RAW__0A') or contains(Name,'IW_RAW__0A') or contains(Name,'EW_RAW__0A') or contains(Name,'WV_RAW__0A')) and startswith(Name,'S1')\n",
									"host": [
										"{{service-root-uri}}"
									],
									"path": [
										"odata",
										"v1",
										"Products"
									],
									"query": [
										{
											"key": "$expand",
											"value": "Attributes"
										},
										{
											"key": "$top",
											"value": "1"
										},
										{
											"key": "$filter",
											"value": "(contains(Name,'S1_RAW__0S') or contains(Name,'S2_RAW__0S') or contains(Name,'S3_RAW__0S') or contains(Name,'S4_RAW__0S') or contains(Name,'S5_RAW__0S') or contains(Name,'S6_RAW__0S') or contains(Name,'IW_RAW__0S') or contains(Name,'EW_RAW__0S') or contains(Name,'WV_RAW__0S') or contains(Name,'RF_RAW__0S') or contains(Name,'EN_RAW__0S') or contains(Name,'N1_RAW__0S') or contains(Name,'N2_RAW__0S') or contains(Name,'N3_RAW__0S') or contains(Name,'N4_RAW__0S') or contains(Name,'N5_RAW__0S') or contains(Name,'N6_RAW__0S') or contains(Name,'S1_RAW__0A') or contains(Name,'S2_RAW__0A') or contains(Name,'S3_RAW__0A') or contains(Name,'S4_RAW__0A') or contains(Name,'S5_RAW__0A') or contains(Name,'S6_RAW__0A') or contains(Name,'IW_RAW__0A') or contains(Name,'EW_RAW__0A') or contains(Name,'WV_RAW__0A')) and startswith(Name,'S1')\n"
										},
										{
											"key": "$filter",
											"value": "contains(Name,'S1_RAW__0S') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'S2_RAW__0S') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'S3_RAW__0S') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'S4_RAW__0S') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'S5_RAW__0S') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'S6_RAW__0S') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'IW_RAW__0S') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'EW_RAW__0S') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'WV_RAW__0S') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'RF_RAW__0S') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'EN_RAW__0S') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'N1_RAW__0S') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'N2_RAW__0S') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'N3_RAW__0S') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'N4_RAW__0S') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'N5_RAW__0S') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'N6_RAW__0S') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'S1_RAW__0A') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'S2_RAW__0A') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'S3_RAW__0A') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'S4_RAW__0A') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'S5_RAW__0A') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'S6_RAW__0A') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'IW_RAW__0A') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'EW_RAW__0A') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'WV_RAW__0A') and startswith(Name,'S1')\n",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "S1_Level-0_Cal",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a82a5b8d-63e5-4d63-b598-56992b1021d1",
										"exec": [
											"var jsonDataElements = pm.response.json().value;",
											"pm.test(\"Response time is less than \" +  environment[\"query-timeout\"] + \"ms\", function(){",
											"    pm.expect(pm.response.responseTime).to.be.below(parseInt(environment[\"query-timeout\"]));",
											"});",
											"",
											"pm.test(\"Test OData context\", function(){",
											"    query_string = pm.request.url.getQueryString();",
											"    if(query_string.includes(\"$expand=Attributes\")){",
											"        pm.expect( pm.response.json()['@odata.context']).to.include(\"$metadata#Products(Attributes())\");",
											"    } else{",
											"        pm.expect( pm.response.json()['@odata.context']).to.include(\"$metadata#Products\");",
											"    }",
											"});",
											"",
											"var TRUE = true;",
											"var FALSE = false;",
											"",
											"test_map={};",
											"test_map.beginningDateTime=function (element) {pm.expect(element.Name).eq('beginningDateTime');pm.expect(element.ValueType).eq('DateTimeOffset');pm.expect(element.Value).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);};",
											"test_map.endingDateTime=function (element) {pm.expect(element.Name).eq('endingDateTime');pm.expect(element.ValueType).eq('DateTimeOffset');pm.expect(element.Value).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);};",
											"test_map.startTimeFromAscendingNode=function (element) {pm.expect(element.Name).eq('startTimeFromAscendingNode');pm.expect(element.ValueType).eq('Double');pm.expect(element.Value).to.be.a(\"number\");};",
											"test_map.completionTimeFromAscendingNode=function (element) {pm.expect(element.Name).eq('completionTimeFromAscendingNode');pm.expect(element.ValueType).eq('Double');pm.expect(element.Value).to.be.a(\"number\");};",
											"test_map.platformShortName=function (element) {pm.expect(element.Name).eq('platformShortName');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"SENTINEL-1\"]);};",
											"test_map.platformSerialIdentifier=function (element) {pm.expect(element.Name).eq('platformSerialIdentifier');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"A\",\"B\",\"C\",\"D\",\"_\"]);};",
											"test_map.instrumentShortName=function (element) {pm.expect(element.Name).eq('instrumentShortName');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"SAR\"]);};",
											"test_map.operationalMode=function (element) {pm.expect(element.Name).eq('operationalMode');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"SM\",\"IW\",\"EW\",\"WV\"]);};",
											"test_map.swathIdentifier=function (element) {pm.expect(element.Name).eq('swathIdentifier');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"1\",\"2\",\"3\",\"4\",\"5\",\"6\"]);};",
											"test_map.polarisationChannels=function (element) {pm.expect(element.Name).eq('polarisationChannels');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"HH\",\"VV\",\"HV\",\"VH\"]);};",
											"test_map.orbitNumber=function (element) {pm.expect(element.Name).eq('orbitNumber');pm.expect(element.ValueType).eq('Integer');pm.expect(element.Value).to.be.a(\"number\");pm.expect(element.Value).to.match(/([1-9]|[1-8][0-9]|9[0-9]|[1-8][0-9]{2}|9[0-8][0-9]|99[0-9]|[1-8][0-9]{3}|9[0-8][0-9]{2}|99[0-8][0-9]|999[0-9]|[1-8][0-9]{4}|9[0-8][0-9]{3}|99[0-8][0-9]{2}|999[0-8][0-9]|9999[0-9]|[1-8][0-9]{5}|9[0-8][0-9]{4}|99[0-8][0-9]{3}|999[0-8][0-9]{2}|9999[0-8][0-9]|99999[0-9])/);};",
											"test_map.relativeOrbitNumber=function (element) {pm.expect(element.Name).eq('relativeOrbitNumber');pm.expect(element.ValueType).eq('Integer');pm.expect(element.Value).to.be.a(\"number\");pm.expect(element.Value).to.match(/([1-9]|[1-8][0-9]|9[0-9]|1[0-6][0-9]|17[0-5])/);};",
											"test_map.cycleNumber=function (element) {pm.expect(element.Name).eq('cycleNumber');pm.expect(element.ValueType).eq('Integer');pm.expect(element.Value).to.be.a(\"number\");pm.expect(element.Value).to.match(/([1-9]|[1-8][0-9]|9[0-9]|1[0-6][0-9]|17[0-5])/);};",
											"test_map.orbitDirection=function (element) {pm.expect(element.Name).eq('orbitDirection');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"ASCENDING\",\"DESCENDING\",\"UNKNOWN\"]);};",
											"test_map.processingDate=function (element) {pm.expect(element.Name).eq('processingDate');pm.expect(element.ValueType).eq('DateTimeOffset');pm.expect(element.Value).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);};",
											"test_map.processingCenter=function (element) {pm.expect(element.Name).eq('processingCenter');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');};",
											"test_map.processorName=function (element) {pm.expect(element.Name).eq('processorName');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');};",
											"test_map.processorVersion=function (element) {pm.expect(element.Name).eq('processorVersion');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');};",
											"test_map.coordinates=function (element) {pm.expect(element.Name).eq('coordinates');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.match(/(-?\\d+(\\.\\d+)?),\\s*(-?\\d+(\\.\\d+)?)/);};",
											"test_map.productType=function (element) {pm.expect(element.Name).eq('productType');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"S1_RAW__0C\",\"S2_RAW__0C\",\"S3_RAW__0C\",\"S4_RAW__0C\",\"S5_RAW__0C\",\"S6_RAW__0C\",\"IW_RAW__0C\",\"EW_RAW__0C\",\"WV_RAW__0C\"]);",
											"",
											"};",
											"test_map.productClass=function (element) {pm.expect(element.Name).eq('productClass');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"C\"]);};",
											"test_map.productConsolidation=function (element) {pm.expect(element.Name).eq('productConsolidation');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"SLICE\",\"SLICE PARTIAL\",\"FULL\"]);};",
											"test_map.instrumentConfigurationID=function (element) {pm.expect(element.Name).eq('instrumentConfigurationID');pm.expect(element.ValueType).eq('Integer');pm.expect(element.Value).to.be.a(\"number\");pm.expect(element.Value).to.match(/([1-9]|[1-8][0-9]|9[0-9]|[1-8][0-9]{2}|9[0-8][0-9]|99[0-9]|[1-8][0-9]{3}|9[0-8][0-9]{2}|99[0-8][0-9]|999[0-9]|[1-8][0-9]{4}|9[0-8][0-9]{3}|99[0-8][0-9]{2}|999[0-8][0-9]|9999[0-9]|[1-8][0-9]{5}|9[0-8][0-9]{4}|99[0-8][0-9]{3}|999[0-8][0-9]{2}|9999[0-8][0-9]|99999[0-9]|[1-8][0-9]{6}|9[0-8][0-9]{5}|99[0-8][0-9]{4}|999[0-8][0-9]{3}|9999[0-8][0-9]{2}|99999[0-8][0-9]|999999[0-9]|1[0-5][0-9]{6}|16[0-6][0-9]{5}|167[0-6][0-9]{4}|1677[0-6][0-9]{3}|16777[01][0-9]{2}|1677720[0-9]|1677721[0-5])/);};",
											"test_map.datatakeID=function (element) {pm.expect(element.Name).eq('datatakeID');pm.expect(element.ValueType).eq('Integer');pm.expect(element.Value).to.be.a(\"number\");pm.expect(element.Value).to.match(/([1-9]|[1-8][0-9]|9[0-9]|[1-8][0-9]{2}|9[0-8][0-9]|99[0-9]|[1-8][0-9]{3}|9[0-8][0-9]{2}|99[0-8][0-9]|999[0-9]|[1-8][0-9]{4}|9[0-8][0-9]{3}|99[0-8][0-9]{2}|999[0-8][0-9]|9999[0-9]|[1-8][0-9]{5}|9[0-8][0-9]{4}|99[0-8][0-9]{3}|999[0-8][0-9]{2}|9999[0-8][0-9]|99999[0-9]|[1-7][0-9]{6}|8[0-2][0-9]{5}|83[0-7][0-9]{4}|838[0-7][0-9]{3}|8388[0-5][0-9]{2}|838860[0-7])/);};",
											"test_map.sliceProductFlag=function (element) {pm.expect(element.Name).eq('sliceProductFlag');pm.expect(element.ValueType).eq('Boolean');pm.expect(element.Value).to.be.oneOf([\"TRUE\",\"FALSE\",\"true\",\"false\"]);};",
											"test_map.sliceNumber=function (element) {pm.expect(element.Name).eq('sliceNumber');pm.expect(element.ValueType).eq('Integer');pm.expect(element.Value).to.be.a(\"number\");};",
											"test_map.totalSlices=function (element) {pm.expect(element.Name).eq('totalSlices');pm.expect(element.ValueType).eq('Integer');pm.expect(element.Value).to.be.a(\"number\");};",
											"",
											"test_schema={};",
											"test_schema.beginningDateTime=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.endingDateTime=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.startTimeFromAscendingNode=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.completionTimeFromAscendingNode=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.platformShortName=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.platformSerialIdentifier=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.instrumentShortName=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.operationalMode=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.swathIdentifier=function (num) {pm.expect(num).to.be.within(0,1)};",
											"test_schema.polarisationChannels=function (num) {pm.expect(num).to.be.within(1,2)};",
											"test_schema.orbitNumber=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.relativeOrbitNumber=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.cycleNumber=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.orbitDirection=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.processingDate=function (num) {pm.expect(num).to.be.within(0,1)};",
											"test_schema.processingCenter=function (num) {pm.expect(num).to.be.within(0,1)};",
											"test_schema.processorName=function (num) {pm.expect(num).to.be.within(0,1)};",
											"test_schema.processorVersion=function (num) {pm.expect(num).to.be.within(0,1)};",
											"test_schema.coordinates=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.productType=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.productClass=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.productConsolidation=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.instrumentConfigurationID=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.datatakeID=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.sliceProductFlag=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.sliceNumber=function (num) {pm.expect(num).to.be.within(0,1)};",
											"test_schema.totalSlices=function (num) {pm.expect(num).to.be.within(0,1)};",
											"",
											"            ",
											"properties_map = {};",
											"properties_map.Id=function (element) {pm.expect(element.Id).to.match(/[0-9a-fA-F]{8}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{12}/);};",
											"properties_map.Name=function (element) {pm.expect(element.Name).to.be.a(\"string\");};",
											"properties_map.ContentType=function (element) {pm.expect(element.ContentType).to.be.a(\"string\");};",
											"properties_map.ContentLength=function (element) {pm.expect(element.ContentLength).to.be.a(\"number\");};",
											"properties_map.OriginDate=function (element) {pm.expect(element.OriginDate).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d+([+-][0-2]\\d:[0-5]\\d|Z)/);};",
											"properties_map.PublicationDate=function (element) {pm.expect(element.PublicationDate).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);};",
											"properties_map.ModificationDate=function (element) {pm.expect(element.ModificationDate).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d+([+-][0-2]\\d:[0-5]\\d|Z)/);};",
											"properties_map.Online=function (element) {pm.expect(element.Online).to.be.oneOf([TRUE,FALSE,true,false]);};",
											"properties_map.EvictionDate=function (element) {if(element.EvictionDate){ pm.expect(element.EvictionDate).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d+([+-][0-2]\\d:[0-5]\\d|Z)/); }};",
											"properties_map.Checksum=function (element) {for(i=0; i<element.Checksum.length; i++ ){pm.expect(element.Checksum[i].Algorithm).to.be.oneOf([\"MD5\",\"SHA-1\",\"SHA-256\",\"SHA-512\"]);checksum_algorithm = {'MD5': '[a-fA-F0-9]{32}', 'SHA-1': '[0-9a-f]{5,40}', 'SHA-256': '[A-Fa-f0-9]{64}', 'SHA-512': '[A-Fa-f0-9]{128}'};pm.expect(element.Checksum[i].Value).to.match(new RegExp(checksum_algorithm[element.Checksum[i].Algorithm]));}};",
											"properties_map.ContentDate=function (element) {pm.expect(element.ContentDate[\"Start\"]).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);pm.expect(element.ContentDate[\"End\"]).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);};",
											"properties_map.Footprint=function (element) {if(element.Footprint){ pm.expect(element.Footprint).to.match(/geography'SRID=\\d+;[Polygon|Multipolygon|Point](.*)/); }};",
											"",
											"let schema_seen = {};",
											"",
											"function testSpecific(value, product){",
											"",
											"    if (schema_seen[value.Name]){",
											"        schema_seen[value.Name]++;",
											"    }else{",
											"        schema_seen[value.Name]=1;",
											"    }",
											"",
											"    if (test_map[value.Name]) {",
											"        pm.test(\"Test Attribute \"+value.Name + \" for Product: \"+product.Name+\" - \"+product.Id, function(){test_map[value.Name](value, product)});",
											"    }",
											"    else {",
											"        pm.test.skip(\"Test Attribute \"+value.Name + \" for Product: \"+product.Name+\" - \"+product.Id);",
											"    }",
											"}",
											"function propertySpecific(key, product){",
											"    if (properties_map[key]) {",
											"        pm.test(\"Test Property \"+key+\" for Product: \"+product.Name+\" - \"+product.Id, function(){properties_map[key](product)});",
											"    }",
											"    else {",
											"        pm.test.skip(\"Test Property \"+key+\" for Product: \"+product.Name+\" - \"+product.Id);",
											"    }",
											"}",
											"",
											"for (var counter = 0;  counter  < jsonDataElements.length; counter++){",
											"    var product = jsonDataElements[counter];",
											"    console.log(\"Processing Product: \"+product.Name+\" - \"+product.Id);",
											"",
											"    for (const[key, value] of Object.entries(properties_map)){",
											"        propertySpecific(key, jsonDataElements[counter]);",
											"    }",
											"",
											"    if(\"Attributes\" in jsonDataElements[counter]){",
											"        schema_seen = {};",
											"",
											"        pm.test(\"Test Attributes list\", function(){",
											"            pm.expect(jsonDataElements[counter].Attributes.length).to.be.above(0);",
											"        });",
											"",
											"        jsonDataElements[counter].Attributes.forEach(function(elem){",
											"            testSpecific(elem, jsonDataElements[counter]);",
											"        });",
											"        var product = jsonDataElements[counter];",
											"        for (const[key, value] of Object.entries(test_schema)) {pm.test(\"Schema Attribute \"+key+\" Product \"+product.Name+\" - \"+product.Id, function(){",
											"        if(schema_seen[key] == undefined){",
											"            schema_seen[key] = 0;",
											"        }",
											"        value(schema_seen[key], product)});}",
											"    }",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{service-root-uri}}/odata/v1/Products?$expand=Attributes&$top=1&$filter=(contains(Name,'S1_RAW__0C') or contains(Name,'S2_RAW__0C') or contains(Name,'S3_RAW__0C') or contains(Name,'S4_RAW__0C') or contains(Name,'S5_RAW__0C') or contains(Name,'S6_RAW__0C') or contains(Name,'IW_RAW__0C') or contains(Name,'EW_RAW__0C') or contains(Name,'WV_RAW__0C')) and startswith(Name,'S1')\n",
									"host": [
										"{{service-root-uri}}"
									],
									"path": [
										"odata",
										"v1",
										"Products"
									],
									"query": [
										{
											"key": "$expand",
											"value": "Attributes"
										},
										{
											"key": "$top",
											"value": "1"
										},
										{
											"key": "$filter",
											"value": "(contains(Name,'S1_RAW__0C') or contains(Name,'S2_RAW__0C') or contains(Name,'S3_RAW__0C') or contains(Name,'S4_RAW__0C') or contains(Name,'S5_RAW__0C') or contains(Name,'S6_RAW__0C') or contains(Name,'IW_RAW__0C') or contains(Name,'EW_RAW__0C') or contains(Name,'WV_RAW__0C')) and startswith(Name,'S1')\n"
										},
										{
											"key": "$filter",
											"value": "contains(Name,'S1_RAW__0C') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'S2_RAW__0C') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'S3_RAW__0C') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'S4_RAW__0C') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'S5_RAW__0C') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'S6_RAW__0C') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'IW_RAW__0C') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'EW_RAW__0C') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'WV_RAW__0C') and startswith(Name,'S1')\n",
											"disabled": true
										}
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "POD",
					"item": [
						{
							"name": "S1_AUX_in_.EOF",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c2312866-672b-4f82-b4fb-d327a63c4e14",
										"exec": [
											"var jsonDataElements = pm.response.json().value;",
											"pm.test(\"Response time is less than \" +  environment[\"query-timeout\"] + \"ms\", function(){",
											"    pm.expect(pm.response.responseTime).to.be.below(parseInt(environment[\"query-timeout\"]));",
											"});",
											"",
											"pm.test(\"Test OData context\", function(){",
											"    query_string = pm.request.url.getQueryString();",
											"    if(query_string.includes(\"$expand=Attributes\")){",
											"        pm.expect( pm.response.json()['@odata.context']).to.include(\"$metadata#Products(Attributes())\");",
											"    } else{",
											"        pm.expect( pm.response.json()['@odata.context']).to.include(\"$metadata#Products\");",
											"    }",
											"});",
											"",
											"var TRUE = true;",
											"var FALSE = false;",
											"",
											"test_map={};",
											"test_map.platformShortName=function (element) {pm.expect(element.Name).eq('platformShortName');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"SENTINEL-1\"]);};",
											"test_map.platformSerialIdentifier=function (element) {pm.expect(element.Name).eq('platformSerialIdentifier');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"A\",\"B\",\"C\",\"D\",\"_¹\"]);};",
											"test_map.productType=function (element) {pm.expect(element.Name).eq('productType');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"AUX_RESATT\",\"AUX_PREORB\",\"AUX_POEORB\",\"AUX_RESORB\"]);",
											"",
											"};",
											"test_map.beginningDateTime=function (element) {pm.expect(element.Name).eq('beginningDateTime');pm.expect(element.ValueType).eq('DateTimeOffset');pm.expect(element.Value).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);};",
											"test_map.endingDateTime=function (element) {pm.expect(element.Name).eq('endingDateTime');pm.expect(element.ValueType).eq('DateTimeOffset');pm.expect(element.Value).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);};",
											"test_map.processingCenter=function (element) {pm.expect(element.Name).eq('processingCenter');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');};",
											"test_map.processorVersion=function (element) {pm.expect(element.Name).eq('processorVersion');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');};",
											"test_map.processingDate=function (element) {pm.expect(element.Name).eq('processingDate');pm.expect(element.ValueType).eq('DateTimeOffset');pm.expect(element.Value).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);};",
											"",
											"test_schema={};",
											"test_schema.platformShortName=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.platformSerialIdentifier=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.productType=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.beginningDateTime=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.endingDateTime=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.processingCenter=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.processorVersion=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.processingDate=function (num) {pm.expect(num).to.be.eq(1)};",
											"",
											"            ",
											"properties_map = {};",
											"properties_map.Name=function (element) {pm.expect(element.Name).to.be.a(\"string\");};",
											"properties_map.ContentDate=function (element) {pm.expect(element.ContentDate[\"Start\"]).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);pm.expect(element.ContentDate[\"End\"]).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);};",
											"",
											"let schema_seen = {};",
											"",
											"function testSpecific(value, product){",
											"",
											"    if (schema_seen[value.Name]){",
											"        schema_seen[value.Name]++;",
											"    }else{",
											"        schema_seen[value.Name]=1;",
											"    }",
											"",
											"    if (test_map[value.Name]) {",
											"        pm.test(\"Test Attribute \"+value.Name + \" for Product: \"+product.Name+\" - \"+product.Id, function(){test_map[value.Name](value, product)});",
											"    }",
											"    else {",
											"        pm.test.skip(\"Test Attribute \"+value.Name + \" for Product: \"+product.Name+\" - \"+product.Id);",
											"    }",
											"}",
											"function propertySpecific(key, product){",
											"    if (properties_map[key]) {",
											"        pm.test(\"Test Property \"+key+\" for Product: \"+product.Name+\" - \"+product.Id, function(){properties_map[key](product)});",
											"    }",
											"    else {",
											"        pm.test.skip(\"Test Property \"+key+\" for Product: \"+product.Name+\" - \"+product.Id);",
											"    }",
											"}",
											"",
											"for (var counter = 0;  counter  < jsonDataElements.length; counter++){",
											"    var product = jsonDataElements[counter];",
											"    console.log(\"Processing Product: \"+product.Name+\" - \"+product.Id);",
											"",
											"    for (const[key, value] of Object.entries(properties_map)){",
											"        propertySpecific(key, jsonDataElements[counter]);",
											"    }",
											"",
											"    if(\"Attributes\" in jsonDataElements[counter]){",
											"        schema_seen = {};",
											"",
											"        pm.test(\"Test Attributes list\", function(){",
											"            pm.expect(jsonDataElements[counter].Attributes.length).to.be.above(0);",
											"        });",
											"",
											"        jsonDataElements[counter].Attributes.forEach(function(elem){",
											"            testSpecific(elem, jsonDataElements[counter]);",
											"        });",
											"        var product = jsonDataElements[counter];",
											"        for (const[key, value] of Object.entries(test_schema)) {pm.test(\"Schema Attribute \"+key+\" Product \"+product.Name+\" - \"+product.Id, function(){",
											"        if(schema_seen[key] == undefined){",
											"            schema_seen[key] = 0;",
											"        }",
											"        value(schema_seen[key], product)});}",
											"    }",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{service-root-uri}}/odata/v1/Products?$expand=Attributes&$top=1&$filter=(contains(Name,'AUX_RESATT') or contains(Name,'AUX_PREORB') or contains(Name,'AUX_POEORB') or contains(Name,'AUX_RESORB')) and startswith(Name,'S1')\n",
									"host": [
										"{{service-root-uri}}"
									],
									"path": [
										"odata",
										"v1",
										"Products"
									],
									"query": [
										{
											"key": "$expand",
											"value": "Attributes"
										},
										{
											"key": "$top",
											"value": "1"
										},
										{
											"key": "$filter",
											"value": "(contains(Name,'AUX_RESATT') or contains(Name,'AUX_PREORB') or contains(Name,'AUX_POEORB') or contains(Name,'AUX_RESORB')) and startswith(Name,'S1')\n"
										},
										{
											"key": "$filter",
											"value": "contains(Name,'AUX_RESATT') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'AUX_PREORB') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'AUX_POEORB') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'AUX_RESORB') and startswith(Name,'S1')\n",
											"disabled": true
										}
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "DD",
					"item": [
						{
							"name": "S1_AUX_in_.SAFE",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c57599a1-dcdd-4176-a324-d7d73a8f932e",
										"exec": [
											"var jsonDataElements = pm.response.json().value;",
											"pm.test(\"Response time is less than \" +  environment[\"query-timeout\"] + \"ms\", function(){",
											"    pm.expect(pm.response.responseTime).to.be.below(parseInt(environment[\"query-timeout\"]));",
											"});",
											"",
											"pm.test(\"Test OData context\", function(){",
											"    query_string = pm.request.url.getQueryString();",
											"    if(query_string.includes(\"$expand=Attributes\")){",
											"        pm.expect( pm.response.json()['@odata.context']).to.include(\"$metadata#Products(Attributes())\");",
											"    } else{",
											"        pm.expect( pm.response.json()['@odata.context']).to.include(\"$metadata#Products\");",
											"    }",
											"});",
											"",
											"var TRUE = true;",
											"var FALSE = false;",
											"",
											"test_map={};",
											"test_map.processingDate=function (element) {pm.expect(element.Name).eq('processingDate');pm.expect(element.ValueType).eq('DateTimeOffset');pm.expect(element.Value).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);};",
											"test_map.processingCenter=function (element) {pm.expect(element.Name).eq('processingCenter');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');};",
											"test_map.processorName=function (element) {pm.expect(element.Name).eq('processorName');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');};",
											"test_map.processorVersion=function (element) {pm.expect(element.Name).eq('processorVersion');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');};",
											"test_map.platformShortName=function (element) {pm.expect(element.Name).eq('platformShortName');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"SENTINEL-1\"]);};",
											"test_map.platformSerialIdentifier=function (element) {pm.expect(element.Name).eq('platformSerialIdentifier');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"A\",\"B\",\"C\",\"D\",\"_¹\"]);};",
											"test_map.instrumentShortName=function (element) {pm.expect(element.Name).eq('instrumentShortName');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');};",
											"test_map.productType=function (element) {pm.expect(element.Name).eq('productType');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"AUX_PP1\",\"AUX_CAL\",\"AUX_INS\",\"AUX_PP2\",\"AUX_SCS\",\"AUX_WND\",\"AUX_WAV\",\"AUX_ICE\",\"AUX_ECE\"]);",
											"",
											"};",
											"test_map.beginningDateTime=function (element) {pm.expect(element.Name).eq('beginningDateTime');pm.expect(element.ValueType).eq('DateTimeOffset');pm.expect(element.Value).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);};",
											"test_map.productGeneration=function (element) {pm.expect(element.Name).eq('productGeneration');pm.expect(element.ValueType).eq('DateTimeOffset');pm.expect(element.Value).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d+([+-][0-2]\\d:[0-5]\\d|Z)/);};",
											"",
											"test_schema={};",
											"test_schema.processingDate=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.processingCenter=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.processorName=function (num) {pm.expect(num).to.be.within(0,1)};",
											"test_schema.processorVersion=function (num) {pm.expect(num).to.be.within(0,1)};",
											"test_schema.platformShortName=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.platformSerialIdentifier=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.instrumentShortName=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.productType=function (num) {pm.expect(num).to.be.within(0,1)};",
											"test_schema.beginningDateTime=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.productGeneration=function (num) {pm.expect(num).to.be.eq(1)};",
											"",
											"            ",
											"properties_map = {};",
											"properties_map.Name=function (element) {pm.expect(element.Name).to.be.a(\"string\");};",
											"properties_map.ContentDate=function (element) {pm.expect(element.ContentDate[\"Start\"]).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);pm.expect(element.ContentDate[\"End\"]).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);};",
											"",
											"let schema_seen = {};",
											"",
											"function testSpecific(value, product){",
											"",
											"    if (schema_seen[value.Name]){",
											"        schema_seen[value.Name]++;",
											"    }else{",
											"        schema_seen[value.Name]=1;",
											"    }",
											"",
											"    if (test_map[value.Name]) {",
											"        pm.test(\"Test Attribute \"+value.Name + \" for Product: \"+product.Name+\" - \"+product.Id, function(){test_map[value.Name](value, product)});",
											"    }",
											"    else {",
											"        pm.test.skip(\"Test Attribute \"+value.Name + \" for Product: \"+product.Name+\" - \"+product.Id);",
											"    }",
											"}",
											"function propertySpecific(key, product){",
											"    if (properties_map[key]) {",
											"        pm.test(\"Test Property \"+key+\" for Product: \"+product.Name+\" - \"+product.Id, function(){properties_map[key](product)});",
											"    }",
											"    else {",
											"        pm.test.skip(\"Test Property \"+key+\" for Product: \"+product.Name+\" - \"+product.Id);",
											"    }",
											"}",
											"",
											"for (var counter = 0;  counter  < jsonDataElements.length; counter++){",
											"    var product = jsonDataElements[counter];",
											"    console.log(\"Processing Product: \"+product.Name+\" - \"+product.Id);",
											"",
											"    for (const[key, value] of Object.entries(properties_map)){",
											"        propertySpecific(key, jsonDataElements[counter]);",
											"    }",
											"",
											"    if(\"Attributes\" in jsonDataElements[counter]){",
											"        schema_seen = {};",
											"",
											"        pm.test(\"Test Attributes list\", function(){",
											"            pm.expect(jsonDataElements[counter].Attributes.length).to.be.above(0);",
											"        });",
											"",
											"        jsonDataElements[counter].Attributes.forEach(function(elem){",
											"            testSpecific(elem, jsonDataElements[counter]);",
											"        });",
											"        var product = jsonDataElements[counter];",
											"        for (const[key, value] of Object.entries(test_schema)) {pm.test(\"Schema Attribute \"+key+\" Product \"+product.Name+\" - \"+product.Id, function(){",
											"        if(schema_seen[key] == undefined){",
											"            schema_seen[key] = 0;",
											"        }",
											"        value(schema_seen[key], product)});}",
											"    }",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{service-root-uri}}/odata/v1/Products?$expand=Attributes&$top=1&$filter=(contains(Name,'AUX_PP1') or contains(Name,'AUX_CAL') or contains(Name,'AUX_INS') or contains(Name,'AUX_PP2') or contains(Name,'AUX_SCS') or contains(Name,'AUX_WND') or contains(Name,'AUX_WAV') or contains(Name,'AUX_ICE') or contains(Name,'AUX_ECE')) and startswith(Name,'S1')\n",
									"host": [
										"{{service-root-uri}}"
									],
									"path": [
										"odata",
										"v1",
										"Products"
									],
									"query": [
										{
											"key": "$expand",
											"value": "Attributes"
										},
										{
											"key": "$top",
											"value": "1"
										},
										{
											"key": "$filter",
											"value": "(contains(Name,'AUX_PP1') or contains(Name,'AUX_CAL') or contains(Name,'AUX_INS') or contains(Name,'AUX_PP2') or contains(Name,'AUX_SCS') or contains(Name,'AUX_WND') or contains(Name,'AUX_WAV') or contains(Name,'AUX_ICE') or contains(Name,'AUX_ECE')) and startswith(Name,'S1')\n"
										},
										{
											"key": "$filter",
											"value": "contains(Name,'AUX_PP1') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'AUX_CAL') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'AUX_INS') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'AUX_PP2') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'AUX_SCS') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'AUX_WND') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'AUX_WAV') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'AUX_ICE') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'AUX_ECE') and startswith(Name,'S1')\n",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "S1_AUX_in_.EOF",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d50aa13e-1e68-42c0-958c-510c54ab7860",
										"exec": [
											"var jsonDataElements = pm.response.json().value;",
											"pm.test(\"Response time is less than \" +  environment[\"query-timeout\"] + \"ms\", function(){",
											"    pm.expect(pm.response.responseTime).to.be.below(parseInt(environment[\"query-timeout\"]));",
											"});",
											"",
											"pm.test(\"Test OData context\", function(){",
											"    query_string = pm.request.url.getQueryString();",
											"    if(query_string.includes(\"$expand=Attributes\")){",
											"        pm.expect( pm.response.json()['@odata.context']).to.include(\"$metadata#Products(Attributes())\");",
											"    } else{",
											"        pm.expect( pm.response.json()['@odata.context']).to.include(\"$metadata#Products\");",
											"    }",
											"});",
											"",
											"var TRUE = true;",
											"var FALSE = false;",
											"",
											"test_map={};",
											"test_map.platformShortName=function (element) {pm.expect(element.Name).eq('platformShortName');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"SENTINEL-1\"]);};",
											"test_map.platformSerialIdentifier=function (element) {pm.expect(element.Name).eq('platformSerialIdentifier');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"A\",\"B\",\"C\",\"D\",\"_¹\"]);};",
											"test_map.productType=function (element) {pm.expect(element.Name).eq('productType');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"AUX_RESATT\",\"AUX_PREORB\",\"AUX_POEORB\",\"AUX_RESORB\"]);",
											"",
											"};",
											"test_map.beginningDateTime=function (element) {pm.expect(element.Name).eq('beginningDateTime');pm.expect(element.ValueType).eq('DateTimeOffset');pm.expect(element.Value).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);};",
											"test_map.endingDateTime=function (element) {pm.expect(element.Name).eq('endingDateTime');pm.expect(element.ValueType).eq('DateTimeOffset');pm.expect(element.Value).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);};",
											"test_map.processingCenter=function (element) {pm.expect(element.Name).eq('processingCenter');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');};",
											"test_map.processorVersion=function (element) {pm.expect(element.Name).eq('processorVersion');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');};",
											"test_map.processingDate=function (element) {pm.expect(element.Name).eq('processingDate');pm.expect(element.ValueType).eq('DateTimeOffset');pm.expect(element.Value).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);};",
											"",
											"test_schema={};",
											"test_schema.platformShortName=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.platformSerialIdentifier=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.productType=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.beginningDateTime=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.endingDateTime=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.processingCenter=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.processorVersion=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.processingDate=function (num) {pm.expect(num).to.be.eq(1)};",
											"",
											"            ",
											"properties_map = {};",
											"properties_map.Name=function (element) {pm.expect(element.Name).to.be.a(\"string\");};",
											"properties_map.ContentDate=function (element) {pm.expect(element.ContentDate[\"Start\"]).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);pm.expect(element.ContentDate[\"End\"]).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);};",
											"",
											"let schema_seen = {};",
											"",
											"function testSpecific(value, product){",
											"",
											"    if (schema_seen[value.Name]){",
											"        schema_seen[value.Name]++;",
											"    }else{",
											"        schema_seen[value.Name]=1;",
											"    }",
											"",
											"    if (test_map[value.Name]) {",
											"        pm.test(\"Test Attribute \"+value.Name + \" for Product: \"+product.Name+\" - \"+product.Id, function(){test_map[value.Name](value, product)});",
											"    }",
											"    else {",
											"        pm.test.skip(\"Test Attribute \"+value.Name + \" for Product: \"+product.Name+\" - \"+product.Id);",
											"    }",
											"}",
											"function propertySpecific(key, product){",
											"    if (properties_map[key]) {",
											"        pm.test(\"Test Property \"+key+\" for Product: \"+product.Name+\" - \"+product.Id, function(){properties_map[key](product)});",
											"    }",
											"    else {",
											"        pm.test.skip(\"Test Property \"+key+\" for Product: \"+product.Name+\" - \"+product.Id);",
											"    }",
											"}",
											"",
											"for (var counter = 0;  counter  < jsonDataElements.length; counter++){",
											"    var product = jsonDataElements[counter];",
											"    console.log(\"Processing Product: \"+product.Name+\" - \"+product.Id);",
											"",
											"    for (const[key, value] of Object.entries(properties_map)){",
											"        propertySpecific(key, jsonDataElements[counter]);",
											"    }",
											"",
											"    if(\"Attributes\" in jsonDataElements[counter]){",
											"        schema_seen = {};",
											"",
											"        pm.test(\"Test Attributes list\", function(){",
											"            pm.expect(jsonDataElements[counter].Attributes.length).to.be.above(0);",
											"        });",
											"",
											"        jsonDataElements[counter].Attributes.forEach(function(elem){",
											"            testSpecific(elem, jsonDataElements[counter]);",
											"        });",
											"        var product = jsonDataElements[counter];",
											"        for (const[key, value] of Object.entries(test_schema)) {pm.test(\"Schema Attribute \"+key+\" Product \"+product.Name+\" - \"+product.Id, function(){",
											"        if(schema_seen[key] == undefined){",
											"            schema_seen[key] = 0;",
											"        }",
											"        value(schema_seen[key], product)});}",
											"    }",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{service-root-uri}}/odata/v1/Products?$expand=Attributes&$top=1&$filter=(contains(Name,'AUX_RESATT') or contains(Name,'AUX_PREORB') or contains(Name,'AUX_POEORB') or contains(Name,'AUX_RESORB')) and startswith(Name,'S1')\n",
									"host": [
										"{{service-root-uri}}"
									],
									"path": [
										"odata",
										"v1",
										"Products"
									],
									"query": [
										{
											"key": "$expand",
											"value": "Attributes"
										},
										{
											"key": "$top",
											"value": "1"
										},
										{
											"key": "$filter",
											"value": "(contains(Name,'AUX_RESATT') or contains(Name,'AUX_PREORB') or contains(Name,'AUX_POEORB') or contains(Name,'AUX_RESORB')) and startswith(Name,'S1')\n"
										},
										{
											"key": "$filter",
											"value": "contains(Name,'AUX_RESATT') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'AUX_PREORB') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'AUX_POEORB') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'AUX_RESORB') and startswith(Name,'S1')\n",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "S1_L1+L2_Products",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f25deb4c-d9fe-4666-82ec-0d84b09751b2",
										"exec": [
											"var jsonDataElements = pm.response.json().value;",
											"pm.test(\"Response time is less than \" +  environment[\"query-timeout\"] + \"ms\", function(){",
											"    pm.expect(pm.response.responseTime).to.be.below(parseInt(environment[\"query-timeout\"]));",
											"});",
											"",
											"pm.test(\"Test OData context\", function(){",
											"    query_string = pm.request.url.getQueryString();",
											"    if(query_string.includes(\"$expand=Attributes\")){",
											"        pm.expect( pm.response.json()['@odata.context']).to.include(\"$metadata#Products(Attributes())\");",
											"    } else{",
											"        pm.expect( pm.response.json()['@odata.context']).to.include(\"$metadata#Products\");",
											"    }",
											"});",
											"",
											"var TRUE = true;",
											"var FALSE = false;",
											"",
											"test_map={};",
											"test_map.processingDate=function (element) {pm.expect(element.Name).eq('processingDate');pm.expect(element.ValueType).eq('DateTimeOffset');pm.expect(element.Value).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);};",
											"test_map.processingCenter=function (element) {pm.expect(element.Name).eq('processingCenter');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');};",
											"test_map.processorName=function (element) {pm.expect(element.Name).eq('processorName');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');};",
											"test_map.processorVersion=function (element) {pm.expect(element.Name).eq('processorVersion');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');};",
											"test_map.beginningDateTime=function (element) {pm.expect(element.Name).eq('beginningDateTime');pm.expect(element.ValueType).eq('DateTimeOffset');pm.expect(element.Value).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);};",
											"test_map.endingDateTime=function (element) {pm.expect(element.Name).eq('endingDateTime');pm.expect(element.ValueType).eq('DateTimeOffset');pm.expect(element.Value).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);};",
											"test_map.startTimeFromAscendingNode=function (element) {pm.expect(element.Name).eq('startTimeFromAscendingNode');pm.expect(element.ValueType).eq('Double');pm.expect(element.Value).to.be.a(\"number\");};",
											"test_map.completionTimeFromAscendingNode=function (element) {pm.expect(element.Name).eq('completionTimeFromAscendingNode');pm.expect(element.ValueType).eq('Double');pm.expect(element.Value).to.be.a(\"number\");};",
											"test_map.platformShortName=function (element) {pm.expect(element.Name).eq('platformShortName');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"SENTINEL-1\"]);};",
											"test_map.platformSerialIdentifier=function (element) {pm.expect(element.Name).eq('platformSerialIdentifier');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"A\",\"B\",\"C\",\"D\",\"_\"]);};",
											"test_map.instrumentShortName=function (element) {pm.expect(element.Name).eq('instrumentShortName');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"SAR\"]);};",
											"test_map.operationalMode=function (element) {pm.expect(element.Name).eq('operationalMode');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"SM\",\"IW\",\"EW\",\"WV\"]);};",
											"test_map.swathIdentifier=function (element) {pm.expect(element.Name).eq('swathIdentifier');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');};",
											"test_map.orbitNumber=function (element) {pm.expect(element.Name).eq('orbitNumber');pm.expect(element.ValueType).eq('Integer');pm.expect(element.Value).to.be.a(\"number\");pm.expect(element.Value).to.match(/([1-9]|[1-8][0-9]|9[0-9]|[1-8][0-9]{2}|9[0-8][0-9]|99[0-9]|[1-8][0-9]{3}|9[0-8][0-9]{2}|99[0-8][0-9]|999[0-9]|[1-8][0-9]{4}|9[0-8][0-9]{3}|99[0-8][0-9]{2}|999[0-8][0-9]|9999[0-9]|[1-8][0-9]{5}|9[0-8][0-9]{4}|99[0-8][0-9]{3}|999[0-8][0-9]{2}|9999[0-8][0-9]|99999[0-9])/);};",
											"test_map.relativeOrbitNumber=function (element) {pm.expect(element.Name).eq('relativeOrbitNumber');pm.expect(element.ValueType).eq('Integer');pm.expect(element.Value).to.be.a(\"number\");pm.expect(element.Value).to.match(/([1-9]|[1-8][0-9]|9[0-9]|1[0-6][0-9]|17[0-5])/);};",
											"test_map.cycleNumber=function (element) {pm.expect(element.Name).eq('cycleNumber');pm.expect(element.ValueType).eq('Integer');pm.expect(element.Value).to.be.a(\"number\");pm.expect(element.Value).to.match(/([1-9]|[1-8][0-9]|9[0-9]|1[0-6][0-9]|17[0-5])/);};",
											"test_map.orbitDirection=function (element) {pm.expect(element.Name).eq('orbitDirection');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"ASCENDING\",\"DESCENDING\",\"UNKNOWN\"]);};",
											"test_map.coordinates=function (element) {pm.expect(element.Name).eq('coordinates');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.match(/(-?\\d+(\\.\\d+)?),\\s*(-?\\d+(\\.\\d+)?)/);};",
											"test_map.polarisationChannels=function (element) {pm.expect(element.Name).eq('polarisationChannels');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"HH\",\"VV\",\"HV\",\"VH\"]);};",
											"test_map.productType=function (element) {pm.expect(element.Name).eq('productType');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"S1_SLC__1S\",\"S2_SLC__1S\",\"S3_SLC__1S\",\"S4_SLC__1S\",\"S5_SLC__1S\",\"S6_SLC__1S\",\"S1_SLC__1A\",\"S2_SLC__1A\",\"S3_SLC__1A\",\"S4_SLC__1A\",\"S5_SLC__1A\",\"S6_SLC__1A\",\"S1_GRDF_1S\",\"S2_GRDF_1S\",\"S3_GRDF_1S\",\"S4_GRDF_1S\",\"S5_GRDF_1S\",\"S6_GRDF_1S\",\"S1_GRDF_1A\",\"S2_GRDF_1A\",\"S3_GRDF_1A\",\"S4_GRDF_1A\",\"S5_GRDF_1A\",\"S6_GRDF_1A\",\"S1_GRDH_1S\",\"S2_GRDH_1S\",\"S3_GRDH_1S\",\"S4_GRDH_1S\",\"S5_GRDH_1S\",\"S6_GRDH_1S\",\"S1_GRDH_1A\",\"S2_GRDH_1A\",\"S3_GRDH_1A\",\"S4_GRDH_1A\",\"S5_GRDH_1A\",\"S6_GRDH_1A\",\"S1_GRDM_1S\",\"S2_GRDM_1S\",\"S3_GRDM_1S\",\"S4_GRDM_1S\",\"S5_GRDM_1S\",\"S6_GRDM_1S\",\"S1_GRDM_1A\",\"S2_GRDM_1A\",\"S3_GRDM_1A\",\"S4_GRDM_1A\",\"S5_GRDM_1A\",\"S6_GRDM_1A\",\"S1_RTC__1S\",\"S2_RTC__1S\",\"S3_RTC__1S\",\"S4_RTC__1S\",\"S5_RTC__1S\",\"S6_RTC__1S\",\"S1_OCN__2S\",\"S2_OCN__2S\",\"S3_OCN__2S\",\"S4_OCN__2S\",\"S5_OCN__2S\",\"S6_OCN__2S\",\"S1_OCN__2A\",\"S2_OCN__2A\",\"S3_OCN__2A\",\"S4_OCN__2A\",\"S5_OCN__2A\",\"S6_OCN__2A\",\"IW_SLC__1S\",\"IW_SLC__1A\",\"IW_GRDH_1S\",\"IW_GRDH_1A\",\"IW_GRDM_1S\",\"IW_GRDM_1A\",\"IW_RTC__1S\",\"IW_OCN__2S\",\"IW_OCN__2A\",\"EW_SLC__1S\",\"EW_SLC__1A\",\"EW_GRDH_1S\",\"EW_GRDH_1A\",\"EW_GRDM_1S\",\"EW_GRDM_1A\",\"EW_RTC__1S\",\"EW_OCN__2S\",\"EW_OCN__2A\",\"WV_SLC__1S\",\"WV_SLC__1A\",\"WV_GRDM_1S\",\"WV_GRDM_1A\",\"WV_OCN__2S\",\"WV_OCN__2A\"]);",
											"",
											"};",
											"test_map.timeliness=function (element) {pm.expect(element.Name).eq('timeliness');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"NRT-10m\",\"NRT-1h\",\"NRT-3h\",\"Fast-24h\",\"Off-line\",\"Reprocessing\"]);};",
											"test_map.productClass=function (element) {pm.expect(element.Name).eq('productClass');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');};",
											"test_map.sliceNumber=function (element) {pm.expect(element.Name).eq('sliceNumber');pm.expect(element.ValueType).eq('Integer');pm.expect(element.Value).to.be.a(\"number\");};",
											"",
											"test_schema={};",
											"test_schema.processingDate=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.processingCenter=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.processorName=function (num) {pm.expect(num).to.be.within(0,1)};",
											"test_schema.processorVersion=function (num) {pm.expect(num).to.be.within(0,1)};",
											"test_schema.beginningDateTime=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.endingDateTime=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.startTimeFromAscendingNode=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.completionTimeFromAscendingNode=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.platformShortName=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.platformSerialIdentifier=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.instrumentShortName=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.operationalMode=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.swathIdentifier=function (num) {pm.expect(num).to.be.within(1,5)};",
											"test_schema.orbitNumber=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.relativeOrbitNumber=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.cycleNumber=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.orbitDirection=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.coordinates=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.polarisationChannels=function (num) {pm.expect(num).to.be.within(1,2)};",
											"test_schema.productType=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.timeliness=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.productClass=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.sliceNumber=function (num) {pm.expect(num).to.be.within(0,1)};",
											"",
											"            ",
											"properties_map = {};",
											"properties_map.Name=function (element) {pm.expect(element.Name).to.be.a(\"string\");};",
											"properties_map.ContentDate=function (element) {pm.expect(element.ContentDate[\"Start\"]).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);pm.expect(element.ContentDate[\"End\"]).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);};",
											"",
											"let schema_seen = {};",
											"",
											"function testSpecific(value, product){",
											"",
											"    if (schema_seen[value.Name]){",
											"        schema_seen[value.Name]++;",
											"    }else{",
											"        schema_seen[value.Name]=1;",
											"    }",
											"",
											"    if (test_map[value.Name]) {",
											"        pm.test(\"Test Attribute \"+value.Name + \" for Product: \"+product.Name+\" - \"+product.Id, function(){test_map[value.Name](value, product)});",
											"    }",
											"    else {",
											"        pm.test.skip(\"Test Attribute \"+value.Name + \" for Product: \"+product.Name+\" - \"+product.Id);",
											"    }",
											"}",
											"function propertySpecific(key, product){",
											"    if (properties_map[key]) {",
											"        pm.test(\"Test Property \"+key+\" for Product: \"+product.Name+\" - \"+product.Id, function(){properties_map[key](product)});",
											"    }",
											"    else {",
											"        pm.test.skip(\"Test Property \"+key+\" for Product: \"+product.Name+\" - \"+product.Id);",
											"    }",
											"}",
											"",
											"for (var counter = 0;  counter  < jsonDataElements.length; counter++){",
											"    var product = jsonDataElements[counter];",
											"    console.log(\"Processing Product: \"+product.Name+\" - \"+product.Id);",
											"",
											"    for (const[key, value] of Object.entries(properties_map)){",
											"        propertySpecific(key, jsonDataElements[counter]);",
											"    }",
											"",
											"    if(\"Attributes\" in jsonDataElements[counter]){",
											"        schema_seen = {};",
											"",
											"        pm.test(\"Test Attributes list\", function(){",
											"            pm.expect(jsonDataElements[counter].Attributes.length).to.be.above(0);",
											"        });",
											"",
											"        jsonDataElements[counter].Attributes.forEach(function(elem){",
											"            testSpecific(elem, jsonDataElements[counter]);",
											"        });",
											"        var product = jsonDataElements[counter];",
											"        for (const[key, value] of Object.entries(test_schema)) {pm.test(\"Schema Attribute \"+key+\" Product \"+product.Name+\" - \"+product.Id, function(){",
											"        if(schema_seen[key] == undefined){",
											"            schema_seen[key] = 0;",
											"        }",
											"        value(schema_seen[key], product)});}",
											"    }",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{service-root-uri}}/odata/v1/Products?$expand=Attributes&$top=1&$filter=(contains(Name,'S1_SLC__1S') or contains(Name,'S2_SLC__1S') or contains(Name,'S3_SLC__1S') or contains(Name,'S4_SLC__1S') or contains(Name,'S5_SLC__1S') or contains(Name,'S6_SLC__1S') or contains(Name,'S1_SLC__1A') or contains(Name,'S2_SLC__1A') or contains(Name,'S3_SLC__1A') or contains(Name,'S4_SLC__1A') or contains(Name,'S5_SLC__1A') or contains(Name,'S6_SLC__1A') or contains(Name,'S1_GRDF_1S') or contains(Name,'S2_GRDF_1S') or contains(Name,'S3_GRDF_1S') or contains(Name,'S4_GRDF_1S') or contains(Name,'S5_GRDF_1S') or contains(Name,'S6_GRDF_1S') or contains(Name,'S1_GRDF_1A') or contains(Name,'S2_GRDF_1A') or contains(Name,'S3_GRDF_1A') or contains(Name,'S4_GRDF_1A') or contains(Name,'S5_GRDF_1A') or contains(Name,'S6_GRDF_1A') or contains(Name,'S1_GRDH_1S') or contains(Name,'S2_GRDH_1S') or contains(Name,'S3_GRDH_1S') or contains(Name,'S4_GRDH_1S') or contains(Name,'S5_GRDH_1S') or contains(Name,'S6_GRDH_1S') or contains(Name,'S1_GRDH_1A') or contains(Name,'S2_GRDH_1A') or contains(Name,'S3_GRDH_1A') or contains(Name,'S4_GRDH_1A') or contains(Name,'S5_GRDH_1A') or contains(Name,'S6_GRDH_1A') or contains(Name,'S1_GRDM_1S') or contains(Name,'S2_GRDM_1S') or contains(Name,'S3_GRDM_1S') or contains(Name,'S4_GRDM_1S') or contains(Name,'S5_GRDM_1S') or contains(Name,'S6_GRDM_1S') or contains(Name,'S1_GRDM_1A') or contains(Name,'S2_GRDM_1A') or contains(Name,'S3_GRDM_1A') or contains(Name,'S4_GRDM_1A') or contains(Name,'S5_GRDM_1A') or contains(Name,'S6_GRDM_1A') or contains(Name,'S1_RTC__1S') or contains(Name,'S2_RTC__1S') or contains(Name,'S3_RTC__1S') or contains(Name,'S4_RTC__1S') or contains(Name,'S5_RTC__1S') or contains(Name,'S6_RTC__1S') or contains(Name,'S1_OCN__2S') or contains(Name,'S2_OCN__2S') or contains(Name,'S3_OCN__2S') or contains(Name,'S4_OCN__2S') or contains(Name,'S5_OCN__2S') or contains(Name,'S6_OCN__2S') or contains(Name,'S1_OCN__2A') or contains(Name,'S2_OCN__2A') or contains(Name,'S3_OCN__2A') or contains(Name,'S4_OCN__2A') or contains(Name,'S5_OCN__2A') or contains(Name,'S6_OCN__2A') or contains(Name,'IW_SLC__1S') or contains(Name,'IW_SLC__1A') or contains(Name,'IW_GRDH_1S') or contains(Name,'IW_GRDH_1A') or contains(Name,'IW_GRDM_1S') or contains(Name,'IW_GRDM_1A') or contains(Name,'IW_RTC__1S') or contains(Name,'IW_OCN__2S') or contains(Name,'IW_OCN__2A') or contains(Name,'EW_SLC__1S') or contains(Name,'EW_SLC__1A') or contains(Name,'EW_GRDH_1S') or contains(Name,'EW_GRDH_1A') or contains(Name,'EW_GRDM_1S') or contains(Name,'EW_GRDM_1A') or contains(Name,'EW_RTC__1S') or contains(Name,'EW_OCN__2S') or contains(Name,'EW_OCN__2A') or contains(Name,'WV_SLC__1S') or contains(Name,'WV_SLC__1A') or contains(Name,'WV_GRDM_1S') or contains(Name,'WV_GRDM_1A') or contains(Name,'WV_OCN__2S') or contains(Name,'WV_OCN__2A')) and startswith(Name,'S1')\n",
									"host": [
										"{{service-root-uri}}"
									],
									"path": [
										"odata",
										"v1",
										"Products"
									],
									"query": [
										{
											"key": "$expand",
											"value": "Attributes"
										},
										{
											"key": "$top",
											"value": "1"
										},
										{
											"key": "$filter",
											"value": "(contains(Name,'S1_SLC__1S') or contains(Name,'S2_SLC__1S') or contains(Name,'S3_SLC__1S') or contains(Name,'S4_SLC__1S') or contains(Name,'S5_SLC__1S') or contains(Name,'S6_SLC__1S') or contains(Name,'S1_SLC__1A') or contains(Name,'S2_SLC__1A') or contains(Name,'S3_SLC__1A') or contains(Name,'S4_SLC__1A') or contains(Name,'S5_SLC__1A') or contains(Name,'S6_SLC__1A') or contains(Name,'S1_GRDF_1S') or contains(Name,'S2_GRDF_1S') or contains(Name,'S3_GRDF_1S') or contains(Name,'S4_GRDF_1S') or contains(Name,'S5_GRDF_1S') or contains(Name,'S6_GRDF_1S') or contains(Name,'S1_GRDF_1A') or contains(Name,'S2_GRDF_1A') or contains(Name,'S3_GRDF_1A') or contains(Name,'S4_GRDF_1A') or contains(Name,'S5_GRDF_1A') or contains(Name,'S6_GRDF_1A') or contains(Name,'S1_GRDH_1S') or contains(Name,'S2_GRDH_1S') or contains(Name,'S3_GRDH_1S') or contains(Name,'S4_GRDH_1S') or contains(Name,'S5_GRDH_1S') or contains(Name,'S6_GRDH_1S') or contains(Name,'S1_GRDH_1A') or contains(Name,'S2_GRDH_1A') or contains(Name,'S3_GRDH_1A') or contains(Name,'S4_GRDH_1A') or contains(Name,'S5_GRDH_1A') or contains(Name,'S6_GRDH_1A') or contains(Name,'S1_GRDM_1S') or contains(Name,'S2_GRDM_1S') or contains(Name,'S3_GRDM_1S') or contains(Name,'S4_GRDM_1S') or contains(Name,'S5_GRDM_1S') or contains(Name,'S6_GRDM_1S') or contains(Name,'S1_GRDM_1A') or contains(Name,'S2_GRDM_1A') or contains(Name,'S3_GRDM_1A') or contains(Name,'S4_GRDM_1A') or contains(Name,'S5_GRDM_1A') or contains(Name,'S6_GRDM_1A') or contains(Name,'S1_RTC__1S') or contains(Name,'S2_RTC__1S') or contains(Name,'S3_RTC__1S') or contains(Name,'S4_RTC__1S') or contains(Name,'S5_RTC__1S') or contains(Name,'S6_RTC__1S') or contains(Name,'S1_OCN__2S') or contains(Name,'S2_OCN__2S') or contains(Name,'S3_OCN__2S') or contains(Name,'S4_OCN__2S') or contains(Name,'S5_OCN__2S') or contains(Name,'S6_OCN__2S') or contains(Name,'S1_OCN__2A') or contains(Name,'S2_OCN__2A') or contains(Name,'S3_OCN__2A') or contains(Name,'S4_OCN__2A') or contains(Name,'S5_OCN__2A') or contains(Name,'S6_OCN__2A') or contains(Name,'IW_SLC__1S') or contains(Name,'IW_SLC__1A') or contains(Name,'IW_GRDH_1S') or contains(Name,'IW_GRDH_1A') or contains(Name,'IW_GRDM_1S') or contains(Name,'IW_GRDM_1A') or contains(Name,'IW_RTC__1S') or contains(Name,'IW_OCN__2S') or contains(Name,'IW_OCN__2A') or contains(Name,'EW_SLC__1S') or contains(Name,'EW_SLC__1A') or contains(Name,'EW_GRDH_1S') or contains(Name,'EW_GRDH_1A') or contains(Name,'EW_GRDM_1S') or contains(Name,'EW_GRDM_1A') or contains(Name,'EW_RTC__1S') or contains(Name,'EW_OCN__2S') or contains(Name,'EW_OCN__2A') or contains(Name,'WV_SLC__1S') or contains(Name,'WV_SLC__1A') or contains(Name,'WV_GRDM_1S') or contains(Name,'WV_GRDM_1A') or contains(Name,'WV_OCN__2S') or contains(Name,'WV_OCN__2A')) and startswith(Name,'S1')\n"
										},
										{
											"key": "$filter",
											"value": "contains(Name,'S1_SLC__1S') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'S2_SLC__1S') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'S3_SLC__1S') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'S4_SLC__1S') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'S5_SLC__1S') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'S6_SLC__1S') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'S1_SLC__1A') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'S2_SLC__1A') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'S3_SLC__1A') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'S4_SLC__1A') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'S5_SLC__1A') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'S6_SLC__1A') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'S1_GRDF_1S') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'S2_GRDF_1S') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'S3_GRDF_1S') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'S4_GRDF_1S') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'S5_GRDF_1S') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'S6_GRDF_1S') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'S1_GRDF_1A') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'S2_GRDF_1A') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'S3_GRDF_1A') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'S4_GRDF_1A') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'S5_GRDF_1A') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'S6_GRDF_1A') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'S1_GRDH_1S') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'S2_GRDH_1S') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'S3_GRDH_1S') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'S4_GRDH_1S') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'S5_GRDH_1S') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'S6_GRDH_1S') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'S1_GRDH_1A') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'S2_GRDH_1A') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'S3_GRDH_1A') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'S4_GRDH_1A') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'S5_GRDH_1A') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'S6_GRDH_1A') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'S1_GRDM_1S') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'S2_GRDM_1S') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'S3_GRDM_1S') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'S4_GRDM_1S') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'S5_GRDM_1S') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'S6_GRDM_1S') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'S1_GRDM_1A') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'S2_GRDM_1A') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'S3_GRDM_1A') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'S4_GRDM_1A') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'S5_GRDM_1A') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'S6_GRDM_1A') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'S1_RTC__1S') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'S2_RTC__1S') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'S3_RTC__1S') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'S4_RTC__1S') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'S5_RTC__1S') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'S6_RTC__1S') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'S1_OCN__2S') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'S2_OCN__2S') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'S3_OCN__2S') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'S4_OCN__2S') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'S5_OCN__2S') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'S6_OCN__2S') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'S1_OCN__2A') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'S2_OCN__2A') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'S3_OCN__2A') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'S4_OCN__2A') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'S5_OCN__2A') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'S6_OCN__2A') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'IW_SLC__1S') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'IW_SLC__1A') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'IW_GRDH_1S') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'IW_GRDH_1A') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'IW_GRDM_1S') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'IW_GRDM_1A') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'IW_RTC__1S') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'IW_OCN__2S') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'IW_OCN__2A') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'EW_SLC__1S') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'EW_SLC__1A') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'EW_GRDH_1S') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'EW_GRDH_1A') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'EW_GRDM_1S') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'EW_GRDM_1A') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'EW_RTC__1S') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'EW_OCN__2S') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'EW_OCN__2A') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'WV_SLC__1S') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'WV_SLC__1A') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'WV_GRDM_1S') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'WV_GRDM_1A') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'WV_OCN__2S') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'WV_OCN__2A') and startswith(Name,'S1')\n",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "S1_Level-0_Std+Ann",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1159757b-9c8c-4320-b491-7ef4df02055a",
										"exec": [
											"var jsonDataElements = pm.response.json().value;",
											"pm.test(\"Response time is less than \" +  environment[\"query-timeout\"] + \"ms\", function(){",
											"    pm.expect(pm.response.responseTime).to.be.below(parseInt(environment[\"query-timeout\"]));",
											"});",
											"",
											"pm.test(\"Test OData context\", function(){",
											"    query_string = pm.request.url.getQueryString();",
											"    if(query_string.includes(\"$expand=Attributes\")){",
											"        pm.expect( pm.response.json()['@odata.context']).to.include(\"$metadata#Products(Attributes())\");",
											"    } else{",
											"        pm.expect( pm.response.json()['@odata.context']).to.include(\"$metadata#Products\");",
											"    }",
											"});",
											"",
											"var TRUE = true;",
											"var FALSE = false;",
											"",
											"test_map={};",
											"test_map.beginningDateTime=function (element) {pm.expect(element.Name).eq('beginningDateTime');pm.expect(element.ValueType).eq('DateTimeOffset');pm.expect(element.Value).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);};",
											"test_map.endingDateTime=function (element) {pm.expect(element.Name).eq('endingDateTime');pm.expect(element.ValueType).eq('DateTimeOffset');pm.expect(element.Value).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);};",
											"test_map.platformShortName=function (element) {pm.expect(element.Name).eq('platformShortName');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"SENTINEL-1\"]);};",
											"test_map.platformSerialIdentifier=function (element) {pm.expect(element.Name).eq('platformSerialIdentifier');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"A\",\"B\",\"C\",\"D\",\"_\"]);};",
											"test_map.instrumentShortName=function (element) {pm.expect(element.Name).eq('instrumentShortName');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"SAR\"]);};",
											"test_map.operationalMode=function (element) {pm.expect(element.Name).eq('operationalMode');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"SM\",\"IW\",\"EW\",\"WV\",\"RF\",\"EN\",\"AN\"]);};",
											"test_map.swathIdentifier=function (element) {pm.expect(element.Name).eq('swathIdentifier');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"1\",\"2\",\"3\",\"4\",\"5\",\"6\"]);};",
											"test_map.polarisationChannels=function (element) {pm.expect(element.Name).eq('polarisationChannels');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"HH\",\"VV\",\"HV\",\"VH\"]);};",
											"test_map.orbitNumber=function (element) {pm.expect(element.Name).eq('orbitNumber');pm.expect(element.ValueType).eq('Integer');pm.expect(element.Value).to.be.a(\"number\");pm.expect(element.Value).to.match(/([1-9]|[1-8][0-9]|9[0-9]|[1-8][0-9]{2}|9[0-8][0-9]|99[0-9]|[1-8][0-9]{3}|9[0-8][0-9]{2}|99[0-8][0-9]|999[0-9]|[1-8][0-9]{4}|9[0-8][0-9]{3}|99[0-8][0-9]{2}|999[0-8][0-9]|9999[0-9]|[1-8][0-9]{5}|9[0-8][0-9]{4}|99[0-8][0-9]{3}|999[0-8][0-9]{2}|9999[0-8][0-9]|99999[0-9])/);};",
											"test_map.relativeOrbitNumber=function (element) {pm.expect(element.Name).eq('relativeOrbitNumber');pm.expect(element.ValueType).eq('Integer');pm.expect(element.Value).to.be.a(\"number\");pm.expect(element.Value).to.match(/([1-9]|[1-8][0-9]|9[0-9]|1[0-6][0-9]|17[0-5])/);};",
											"test_map.cycleNumber=function (element) {pm.expect(element.Name).eq('cycleNumber');pm.expect(element.ValueType).eq('Integer');pm.expect(element.Value).to.be.a(\"number\");pm.expect(element.Value).to.match(/([1-9]|[1-8][0-9]|9[0-9]|1[0-6][0-9]|17[0-5])/);};",
											"test_map.orbitDirection=function (element) {pm.expect(element.Name).eq('orbitDirection');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"ASCENDING\",\"DESCENDING\",\"UNKNOWN\"]);};",
											"test_map.processingDate=function (element) {pm.expect(element.Name).eq('processingDate');pm.expect(element.ValueType).eq('DateTimeOffset');pm.expect(element.Value).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);};",
											"test_map.processingCenter=function (element) {pm.expect(element.Name).eq('processingCenter');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');};",
											"test_map.processorName=function (element) {pm.expect(element.Name).eq('processorName');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');};",
											"test_map.processorVersion=function (element) {pm.expect(element.Name).eq('processorVersion');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');};",
											"test_map.coordinates=function (element) {pm.expect(element.Name).eq('coordinates');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.match(/(-?\\d+(\\.\\d+)?),\\s*(-?\\d+(\\.\\d+)?)/);};",
											"test_map.productType=function (element) {pm.expect(element.Name).eq('productType');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"S1_RAW__0S\",\"S2_RAW__0S\",\"S3_RAW__0S\",\"S4_RAW__0S\",\"S5_RAW__0S\",\"S6_RAW__0S\",\"IW_RAW__0S\",\"EW_RAW__0S\",\"WV_RAW__0S\",\"RF_RAW__0S\",\"EN_RAW__0S\",\"N1_RAW__0S\",\"N2_RAW__0S\",\"N3_RAW__0S\",\"N4_RAW__0S\",\"N5_RAW__0S\",\"N6_RAW__0S\",\"S1_RAW__0A\",\"S2_RAW__0A\",\"S3_RAW__0A\",\"S4_RAW__0A\",\"S5_RAW__0A\",\"S6_RAW__0A\",\"IW_RAW__0A\",\"EW_RAW__0A\",\"WV_RAW__0A\"]);",
											"",
											"};",
											"test_map.productClass=function (element) {pm.expect(element.Name).eq('productClass');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"A\",\"S\"]);};",
											"test_map.sliceNumber=function (element) {pm.expect(element.Name).eq('sliceNumber');pm.expect(element.ValueType).eq('Integer');pm.expect(element.Value).to.be.a(\"number\");};",
											"",
											"test_schema={};",
											"test_schema.beginningDateTime=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.endingDateTime=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.platformShortName=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.platformSerialIdentifier=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.instrumentShortName=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.operationalMode=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.swathIdentifier=function (num) {pm.expect(num).to.be.within(0,1)};",
											"test_schema.polarisationChannels=function (num) {pm.expect(num).to.be.within(1,2)};",
											"test_schema.orbitNumber=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.relativeOrbitNumber=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.cycleNumber=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.orbitDirection=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.processingDate=function (num) {pm.expect(num).to.be.within(0,1)};",
											"test_schema.processingCenter=function (num) {pm.expect(num).to.be.within(0,1)};",
											"test_schema.processorName=function (num) {pm.expect(num).to.be.within(0,1)};",
											"test_schema.processorVersion=function (num) {pm.expect(num).to.be.within(0,1)};",
											"test_schema.coordinates=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.productType=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.productClass=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.sliceNumber=function (num) {pm.expect(num).to.be.within(0,1)};",
											"",
											"            ",
											"properties_map = {};",
											"properties_map.Name=function (element) {pm.expect(element.Name).to.be.a(\"string\");};",
											"properties_map.ContentDate=function (element) {pm.expect(element.ContentDate[\"Start\"]).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);pm.expect(element.ContentDate[\"End\"]).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);};",
											"",
											"let schema_seen = {};",
											"",
											"function testSpecific(value, product){",
											"",
											"    if (schema_seen[value.Name]){",
											"        schema_seen[value.Name]++;",
											"    }else{",
											"        schema_seen[value.Name]=1;",
											"    }",
											"",
											"    if (test_map[value.Name]) {",
											"        pm.test(\"Test Attribute \"+value.Name + \" for Product: \"+product.Name+\" - \"+product.Id, function(){test_map[value.Name](value, product)});",
											"    }",
											"    else {",
											"        pm.test.skip(\"Test Attribute \"+value.Name + \" for Product: \"+product.Name+\" - \"+product.Id);",
											"    }",
											"}",
											"function propertySpecific(key, product){",
											"    if (properties_map[key]) {",
											"        pm.test(\"Test Property \"+key+\" for Product: \"+product.Name+\" - \"+product.Id, function(){properties_map[key](product)});",
											"    }",
											"    else {",
											"        pm.test.skip(\"Test Property \"+key+\" for Product: \"+product.Name+\" - \"+product.Id);",
											"    }",
											"}",
											"",
											"for (var counter = 0;  counter  < jsonDataElements.length; counter++){",
											"    var product = jsonDataElements[counter];",
											"    console.log(\"Processing Product: \"+product.Name+\" - \"+product.Id);",
											"",
											"    for (const[key, value] of Object.entries(properties_map)){",
											"        propertySpecific(key, jsonDataElements[counter]);",
											"    }",
											"",
											"    if(\"Attributes\" in jsonDataElements[counter]){",
											"        schema_seen = {};",
											"",
											"        pm.test(\"Test Attributes list\", function(){",
											"            pm.expect(jsonDataElements[counter].Attributes.length).to.be.above(0);",
											"        });",
											"",
											"        jsonDataElements[counter].Attributes.forEach(function(elem){",
											"            testSpecific(elem, jsonDataElements[counter]);",
											"        });",
											"        var product = jsonDataElements[counter];",
											"        for (const[key, value] of Object.entries(test_schema)) {pm.test(\"Schema Attribute \"+key+\" Product \"+product.Name+\" - \"+product.Id, function(){",
											"        if(schema_seen[key] == undefined){",
											"            schema_seen[key] = 0;",
											"        }",
											"        value(schema_seen[key], product)});}",
											"    }",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{service-root-uri}}/odata/v1/Products?$expand=Attributes&$top=1&$filter=(contains(Name,'S1_RAW__0S') or contains(Name,'S2_RAW__0S') or contains(Name,'S3_RAW__0S') or contains(Name,'S4_RAW__0S') or contains(Name,'S5_RAW__0S') or contains(Name,'S6_RAW__0S') or contains(Name,'IW_RAW__0S') or contains(Name,'EW_RAW__0S') or contains(Name,'WV_RAW__0S') or contains(Name,'RF_RAW__0S') or contains(Name,'EN_RAW__0S') or contains(Name,'N1_RAW__0S') or contains(Name,'N2_RAW__0S') or contains(Name,'N3_RAW__0S') or contains(Name,'N4_RAW__0S') or contains(Name,'N5_RAW__0S') or contains(Name,'N6_RAW__0S') or contains(Name,'S1_RAW__0A') or contains(Name,'S2_RAW__0A') or contains(Name,'S3_RAW__0A') or contains(Name,'S4_RAW__0A') or contains(Name,'S5_RAW__0A') or contains(Name,'S6_RAW__0A') or contains(Name,'IW_RAW__0A') or contains(Name,'EW_RAW__0A') or contains(Name,'WV_RAW__0A')) and startswith(Name,'S1')\n",
									"host": [
										"{{service-root-uri}}"
									],
									"path": [
										"odata",
										"v1",
										"Products"
									],
									"query": [
										{
											"key": "$expand",
											"value": "Attributes"
										},
										{
											"key": "$top",
											"value": "1"
										},
										{
											"key": "$filter",
											"value": "(contains(Name,'S1_RAW__0S') or contains(Name,'S2_RAW__0S') or contains(Name,'S3_RAW__0S') or contains(Name,'S4_RAW__0S') or contains(Name,'S5_RAW__0S') or contains(Name,'S6_RAW__0S') or contains(Name,'IW_RAW__0S') or contains(Name,'EW_RAW__0S') or contains(Name,'WV_RAW__0S') or contains(Name,'RF_RAW__0S') or contains(Name,'EN_RAW__0S') or contains(Name,'N1_RAW__0S') or contains(Name,'N2_RAW__0S') or contains(Name,'N3_RAW__0S') or contains(Name,'N4_RAW__0S') or contains(Name,'N5_RAW__0S') or contains(Name,'N6_RAW__0S') or contains(Name,'S1_RAW__0A') or contains(Name,'S2_RAW__0A') or contains(Name,'S3_RAW__0A') or contains(Name,'S4_RAW__0A') or contains(Name,'S5_RAW__0A') or contains(Name,'S6_RAW__0A') or contains(Name,'IW_RAW__0A') or contains(Name,'EW_RAW__0A') or contains(Name,'WV_RAW__0A')) and startswith(Name,'S1')\n"
										},
										{
											"key": "$filter",
											"value": "contains(Name,'S1_RAW__0S') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'S2_RAW__0S') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'S3_RAW__0S') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'S4_RAW__0S') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'S5_RAW__0S') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'S6_RAW__0S') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'IW_RAW__0S') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'EW_RAW__0S') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'WV_RAW__0S') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'RF_RAW__0S') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'EN_RAW__0S') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'N1_RAW__0S') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'N2_RAW__0S') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'N3_RAW__0S') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'N4_RAW__0S') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'N5_RAW__0S') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'N6_RAW__0S') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'S1_RAW__0A') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'S2_RAW__0A') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'S3_RAW__0A') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'S4_RAW__0A') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'S5_RAW__0A') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'S6_RAW__0A') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'IW_RAW__0A') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'EW_RAW__0A') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'WV_RAW__0A') and startswith(Name,'S1')\n",
											"disabled": true
										}
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "PR",
					"item": [
						{
							"name": "S1_Level-0_HKTM",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ce27a887-a8f2-4c56-974b-8e8dc068f0f5",
										"exec": [
											"var jsonDataElements = pm.response.json().value;",
											"pm.test(\"Response time is less than \" +  environment[\"query-timeout\"] + \"ms\", function(){",
											"    pm.expect(pm.response.responseTime).to.be.below(parseInt(environment[\"query-timeout\"]));",
											"});",
											"",
											"pm.test(\"Test OData context\", function(){",
											"    query_string = pm.request.url.getQueryString();",
											"    if(query_string.includes(\"$expand=Attributes\")){",
											"        pm.expect( pm.response.json()['@odata.context']).to.include(\"$metadata#Products(Attributes())\");",
											"    } else{",
											"        pm.expect( pm.response.json()['@odata.context']).to.include(\"$metadata#Products\");",
											"    }",
											"});",
											"",
											"var TRUE = true;",
											"var FALSE = false;",
											"",
											"test_map={};",
											"test_map.beginningDateTime=function (element) {pm.expect(element.Name).eq('beginningDateTime');pm.expect(element.ValueType).eq('DateTimeOffset');pm.expect(element.Value).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);};",
											"test_map.endingDateTime=function (element) {pm.expect(element.Name).eq('endingDateTime');pm.expect(element.ValueType).eq('DateTimeOffset');pm.expect(element.Value).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);};",
											"test_map.platformShortName=function (element) {pm.expect(element.Name).eq('platformShortName');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"SENTINEL-1\"]);};",
											"test_map.platformSerialIdentifier=function (element) {pm.expect(element.Name).eq('platformSerialIdentifier');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"A\",\"B\",\"C\",\"D\",\"_\"]);};",
											"test_map.orbitNumber=function (element) {pm.expect(element.Name).eq('orbitNumber');pm.expect(element.ValueType).eq('Integer');pm.expect(element.Value).to.be.a(\"number\");pm.expect(element.Value).to.match(/([1-9]|[1-8][0-9]|9[0-9]|[1-8][0-9]{2}|9[0-8][0-9]|99[0-9]|[1-8][0-9]{3}|9[0-8][0-9]{2}|99[0-8][0-9]|999[0-9]|[1-8][0-9]{4}|9[0-8][0-9]{3}|99[0-8][0-9]{2}|999[0-8][0-9]|9999[0-9]|[1-8][0-9]{5}|9[0-8][0-9]{4}|99[0-8][0-9]{3}|999[0-8][0-9]{2}|9999[0-8][0-9]|99999[0-9])/);};",
											"test_map.relativeOrbitNumber=function (element) {pm.expect(element.Name).eq('relativeOrbitNumber');pm.expect(element.ValueType).eq('Integer');pm.expect(element.Value).to.be.a(\"number\");pm.expect(element.Value).to.match(/([1-9]|[1-8][0-9]|9[0-9]|1[0-6][0-9]|17[0-5])/);};",
											"test_map.cycleNumber=function (element) {pm.expect(element.Name).eq('cycleNumber');pm.expect(element.ValueType).eq('Integer');pm.expect(element.Value).to.be.a(\"number\");pm.expect(element.Value).to.match(/([1-9]|[1-8][0-9]|9[0-9]|1[0-6][0-9]|17[0-5])/);};",
											"test_map.processingDate=function (element) {pm.expect(element.Name).eq('processingDate');pm.expect(element.ValueType).eq('DateTimeOffset');pm.expect(element.Value).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);};",
											"test_map.processingCenter=function (element) {pm.expect(element.Name).eq('processingCenter');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');};",
											"test_map.processorName=function (element) {pm.expect(element.Name).eq('processorName');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');};",
											"test_map.processorVersion=function (element) {pm.expect(element.Name).eq('processorVersion');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');};",
											"test_map.productType=function (element) {pm.expect(element.Name).eq('productType');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"HK_RAW__0_\"]);",
											"",
											"};",
											"",
											"test_schema={};",
											"test_schema.beginningDateTime=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.endingDateTime=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.platformShortName=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.platformSerialIdentifier=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.orbitNumber=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.relativeOrbitNumber=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.cycleNumber=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.processingDate=function (num) {pm.expect(num).to.be.within(0,1)};",
											"test_schema.processingCenter=function (num) {pm.expect(num).to.be.within(0,1)};",
											"test_schema.processorName=function (num) {pm.expect(num).to.be.within(0,1)};",
											"test_schema.processorVersion=function (num) {pm.expect(num).to.be.within(0,1)};",
											"test_schema.productType=function (num) {pm.expect(num).to.be.eq(1)};",
											"",
											"            ",
											"properties_map = {};",
											"properties_map.Id=function (element) {pm.expect(element.Id).to.match(/[0-9a-fA-F]{8}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{12}/);};",
											"properties_map.Name=function (element) {pm.expect(element.Name).to.be.a(\"string\");};",
											"properties_map.ContentType=function (element) {pm.expect(element.ContentType).to.be.a(\"string\");};",
											"properties_map.ContentLength=function (element) {pm.expect(element.ContentLength).to.be.a(\"number\");};",
											"properties_map.PublicationDate=function (element) {pm.expect(element.PublicationDate).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);};",
											"properties_map.EvictionDate=function (element) {if(element.EvictionDate){ pm.expect(element.EvictionDate).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d+([+-][0-2]\\d:[0-5]\\d|Z)/); }};",
											"properties_map.Checksum=function (element) {for(i=0; i<element.Checksum.length; i++ ){pm.expect(element.Checksum[i].Algorithm).to.be.oneOf([\"MD5\",\"SHA-1\",\"SHA-256\",\"SHA-512\"]);checksum_algorithm = {'MD5': '[a-fA-F0-9]{32}', 'SHA-1': '[0-9a-f]{5,40}', 'SHA-256': '[A-Fa-f0-9]{64}', 'SHA-512': '[A-Fa-f0-9]{128}'};pm.expect(element.Checksum[i].Value).to.match(new RegExp(checksum_algorithm[element.Checksum[i].Algorithm]));}};",
											"properties_map.ContentDate=function (element) {pm.expect(element.ContentDate[\"Start\"]).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);pm.expect(element.ContentDate[\"End\"]).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);};",
											"properties_map.ProductionType=function (element) {pm.expect(element.ProductionType).to.be.oneOf([\"systematic_production\",\"on-demand default\",\"on-demand non-default\"]);};",
											"properties_map.Footprint=function (element) {if(element.Footprint){ pm.expect(element.Footprint).to.match(/geography'SRID=\\d+;[Polygon|Multipolygon|Point](.*)/); }};",
											"",
											"let schema_seen = {};",
											"",
											"function testSpecific(value, product){",
											"",
											"    if (schema_seen[value.Name]){",
											"        schema_seen[value.Name]++;",
											"    }else{",
											"        schema_seen[value.Name]=1;",
											"    }",
											"",
											"    if (test_map[value.Name]) {",
											"        pm.test(\"Test Attribute \"+value.Name + \" for Product: \"+product.Name+\" - \"+product.Id, function(){test_map[value.Name](value, product)});",
											"    }",
											"    else {",
											"        pm.test.skip(\"Test Attribute \"+value.Name + \" for Product: \"+product.Name+\" - \"+product.Id);",
											"    }",
											"}",
											"function propertySpecific(key, product){",
											"    if (properties_map[key]) {",
											"        pm.test(\"Test Property \"+key+\" for Product: \"+product.Name+\" - \"+product.Id, function(){properties_map[key](product)});",
											"    }",
											"    else {",
											"        pm.test.skip(\"Test Property \"+key+\" for Product: \"+product.Name+\" - \"+product.Id);",
											"    }",
											"}",
											"",
											"for (var counter = 0;  counter  < jsonDataElements.length; counter++){",
											"    var product = jsonDataElements[counter];",
											"    console.log(\"Processing Product: \"+product.Name+\" - \"+product.Id);",
											"",
											"    for (const[key, value] of Object.entries(properties_map)){",
											"        propertySpecific(key, jsonDataElements[counter]);",
											"    }",
											"",
											"    if(\"Attributes\" in jsonDataElements[counter]){",
											"        schema_seen = {};",
											"",
											"        pm.test(\"Test Attributes list\", function(){",
											"            pm.expect(jsonDataElements[counter].Attributes.length).to.be.above(0);",
											"        });",
											"",
											"        jsonDataElements[counter].Attributes.forEach(function(elem){",
											"            testSpecific(elem, jsonDataElements[counter]);",
											"        });",
											"        var product = jsonDataElements[counter];",
											"        for (const[key, value] of Object.entries(test_schema)) {pm.test(\"Schema Attribute \"+key+\" Product \"+product.Name+\" - \"+product.Id, function(){",
											"        if(schema_seen[key] == undefined){",
											"            schema_seen[key] = 0;",
											"        }",
											"        value(schema_seen[key], product)});}",
											"    }",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{service-root-uri}}/odata/v1/Products?$expand=Attributes&$top=1&$filter=(contains(Name,'HK_RAW__0_')) and startswith(Name,'S1')\n",
									"host": [
										"{{service-root-uri}}"
									],
									"path": [
										"odata",
										"v1",
										"Products"
									],
									"query": [
										{
											"key": "$expand",
											"value": "Attributes"
										},
										{
											"key": "$top",
											"value": "1"
										},
										{
											"key": "$filter",
											"value": "(contains(Name,'HK_RAW__0_')) and startswith(Name,'S1')\n"
										},
										{
											"key": "$filter",
											"value": "contains(Name,'HK_RAW__0_') and startswith(Name,'S1')\n",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "S1_Level-0_Noise",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "01f2969e-d1cf-45b0-aaf2-f961154c549b",
										"exec": [
											"var jsonDataElements = pm.response.json().value;",
											"pm.test(\"Response time is less than \" +  environment[\"query-timeout\"] + \"ms\", function(){",
											"    pm.expect(pm.response.responseTime).to.be.below(parseInt(environment[\"query-timeout\"]));",
											"});",
											"",
											"pm.test(\"Test OData context\", function(){",
											"    query_string = pm.request.url.getQueryString();",
											"    if(query_string.includes(\"$expand=Attributes\")){",
											"        pm.expect( pm.response.json()['@odata.context']).to.include(\"$metadata#Products(Attributes())\");",
											"    } else{",
											"        pm.expect( pm.response.json()['@odata.context']).to.include(\"$metadata#Products\");",
											"    }",
											"});",
											"",
											"var TRUE = true;",
											"var FALSE = false;",
											"",
											"test_map={};",
											"test_map.beginningDateTime=function (element) {pm.expect(element.Name).eq('beginningDateTime');pm.expect(element.ValueType).eq('DateTimeOffset');pm.expect(element.Value).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);};",
											"test_map.endingDateTime=function (element) {pm.expect(element.Name).eq('endingDateTime');pm.expect(element.ValueType).eq('DateTimeOffset');pm.expect(element.Value).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);};",
											"test_map.startTimeFromAscendingNode=function (element) {pm.expect(element.Name).eq('startTimeFromAscendingNode');pm.expect(element.ValueType).eq('Double');pm.expect(element.Value).to.be.a(\"number\");};",
											"test_map.completionTimeFromAscendingNode=function (element) {pm.expect(element.Name).eq('completionTimeFromAscendingNode');pm.expect(element.ValueType).eq('Double');pm.expect(element.Value).to.be.a(\"number\");};",
											"test_map.platformShortName=function (element) {pm.expect(element.Name).eq('platformShortName');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"SENTINEL-1\"]);};",
											"test_map.platformSerialIdentifier=function (element) {pm.expect(element.Name).eq('platformSerialIdentifier');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"A\",\"B\",\"C\",\"D\",\"_\"]);};",
											"test_map.instrumentShortName=function (element) {pm.expect(element.Name).eq('instrumentShortName');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"SAR\"]);};",
											"test_map.operationalMode=function (element) {pm.expect(element.Name).eq('operationalMode');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"SM\",\"IW\",\"EW\",\"WV\"]);};",
											"test_map.swathIdentifier=function (element) {pm.expect(element.Name).eq('swathIdentifier');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"1\",\"2\",\"3\",\"4\",\"5\",\"6\"]);};",
											"test_map.polarisationChannels=function (element) {pm.expect(element.Name).eq('polarisationChannels');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"HH\",\"VV\",\"HV\",\"VH\"]);};",
											"test_map.orbitNumber=function (element) {pm.expect(element.Name).eq('orbitNumber');pm.expect(element.ValueType).eq('Integer');pm.expect(element.Value).to.be.a(\"number\");pm.expect(element.Value).to.match(/([1-9]|[1-8][0-9]|9[0-9]|[1-8][0-9]{2}|9[0-8][0-9]|99[0-9]|[1-8][0-9]{3}|9[0-8][0-9]{2}|99[0-8][0-9]|999[0-9]|[1-8][0-9]{4}|9[0-8][0-9]{3}|99[0-8][0-9]{2}|999[0-8][0-9]|9999[0-9]|[1-8][0-9]{5}|9[0-8][0-9]{4}|99[0-8][0-9]{3}|999[0-8][0-9]{2}|9999[0-8][0-9]|99999[0-9])/);};",
											"test_map.relativeOrbitNumber=function (element) {pm.expect(element.Name).eq('relativeOrbitNumber');pm.expect(element.ValueType).eq('Integer');pm.expect(element.Value).to.be.a(\"number\");pm.expect(element.Value).to.match(/([1-9]|[1-8][0-9]|9[0-9]|1[0-6][0-9]|17[0-5])/);};",
											"test_map.cycleNumber=function (element) {pm.expect(element.Name).eq('cycleNumber');pm.expect(element.ValueType).eq('Integer');pm.expect(element.Value).to.be.a(\"number\");pm.expect(element.Value).to.match(/([1-9]|[1-8][0-9]|9[0-9]|1[0-6][0-9]|17[0-5])/);};",
											"test_map.orbitDirection=function (element) {pm.expect(element.Name).eq('orbitDirection');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"ASCENDING\",\"DESCENDING\",\"UNKNOWN\"]);};",
											"test_map.processingDate=function (element) {pm.expect(element.Name).eq('processingDate');pm.expect(element.ValueType).eq('DateTimeOffset');pm.expect(element.Value).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);};",
											"test_map.processingCenter=function (element) {pm.expect(element.Name).eq('processingCenter');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');};",
											"test_map.processorName=function (element) {pm.expect(element.Name).eq('processorName');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');};",
											"test_map.processorVersion=function (element) {pm.expect(element.Name).eq('processorVersion');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');};",
											"test_map.coordinates=function (element) {pm.expect(element.Name).eq('coordinates');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.match(/(-?\\d+(\\.\\d+)?),\\s*(-?\\d+(\\.\\d+)?)/);};",
											"test_map.productType=function (element) {pm.expect(element.Name).eq('productType');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"S1_RAW__0N\",\"S2_RAW__0N\",\"S3_RAW__0N\",\"S4_RAW__0N\",\"S5_RAW__0N\",\"S6_RAW__0N\",\"IW_RAW__0N\",\"EW_RAW__0N\",\"WV_RAW__0N\"]);",
											"",
											"};",
											"test_map.productClass=function (element) {pm.expect(element.Name).eq('productClass');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"N\"]);};",
											"test_map.productConsolidation=function (element) {pm.expect(element.Name).eq('productConsolidation');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"SLICE\",\"SLICE PARTIAL\",\"FULL\"]);};",
											"test_map.instrumentConfigurationID=function (element) {pm.expect(element.Name).eq('instrumentConfigurationID');pm.expect(element.ValueType).eq('Integer');pm.expect(element.Value).to.be.a(\"number\");pm.expect(element.Value).to.match(/([1-9]|[1-8][0-9]|9[0-9]|[1-8][0-9]{2}|9[0-8][0-9]|99[0-9]|[1-8][0-9]{3}|9[0-8][0-9]{2}|99[0-8][0-9]|999[0-9]|[1-8][0-9]{4}|9[0-8][0-9]{3}|99[0-8][0-9]{2}|999[0-8][0-9]|9999[0-9]|[1-8][0-9]{5}|9[0-8][0-9]{4}|99[0-8][0-9]{3}|999[0-8][0-9]{2}|9999[0-8][0-9]|99999[0-9]|[1-8][0-9]{6}|9[0-8][0-9]{5}|99[0-8][0-9]{4}|999[0-8][0-9]{3}|9999[0-8][0-9]{2}|99999[0-8][0-9]|999999[0-9]|1[0-5][0-9]{6}|16[0-6][0-9]{5}|167[0-6][0-9]{4}|1677[0-6][0-9]{3}|16777[01][0-9]{2}|1677720[0-9]|1677721[0-5])/);};",
											"test_map.datatakeID=function (element) {pm.expect(element.Name).eq('datatakeID');pm.expect(element.ValueType).eq('Integer');pm.expect(element.Value).to.be.a(\"number\");pm.expect(element.Value).to.match(/([1-9]|[1-8][0-9]|9[0-9]|[1-8][0-9]{2}|9[0-8][0-9]|99[0-9]|[1-8][0-9]{3}|9[0-8][0-9]{2}|99[0-8][0-9]|999[0-9]|[1-8][0-9]{4}|9[0-8][0-9]{3}|99[0-8][0-9]{2}|999[0-8][0-9]|9999[0-9]|[1-8][0-9]{5}|9[0-8][0-9]{4}|99[0-8][0-9]{3}|999[0-8][0-9]{2}|9999[0-8][0-9]|99999[0-9]|[1-7][0-9]{6}|8[0-2][0-9]{5}|83[0-7][0-9]{4}|838[0-7][0-9]{3}|8388[0-5][0-9]{2}|838860[0-7])/);};",
											"test_map.sliceProductFlag=function (element) {pm.expect(element.Name).eq('sliceProductFlag');pm.expect(element.ValueType).eq('Boolean');pm.expect(element.Value).to.be.oneOf([\"TRUE\",\"FALSE\",\"true\",\"false\"]);};",
											"test_map.sliceNumber=function (element) {pm.expect(element.Name).eq('sliceNumber');pm.expect(element.ValueType).eq('Integer');pm.expect(element.Value).to.be.a(\"number\");};",
											"test_map.totalSlices=function (element) {pm.expect(element.Name).eq('totalSlices');pm.expect(element.ValueType).eq('Integer');pm.expect(element.Value).to.be.a(\"number\");};",
											"",
											"test_schema={};",
											"test_schema.beginningDateTime=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.endingDateTime=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.startTimeFromAscendingNode=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.completionTimeFromAscendingNode=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.platformShortName=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.platformSerialIdentifier=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.instrumentShortName=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.operationalMode=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.swathIdentifier=function (num) {pm.expect(num).to.be.within(0,1)};",
											"test_schema.polarisationChannels=function (num) {pm.expect(num).to.be.within(1,2)};",
											"test_schema.orbitNumber=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.relativeOrbitNumber=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.cycleNumber=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.orbitDirection=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.processingDate=function (num) {pm.expect(num).to.be.within(0,1)};",
											"test_schema.processingCenter=function (num) {pm.expect(num).to.be.within(0,1)};",
											"test_schema.processorName=function (num) {pm.expect(num).to.be.within(0,1)};",
											"test_schema.processorVersion=function (num) {pm.expect(num).to.be.within(0,1)};",
											"test_schema.coordinates=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.productType=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.productClass=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.productConsolidation=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.instrumentConfigurationID=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.datatakeID=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.sliceProductFlag=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.sliceNumber=function (num) {pm.expect(num).to.be.within(0,1)};",
											"test_schema.totalSlices=function (num) {pm.expect(num).to.be.within(0,1)};",
											"",
											"            ",
											"properties_map = {};",
											"properties_map.Id=function (element) {pm.expect(element.Id).to.match(/[0-9a-fA-F]{8}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{12}/);};",
											"properties_map.Name=function (element) {pm.expect(element.Name).to.be.a(\"string\");};",
											"properties_map.ContentType=function (element) {pm.expect(element.ContentType).to.be.a(\"string\");};",
											"properties_map.ContentLength=function (element) {pm.expect(element.ContentLength).to.be.a(\"number\");};",
											"properties_map.PublicationDate=function (element) {pm.expect(element.PublicationDate).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);};",
											"properties_map.EvictionDate=function (element) {if(element.EvictionDate){ pm.expect(element.EvictionDate).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d+([+-][0-2]\\d:[0-5]\\d|Z)/); }};",
											"properties_map.Checksum=function (element) {for(i=0; i<element.Checksum.length; i++ ){pm.expect(element.Checksum[i].Algorithm).to.be.oneOf([\"MD5\",\"SHA-1\",\"SHA-256\",\"SHA-512\"]);checksum_algorithm = {'MD5': '[a-fA-F0-9]{32}', 'SHA-1': '[0-9a-f]{5,40}', 'SHA-256': '[A-Fa-f0-9]{64}', 'SHA-512': '[A-Fa-f0-9]{128}'};pm.expect(element.Checksum[i].Value).to.match(new RegExp(checksum_algorithm[element.Checksum[i].Algorithm]));}};",
											"properties_map.ContentDate=function (element) {pm.expect(element.ContentDate[\"Start\"]).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);pm.expect(element.ContentDate[\"End\"]).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);};",
											"properties_map.ProductionType=function (element) {pm.expect(element.ProductionType).to.be.oneOf([\"systematic_production\",\"on-demand default\",\"on-demand non-default\"]);};",
											"properties_map.Footprint=function (element) {if(element.Footprint){ pm.expect(element.Footprint).to.match(/geography'SRID=\\d+;[Polygon|Multipolygon|Point](.*)/); }};",
											"",
											"let schema_seen = {};",
											"",
											"function testSpecific(value, product){",
											"",
											"    if (schema_seen[value.Name]){",
											"        schema_seen[value.Name]++;",
											"    }else{",
											"        schema_seen[value.Name]=1;",
											"    }",
											"",
											"    if (test_map[value.Name]) {",
											"        pm.test(\"Test Attribute \"+value.Name + \" for Product: \"+product.Name+\" - \"+product.Id, function(){test_map[value.Name](value, product)});",
											"    }",
											"    else {",
											"        pm.test.skip(\"Test Attribute \"+value.Name + \" for Product: \"+product.Name+\" - \"+product.Id);",
											"    }",
											"}",
											"function propertySpecific(key, product){",
											"    if (properties_map[key]) {",
											"        pm.test(\"Test Property \"+key+\" for Product: \"+product.Name+\" - \"+product.Id, function(){properties_map[key](product)});",
											"    }",
											"    else {",
											"        pm.test.skip(\"Test Property \"+key+\" for Product: \"+product.Name+\" - \"+product.Id);",
											"    }",
											"}",
											"",
											"for (var counter = 0;  counter  < jsonDataElements.length; counter++){",
											"    var product = jsonDataElements[counter];",
											"    console.log(\"Processing Product: \"+product.Name+\" - \"+product.Id);",
											"",
											"    for (const[key, value] of Object.entries(properties_map)){",
											"        propertySpecific(key, jsonDataElements[counter]);",
											"    }",
											"",
											"    if(\"Attributes\" in jsonDataElements[counter]){",
											"        schema_seen = {};",
											"",
											"        pm.test(\"Test Attributes list\", function(){",
											"            pm.expect(jsonDataElements[counter].Attributes.length).to.be.above(0);",
											"        });",
											"",
											"        jsonDataElements[counter].Attributes.forEach(function(elem){",
											"            testSpecific(elem, jsonDataElements[counter]);",
											"        });",
											"        var product = jsonDataElements[counter];",
											"        for (const[key, value] of Object.entries(test_schema)) {pm.test(\"Schema Attribute \"+key+\" Product \"+product.Name+\" - \"+product.Id, function(){",
											"        if(schema_seen[key] == undefined){",
											"            schema_seen[key] = 0;",
											"        }",
											"        value(schema_seen[key], product)});}",
											"    }",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{service-root-uri}}/odata/v1/Products?$expand=Attributes&$top=1&$filter=(contains(Name,'S1_RAW__0N') or contains(Name,'S2_RAW__0N') or contains(Name,'S3_RAW__0N') or contains(Name,'S4_RAW__0N') or contains(Name,'S5_RAW__0N') or contains(Name,'S6_RAW__0N') or contains(Name,'IW_RAW__0N') or contains(Name,'EW_RAW__0N') or contains(Name,'WV_RAW__0N')) and startswith(Name,'S1')\n",
									"host": [
										"{{service-root-uri}}"
									],
									"path": [
										"odata",
										"v1",
										"Products"
									],
									"query": [
										{
											"key": "$expand",
											"value": "Attributes"
										},
										{
											"key": "$top",
											"value": "1"
										},
										{
											"key": "$filter",
											"value": "(contains(Name,'S1_RAW__0N') or contains(Name,'S2_RAW__0N') or contains(Name,'S3_RAW__0N') or contains(Name,'S4_RAW__0N') or contains(Name,'S5_RAW__0N') or contains(Name,'S6_RAW__0N') or contains(Name,'IW_RAW__0N') or contains(Name,'EW_RAW__0N') or contains(Name,'WV_RAW__0N')) and startswith(Name,'S1')\n"
										},
										{
											"key": "$filter",
											"value": "contains(Name,'S1_RAW__0N') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'S2_RAW__0N') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'S3_RAW__0N') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'S4_RAW__0N') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'S5_RAW__0N') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'S6_RAW__0N') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'IW_RAW__0N') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'EW_RAW__0N') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'WV_RAW__0N') and startswith(Name,'S1')\n",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "S1_OLQC_Reports",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f886856c-272d-4f9b-abd7-0f6dd3a4aec2",
										"exec": [
											"var jsonDataElements = pm.response.json().value;",
											"pm.test(\"Response time is less than \" +  environment[\"query-timeout\"] + \"ms\", function(){",
											"    pm.expect(pm.response.responseTime).to.be.below(parseInt(environment[\"query-timeout\"]));",
											"});",
											"",
											"pm.test(\"Test OData context\", function(){",
											"    query_string = pm.request.url.getQueryString();",
											"    if(query_string.includes(\"$expand=Attributes\")){",
											"        pm.expect( pm.response.json()['@odata.context']).to.include(\"$metadata#Products(Attributes())\");",
											"    } else{",
											"        pm.expect( pm.response.json()['@odata.context']).to.include(\"$metadata#Products\");",
											"    }",
											"});",
											"",
											"var TRUE = true;",
											"var FALSE = false;",
											"",
											"test_map={};",
											"test_map.platformShortName=function (element) {pm.expect(element.Name).eq('platformShortName');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"SENTINEL-1\"]);};",
											"test_map.platformSerialIdentifier=function (element) {pm.expect(element.Name).eq('platformSerialIdentifier');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"A\",\"B\",\"C\",\"D\",\"_\"]);};",
											"test_map.productType=function (element) {pm.expect(element.Name).eq('productType');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"REP_OLQCPA\"]);",
											"",
											"};",
											"test_map.beginningDateTime=function (element) {pm.expect(element.Name).eq('beginningDateTime');pm.expect(element.ValueType).eq('DateTimeOffset');pm.expect(element.Value).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);};",
											"test_map.endingDateTime=function (element) {pm.expect(element.Name).eq('endingDateTime');pm.expect(element.ValueType).eq('DateTimeOffset');pm.expect(element.Value).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);};",
											"test_map.processingCenter=function (element) {pm.expect(element.Name).eq('processingCenter');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');};",
											"test_map.processorVersion=function (element) {pm.expect(element.Name).eq('processorVersion');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');};",
											"test_map.processingDate=function (element) {pm.expect(element.Name).eq('processingDate');pm.expect(element.ValueType).eq('DateTimeOffset');pm.expect(element.Value).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);};",
											"",
											"test_schema={};",
											"test_schema.platformShortName=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.platformSerialIdentifier=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.productType=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.beginningDateTime=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.endingDateTime=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.processingCenter=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.processorVersion=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.processingDate=function (num) {pm.expect(num).to.be.eq(1)};",
											"",
											"            ",
											"properties_map = {};",
											"properties_map.Id=function (element) {pm.expect(element.Id).to.match(/[0-9a-fA-F]{8}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{12}/);};",
											"properties_map.Name=function (element) {pm.expect(element.Name).to.be.a(\"string\");};",
											"properties_map.ContentType=function (element) {pm.expect(element.ContentType).to.be.a(\"string\");};",
											"properties_map.ContentLength=function (element) {pm.expect(element.ContentLength).to.be.a(\"number\");};",
											"properties_map.PublicationDate=function (element) {pm.expect(element.PublicationDate).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);};",
											"properties_map.EvictionDate=function (element) {if(element.EvictionDate){ pm.expect(element.EvictionDate).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d+([+-][0-2]\\d:[0-5]\\d|Z)/); }};",
											"properties_map.Checksum=function (element) {for(i=0; i<element.Checksum.length; i++ ){pm.expect(element.Checksum[i].Algorithm).to.be.oneOf([\"MD5\",\"SHA-1\",\"SHA-256\",\"SHA-512\"]);checksum_algorithm = {'MD5': '[a-fA-F0-9]{32}', 'SHA-1': '[0-9a-f]{5,40}', 'SHA-256': '[A-Fa-f0-9]{64}', 'SHA-512': '[A-Fa-f0-9]{128}'};pm.expect(element.Checksum[i].Value).to.match(new RegExp(checksum_algorithm[element.Checksum[i].Algorithm]));}};",
											"properties_map.ContentDate=function (element) {pm.expect(element.ContentDate[\"Start\"]).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);pm.expect(element.ContentDate[\"End\"]).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);};",
											"properties_map.ProductionType=function (element) {pm.expect(element.ProductionType).to.be.oneOf([\"systematic_production\",\"on-demand default\",\"on-demand non-default\"]);};",
											"properties_map.Footprint=function (element) {if(element.Footprint){ pm.expect(element.Footprint).to.match(/geography'SRID=\\d+;[Polygon|Multipolygon|Point](.*)/); }};",
											"",
											"let schema_seen = {};",
											"",
											"function testSpecific(value, product){",
											"",
											"    if (schema_seen[value.Name]){",
											"        schema_seen[value.Name]++;",
											"    }else{",
											"        schema_seen[value.Name]=1;",
											"    }",
											"",
											"    if (test_map[value.Name]) {",
											"        pm.test(\"Test Attribute \"+value.Name + \" for Product: \"+product.Name+\" - \"+product.Id, function(){test_map[value.Name](value, product)});",
											"    }",
											"    else {",
											"        pm.test.skip(\"Test Attribute \"+value.Name + \" for Product: \"+product.Name+\" - \"+product.Id);",
											"    }",
											"}",
											"function propertySpecific(key, product){",
											"    if (properties_map[key]) {",
											"        pm.test(\"Test Property \"+key+\" for Product: \"+product.Name+\" - \"+product.Id, function(){properties_map[key](product)});",
											"    }",
											"    else {",
											"        pm.test.skip(\"Test Property \"+key+\" for Product: \"+product.Name+\" - \"+product.Id);",
											"    }",
											"}",
											"",
											"for (var counter = 0;  counter  < jsonDataElements.length; counter++){",
											"    var product = jsonDataElements[counter];",
											"    console.log(\"Processing Product: \"+product.Name+\" - \"+product.Id);",
											"",
											"    for (const[key, value] of Object.entries(properties_map)){",
											"        propertySpecific(key, jsonDataElements[counter]);",
											"    }",
											"",
											"    if(\"Attributes\" in jsonDataElements[counter]){",
											"        schema_seen = {};",
											"",
											"        pm.test(\"Test Attributes list\", function(){",
											"            pm.expect(jsonDataElements[counter].Attributes.length).to.be.above(0);",
											"        });",
											"",
											"        jsonDataElements[counter].Attributes.forEach(function(elem){",
											"            testSpecific(elem, jsonDataElements[counter]);",
											"        });",
											"        var product = jsonDataElements[counter];",
											"        for (const[key, value] of Object.entries(test_schema)) {pm.test(\"Schema Attribute \"+key+\" Product \"+product.Name+\" - \"+product.Id, function(){",
											"        if(schema_seen[key] == undefined){",
											"            schema_seen[key] = 0;",
											"        }",
											"        value(schema_seen[key], product)});}",
											"    }",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{service-root-uri}}/odata/v1/Products?$expand=Attributes&$top=1&$filter=(contains(Name,'REP_OLQCPA')) and startswith(Name,'S1')\n",
									"host": [
										"{{service-root-uri}}"
									],
									"path": [
										"odata",
										"v1",
										"Products"
									],
									"query": [
										{
											"key": "$expand",
											"value": "Attributes"
										},
										{
											"key": "$top",
											"value": "1"
										},
										{
											"key": "$filter",
											"value": "(contains(Name,'REP_OLQCPA')) and startswith(Name,'S1')\n"
										},
										{
											"key": "$filter",
											"value": "contains(Name,'REP_OLQCPA') and startswith(Name,'S1')\n",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "S1_AUX_in_.SAFE",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "32cd7a0b-2e2b-4e21-9014-fa69e58ed52a",
										"exec": [
											"var jsonDataElements = pm.response.json().value;",
											"pm.test(\"Response time is less than \" +  environment[\"query-timeout\"] + \"ms\", function(){",
											"    pm.expect(pm.response.responseTime).to.be.below(parseInt(environment[\"query-timeout\"]));",
											"});",
											"",
											"pm.test(\"Test OData context\", function(){",
											"    query_string = pm.request.url.getQueryString();",
											"    if(query_string.includes(\"$expand=Attributes\")){",
											"        pm.expect( pm.response.json()['@odata.context']).to.include(\"$metadata#Products(Attributes())\");",
											"    } else{",
											"        pm.expect( pm.response.json()['@odata.context']).to.include(\"$metadata#Products\");",
											"    }",
											"});",
											"",
											"var TRUE = true;",
											"var FALSE = false;",
											"",
											"test_map={};",
											"test_map.processingDate=function (element) {pm.expect(element.Name).eq('processingDate');pm.expect(element.ValueType).eq('DateTimeOffset');pm.expect(element.Value).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);};",
											"test_map.processingCenter=function (element) {pm.expect(element.Name).eq('processingCenter');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');};",
											"test_map.processorName=function (element) {pm.expect(element.Name).eq('processorName');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');};",
											"test_map.processorVersion=function (element) {pm.expect(element.Name).eq('processorVersion');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');};",
											"test_map.platformShortName=function (element) {pm.expect(element.Name).eq('platformShortName');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"SENTINEL-1\"]);};",
											"test_map.platformSerialIdentifier=function (element) {pm.expect(element.Name).eq('platformSerialIdentifier');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"A\",\"B\",\"C\",\"D\",\"_¹\"]);};",
											"test_map.instrumentShortName=function (element) {pm.expect(element.Name).eq('instrumentShortName');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');};",
											"test_map.productType=function (element) {pm.expect(element.Name).eq('productType');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"AUX_PP1\",\"AUX_CAL\",\"AUX_INS\",\"AUX_PP2\",\"AUX_SCS\",\"AUX_WND\",\"AUX_WAV\",\"AUX_ICE\",\"AUX_ECE\"]);",
											"",
											"};",
											"test_map.beginningDateTime=function (element) {pm.expect(element.Name).eq('beginningDateTime');pm.expect(element.ValueType).eq('DateTimeOffset');pm.expect(element.Value).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);};",
											"test_map.productGeneration=function (element) {pm.expect(element.Name).eq('productGeneration');pm.expect(element.ValueType).eq('DateTimeOffset');pm.expect(element.Value).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d+([+-][0-2]\\d:[0-5]\\d|Z)/);};",
											"test_map.instrumentConfigurationID=function (element) {pm.expect(element.Name).eq('instrumentConfigurationID');pm.expect(element.ValueType).eq('Integer');pm.expect(element.Value).to.be.a(\"number\");};",
											"",
											"test_schema={};",
											"test_schema.processingDate=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.processingCenter=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.processorName=function (num) {pm.expect(num).to.be.within(0,1)};",
											"test_schema.processorVersion=function (num) {pm.expect(num).to.be.within(0,1)};",
											"test_schema.platformShortName=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.platformSerialIdentifier=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.instrumentShortName=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.productType=function (num) {pm.expect(num).to.be.within(0,1)};",
											"test_schema.beginningDateTime=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.productGeneration=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.instrumentConfigurationID=function (num) {pm.expect(num).to.be.eq(1)};",
											"",
											"            ",
											"properties_map = {};",
											"properties_map.Id=function (element) {pm.expect(element.Id).to.match(/[0-9a-fA-F]{8}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{12}/);};",
											"properties_map.Name=function (element) {pm.expect(element.Name).to.be.a(\"string\");};",
											"properties_map.ContentType=function (element) {pm.expect(element.ContentType).to.be.a(\"string\");};",
											"properties_map.ContentLength=function (element) {pm.expect(element.ContentLength).to.be.a(\"number\");};",
											"properties_map.PublicationDate=function (element) {pm.expect(element.PublicationDate).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);};",
											"properties_map.EvictionDate=function (element) {if(element.EvictionDate){ pm.expect(element.EvictionDate).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d+([+-][0-2]\\d:[0-5]\\d|Z)/); }};",
											"properties_map.Checksum=function (element) {for(i=0; i<element.Checksum.length; i++ ){pm.expect(element.Checksum[i].Algorithm).to.be.oneOf([\"MD5\",\"SHA-1\",\"SHA-256\",\"SHA-512\"]);checksum_algorithm = {'MD5': '[a-fA-F0-9]{32}', 'SHA-1': '[0-9a-f]{5,40}', 'SHA-256': '[A-Fa-f0-9]{64}', 'SHA-512': '[A-Fa-f0-9]{128}'};pm.expect(element.Checksum[i].Value).to.match(new RegExp(checksum_algorithm[element.Checksum[i].Algorithm]));}};",
											"properties_map.ContentDate=function (element) {pm.expect(element.ContentDate[\"Start\"]).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);pm.expect(element.ContentDate[\"End\"]).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);};",
											"properties_map.ProductionType=function (element) {pm.expect(element.ProductionType).to.be.oneOf([\"systematic_production\",\"on-demand default\",\"on-demand non-default\"]);};",
											"properties_map.Footprint=function (element) {if(element.Footprint){ pm.expect(element.Footprint).to.match(/geography'SRID=\\d+;[Polygon|Multipolygon|Point](.*)/); }};",
											"",
											"let schema_seen = {};",
											"",
											"function testSpecific(value, product){",
											"",
											"    if (schema_seen[value.Name]){",
											"        schema_seen[value.Name]++;",
											"    }else{",
											"        schema_seen[value.Name]=1;",
											"    }",
											"",
											"    if (test_map[value.Name]) {",
											"        pm.test(\"Test Attribute \"+value.Name + \" for Product: \"+product.Name+\" - \"+product.Id, function(){test_map[value.Name](value, product)});",
											"    }",
											"    else {",
											"        pm.test.skip(\"Test Attribute \"+value.Name + \" for Product: \"+product.Name+\" - \"+product.Id);",
											"    }",
											"}",
											"function propertySpecific(key, product){",
											"    if (properties_map[key]) {",
											"        pm.test(\"Test Property \"+key+\" for Product: \"+product.Name+\" - \"+product.Id, function(){properties_map[key](product)});",
											"    }",
											"    else {",
											"        pm.test.skip(\"Test Property \"+key+\" for Product: \"+product.Name+\" - \"+product.Id);",
											"    }",
											"}",
											"",
											"for (var counter = 0;  counter  < jsonDataElements.length; counter++){",
											"    var product = jsonDataElements[counter];",
											"    console.log(\"Processing Product: \"+product.Name+\" - \"+product.Id);",
											"",
											"    for (const[key, value] of Object.entries(properties_map)){",
											"        propertySpecific(key, jsonDataElements[counter]);",
											"    }",
											"",
											"    if(\"Attributes\" in jsonDataElements[counter]){",
											"        schema_seen = {};",
											"",
											"        pm.test(\"Test Attributes list\", function(){",
											"            pm.expect(jsonDataElements[counter].Attributes.length).to.be.above(0);",
											"        });",
											"",
											"        jsonDataElements[counter].Attributes.forEach(function(elem){",
											"            testSpecific(elem, jsonDataElements[counter]);",
											"        });",
											"        var product = jsonDataElements[counter];",
											"        for (const[key, value] of Object.entries(test_schema)) {pm.test(\"Schema Attribute \"+key+\" Product \"+product.Name+\" - \"+product.Id, function(){",
											"        if(schema_seen[key] == undefined){",
											"            schema_seen[key] = 0;",
											"        }",
											"        value(schema_seen[key], product)});}",
											"    }",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{service-root-uri}}/odata/v1/Products?$expand=Attributes&$top=1&$filter=(contains(Name,'AUX_PP1') or contains(Name,'AUX_CAL') or contains(Name,'AUX_INS') or contains(Name,'AUX_PP2') or contains(Name,'AUX_SCS') or contains(Name,'AUX_WND') or contains(Name,'AUX_WAV') or contains(Name,'AUX_ICE') or contains(Name,'AUX_ECE')) and startswith(Name,'S1')\n",
									"host": [
										"{{service-root-uri}}"
									],
									"path": [
										"odata",
										"v1",
										"Products"
									],
									"query": [
										{
											"key": "$expand",
											"value": "Attributes"
										},
										{
											"key": "$top",
											"value": "1"
										},
										{
											"key": "$filter",
											"value": "(contains(Name,'AUX_PP1') or contains(Name,'AUX_CAL') or contains(Name,'AUX_INS') or contains(Name,'AUX_PP2') or contains(Name,'AUX_SCS') or contains(Name,'AUX_WND') or contains(Name,'AUX_WAV') or contains(Name,'AUX_ICE') or contains(Name,'AUX_ECE')) and startswith(Name,'S1')\n"
										},
										{
											"key": "$filter",
											"value": "contains(Name,'AUX_PP1') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'AUX_CAL') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'AUX_INS') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'AUX_PP2') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'AUX_SCS') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'AUX_WND') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'AUX_WAV') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'AUX_ICE') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'AUX_ECE') and startswith(Name,'S1')\n",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "S1_AUX_in_.EOF",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4f7c8503-2d46-488b-84d3-5da8d6000660",
										"exec": [
											"var jsonDataElements = pm.response.json().value;",
											"pm.test(\"Response time is less than \" +  environment[\"query-timeout\"] + \"ms\", function(){",
											"    pm.expect(pm.response.responseTime).to.be.below(parseInt(environment[\"query-timeout\"]));",
											"});",
											"",
											"pm.test(\"Test OData context\", function(){",
											"    query_string = pm.request.url.getQueryString();",
											"    if(query_string.includes(\"$expand=Attributes\")){",
											"        pm.expect( pm.response.json()['@odata.context']).to.include(\"$metadata#Products(Attributes())\");",
											"    } else{",
											"        pm.expect( pm.response.json()['@odata.context']).to.include(\"$metadata#Products\");",
											"    }",
											"});",
											"",
											"var TRUE = true;",
											"var FALSE = false;",
											"",
											"test_map={};",
											"test_map.platformShortName=function (element) {pm.expect(element.Name).eq('platformShortName');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"SENTINEL-1\"]);};",
											"test_map.platformSerialIdentifier=function (element) {pm.expect(element.Name).eq('platformSerialIdentifier');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"A\",\"B\",\"C\",\"D\",\"_¹\"]);};",
											"test_map.productType=function (element) {pm.expect(element.Name).eq('productType');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"AUX_RESATT\",\"AUX_PREORB\",\"AUX_POEORB\",\"AUX_RESORB\"]);",
											"",
											"};",
											"test_map.beginningDateTime=function (element) {pm.expect(element.Name).eq('beginningDateTime');pm.expect(element.ValueType).eq('DateTimeOffset');pm.expect(element.Value).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);};",
											"test_map.endingDateTime=function (element) {pm.expect(element.Name).eq('endingDateTime');pm.expect(element.ValueType).eq('DateTimeOffset');pm.expect(element.Value).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);};",
											"test_map.processingCenter=function (element) {pm.expect(element.Name).eq('processingCenter');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');};",
											"test_map.processorVersion=function (element) {pm.expect(element.Name).eq('processorVersion');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');};",
											"test_map.processingDate=function (element) {pm.expect(element.Name).eq('processingDate');pm.expect(element.ValueType).eq('DateTimeOffset');pm.expect(element.Value).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);};",
											"",
											"test_schema={};",
											"test_schema.platformShortName=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.platformSerialIdentifier=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.productType=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.beginningDateTime=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.endingDateTime=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.processingCenter=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.processorVersion=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.processingDate=function (num) {pm.expect(num).to.be.eq(1)};",
											"",
											"            ",
											"properties_map = {};",
											"properties_map.Id=function (element) {pm.expect(element.Id).to.match(/[0-9a-fA-F]{8}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{12}/);};",
											"properties_map.Name=function (element) {pm.expect(element.Name).to.be.a(\"string\");};",
											"properties_map.ContentType=function (element) {pm.expect(element.ContentType).to.be.a(\"string\");};",
											"properties_map.ContentLength=function (element) {pm.expect(element.ContentLength).to.be.a(\"number\");};",
											"properties_map.PublicationDate=function (element) {pm.expect(element.PublicationDate).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);};",
											"properties_map.EvictionDate=function (element) {if(element.EvictionDate){ pm.expect(element.EvictionDate).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d+([+-][0-2]\\d:[0-5]\\d|Z)/); }};",
											"properties_map.Checksum=function (element) {for(i=0; i<element.Checksum.length; i++ ){pm.expect(element.Checksum[i].Algorithm).to.be.oneOf([\"MD5\",\"SHA-1\",\"SHA-256\",\"SHA-512\"]);checksum_algorithm = {'MD5': '[a-fA-F0-9]{32}', 'SHA-1': '[0-9a-f]{5,40}', 'SHA-256': '[A-Fa-f0-9]{64}', 'SHA-512': '[A-Fa-f0-9]{128}'};pm.expect(element.Checksum[i].Value).to.match(new RegExp(checksum_algorithm[element.Checksum[i].Algorithm]));}};",
											"properties_map.ContentDate=function (element) {pm.expect(element.ContentDate[\"Start\"]).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);pm.expect(element.ContentDate[\"End\"]).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);};",
											"properties_map.ProductionType=function (element) {pm.expect(element.ProductionType).to.be.oneOf([\"systematic_production\",\"on-demand default\",\"on-demand non-default\"]);};",
											"properties_map.Footprint=function (element) {if(element.Footprint){ pm.expect(element.Footprint).to.match(/geography'SRID=\\d+;[Polygon|Multipolygon|Point](.*)/); }};",
											"",
											"let schema_seen = {};",
											"",
											"function testSpecific(value, product){",
											"",
											"    if (schema_seen[value.Name]){",
											"        schema_seen[value.Name]++;",
											"    }else{",
											"        schema_seen[value.Name]=1;",
											"    }",
											"",
											"    if (test_map[value.Name]) {",
											"        pm.test(\"Test Attribute \"+value.Name + \" for Product: \"+product.Name+\" - \"+product.Id, function(){test_map[value.Name](value, product)});",
											"    }",
											"    else {",
											"        pm.test.skip(\"Test Attribute \"+value.Name + \" for Product: \"+product.Name+\" - \"+product.Id);",
											"    }",
											"}",
											"function propertySpecific(key, product){",
											"    if (properties_map[key]) {",
											"        pm.test(\"Test Property \"+key+\" for Product: \"+product.Name+\" - \"+product.Id, function(){properties_map[key](product)});",
											"    }",
											"    else {",
											"        pm.test.skip(\"Test Property \"+key+\" for Product: \"+product.Name+\" - \"+product.Id);",
											"    }",
											"}",
											"",
											"for (var counter = 0;  counter  < jsonDataElements.length; counter++){",
											"    var product = jsonDataElements[counter];",
											"    console.log(\"Processing Product: \"+product.Name+\" - \"+product.Id);",
											"",
											"    for (const[key, value] of Object.entries(properties_map)){",
											"        propertySpecific(key, jsonDataElements[counter]);",
											"    }",
											"",
											"    if(\"Attributes\" in jsonDataElements[counter]){",
											"        schema_seen = {};",
											"",
											"        pm.test(\"Test Attributes list\", function(){",
											"            pm.expect(jsonDataElements[counter].Attributes.length).to.be.above(0);",
											"        });",
											"",
											"        jsonDataElements[counter].Attributes.forEach(function(elem){",
											"            testSpecific(elem, jsonDataElements[counter]);",
											"        });",
											"        var product = jsonDataElements[counter];",
											"        for (const[key, value] of Object.entries(test_schema)) {pm.test(\"Schema Attribute \"+key+\" Product \"+product.Name+\" - \"+product.Id, function(){",
											"        if(schema_seen[key] == undefined){",
											"            schema_seen[key] = 0;",
											"        }",
											"        value(schema_seen[key], product)});}",
											"    }",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{service-root-uri}}/odata/v1/Products?$expand=Attributes&$top=1&$filter=(contains(Name,'AUX_RESATT') or contains(Name,'AUX_PREORB') or contains(Name,'AUX_POEORB') or contains(Name,'AUX_RESORB')) and startswith(Name,'S1')\n",
									"host": [
										"{{service-root-uri}}"
									],
									"path": [
										"odata",
										"v1",
										"Products"
									],
									"query": [
										{
											"key": "$expand",
											"value": "Attributes"
										},
										{
											"key": "$top",
											"value": "1"
										},
										{
											"key": "$filter",
											"value": "(contains(Name,'AUX_RESATT') or contains(Name,'AUX_PREORB') or contains(Name,'AUX_POEORB') or contains(Name,'AUX_RESORB')) and startswith(Name,'S1')\n"
										},
										{
											"key": "$filter",
											"value": "contains(Name,'AUX_RESATT') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'AUX_PREORB') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'AUX_POEORB') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'AUX_RESORB') and startswith(Name,'S1')\n",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "S1_Level-0_GPS",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b25bb52c-6c17-4069-b400-f64679b85e36",
										"exec": [
											"var jsonDataElements = pm.response.json().value;",
											"pm.test(\"Response time is less than \" +  environment[\"query-timeout\"] + \"ms\", function(){",
											"    pm.expect(pm.response.responseTime).to.be.below(parseInt(environment[\"query-timeout\"]));",
											"});",
											"",
											"pm.test(\"Test OData context\", function(){",
											"    query_string = pm.request.url.getQueryString();",
											"    if(query_string.includes(\"$expand=Attributes\")){",
											"        pm.expect( pm.response.json()['@odata.context']).to.include(\"$metadata#Products(Attributes())\");",
											"    } else{",
											"        pm.expect( pm.response.json()['@odata.context']).to.include(\"$metadata#Products\");",
											"    }",
											"});",
											"",
											"var TRUE = true;",
											"var FALSE = false;",
											"",
											"test_map={};",
											"test_map.beginningDateTime=function (element) {pm.expect(element.Name).eq('beginningDateTime');pm.expect(element.ValueType).eq('DateTimeOffset');pm.expect(element.Value).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);};",
											"test_map.endingDateTime=function (element) {pm.expect(element.Name).eq('endingDateTime');pm.expect(element.ValueType).eq('DateTimeOffset');pm.expect(element.Value).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);};",
											"test_map.startTimeFromAscendingNode=function (element) {pm.expect(element.Name).eq('startTimeFromAscendingNode');pm.expect(element.ValueType).eq('Double');pm.expect(element.Value).to.be.a(\"number\");};",
											"test_map.completionTimeFromAscendingNode=function (element) {pm.expect(element.Name).eq('completionTimeFromAscendingNode');pm.expect(element.ValueType).eq('Double');pm.expect(element.Value).to.be.a(\"number\");};",
											"test_map.platformShortName=function (element) {pm.expect(element.Name).eq('platformShortName');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"SENTINEL-1\"]);};",
											"test_map.platformSerialIdentifier=function (element) {pm.expect(element.Name).eq('platformSerialIdentifier');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"A\",\"B\",\"C\",\"D\",\"_\"]);};",
											"test_map.instrumentShortName=function (element) {pm.expect(element.Name).eq('instrumentShortName');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"GPSR\"]);};",
											"test_map.orbitNumber=function (element) {pm.expect(element.Name).eq('orbitNumber');pm.expect(element.ValueType).eq('Integer');pm.expect(element.Value).to.be.a(\"number\");pm.expect(element.Value).to.match(/([1-9]|[1-8][0-9]|9[0-9]|[1-8][0-9]{2}|9[0-8][0-9]|99[0-9]|[1-8][0-9]{3}|9[0-8][0-9]{2}|99[0-8][0-9]|999[0-9]|[1-8][0-9]{4}|9[0-8][0-9]{3}|99[0-8][0-9]{2}|999[0-8][0-9]|9999[0-9]|[1-8][0-9]{5}|9[0-8][0-9]{4}|99[0-8][0-9]{3}|999[0-8][0-9]{2}|9999[0-8][0-9]|99999[0-9])/);};",
											"test_map.relativeOrbitNumber=function (element) {pm.expect(element.Name).eq('relativeOrbitNumber');pm.expect(element.ValueType).eq('Integer');pm.expect(element.Value).to.be.a(\"number\");pm.expect(element.Value).to.match(/([1-9]|[1-8][0-9]|9[0-9]|1[0-6][0-9]|17[0-5])/);};",
											"test_map.cycleNumber=function (element) {pm.expect(element.Name).eq('cycleNumber');pm.expect(element.ValueType).eq('Integer');pm.expect(element.Value).to.be.a(\"number\");pm.expect(element.Value).to.match(/([1-9]|[1-8][0-9]|9[0-9]|1[0-6][0-9]|17[0-5])/);};",
											"test_map.orbitDirection=function (element) {pm.expect(element.Name).eq('orbitDirection');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"ASCENDING\",\"DESCENDING\",\"UNKNOWN\"]);};",
											"test_map.processingDate=function (element) {pm.expect(element.Name).eq('processingDate');pm.expect(element.ValueType).eq('DateTimeOffset');pm.expect(element.Value).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);};",
											"test_map.processingCenter=function (element) {pm.expect(element.Name).eq('processingCenter');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');};",
											"test_map.processorName=function (element) {pm.expect(element.Name).eq('processorName');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');};",
											"test_map.processorVersion=function (element) {pm.expect(element.Name).eq('processorVersion');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');};",
											"test_map.productType=function (element) {pm.expect(element.Name).eq('productType');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"GP_RAW__0_\"]);",
											"",
											"};",
											"",
											"test_schema={};",
											"test_schema.beginningDateTime=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.endingDateTime=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.startTimeFromAscendingNode=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.completionTimeFromAscendingNode=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.platformShortName=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.platformSerialIdentifier=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.instrumentShortName=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.orbitNumber=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.relativeOrbitNumber=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.cycleNumber=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.orbitDirection=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.processingDate=function (num) {pm.expect(num).to.be.within(0,1)};",
											"test_schema.processingCenter=function (num) {pm.expect(num).to.be.within(0,1)};",
											"test_schema.processorName=function (num) {pm.expect(num).to.be.within(0,1)};",
											"test_schema.processorVersion=function (num) {pm.expect(num).to.be.within(0,1)};",
											"test_schema.productType=function (num) {pm.expect(num).to.be.eq(1)};",
											"",
											"            ",
											"properties_map = {};",
											"properties_map.Id=function (element) {pm.expect(element.Id).to.match(/[0-9a-fA-F]{8}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{12}/);};",
											"properties_map.Name=function (element) {pm.expect(element.Name).to.be.a(\"string\");};",
											"properties_map.ContentType=function (element) {pm.expect(element.ContentType).to.be.a(\"string\");};",
											"properties_map.ContentLength=function (element) {pm.expect(element.ContentLength).to.be.a(\"number\");};",
											"properties_map.PublicationDate=function (element) {pm.expect(element.PublicationDate).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);};",
											"properties_map.EvictionDate=function (element) {if(element.EvictionDate){ pm.expect(element.EvictionDate).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d+([+-][0-2]\\d:[0-5]\\d|Z)/); }};",
											"properties_map.Checksum=function (element) {for(i=0; i<element.Checksum.length; i++ ){pm.expect(element.Checksum[i].Algorithm).to.be.oneOf([\"MD5\",\"SHA-1\",\"SHA-256\",\"SHA-512\"]);checksum_algorithm = {'MD5': '[a-fA-F0-9]{32}', 'SHA-1': '[0-9a-f]{5,40}', 'SHA-256': '[A-Fa-f0-9]{64}', 'SHA-512': '[A-Fa-f0-9]{128}'};pm.expect(element.Checksum[i].Value).to.match(new RegExp(checksum_algorithm[element.Checksum[i].Algorithm]));}};",
											"properties_map.ContentDate=function (element) {pm.expect(element.ContentDate[\"Start\"]).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);pm.expect(element.ContentDate[\"End\"]).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);};",
											"properties_map.ProductionType=function (element) {pm.expect(element.ProductionType).to.be.oneOf([\"systematic_production\",\"on-demand default\",\"on-demand non-default\"]);};",
											"properties_map.Footprint=function (element) {if(element.Footprint){ pm.expect(element.Footprint).to.match(/geography'SRID=\\d+;[Polygon|Multipolygon|Point](.*)/); }};",
											"",
											"let schema_seen = {};",
											"",
											"function testSpecific(value, product){",
											"",
											"    if (schema_seen[value.Name]){",
											"        schema_seen[value.Name]++;",
											"    }else{",
											"        schema_seen[value.Name]=1;",
											"    }",
											"",
											"    if (test_map[value.Name]) {",
											"        pm.test(\"Test Attribute \"+value.Name + \" for Product: \"+product.Name+\" - \"+product.Id, function(){test_map[value.Name](value, product)});",
											"    }",
											"    else {",
											"        pm.test.skip(\"Test Attribute \"+value.Name + \" for Product: \"+product.Name+\" - \"+product.Id);",
											"    }",
											"}",
											"function propertySpecific(key, product){",
											"    if (properties_map[key]) {",
											"        pm.test(\"Test Property \"+key+\" for Product: \"+product.Name+\" - \"+product.Id, function(){properties_map[key](product)});",
											"    }",
											"    else {",
											"        pm.test.skip(\"Test Property \"+key+\" for Product: \"+product.Name+\" - \"+product.Id);",
											"    }",
											"}",
											"",
											"for (var counter = 0;  counter  < jsonDataElements.length; counter++){",
											"    var product = jsonDataElements[counter];",
											"    console.log(\"Processing Product: \"+product.Name+\" - \"+product.Id);",
											"",
											"    for (const[key, value] of Object.entries(properties_map)){",
											"        propertySpecific(key, jsonDataElements[counter]);",
											"    }",
											"",
											"    if(\"Attributes\" in jsonDataElements[counter]){",
											"        schema_seen = {};",
											"",
											"        pm.test(\"Test Attributes list\", function(){",
											"            pm.expect(jsonDataElements[counter].Attributes.length).to.be.above(0);",
											"        });",
											"",
											"        jsonDataElements[counter].Attributes.forEach(function(elem){",
											"            testSpecific(elem, jsonDataElements[counter]);",
											"        });",
											"        var product = jsonDataElements[counter];",
											"        for (const[key, value] of Object.entries(test_schema)) {pm.test(\"Schema Attribute \"+key+\" Product \"+product.Name+\" - \"+product.Id, function(){",
											"        if(schema_seen[key] == undefined){",
											"            schema_seen[key] = 0;",
											"        }",
											"        value(schema_seen[key], product)});}",
											"    }",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{service-root-uri}}/odata/v1/Products?$expand=Attributes&$top=1&$filter=(contains(Name,'GP_RAW__0_')) and startswith(Name,'S1')\n",
									"host": [
										"{{service-root-uri}}"
									],
									"path": [
										"odata",
										"v1",
										"Products"
									],
									"query": [
										{
											"key": "$expand",
											"value": "Attributes"
										},
										{
											"key": "$top",
											"value": "1"
										},
										{
											"key": "$filter",
											"value": "(contains(Name,'GP_RAW__0_')) and startswith(Name,'S1')\n"
										},
										{
											"key": "$filter",
											"value": "contains(Name,'GP_RAW__0_') and startswith(Name,'S1')\n",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "S1_L1+L2_Products",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "16ee82d8-661f-4908-bb06-40892cf25cd9",
										"exec": [
											"var jsonDataElements = pm.response.json().value;",
											"pm.test(\"Response time is less than \" +  environment[\"query-timeout\"] + \"ms\", function(){",
											"    pm.expect(pm.response.responseTime).to.be.below(parseInt(environment[\"query-timeout\"]));",
											"});",
											"",
											"pm.test(\"Test OData context\", function(){",
											"    query_string = pm.request.url.getQueryString();",
											"    if(query_string.includes(\"$expand=Attributes\")){",
											"        pm.expect( pm.response.json()['@odata.context']).to.include(\"$metadata#Products(Attributes())\");",
											"    } else{",
											"        pm.expect( pm.response.json()['@odata.context']).to.include(\"$metadata#Products\");",
											"    }",
											"});",
											"",
											"var TRUE = true;",
											"var FALSE = false;",
											"",
											"test_map={};",
											"test_map.processingDate=function (element) {pm.expect(element.Name).eq('processingDate');pm.expect(element.ValueType).eq('DateTimeOffset');pm.expect(element.Value).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);};",
											"test_map.processingCenter=function (element) {pm.expect(element.Name).eq('processingCenter');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');};",
											"test_map.processorName=function (element) {pm.expect(element.Name).eq('processorName');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');};",
											"test_map.processorVersion=function (element) {pm.expect(element.Name).eq('processorVersion');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');};",
											"test_map.beginningDateTime=function (element) {pm.expect(element.Name).eq('beginningDateTime');pm.expect(element.ValueType).eq('DateTimeOffset');pm.expect(element.Value).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);};",
											"test_map.endingDateTime=function (element) {pm.expect(element.Name).eq('endingDateTime');pm.expect(element.ValueType).eq('DateTimeOffset');pm.expect(element.Value).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);};",
											"test_map.startTimeFromAscendingNode=function (element) {pm.expect(element.Name).eq('startTimeFromAscendingNode');pm.expect(element.ValueType).eq('Double');pm.expect(element.Value).to.be.a(\"number\");};",
											"test_map.completionTimeFromAscendingNode=function (element) {pm.expect(element.Name).eq('completionTimeFromAscendingNode');pm.expect(element.ValueType).eq('Double');pm.expect(element.Value).to.be.a(\"number\");};",
											"test_map.platformShortName=function (element) {pm.expect(element.Name).eq('platformShortName');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"SENTINEL-1\"]);};",
											"test_map.platformSerialIdentifier=function (element) {pm.expect(element.Name).eq('platformSerialIdentifier');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"A\",\"B\",\"C\",\"D\",\"_\"]);};",
											"test_map.instrumentShortName=function (element) {pm.expect(element.Name).eq('instrumentShortName');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"SAR\"]);};",
											"test_map.operationalMode=function (element) {pm.expect(element.Name).eq('operationalMode');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"SM\",\"IW\",\"EW\",\"WV\"]);};",
											"test_map.swathIdentifier=function (element) {pm.expect(element.Name).eq('swathIdentifier');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');};",
											"test_map.orbitNumber=function (element) {pm.expect(element.Name).eq('orbitNumber');pm.expect(element.ValueType).eq('Integer');pm.expect(element.Value).to.be.a(\"number\");pm.expect(element.Value).to.match(/([1-9]|[1-8][0-9]|9[0-9]|[1-8][0-9]{2}|9[0-8][0-9]|99[0-9]|[1-8][0-9]{3}|9[0-8][0-9]{2}|99[0-8][0-9]|999[0-9]|[1-8][0-9]{4}|9[0-8][0-9]{3}|99[0-8][0-9]{2}|999[0-8][0-9]|9999[0-9]|[1-8][0-9]{5}|9[0-8][0-9]{4}|99[0-8][0-9]{3}|999[0-8][0-9]{2}|9999[0-8][0-9]|99999[0-9])/);};",
											"test_map.relativeOrbitNumber=function (element) {pm.expect(element.Name).eq('relativeOrbitNumber');pm.expect(element.ValueType).eq('Integer');pm.expect(element.Value).to.be.a(\"number\");pm.expect(element.Value).to.match(/([1-9]|[1-8][0-9]|9[0-9]|1[0-6][0-9]|17[0-5])/);};",
											"test_map.cycleNumber=function (element) {pm.expect(element.Name).eq('cycleNumber');pm.expect(element.ValueType).eq('Integer');pm.expect(element.Value).to.be.a(\"number\");pm.expect(element.Value).to.match(/([1-9]|[1-8][0-9]|9[0-9]|1[0-6][0-9]|17[0-5])/);};",
											"test_map.orbitDirection=function (element) {pm.expect(element.Name).eq('orbitDirection');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"ASCENDING\",\"DESCENDING\",\"UNKNOWN\"]);};",
											"test_map.coordinates=function (element) {pm.expect(element.Name).eq('coordinates');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.match(/(-?\\d+(\\.\\d+)?),\\s*(-?\\d+(\\.\\d+)?)/);};",
											"test_map.polarisationChannels=function (element) {pm.expect(element.Name).eq('polarisationChannels');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"HH\",\"VV\",\"HV\",\"VH\"]);};",
											"test_map.productType=function (element) {pm.expect(element.Name).eq('productType');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"S1_SLC__1S\",\"S2_SLC__1S\",\"S3_SLC__1S\",\"S4_SLC__1S\",\"S5_SLC__1S\",\"S6_SLC__1S\",\"S1_SLC__1A\",\"S2_SLC__1A\",\"S3_SLC__1A\",\"S4_SLC__1A\",\"S5_SLC__1A\",\"S6_SLC__1A\",\"S1_GRDF_1S\",\"S2_GRDF_1S\",\"S3_GRDF_1S\",\"S4_GRDF_1S\",\"S5_GRDF_1S\",\"S6_GRDF_1S\",\"S1_GRDF_1A\",\"S2_GRDF_1A\",\"S3_GRDF_1A\",\"S4_GRDF_1A\",\"S5_GRDF_1A\",\"S6_GRDF_1A\",\"S1_GRDH_1S\",\"S2_GRDH_1S\",\"S3_GRDH_1S\",\"S4_GRDH_1S\",\"S5_GRDH_1S\",\"S6_GRDH_1S\",\"S1_GRDH_1A\",\"S2_GRDH_1A\",\"S3_GRDH_1A\",\"S4_GRDH_1A\",\"S5_GRDH_1A\",\"S6_GRDH_1A\",\"S1_GRDM_1S\",\"S2_GRDM_1S\",\"S3_GRDM_1S\",\"S4_GRDM_1S\",\"S5_GRDM_1S\",\"S6_GRDM_1S\",\"S1_GRDM_1A\",\"S2_GRDM_1A\",\"S3_GRDM_1A\",\"S4_GRDM_1A\",\"S5_GRDM_1A\",\"S6_GRDM_1A\",\"S1_RTC__1S\",\"S2_RTC__1S\",\"S3_RTC__1S\",\"S4_RTC__1S\",\"S5_RTC__1S\",\"S6_RTC__1S\",\"S1_OCN__2S\",\"S2_OCN__2S\",\"S3_OCN__2S\",\"S4_OCN__2S\",\"S5_OCN__2S\",\"S6_OCN__2S\",\"S1_OCN__2A\",\"S2_OCN__2A\",\"S3_OCN__2A\",\"S4_OCN__2A\",\"S5_OCN__2A\",\"S6_OCN__2A\",\"IW_SLC__1S\",\"IW_SLC__1A\",\"IW_GRDH_1S\",\"IW_GRDH_1A\",\"IW_GRDM_1S\",\"IW_GRDM_1A\",\"IW_RTC__1S\",\"IW_OCN__2S\",\"IW_OCN__2A\",\"EW_SLC__1S\",\"EW_SLC__1A\",\"EW_GRDH_1S\",\"EW_GRDH_1A\",\"EW_GRDM_1S\",\"EW_GRDM_1A\",\"EW_RTC__1S\",\"EW_OCN__2S\",\"EW_OCN__2A\",\"WV_SLC__1S\",\"WV_SLC__1A\",\"WV_GRDM_1S\",\"WV_GRDM_1A\",\"WV_OCN__2S\",\"WV_OCN__2A\"]);",
											"",
											"};",
											"test_map.timeliness=function (element) {pm.expect(element.Name).eq('timeliness');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"NRT-10m\",\"NRT-1h\",\"NRT-3h\",\"Fast-24h\",\"Off-line\",\"Reprocessing\"]);};",
											"test_map.instrumentConfigurationID=function (element) {pm.expect(element.Name).eq('instrumentConfigurationID');pm.expect(element.ValueType).eq('Integer');pm.expect(element.Value).to.be.a(\"number\");};",
											"test_map.datatakeID=function (element) {pm.expect(element.Name).eq('datatakeID');pm.expect(element.ValueType).eq('Integer');pm.expect(element.Value).to.be.a(\"number\");};",
											"test_map.productClass=function (element) {pm.expect(element.Name).eq('productClass');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');};",
											"test_map.productComposition=function (element) {pm.expect(element.Name).eq('productComposition');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');};",
											"test_map.sliceProductFlag=function (element) {pm.expect(element.Name).eq('sliceProductFlag');pm.expect(element.ValueType).eq('Boolean');pm.expect(element.Value).to.be.oneOf([\"TRUE\",\"FALSE\",\"true\",\"false\"]);};",
											"test_map.segmentStartTime=function (element) {pm.expect(element.Name).eq('segmentStartTime');pm.expect(element.ValueType).eq('DateTimeOffset');pm.expect(element.Value).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d+([+-][0-2]\\d:[0-5]\\d|Z)/);};",
											"test_map.sliceNumber=function (element) {pm.expect(element.Name).eq('sliceNumber');pm.expect(element.ValueType).eq('Integer');pm.expect(element.Value).to.be.a(\"number\");};",
											"test_map.totalSlices=function (element) {pm.expect(element.Name).eq('totalSlices');pm.expect(element.ValueType).eq('Integer');pm.expect(element.Value).to.be.a(\"number\");};",
											"",
											"test_schema={};",
											"test_schema.processingDate=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.processingCenter=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.processorName=function (num) {pm.expect(num).to.be.within(0,1)};",
											"test_schema.processorVersion=function (num) {pm.expect(num).to.be.within(0,1)};",
											"test_schema.beginningDateTime=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.endingDateTime=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.startTimeFromAscendingNode=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.completionTimeFromAscendingNode=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.platformShortName=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.platformSerialIdentifier=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.instrumentShortName=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.operationalMode=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.swathIdentifier=function (num) {pm.expect(num).to.be.within(1,5)};",
											"test_schema.orbitNumber=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.relativeOrbitNumber=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.cycleNumber=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.orbitDirection=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.coordinates=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.polarisationChannels=function (num) {pm.expect(num).to.be.within(1,2)};",
											"test_schema.productType=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.timeliness=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.instrumentConfigurationID=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.datatakeID=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.productClass=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.productComposition=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.sliceProductFlag=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.segmentStartTime=function (num) {pm.expect(num).to.be.within(0,1)};",
											"test_schema.sliceNumber=function (num) {pm.expect(num).to.be.within(0,1)};",
											"test_schema.totalSlices=function (num) {pm.expect(num).to.be.within(0,1)};",
											"",
											"            ",
											"properties_map = {};",
											"properties_map.Id=function (element) {pm.expect(element.Id).to.match(/[0-9a-fA-F]{8}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{12}/);};",
											"properties_map.Name=function (element) {pm.expect(element.Name).to.be.a(\"string\");};",
											"properties_map.ContentType=function (element) {pm.expect(element.ContentType).to.be.a(\"string\");};",
											"properties_map.ContentLength=function (element) {pm.expect(element.ContentLength).to.be.a(\"number\");};",
											"properties_map.PublicationDate=function (element) {pm.expect(element.PublicationDate).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);};",
											"properties_map.EvictionDate=function (element) {if(element.EvictionDate){ pm.expect(element.EvictionDate).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d+([+-][0-2]\\d:[0-5]\\d|Z)/); }};",
											"properties_map.Checksum=function (element) {for(i=0; i<element.Checksum.length; i++ ){pm.expect(element.Checksum[i].Algorithm).to.be.oneOf([\"MD5\",\"SHA-1\",\"SHA-256\",\"SHA-512\"]);checksum_algorithm = {'MD5': '[a-fA-F0-9]{32}', 'SHA-1': '[0-9a-f]{5,40}', 'SHA-256': '[A-Fa-f0-9]{64}', 'SHA-512': '[A-Fa-f0-9]{128}'};pm.expect(element.Checksum[i].Value).to.match(new RegExp(checksum_algorithm[element.Checksum[i].Algorithm]));}};",
											"properties_map.ContentDate=function (element) {pm.expect(element.ContentDate[\"Start\"]).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);pm.expect(element.ContentDate[\"End\"]).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);};",
											"properties_map.ProductionType=function (element) {pm.expect(element.ProductionType).to.be.oneOf([\"systematic_production\",\"on-demand default\",\"on-demand non-default\"]);};",
											"properties_map.Footprint=function (element) {if(element.Footprint){ pm.expect(element.Footprint).to.match(/geography'SRID=\\d+;[Polygon|Multipolygon|Point](.*)/); }};",
											"",
											"let schema_seen = {};",
											"",
											"function testSpecific(value, product){",
											"",
											"    if (schema_seen[value.Name]){",
											"        schema_seen[value.Name]++;",
											"    }else{",
											"        schema_seen[value.Name]=1;",
											"    }",
											"",
											"    if (test_map[value.Name]) {",
											"        pm.test(\"Test Attribute \"+value.Name + \" for Product: \"+product.Name+\" - \"+product.Id, function(){test_map[value.Name](value, product)});",
											"    }",
											"    else {",
											"        pm.test.skip(\"Test Attribute \"+value.Name + \" for Product: \"+product.Name+\" - \"+product.Id);",
											"    }",
											"}",
											"function propertySpecific(key, product){",
											"    if (properties_map[key]) {",
											"        pm.test(\"Test Property \"+key+\" for Product: \"+product.Name+\" - \"+product.Id, function(){properties_map[key](product)});",
											"    }",
											"    else {",
											"        pm.test.skip(\"Test Property \"+key+\" for Product: \"+product.Name+\" - \"+product.Id);",
											"    }",
											"}",
											"",
											"for (var counter = 0;  counter  < jsonDataElements.length; counter++){",
											"    var product = jsonDataElements[counter];",
											"    console.log(\"Processing Product: \"+product.Name+\" - \"+product.Id);",
											"",
											"    for (const[key, value] of Object.entries(properties_map)){",
											"        propertySpecific(key, jsonDataElements[counter]);",
											"    }",
											"",
											"    if(\"Attributes\" in jsonDataElements[counter]){",
											"        schema_seen = {};",
											"",
											"        pm.test(\"Test Attributes list\", function(){",
											"            pm.expect(jsonDataElements[counter].Attributes.length).to.be.above(0);",
											"        });",
											"",
											"        jsonDataElements[counter].Attributes.forEach(function(elem){",
											"            testSpecific(elem, jsonDataElements[counter]);",
											"        });",
											"        var product = jsonDataElements[counter];",
											"        for (const[key, value] of Object.entries(test_schema)) {pm.test(\"Schema Attribute \"+key+\" Product \"+product.Name+\" - \"+product.Id, function(){",
											"        if(schema_seen[key] == undefined){",
											"            schema_seen[key] = 0;",
											"        }",
											"        value(schema_seen[key], product)});}",
											"    }",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{service-root-uri}}/odata/v1/Products?$expand=Attributes&$top=1&$filter=(contains(Name,'S1_SLC__1S') or contains(Name,'S2_SLC__1S') or contains(Name,'S3_SLC__1S') or contains(Name,'S4_SLC__1S') or contains(Name,'S5_SLC__1S') or contains(Name,'S6_SLC__1S') or contains(Name,'S1_SLC__1A') or contains(Name,'S2_SLC__1A') or contains(Name,'S3_SLC__1A') or contains(Name,'S4_SLC__1A') or contains(Name,'S5_SLC__1A') or contains(Name,'S6_SLC__1A') or contains(Name,'S1_GRDF_1S') or contains(Name,'S2_GRDF_1S') or contains(Name,'S3_GRDF_1S') or contains(Name,'S4_GRDF_1S') or contains(Name,'S5_GRDF_1S') or contains(Name,'S6_GRDF_1S') or contains(Name,'S1_GRDF_1A') or contains(Name,'S2_GRDF_1A') or contains(Name,'S3_GRDF_1A') or contains(Name,'S4_GRDF_1A') or contains(Name,'S5_GRDF_1A') or contains(Name,'S6_GRDF_1A') or contains(Name,'S1_GRDH_1S') or contains(Name,'S2_GRDH_1S') or contains(Name,'S3_GRDH_1S') or contains(Name,'S4_GRDH_1S') or contains(Name,'S5_GRDH_1S') or contains(Name,'S6_GRDH_1S') or contains(Name,'S1_GRDH_1A') or contains(Name,'S2_GRDH_1A') or contains(Name,'S3_GRDH_1A') or contains(Name,'S4_GRDH_1A') or contains(Name,'S5_GRDH_1A') or contains(Name,'S6_GRDH_1A') or contains(Name,'S1_GRDM_1S') or contains(Name,'S2_GRDM_1S') or contains(Name,'S3_GRDM_1S') or contains(Name,'S4_GRDM_1S') or contains(Name,'S5_GRDM_1S') or contains(Name,'S6_GRDM_1S') or contains(Name,'S1_GRDM_1A') or contains(Name,'S2_GRDM_1A') or contains(Name,'S3_GRDM_1A') or contains(Name,'S4_GRDM_1A') or contains(Name,'S5_GRDM_1A') or contains(Name,'S6_GRDM_1A') or contains(Name,'S1_RTC__1S') or contains(Name,'S2_RTC__1S') or contains(Name,'S3_RTC__1S') or contains(Name,'S4_RTC__1S') or contains(Name,'S5_RTC__1S') or contains(Name,'S6_RTC__1S') or contains(Name,'S1_OCN__2S') or contains(Name,'S2_OCN__2S') or contains(Name,'S3_OCN__2S') or contains(Name,'S4_OCN__2S') or contains(Name,'S5_OCN__2S') or contains(Name,'S6_OCN__2S') or contains(Name,'S1_OCN__2A') or contains(Name,'S2_OCN__2A') or contains(Name,'S3_OCN__2A') or contains(Name,'S4_OCN__2A') or contains(Name,'S5_OCN__2A') or contains(Name,'S6_OCN__2A') or contains(Name,'IW_SLC__1S') or contains(Name,'IW_SLC__1A') or contains(Name,'IW_GRDH_1S') or contains(Name,'IW_GRDH_1A') or contains(Name,'IW_GRDM_1S') or contains(Name,'IW_GRDM_1A') or contains(Name,'IW_RTC__1S') or contains(Name,'IW_OCN__2S') or contains(Name,'IW_OCN__2A') or contains(Name,'EW_SLC__1S') or contains(Name,'EW_SLC__1A') or contains(Name,'EW_GRDH_1S') or contains(Name,'EW_GRDH_1A') or contains(Name,'EW_GRDM_1S') or contains(Name,'EW_GRDM_1A') or contains(Name,'EW_RTC__1S') or contains(Name,'EW_OCN__2S') or contains(Name,'EW_OCN__2A') or contains(Name,'WV_SLC__1S') or contains(Name,'WV_SLC__1A') or contains(Name,'WV_GRDM_1S') or contains(Name,'WV_GRDM_1A') or contains(Name,'WV_OCN__2S') or contains(Name,'WV_OCN__2A')) and startswith(Name,'S1')\n",
									"host": [
										"{{service-root-uri}}"
									],
									"path": [
										"odata",
										"v1",
										"Products"
									],
									"query": [
										{
											"key": "$expand",
											"value": "Attributes"
										},
										{
											"key": "$top",
											"value": "1"
										},
										{
											"key": "$filter",
											"value": "(contains(Name,'S1_SLC__1S') or contains(Name,'S2_SLC__1S') or contains(Name,'S3_SLC__1S') or contains(Name,'S4_SLC__1S') or contains(Name,'S5_SLC__1S') or contains(Name,'S6_SLC__1S') or contains(Name,'S1_SLC__1A') or contains(Name,'S2_SLC__1A') or contains(Name,'S3_SLC__1A') or contains(Name,'S4_SLC__1A') or contains(Name,'S5_SLC__1A') or contains(Name,'S6_SLC__1A') or contains(Name,'S1_GRDF_1S') or contains(Name,'S2_GRDF_1S') or contains(Name,'S3_GRDF_1S') or contains(Name,'S4_GRDF_1S') or contains(Name,'S5_GRDF_1S') or contains(Name,'S6_GRDF_1S') or contains(Name,'S1_GRDF_1A') or contains(Name,'S2_GRDF_1A') or contains(Name,'S3_GRDF_1A') or contains(Name,'S4_GRDF_1A') or contains(Name,'S5_GRDF_1A') or contains(Name,'S6_GRDF_1A') or contains(Name,'S1_GRDH_1S') or contains(Name,'S2_GRDH_1S') or contains(Name,'S3_GRDH_1S') or contains(Name,'S4_GRDH_1S') or contains(Name,'S5_GRDH_1S') or contains(Name,'S6_GRDH_1S') or contains(Name,'S1_GRDH_1A') or contains(Name,'S2_GRDH_1A') or contains(Name,'S3_GRDH_1A') or contains(Name,'S4_GRDH_1A') or contains(Name,'S5_GRDH_1A') or contains(Name,'S6_GRDH_1A') or contains(Name,'S1_GRDM_1S') or contains(Name,'S2_GRDM_1S') or contains(Name,'S3_GRDM_1S') or contains(Name,'S4_GRDM_1S') or contains(Name,'S5_GRDM_1S') or contains(Name,'S6_GRDM_1S') or contains(Name,'S1_GRDM_1A') or contains(Name,'S2_GRDM_1A') or contains(Name,'S3_GRDM_1A') or contains(Name,'S4_GRDM_1A') or contains(Name,'S5_GRDM_1A') or contains(Name,'S6_GRDM_1A') or contains(Name,'S1_RTC__1S') or contains(Name,'S2_RTC__1S') or contains(Name,'S3_RTC__1S') or contains(Name,'S4_RTC__1S') or contains(Name,'S5_RTC__1S') or contains(Name,'S6_RTC__1S') or contains(Name,'S1_OCN__2S') or contains(Name,'S2_OCN__2S') or contains(Name,'S3_OCN__2S') or contains(Name,'S4_OCN__2S') or contains(Name,'S5_OCN__2S') or contains(Name,'S6_OCN__2S') or contains(Name,'S1_OCN__2A') or contains(Name,'S2_OCN__2A') or contains(Name,'S3_OCN__2A') or contains(Name,'S4_OCN__2A') or contains(Name,'S5_OCN__2A') or contains(Name,'S6_OCN__2A') or contains(Name,'IW_SLC__1S') or contains(Name,'IW_SLC__1A') or contains(Name,'IW_GRDH_1S') or contains(Name,'IW_GRDH_1A') or contains(Name,'IW_GRDM_1S') or contains(Name,'IW_GRDM_1A') or contains(Name,'IW_RTC__1S') or contains(Name,'IW_OCN__2S') or contains(Name,'IW_OCN__2A') or contains(Name,'EW_SLC__1S') or contains(Name,'EW_SLC__1A') or contains(Name,'EW_GRDH_1S') or contains(Name,'EW_GRDH_1A') or contains(Name,'EW_GRDM_1S') or contains(Name,'EW_GRDM_1A') or contains(Name,'EW_RTC__1S') or contains(Name,'EW_OCN__2S') or contains(Name,'EW_OCN__2A') or contains(Name,'WV_SLC__1S') or contains(Name,'WV_SLC__1A') or contains(Name,'WV_GRDM_1S') or contains(Name,'WV_GRDM_1A') or contains(Name,'WV_OCN__2S') or contains(Name,'WV_OCN__2A')) and startswith(Name,'S1')\n"
										},
										{
											"key": "$filter",
											"value": "contains(Name,'S1_SLC__1S') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'S2_SLC__1S') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'S3_SLC__1S') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'S4_SLC__1S') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'S5_SLC__1S') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'S6_SLC__1S') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'S1_SLC__1A') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'S2_SLC__1A') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'S3_SLC__1A') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'S4_SLC__1A') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'S5_SLC__1A') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'S6_SLC__1A') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'S1_GRDF_1S') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'S2_GRDF_1S') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'S3_GRDF_1S') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'S4_GRDF_1S') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'S5_GRDF_1S') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'S6_GRDF_1S') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'S1_GRDF_1A') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'S2_GRDF_1A') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'S3_GRDF_1A') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'S4_GRDF_1A') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'S5_GRDF_1A') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'S6_GRDF_1A') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'S1_GRDH_1S') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'S2_GRDH_1S') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'S3_GRDH_1S') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'S4_GRDH_1S') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'S5_GRDH_1S') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'S6_GRDH_1S') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'S1_GRDH_1A') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'S2_GRDH_1A') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'S3_GRDH_1A') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'S4_GRDH_1A') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'S5_GRDH_1A') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'S6_GRDH_1A') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'S1_GRDM_1S') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'S2_GRDM_1S') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'S3_GRDM_1S') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'S4_GRDM_1S') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'S5_GRDM_1S') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'S6_GRDM_1S') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'S1_GRDM_1A') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'S2_GRDM_1A') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'S3_GRDM_1A') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'S4_GRDM_1A') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'S5_GRDM_1A') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'S6_GRDM_1A') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'S1_RTC__1S') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'S2_RTC__1S') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'S3_RTC__1S') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'S4_RTC__1S') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'S5_RTC__1S') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'S6_RTC__1S') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'S1_OCN__2S') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'S2_OCN__2S') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'S3_OCN__2S') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'S4_OCN__2S') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'S5_OCN__2S') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'S6_OCN__2S') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'S1_OCN__2A') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'S2_OCN__2A') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'S3_OCN__2A') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'S4_OCN__2A') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'S5_OCN__2A') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'S6_OCN__2A') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'IW_SLC__1S') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'IW_SLC__1A') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'IW_GRDH_1S') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'IW_GRDH_1A') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'IW_GRDM_1S') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'IW_GRDM_1A') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'IW_RTC__1S') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'IW_OCN__2S') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'IW_OCN__2A') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'EW_SLC__1S') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'EW_SLC__1A') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'EW_GRDH_1S') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'EW_GRDH_1A') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'EW_GRDM_1S') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'EW_GRDM_1A') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'EW_RTC__1S') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'EW_OCN__2S') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'EW_OCN__2A') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'WV_SLC__1S') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'WV_SLC__1A') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'WV_GRDM_1S') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'WV_GRDM_1A') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'WV_OCN__2S') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'WV_OCN__2A') and startswith(Name,'S1')\n",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "S1_Level-0_Std+Ann",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3c80f347-8a01-4aaf-85c3-2d003ee34348",
										"exec": [
											"var jsonDataElements = pm.response.json().value;",
											"pm.test(\"Response time is less than \" +  environment[\"query-timeout\"] + \"ms\", function(){",
											"    pm.expect(pm.response.responseTime).to.be.below(parseInt(environment[\"query-timeout\"]));",
											"});",
											"",
											"pm.test(\"Test OData context\", function(){",
											"    query_string = pm.request.url.getQueryString();",
											"    if(query_string.includes(\"$expand=Attributes\")){",
											"        pm.expect( pm.response.json()['@odata.context']).to.include(\"$metadata#Products(Attributes())\");",
											"    } else{",
											"        pm.expect( pm.response.json()['@odata.context']).to.include(\"$metadata#Products\");",
											"    }",
											"});",
											"",
											"var TRUE = true;",
											"var FALSE = false;",
											"",
											"test_map={};",
											"test_map.beginningDateTime=function (element) {pm.expect(element.Name).eq('beginningDateTime');pm.expect(element.ValueType).eq('DateTimeOffset');pm.expect(element.Value).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);};",
											"test_map.endingDateTime=function (element) {pm.expect(element.Name).eq('endingDateTime');pm.expect(element.ValueType).eq('DateTimeOffset');pm.expect(element.Value).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);};",
											"test_map.startTimeFromAscendingNode=function (element) {pm.expect(element.Name).eq('startTimeFromAscendingNode');pm.expect(element.ValueType).eq('Double');pm.expect(element.Value).to.be.a(\"number\");};",
											"test_map.completionTimeFromAscendingNode=function (element) {pm.expect(element.Name).eq('completionTimeFromAscendingNode');pm.expect(element.ValueType).eq('Double');pm.expect(element.Value).to.be.a(\"number\");};",
											"test_map.platformShortName=function (element) {pm.expect(element.Name).eq('platformShortName');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"SENTINEL-1\"]);};",
											"test_map.platformSerialIdentifier=function (element) {pm.expect(element.Name).eq('platformSerialIdentifier');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"A\",\"B\",\"C\",\"D\",\"_\"]);};",
											"test_map.instrumentShortName=function (element) {pm.expect(element.Name).eq('instrumentShortName');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"SAR\"]);};",
											"test_map.operationalMode=function (element) {pm.expect(element.Name).eq('operationalMode');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"SM\",\"IW\",\"EW\",\"WV\",\"RF\",\"EN\",\"AN\"]);};",
											"test_map.swathIdentifier=function (element) {pm.expect(element.Name).eq('swathIdentifier');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"1\",\"2\",\"3\",\"4\",\"5\",\"6\"]);};",
											"test_map.polarisationChannels=function (element) {pm.expect(element.Name).eq('polarisationChannels');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"HH\",\"VV\",\"HV\",\"VH\"]);};",
											"test_map.orbitNumber=function (element) {pm.expect(element.Name).eq('orbitNumber');pm.expect(element.ValueType).eq('Integer');pm.expect(element.Value).to.be.a(\"number\");pm.expect(element.Value).to.match(/([1-9]|[1-8][0-9]|9[0-9]|[1-8][0-9]{2}|9[0-8][0-9]|99[0-9]|[1-8][0-9]{3}|9[0-8][0-9]{2}|99[0-8][0-9]|999[0-9]|[1-8][0-9]{4}|9[0-8][0-9]{3}|99[0-8][0-9]{2}|999[0-8][0-9]|9999[0-9]|[1-8][0-9]{5}|9[0-8][0-9]{4}|99[0-8][0-9]{3}|999[0-8][0-9]{2}|9999[0-8][0-9]|99999[0-9])/);};",
											"test_map.relativeOrbitNumber=function (element) {pm.expect(element.Name).eq('relativeOrbitNumber');pm.expect(element.ValueType).eq('Integer');pm.expect(element.Value).to.be.a(\"number\");pm.expect(element.Value).to.match(/([1-9]|[1-8][0-9]|9[0-9]|1[0-6][0-9]|17[0-5])/);};",
											"test_map.cycleNumber=function (element) {pm.expect(element.Name).eq('cycleNumber');pm.expect(element.ValueType).eq('Integer');pm.expect(element.Value).to.be.a(\"number\");pm.expect(element.Value).to.match(/([1-9]|[1-8][0-9]|9[0-9]|1[0-6][0-9]|17[0-5])/);};",
											"test_map.orbitDirection=function (element) {pm.expect(element.Name).eq('orbitDirection');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"ASCENDING\",\"DESCENDING\",\"UNKNOWN\"]);};",
											"test_map.processingDate=function (element) {pm.expect(element.Name).eq('processingDate');pm.expect(element.ValueType).eq('DateTimeOffset');pm.expect(element.Value).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);};",
											"test_map.processingCenter=function (element) {pm.expect(element.Name).eq('processingCenter');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');};",
											"test_map.processorName=function (element) {pm.expect(element.Name).eq('processorName');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');};",
											"test_map.processorVersion=function (element) {pm.expect(element.Name).eq('processorVersion');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');};",
											"test_map.coordinates=function (element) {pm.expect(element.Name).eq('coordinates');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.match(/(-?\\d+(\\.\\d+)?),\\s*(-?\\d+(\\.\\d+)?)/);};",
											"test_map.productType=function (element) {pm.expect(element.Name).eq('productType');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"S1_RAW__0S\",\"S2_RAW__0S\",\"S3_RAW__0S\",\"S4_RAW__0S\",\"S5_RAW__0S\",\"S6_RAW__0S\",\"IW_RAW__0S\",\"EW_RAW__0S\",\"WV_RAW__0S\",\"RF_RAW__0S\",\"EN_RAW__0S\",\"N1_RAW__0S\",\"N2_RAW__0S\",\"N3_RAW__0S\",\"N4_RAW__0S\",\"N5_RAW__0S\",\"N6_RAW__0S\",\"S1_RAW__0A\",\"S2_RAW__0A\",\"S3_RAW__0A\",\"S4_RAW__0A\",\"S5_RAW__0A\",\"S6_RAW__0A\",\"IW_RAW__0A\",\"EW_RAW__0A\",\"WV_RAW__0A\"]);",
											"",
											"};",
											"test_map.productClass=function (element) {pm.expect(element.Name).eq('productClass');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"A\",\"S\"]);};",
											"test_map.productConsolidation=function (element) {pm.expect(element.Name).eq('productConsolidation');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"SLICE\",\"SLICE PARTIAL\",\"FULL\"]);};",
											"test_map.instrumentConfigurationID=function (element) {pm.expect(element.Name).eq('instrumentConfigurationID');pm.expect(element.ValueType).eq('Integer');pm.expect(element.Value).to.be.a(\"number\");pm.expect(element.Value).to.match(/([1-9]|[1-8][0-9]|9[0-9]|[1-8][0-9]{2}|9[0-8][0-9]|99[0-9]|[1-8][0-9]{3}|9[0-8][0-9]{2}|99[0-8][0-9]|999[0-9]|[1-8][0-9]{4}|9[0-8][0-9]{3}|99[0-8][0-9]{2}|999[0-8][0-9]|9999[0-9]|[1-8][0-9]{5}|9[0-8][0-9]{4}|99[0-8][0-9]{3}|999[0-8][0-9]{2}|9999[0-8][0-9]|99999[0-9]|[1-8][0-9]{6}|9[0-8][0-9]{5}|99[0-8][0-9]{4}|999[0-8][0-9]{3}|9999[0-8][0-9]{2}|99999[0-8][0-9]|999999[0-9]|1[0-5][0-9]{6}|16[0-6][0-9]{5}|167[0-6][0-9]{4}|1677[0-6][0-9]{3}|16777[01][0-9]{2}|1677720[0-9]|1677721[0-5])/);};",
											"test_map.datatakeID=function (element) {pm.expect(element.Name).eq('datatakeID');pm.expect(element.ValueType).eq('Integer');pm.expect(element.Value).to.be.a(\"number\");pm.expect(element.Value).to.match(/([1-9]|[1-8][0-9]|9[0-9]|[1-8][0-9]{2}|9[0-8][0-9]|99[0-9]|[1-8][0-9]{3}|9[0-8][0-9]{2}|99[0-8][0-9]|999[0-9]|[1-8][0-9]{4}|9[0-8][0-9]{3}|99[0-8][0-9]{2}|999[0-8][0-9]|9999[0-9]|[1-8][0-9]{5}|9[0-8][0-9]{4}|99[0-8][0-9]{3}|999[0-8][0-9]{2}|9999[0-8][0-9]|99999[0-9]|[1-7][0-9]{6}|8[0-2][0-9]{5}|83[0-7][0-9]{4}|838[0-7][0-9]{3}|8388[0-5][0-9]{2}|838860[0-7])/);};",
											"test_map.sliceProductFlag=function (element) {pm.expect(element.Name).eq('sliceProductFlag');pm.expect(element.ValueType).eq('Boolean');pm.expect(element.Value).to.be.oneOf([\"TRUE\",\"FALSE\",\"true\",\"false\"]);};",
											"test_map.sliceNumber=function (element) {pm.expect(element.Name).eq('sliceNumber');pm.expect(element.ValueType).eq('Integer');pm.expect(element.Value).to.be.a(\"number\");};",
											"test_map.totalSlices=function (element) {pm.expect(element.Name).eq('totalSlices');pm.expect(element.ValueType).eq('Integer');pm.expect(element.Value).to.be.a(\"number\");};",
											"",
											"test_schema={};",
											"test_schema.beginningDateTime=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.endingDateTime=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.startTimeFromAscendingNode=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.completionTimeFromAscendingNode=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.platformShortName=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.platformSerialIdentifier=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.instrumentShortName=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.operationalMode=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.swathIdentifier=function (num) {pm.expect(num).to.be.within(0,1)};",
											"test_schema.polarisationChannels=function (num) {pm.expect(num).to.be.within(1,2)};",
											"test_schema.orbitNumber=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.relativeOrbitNumber=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.cycleNumber=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.orbitDirection=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.processingDate=function (num) {pm.expect(num).to.be.within(0,1)};",
											"test_schema.processingCenter=function (num) {pm.expect(num).to.be.within(0,1)};",
											"test_schema.processorName=function (num) {pm.expect(num).to.be.within(0,1)};",
											"test_schema.processorVersion=function (num) {pm.expect(num).to.be.within(0,1)};",
											"test_schema.coordinates=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.productType=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.productClass=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.productConsolidation=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.instrumentConfigurationID=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.datatakeID=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.sliceProductFlag=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.sliceNumber=function (num) {pm.expect(num).to.be.within(0,1)};",
											"test_schema.totalSlices=function (num) {pm.expect(num).to.be.within(0,1)};",
											"",
											"            ",
											"properties_map = {};",
											"properties_map.Id=function (element) {pm.expect(element.Id).to.match(/[0-9a-fA-F]{8}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{12}/);};",
											"properties_map.Name=function (element) {pm.expect(element.Name).to.be.a(\"string\");};",
											"properties_map.ContentType=function (element) {pm.expect(element.ContentType).to.be.a(\"string\");};",
											"properties_map.ContentLength=function (element) {pm.expect(element.ContentLength).to.be.a(\"number\");};",
											"properties_map.PublicationDate=function (element) {pm.expect(element.PublicationDate).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);};",
											"properties_map.EvictionDate=function (element) {if(element.EvictionDate){ pm.expect(element.EvictionDate).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d+([+-][0-2]\\d:[0-5]\\d|Z)/); }};",
											"properties_map.Checksum=function (element) {for(i=0; i<element.Checksum.length; i++ ){pm.expect(element.Checksum[i].Algorithm).to.be.oneOf([\"MD5\",\"SHA-1\",\"SHA-256\",\"SHA-512\"]);checksum_algorithm = {'MD5': '[a-fA-F0-9]{32}', 'SHA-1': '[0-9a-f]{5,40}', 'SHA-256': '[A-Fa-f0-9]{64}', 'SHA-512': '[A-Fa-f0-9]{128}'};pm.expect(element.Checksum[i].Value).to.match(new RegExp(checksum_algorithm[element.Checksum[i].Algorithm]));}};",
											"properties_map.ContentDate=function (element) {pm.expect(element.ContentDate[\"Start\"]).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);pm.expect(element.ContentDate[\"End\"]).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);};",
											"properties_map.ProductionType=function (element) {pm.expect(element.ProductionType).to.be.oneOf([\"systematic_production\",\"on-demand default\",\"on-demand non-default\"]);};",
											"properties_map.Footprint=function (element) {if(element.Footprint){ pm.expect(element.Footprint).to.match(/geography'SRID=\\d+;[Polygon|Multipolygon|Point](.*)/); }};",
											"",
											"let schema_seen = {};",
											"",
											"function testSpecific(value, product){",
											"",
											"    if (schema_seen[value.Name]){",
											"        schema_seen[value.Name]++;",
											"    }else{",
											"        schema_seen[value.Name]=1;",
											"    }",
											"",
											"    if (test_map[value.Name]) {",
											"        pm.test(\"Test Attribute \"+value.Name + \" for Product: \"+product.Name+\" - \"+product.Id, function(){test_map[value.Name](value, product)});",
											"    }",
											"    else {",
											"        pm.test.skip(\"Test Attribute \"+value.Name + \" for Product: \"+product.Name+\" - \"+product.Id);",
											"    }",
											"}",
											"function propertySpecific(key, product){",
											"    if (properties_map[key]) {",
											"        pm.test(\"Test Property \"+key+\" for Product: \"+product.Name+\" - \"+product.Id, function(){properties_map[key](product)});",
											"    }",
											"    else {",
											"        pm.test.skip(\"Test Property \"+key+\" for Product: \"+product.Name+\" - \"+product.Id);",
											"    }",
											"}",
											"",
											"for (var counter = 0;  counter  < jsonDataElements.length; counter++){",
											"    var product = jsonDataElements[counter];",
											"    console.log(\"Processing Product: \"+product.Name+\" - \"+product.Id);",
											"",
											"    for (const[key, value] of Object.entries(properties_map)){",
											"        propertySpecific(key, jsonDataElements[counter]);",
											"    }",
											"",
											"    if(\"Attributes\" in jsonDataElements[counter]){",
											"        schema_seen = {};",
											"",
											"        pm.test(\"Test Attributes list\", function(){",
											"            pm.expect(jsonDataElements[counter].Attributes.length).to.be.above(0);",
											"        });",
											"",
											"        jsonDataElements[counter].Attributes.forEach(function(elem){",
											"            testSpecific(elem, jsonDataElements[counter]);",
											"        });",
											"        var product = jsonDataElements[counter];",
											"        for (const[key, value] of Object.entries(test_schema)) {pm.test(\"Schema Attribute \"+key+\" Product \"+product.Name+\" - \"+product.Id, function(){",
											"        if(schema_seen[key] == undefined){",
											"            schema_seen[key] = 0;",
											"        }",
											"        value(schema_seen[key], product)});}",
											"    }",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{service-root-uri}}/odata/v1/Products?$expand=Attributes&$top=1&$filter=(contains(Name,'S1_RAW__0S') or contains(Name,'S2_RAW__0S') or contains(Name,'S3_RAW__0S') or contains(Name,'S4_RAW__0S') or contains(Name,'S5_RAW__0S') or contains(Name,'S6_RAW__0S') or contains(Name,'IW_RAW__0S') or contains(Name,'EW_RAW__0S') or contains(Name,'WV_RAW__0S') or contains(Name,'RF_RAW__0S') or contains(Name,'EN_RAW__0S') or contains(Name,'N1_RAW__0S') or contains(Name,'N2_RAW__0S') or contains(Name,'N3_RAW__0S') or contains(Name,'N4_RAW__0S') or contains(Name,'N5_RAW__0S') or contains(Name,'N6_RAW__0S') or contains(Name,'S1_RAW__0A') or contains(Name,'S2_RAW__0A') or contains(Name,'S3_RAW__0A') or contains(Name,'S4_RAW__0A') or contains(Name,'S5_RAW__0A') or contains(Name,'S6_RAW__0A') or contains(Name,'IW_RAW__0A') or contains(Name,'EW_RAW__0A') or contains(Name,'WV_RAW__0A')) and startswith(Name,'S1')\n",
									"host": [
										"{{service-root-uri}}"
									],
									"path": [
										"odata",
										"v1",
										"Products"
									],
									"query": [
										{
											"key": "$expand",
											"value": "Attributes"
										},
										{
											"key": "$top",
											"value": "1"
										},
										{
											"key": "$filter",
											"value": "(contains(Name,'S1_RAW__0S') or contains(Name,'S2_RAW__0S') or contains(Name,'S3_RAW__0S') or contains(Name,'S4_RAW__0S') or contains(Name,'S5_RAW__0S') or contains(Name,'S6_RAW__0S') or contains(Name,'IW_RAW__0S') or contains(Name,'EW_RAW__0S') or contains(Name,'WV_RAW__0S') or contains(Name,'RF_RAW__0S') or contains(Name,'EN_RAW__0S') or contains(Name,'N1_RAW__0S') or contains(Name,'N2_RAW__0S') or contains(Name,'N3_RAW__0S') or contains(Name,'N4_RAW__0S') or contains(Name,'N5_RAW__0S') or contains(Name,'N6_RAW__0S') or contains(Name,'S1_RAW__0A') or contains(Name,'S2_RAW__0A') or contains(Name,'S3_RAW__0A') or contains(Name,'S4_RAW__0A') or contains(Name,'S5_RAW__0A') or contains(Name,'S6_RAW__0A') or contains(Name,'IW_RAW__0A') or contains(Name,'EW_RAW__0A') or contains(Name,'WV_RAW__0A')) and startswith(Name,'S1')\n"
										},
										{
											"key": "$filter",
											"value": "contains(Name,'S1_RAW__0S') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'S2_RAW__0S') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'S3_RAW__0S') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'S4_RAW__0S') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'S5_RAW__0S') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'S6_RAW__0S') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'IW_RAW__0S') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'EW_RAW__0S') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'WV_RAW__0S') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'RF_RAW__0S') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'EN_RAW__0S') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'N1_RAW__0S') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'N2_RAW__0S') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'N3_RAW__0S') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'N4_RAW__0S') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'N5_RAW__0S') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'N6_RAW__0S') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'S1_RAW__0A') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'S2_RAW__0A') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'S3_RAW__0A') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'S4_RAW__0A') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'S5_RAW__0A') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'S6_RAW__0A') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'IW_RAW__0A') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'EW_RAW__0A') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'WV_RAW__0A') and startswith(Name,'S1')\n",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "S1_Level-0_Cal",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5e0bf709-cf9a-4b6d-b283-61f9877c4328",
										"exec": [
											"var jsonDataElements = pm.response.json().value;",
											"pm.test(\"Response time is less than \" +  environment[\"query-timeout\"] + \"ms\", function(){",
											"    pm.expect(pm.response.responseTime).to.be.below(parseInt(environment[\"query-timeout\"]));",
											"});",
											"",
											"pm.test(\"Test OData context\", function(){",
											"    query_string = pm.request.url.getQueryString();",
											"    if(query_string.includes(\"$expand=Attributes\")){",
											"        pm.expect( pm.response.json()['@odata.context']).to.include(\"$metadata#Products(Attributes())\");",
											"    } else{",
											"        pm.expect( pm.response.json()['@odata.context']).to.include(\"$metadata#Products\");",
											"    }",
											"});",
											"",
											"var TRUE = true;",
											"var FALSE = false;",
											"",
											"test_map={};",
											"test_map.beginningDateTime=function (element) {pm.expect(element.Name).eq('beginningDateTime');pm.expect(element.ValueType).eq('DateTimeOffset');pm.expect(element.Value).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);};",
											"test_map.endingDateTime=function (element) {pm.expect(element.Name).eq('endingDateTime');pm.expect(element.ValueType).eq('DateTimeOffset');pm.expect(element.Value).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);};",
											"test_map.startTimeFromAscendingNode=function (element) {pm.expect(element.Name).eq('startTimeFromAscendingNode');pm.expect(element.ValueType).eq('Double');pm.expect(element.Value).to.be.a(\"number\");};",
											"test_map.completionTimeFromAscendingNode=function (element) {pm.expect(element.Name).eq('completionTimeFromAscendingNode');pm.expect(element.ValueType).eq('Double');pm.expect(element.Value).to.be.a(\"number\");};",
											"test_map.platformShortName=function (element) {pm.expect(element.Name).eq('platformShortName');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"SENTINEL-1\"]);};",
											"test_map.platformSerialIdentifier=function (element) {pm.expect(element.Name).eq('platformSerialIdentifier');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"A\",\"B\",\"C\",\"D\",\"_\"]);};",
											"test_map.instrumentShortName=function (element) {pm.expect(element.Name).eq('instrumentShortName');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"SAR\"]);};",
											"test_map.operationalMode=function (element) {pm.expect(element.Name).eq('operationalMode');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"SM\",\"IW\",\"EW\",\"WV\"]);};",
											"test_map.swathIdentifier=function (element) {pm.expect(element.Name).eq('swathIdentifier');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"1\",\"2\",\"3\",\"4\",\"5\",\"6\"]);};",
											"test_map.polarisationChannels=function (element) {pm.expect(element.Name).eq('polarisationChannels');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"HH\",\"VV\",\"HV\",\"VH\"]);};",
											"test_map.orbitNumber=function (element) {pm.expect(element.Name).eq('orbitNumber');pm.expect(element.ValueType).eq('Integer');pm.expect(element.Value).to.be.a(\"number\");pm.expect(element.Value).to.match(/([1-9]|[1-8][0-9]|9[0-9]|[1-8][0-9]{2}|9[0-8][0-9]|99[0-9]|[1-8][0-9]{3}|9[0-8][0-9]{2}|99[0-8][0-9]|999[0-9]|[1-8][0-9]{4}|9[0-8][0-9]{3}|99[0-8][0-9]{2}|999[0-8][0-9]|9999[0-9]|[1-8][0-9]{5}|9[0-8][0-9]{4}|99[0-8][0-9]{3}|999[0-8][0-9]{2}|9999[0-8][0-9]|99999[0-9])/);};",
											"test_map.relativeOrbitNumber=function (element) {pm.expect(element.Name).eq('relativeOrbitNumber');pm.expect(element.ValueType).eq('Integer');pm.expect(element.Value).to.be.a(\"number\");pm.expect(element.Value).to.match(/([1-9]|[1-8][0-9]|9[0-9]|1[0-6][0-9]|17[0-5])/);};",
											"test_map.cycleNumber=function (element) {pm.expect(element.Name).eq('cycleNumber');pm.expect(element.ValueType).eq('Integer');pm.expect(element.Value).to.be.a(\"number\");pm.expect(element.Value).to.match(/([1-9]|[1-8][0-9]|9[0-9]|1[0-6][0-9]|17[0-5])/);};",
											"test_map.orbitDirection=function (element) {pm.expect(element.Name).eq('orbitDirection');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"ASCENDING\",\"DESCENDING\",\"UNKNOWN\"]);};",
											"test_map.processingDate=function (element) {pm.expect(element.Name).eq('processingDate');pm.expect(element.ValueType).eq('DateTimeOffset');pm.expect(element.Value).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);};",
											"test_map.processingCenter=function (element) {pm.expect(element.Name).eq('processingCenter');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');};",
											"test_map.processorName=function (element) {pm.expect(element.Name).eq('processorName');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');};",
											"test_map.processorVersion=function (element) {pm.expect(element.Name).eq('processorVersion');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');};",
											"test_map.coordinates=function (element) {pm.expect(element.Name).eq('coordinates');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.match(/(-?\\d+(\\.\\d+)?),\\s*(-?\\d+(\\.\\d+)?)/);};",
											"test_map.productType=function (element) {pm.expect(element.Name).eq('productType');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"S1_RAW__0C\",\"S2_RAW__0C\",\"S3_RAW__0C\",\"S4_RAW__0C\",\"S5_RAW__0C\",\"S6_RAW__0C\",\"IW_RAW__0C\",\"EW_RAW__0C\",\"WV_RAW__0C\"]);",
											"",
											"};",
											"test_map.productClass=function (element) {pm.expect(element.Name).eq('productClass');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"C\"]);};",
											"test_map.productConsolidation=function (element) {pm.expect(element.Name).eq('productConsolidation');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"SLICE\",\"SLICE PARTIAL\",\"FULL\"]);};",
											"test_map.instrumentConfigurationID=function (element) {pm.expect(element.Name).eq('instrumentConfigurationID');pm.expect(element.ValueType).eq('Integer');pm.expect(element.Value).to.be.a(\"number\");pm.expect(element.Value).to.match(/([1-9]|[1-8][0-9]|9[0-9]|[1-8][0-9]{2}|9[0-8][0-9]|99[0-9]|[1-8][0-9]{3}|9[0-8][0-9]{2}|99[0-8][0-9]|999[0-9]|[1-8][0-9]{4}|9[0-8][0-9]{3}|99[0-8][0-9]{2}|999[0-8][0-9]|9999[0-9]|[1-8][0-9]{5}|9[0-8][0-9]{4}|99[0-8][0-9]{3}|999[0-8][0-9]{2}|9999[0-8][0-9]|99999[0-9]|[1-8][0-9]{6}|9[0-8][0-9]{5}|99[0-8][0-9]{4}|999[0-8][0-9]{3}|9999[0-8][0-9]{2}|99999[0-8][0-9]|999999[0-9]|1[0-5][0-9]{6}|16[0-6][0-9]{5}|167[0-6][0-9]{4}|1677[0-6][0-9]{3}|16777[01][0-9]{2}|1677720[0-9]|1677721[0-5])/);};",
											"test_map.datatakeID=function (element) {pm.expect(element.Name).eq('datatakeID');pm.expect(element.ValueType).eq('Integer');pm.expect(element.Value).to.be.a(\"number\");pm.expect(element.Value).to.match(/([1-9]|[1-8][0-9]|9[0-9]|[1-8][0-9]{2}|9[0-8][0-9]|99[0-9]|[1-8][0-9]{3}|9[0-8][0-9]{2}|99[0-8][0-9]|999[0-9]|[1-8][0-9]{4}|9[0-8][0-9]{3}|99[0-8][0-9]{2}|999[0-8][0-9]|9999[0-9]|[1-8][0-9]{5}|9[0-8][0-9]{4}|99[0-8][0-9]{3}|999[0-8][0-9]{2}|9999[0-8][0-9]|99999[0-9]|[1-7][0-9]{6}|8[0-2][0-9]{5}|83[0-7][0-9]{4}|838[0-7][0-9]{3}|8388[0-5][0-9]{2}|838860[0-7])/);};",
											"test_map.sliceProductFlag=function (element) {pm.expect(element.Name).eq('sliceProductFlag');pm.expect(element.ValueType).eq('Boolean');pm.expect(element.Value).to.be.oneOf([\"TRUE\",\"FALSE\",\"true\",\"false\"]);};",
											"test_map.sliceNumber=function (element) {pm.expect(element.Name).eq('sliceNumber');pm.expect(element.ValueType).eq('Integer');pm.expect(element.Value).to.be.a(\"number\");};",
											"test_map.totalSlices=function (element) {pm.expect(element.Name).eq('totalSlices');pm.expect(element.ValueType).eq('Integer');pm.expect(element.Value).to.be.a(\"number\");};",
											"",
											"test_schema={};",
											"test_schema.beginningDateTime=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.endingDateTime=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.startTimeFromAscendingNode=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.completionTimeFromAscendingNode=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.platformShortName=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.platformSerialIdentifier=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.instrumentShortName=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.operationalMode=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.swathIdentifier=function (num) {pm.expect(num).to.be.within(0,1)};",
											"test_schema.polarisationChannels=function (num) {pm.expect(num).to.be.within(1,2)};",
											"test_schema.orbitNumber=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.relativeOrbitNumber=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.cycleNumber=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.orbitDirection=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.processingDate=function (num) {pm.expect(num).to.be.within(0,1)};",
											"test_schema.processingCenter=function (num) {pm.expect(num).to.be.within(0,1)};",
											"test_schema.processorName=function (num) {pm.expect(num).to.be.within(0,1)};",
											"test_schema.processorVersion=function (num) {pm.expect(num).to.be.within(0,1)};",
											"test_schema.coordinates=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.productType=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.productClass=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.productConsolidation=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.instrumentConfigurationID=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.datatakeID=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.sliceProductFlag=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.sliceNumber=function (num) {pm.expect(num).to.be.within(0,1)};",
											"test_schema.totalSlices=function (num) {pm.expect(num).to.be.within(0,1)};",
											"",
											"            ",
											"properties_map = {};",
											"properties_map.Id=function (element) {pm.expect(element.Id).to.match(/[0-9a-fA-F]{8}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{12}/);};",
											"properties_map.Name=function (element) {pm.expect(element.Name).to.be.a(\"string\");};",
											"properties_map.ContentType=function (element) {pm.expect(element.ContentType).to.be.a(\"string\");};",
											"properties_map.ContentLength=function (element) {pm.expect(element.ContentLength).to.be.a(\"number\");};",
											"properties_map.PublicationDate=function (element) {pm.expect(element.PublicationDate).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);};",
											"properties_map.EvictionDate=function (element) {if(element.EvictionDate){ pm.expect(element.EvictionDate).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d+([+-][0-2]\\d:[0-5]\\d|Z)/); }};",
											"properties_map.Checksum=function (element) {for(i=0; i<element.Checksum.length; i++ ){pm.expect(element.Checksum[i].Algorithm).to.be.oneOf([\"MD5\",\"SHA-1\",\"SHA-256\",\"SHA-512\"]);checksum_algorithm = {'MD5': '[a-fA-F0-9]{32}', 'SHA-1': '[0-9a-f]{5,40}', 'SHA-256': '[A-Fa-f0-9]{64}', 'SHA-512': '[A-Fa-f0-9]{128}'};pm.expect(element.Checksum[i].Value).to.match(new RegExp(checksum_algorithm[element.Checksum[i].Algorithm]));}};",
											"properties_map.ContentDate=function (element) {pm.expect(element.ContentDate[\"Start\"]).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);pm.expect(element.ContentDate[\"End\"]).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);};",
											"properties_map.ProductionType=function (element) {pm.expect(element.ProductionType).to.be.oneOf([\"systematic_production\",\"on-demand default\",\"on-demand non-default\"]);};",
											"properties_map.Footprint=function (element) {if(element.Footprint){ pm.expect(element.Footprint).to.match(/geography'SRID=\\d+;[Polygon|Multipolygon|Point](.*)/); }};",
											"",
											"let schema_seen = {};",
											"",
											"function testSpecific(value, product){",
											"",
											"    if (schema_seen[value.Name]){",
											"        schema_seen[value.Name]++;",
											"    }else{",
											"        schema_seen[value.Name]=1;",
											"    }",
											"",
											"    if (test_map[value.Name]) {",
											"        pm.test(\"Test Attribute \"+value.Name + \" for Product: \"+product.Name+\" - \"+product.Id, function(){test_map[value.Name](value, product)});",
											"    }",
											"    else {",
											"        pm.test.skip(\"Test Attribute \"+value.Name + \" for Product: \"+product.Name+\" - \"+product.Id);",
											"    }",
											"}",
											"function propertySpecific(key, product){",
											"    if (properties_map[key]) {",
											"        pm.test(\"Test Property \"+key+\" for Product: \"+product.Name+\" - \"+product.Id, function(){properties_map[key](product)});",
											"    }",
											"    else {",
											"        pm.test.skip(\"Test Property \"+key+\" for Product: \"+product.Name+\" - \"+product.Id);",
											"    }",
											"}",
											"",
											"for (var counter = 0;  counter  < jsonDataElements.length; counter++){",
											"    var product = jsonDataElements[counter];",
											"    console.log(\"Processing Product: \"+product.Name+\" - \"+product.Id);",
											"",
											"    for (const[key, value] of Object.entries(properties_map)){",
											"        propertySpecific(key, jsonDataElements[counter]);",
											"    }",
											"",
											"    if(\"Attributes\" in jsonDataElements[counter]){",
											"        schema_seen = {};",
											"",
											"        pm.test(\"Test Attributes list\", function(){",
											"            pm.expect(jsonDataElements[counter].Attributes.length).to.be.above(0);",
											"        });",
											"",
											"        jsonDataElements[counter].Attributes.forEach(function(elem){",
											"            testSpecific(elem, jsonDataElements[counter]);",
											"        });",
											"        var product = jsonDataElements[counter];",
											"        for (const[key, value] of Object.entries(test_schema)) {pm.test(\"Schema Attribute \"+key+\" Product \"+product.Name+\" - \"+product.Id, function(){",
											"        if(schema_seen[key] == undefined){",
											"            schema_seen[key] = 0;",
											"        }",
											"        value(schema_seen[key], product)});}",
											"    }",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{service-root-uri}}/odata/v1/Products?$expand=Attributes&$top=1&$filter=(contains(Name,'S1_RAW__0C') or contains(Name,'S2_RAW__0C') or contains(Name,'S3_RAW__0C') or contains(Name,'S4_RAW__0C') or contains(Name,'S5_RAW__0C') or contains(Name,'S6_RAW__0C') or contains(Name,'IW_RAW__0C') or contains(Name,'EW_RAW__0C') or contains(Name,'WV_RAW__0C')) and startswith(Name,'S1')\n",
									"host": [
										"{{service-root-uri}}"
									],
									"path": [
										"odata",
										"v1",
										"Products"
									],
									"query": [
										{
											"key": "$expand",
											"value": "Attributes"
										},
										{
											"key": "$top",
											"value": "1"
										},
										{
											"key": "$filter",
											"value": "(contains(Name,'S1_RAW__0C') or contains(Name,'S2_RAW__0C') or contains(Name,'S3_RAW__0C') or contains(Name,'S4_RAW__0C') or contains(Name,'S5_RAW__0C') or contains(Name,'S6_RAW__0C') or contains(Name,'IW_RAW__0C') or contains(Name,'EW_RAW__0C') or contains(Name,'WV_RAW__0C')) and startswith(Name,'S1')\n"
										},
										{
											"key": "$filter",
											"value": "contains(Name,'S1_RAW__0C') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'S2_RAW__0C') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'S3_RAW__0C') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'S4_RAW__0C') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'S5_RAW__0C') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'S6_RAW__0C') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'IW_RAW__0C') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'EW_RAW__0C') and startswith(Name,'S1')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'WV_RAW__0C') and startswith(Name,'S1')\n",
											"disabled": true
										}
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Sentinel-3",
			"item": [
				{
					"name": "LTA",
					"item": [
						{
							"name": "S3_SRAL_Products",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "01816951-2fd7-4d19-b1aa-c46a5ecd68b2",
										"exec": [
											"var jsonDataElements = pm.response.json().value;",
											"pm.test(\"Response time is less than \" +  environment[\"query-timeout\"] + \"ms\", function(){",
											"    pm.expect(pm.response.responseTime).to.be.below(parseInt(environment[\"query-timeout\"]));",
											"});",
											"",
											"pm.test(\"Test OData context\", function(){",
											"    query_string = pm.request.url.getQueryString();",
											"    if(query_string.includes(\"$expand=Attributes\")){",
											"        pm.expect( pm.response.json()['@odata.context']).to.include(\"$metadata#Products(Attributes())\");",
											"    } else{",
											"        pm.expect( pm.response.json()['@odata.context']).to.include(\"$metadata#Products\");",
											"    }",
											"});",
											"",
											"var TRUE = true;",
											"var FALSE = false;",
											"",
											"test_map={};",
											"test_map.beginningDateTime=function (element) {pm.expect(element.Name).eq('beginningDateTime');pm.expect(element.ValueType).eq('DateTimeOffset');pm.expect(element.Value).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);};",
											"test_map.endingDateTime=function (element) {pm.expect(element.Name).eq('endingDateTime');pm.expect(element.ValueType).eq('DateTimeOffset');pm.expect(element.Value).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);};",
											"test_map.platformShortName=function (element) {pm.expect(element.Name).eq('platformShortName');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"SENTINEL-3\"]);};",
											"test_map.platformSerialIdentifier=function (element) {pm.expect(element.Name).eq('platformSerialIdentifier');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"A\",\"B\",\"C\",\"D\",\"_\"]);};",
											"test_map.instrumentShortName=function (element) {pm.expect(element.Name).eq('instrumentShortName');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"SRAL\"]);};",
											"test_map.operationalMode=function (element) {pm.expect(element.Name).eq('operationalMode');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');};",
											"test_map.productType=function (element) {pm.expect(element.Name).eq('productType');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"SR_1_CAL___\",\"SR_1_SRA___\",\"SR_1_SRA_A_\",\"SR_1_SRA_BS\",\"SR_2_LAN___\"]);",
											"",
											"};",
											"test_map.timeliness=function (element) {pm.expect(element.Name).eq('timeliness');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"NR\",\"NT\",\"ST\",\"AL\"]);};",
											"test_map.orbitNumber=function (element) {pm.expect(element.Name).eq('orbitNumber');pm.expect(element.ValueType).eq('Integer');pm.expect(element.Value).to.be.a(\"number\");};",
											"test_map.lastOrbitNumber=function (element) {pm.expect(element.Name).eq('lastOrbitNumber');pm.expect(element.ValueType).eq('Integer');pm.expect(element.Value).to.be.a(\"number\");};",
											"test_map.orbitDirection=function (element) {pm.expect(element.Name).eq('orbitDirection');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"ASCENDING\",\"DESCENDING\"]);};",
											"test_map.lastOrbitDirection=function (element) {pm.expect(element.Name).eq('lastOrbitDirection');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"ASCENDING\",\"DESCENDING\"]);};",
											"test_map.relativeOrbitNumber=function (element) {pm.expect(element.Name).eq('relativeOrbitNumber');pm.expect(element.ValueType).eq('Integer');pm.expect(element.Value).to.be.a(\"number\");pm.expect(element.Value).to.match(/([1-9]|[1-8][0-9]|9[0-9]|[12][0-9]{2}|3[0-7][0-9]|38[0-5])/);};",
											"test_map.cycleNumber=function (element) {pm.expect(element.Name).eq('cycleNumber');pm.expect(element.ValueType).eq('Integer');pm.expect(element.Value).to.be.a(\"number\");pm.expect(element.Value).to.match(/([1-9]|[1-8][0-9]|9[0-9]|[12][0-9]{2}|3[0-7][0-9]|38[0-5])/);};",
											"test_map.processingLevel=function (element) {pm.expect(element.Name).eq('processingLevel');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"1\",\"2\"]);};",
											"test_map.processingDate=function (element) {pm.expect(element.Name).eq('processingDate');pm.expect(element.ValueType).eq('DateTimeOffset');pm.expect(element.Value).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);};",
											"test_map.processingCenter=function (element) {pm.expect(element.Name).eq('processingCenter');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');};",
											"test_map.processorName=function (element) {pm.expect(element.Name).eq('processorName');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');};",
											"test_map.processorVersion=function (element) {pm.expect(element.Name).eq('processorVersion');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');};",
											"test_map.coordinates=function (element) {pm.expect(element.Name).eq('coordinates');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');};",
											"test_map.baselineCollection=function (element) {pm.expect(element.Name).eq('baselineCollection');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');};",
											"test_map.landCover=function (element) {pm.expect(element.Name).eq('landCover');pm.expect(element.ValueType).eq('Double');pm.expect(element.Value).to.be.a(\"number\");pm.expect(element.Value).to.match(/([0-9]|[1-8][0-9]|9[0-9]|100)/);};",
											"test_map.closedSeaCover=function (element) {pm.expect(element.Name).eq('closedSeaCover');pm.expect(element.ValueType).eq('Integer');pm.expect(element.Value).to.be.a(\"number\");pm.expect(element.Value).to.match(/([0-9]|[1-8][0-9]|9[0-9]|100)/);};",
											"test_map.continentalIceCover=function (element) {pm.expect(element.Name).eq('continentalIceCover');pm.expect(element.ValueType).eq('Integer');pm.expect(element.Value).to.be.a(\"number\");pm.expect(element.Value).to.match(/([0-9]|[1-8][0-9]|9[0-9]|100)/);};",
											"test_map.openOceanCover=function (element) {pm.expect(element.Name).eq('openOceanCover');pm.expect(element.ValueType).eq('Integer');pm.expect(element.Value).to.be.a(\"number\");pm.expect(element.Value).to.match(/([0-9]|[1-8][0-9]|9[0-9]|100)/);};",
											"test_map.lastRelativeOrbitNumber=function (element) {pm.expect(element.Name).eq('lastRelativeOrbitNumber');pm.expect(element.ValueType).eq('Integer');pm.expect(element.Value).to.be.a(\"number\");pm.expect(element.Value).to.match(/([1-9]|[1-8][0-9]|9[0-9]|[12][0-9]{2}|3[0-7][0-9]|38[0-5])/);};",
											"",
											"test_schema={};",
											"test_schema.beginningDateTime=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.endingDateTime=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.platformShortName=function (num) {pm.expect(num).to.be.within(0,1)};",
											"test_schema.platformSerialIdentifier=function (num) {pm.expect(num).to.be.within(0,1)};",
											"test_schema.instrumentShortName=function (num) {pm.expect(num).to.be.within(0,1)};",
											"test_schema.operationalMode=function (num) {pm.expect(num).to.be.within(0,1)};",
											"test_schema.productType=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.timeliness=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.orbitNumber=function (num) {pm.expect(num).to.be.within(1,2)};",
											"test_schema.lastOrbitNumber=function (num) {pm.expect(num).to.be.within(1,2)};",
											"test_schema.orbitDirection=function (num) {pm.expect(num).to.be.within(0,1)};",
											"test_schema.lastOrbitDirection=function (num) {pm.expect(num).to.be.within(0,1)};",
											"test_schema.relativeOrbitNumber=function (num) {pm.expect(num).to.be.within(1,2)};",
											"test_schema.cycleNumber=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.processingLevel=function (num) {pm.expect(num).to.be.within(0,1)};",
											"test_schema.processingDate=function (num) {pm.expect(num).to.be.within(0,1)};",
											"test_schema.processingCenter=function (num) {pm.expect(num).to.be.within(0,1)};",
											"test_schema.processorName=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.processorVersion=function (num) {pm.expect(num).to.be.within(0,1)};",
											"test_schema.coordinates=function (num) {pm.expect(num).to.be.within(0,1)};",
											"test_schema.baselineCollection=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.landCover=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.closedSeaCover=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.continentalIceCover=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.openOceanCover=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.lastRelativeOrbitNumber=function (num) {pm.expect(num).to.be.within(0,2)};",
											"",
											"            ",
											"properties_map = {};",
											"properties_map.Id=function (element) {pm.expect(element.Id).to.match(/[0-9a-fA-F]{8}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{12}/);};",
											"properties_map.Name=function (element) {pm.expect(element.Name).to.be.a(\"string\");};",
											"properties_map.ContentType=function (element) {pm.expect(element.ContentType).to.be.a(\"string\");};",
											"properties_map.ContentLength=function (element) {pm.expect(element.ContentLength).to.be.a(\"number\");};",
											"properties_map.OriginDate=function (element) {pm.expect(element.OriginDate).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d+([+-][0-2]\\d:[0-5]\\d|Z)/);};",
											"properties_map.PublicationDate=function (element) {pm.expect(element.PublicationDate).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);};",
											"properties_map.ModificationDate=function (element) {pm.expect(element.ModificationDate).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d+([+-][0-2]\\d:[0-5]\\d|Z)/);};",
											"properties_map.Online=function (element) {pm.expect(element.Online).to.be.oneOf([TRUE,FALSE,true,false]);};",
											"properties_map.EvictionDate=function (element) {if(element.EvictionDate){ pm.expect(element.EvictionDate).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d+([+-][0-2]\\d:[0-5]\\d|Z)/); }};",
											"properties_map.Checksum=function (element) {for(i=0; i<element.Checksum.length; i++ ){pm.expect(element.Checksum[i].Algorithm).to.be.oneOf([\"MD5\",\"SHA-1\",\"SHA-256\",\"SHA-512\"]);checksum_algorithm = {'MD5': '[a-fA-F0-9]{32}', 'SHA-1': '[0-9a-f]{5,40}', 'SHA-256': '[A-Fa-f0-9]{64}', 'SHA-512': '[A-Fa-f0-9]{128}'};pm.expect(element.Checksum[i].Value).to.match(new RegExp(checksum_algorithm[element.Checksum[i].Algorithm]));}};",
											"properties_map.ContentDate=function (element) {pm.expect(element.ContentDate[\"Start\"]).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);pm.expect(element.ContentDate[\"End\"]).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);};",
											"properties_map.Footprint=function (element) {if(element.Footprint){ pm.expect(element.Footprint).to.match(/geography'SRID=\\d+;[Polygon|Multipolygon|Point](.*)/); }};",
											"",
											"let schema_seen = {};",
											"",
											"function testSpecific(value, product){",
											"",
											"    if (schema_seen[value.Name]){",
											"        schema_seen[value.Name]++;",
											"    }else{",
											"        schema_seen[value.Name]=1;",
											"    }",
											"",
											"    if (test_map[value.Name]) {",
											"        pm.test(\"Test Attribute \"+value.Name + \" for Product: \"+product.Name+\" - \"+product.Id, function(){test_map[value.Name](value, product)});",
											"    }",
											"    else {",
											"        pm.test.skip(\"Test Attribute \"+value.Name + \" for Product: \"+product.Name+\" - \"+product.Id);",
											"    }",
											"}",
											"function propertySpecific(key, product){",
											"    if (properties_map[key]) {",
											"        pm.test(\"Test Property \"+key+\" for Product: \"+product.Name+\" - \"+product.Id, function(){properties_map[key](product)});",
											"    }",
											"    else {",
											"        pm.test.skip(\"Test Property \"+key+\" for Product: \"+product.Name+\" - \"+product.Id);",
											"    }",
											"}",
											"",
											"for (var counter = 0;  counter  < jsonDataElements.length; counter++){",
											"    var product = jsonDataElements[counter];",
											"    console.log(\"Processing Product: \"+product.Name+\" - \"+product.Id);",
											"",
											"    for (const[key, value] of Object.entries(properties_map)){",
											"        propertySpecific(key, jsonDataElements[counter]);",
											"    }",
											"",
											"    if(\"Attributes\" in jsonDataElements[counter]){",
											"        schema_seen = {};",
											"",
											"        pm.test(\"Test Attributes list\", function(){",
											"            pm.expect(jsonDataElements[counter].Attributes.length).to.be.above(0);",
											"        });",
											"",
											"        jsonDataElements[counter].Attributes.forEach(function(elem){",
											"            testSpecific(elem, jsonDataElements[counter]);",
											"        });",
											"        var product = jsonDataElements[counter];",
											"        for (const[key, value] of Object.entries(test_schema)) {pm.test(\"Schema Attribute \"+key+\" Product \"+product.Name+\" - \"+product.Id, function(){",
											"        if(schema_seen[key] == undefined){",
											"            schema_seen[key] = 0;",
											"        }",
											"        value(schema_seen[key], product)});}",
											"    }",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{service-root-uri}}/odata/v1/Products?$expand=Attributes&$top=1&$filter=(contains(Name,'SR_1_CAL___') or contains(Name,'SR_1_SRA___') or contains(Name,'SR_1_SRA_A_') or contains(Name,'SR_1_SRA_BS') or contains(Name,'SR_2_LAN___')) and startswith(Name,'S3')\n",
									"host": [
										"{{service-root-uri}}"
									],
									"path": [
										"odata",
										"v1",
										"Products"
									],
									"query": [
										{
											"key": "$expand",
											"value": "Attributes"
										},
										{
											"key": "$top",
											"value": "1"
										},
										{
											"key": "$filter",
											"value": "(contains(Name,'SR_1_CAL___') or contains(Name,'SR_1_SRA___') or contains(Name,'SR_1_SRA_A_') or contains(Name,'SR_1_SRA_BS') or contains(Name,'SR_2_LAN___')) and startswith(Name,'S3')\n"
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_1_CAL___') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_1_SRA___') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_1_SRA_A_') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_1_SRA_BS') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_LAN___') and startswith(Name,'S3')\n",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "S3_SLSTR_Products",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1677e0ef-7eec-42f3-aaac-f7aac5f64b3d",
										"exec": [
											"var jsonDataElements = pm.response.json().value;",
											"pm.test(\"Response time is less than \" +  environment[\"query-timeout\"] + \"ms\", function(){",
											"    pm.expect(pm.response.responseTime).to.be.below(parseInt(environment[\"query-timeout\"]));",
											"});",
											"",
											"pm.test(\"Test OData context\", function(){",
											"    query_string = pm.request.url.getQueryString();",
											"    if(query_string.includes(\"$expand=Attributes\")){",
											"        pm.expect( pm.response.json()['@odata.context']).to.include(\"$metadata#Products(Attributes())\");",
											"    } else{",
											"        pm.expect( pm.response.json()['@odata.context']).to.include(\"$metadata#Products\");",
											"    }",
											"});",
											"",
											"var TRUE = true;",
											"var FALSE = false;",
											"",
											"test_map={};",
											"test_map.beginningDateTime=function (element) {pm.expect(element.Name).eq('beginningDateTime');pm.expect(element.ValueType).eq('DateTimeOffset');pm.expect(element.Value).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);};",
											"test_map.endingDateTime=function (element) {pm.expect(element.Name).eq('endingDateTime');pm.expect(element.ValueType).eq('DateTimeOffset');pm.expect(element.Value).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);};",
											"test_map.platformShortName=function (element) {pm.expect(element.Name).eq('platformShortName');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"SENTINEL-3\"]);};",
											"test_map.platformSerialIdentifier=function (element) {pm.expect(element.Name).eq('platformSerialIdentifier');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"A\",\"B\",\"C\",\"D\",\"_\"]);};",
											"test_map.instrumentShortName=function (element) {pm.expect(element.Name).eq('instrumentShortName');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"SLSTR\"]);};",
											"test_map.operationalMode=function (element) {pm.expect(element.Name).eq('operationalMode');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');};",
											"test_map.productType=function (element) {pm.expect(element.Name).eq('productType');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"SL_1_RBT___\",\"SL_2_LST___\",\"SL_2_FRP___\"]);",
											"",
											"};",
											"test_map.timeliness=function (element) {pm.expect(element.Name).eq('timeliness');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"NR\",\"NT\",\"ST\",\"AL\"]);};",
											"test_map.cloudCover=function (element) {pm.expect(element.Name).eq('cloudCover');pm.expect(element.ValueType).eq('Double');pm.expect(element.Value).to.be.a(\"number\");};",
											"test_map.orbitNumber=function (element) {pm.expect(element.Name).eq('orbitNumber');pm.expect(element.ValueType).eq('Integer');pm.expect(element.Value).to.be.a(\"number\");};",
											"test_map.lastOrbitNumber=function (element) {pm.expect(element.Name).eq('lastOrbitNumber');pm.expect(element.ValueType).eq('Integer');pm.expect(element.Value).to.be.a(\"number\");};",
											"test_map.orbitDirection=function (element) {pm.expect(element.Name).eq('orbitDirection');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"ASCENDING\",\"DESCENDING\"]);};",
											"test_map.lastOrbitDirection=function (element) {pm.expect(element.Name).eq('lastOrbitDirection');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"ASCENDING\",\"DESCENDING\"]);};",
											"test_map.relativeOrbitNumber=function (element) {pm.expect(element.Name).eq('relativeOrbitNumber');pm.expect(element.ValueType).eq('Integer');pm.expect(element.Value).to.be.a(\"number\");pm.expect(element.Value).to.match(/([1-9]|[1-8][0-9]|9[0-9]|[12][0-9]{2}|3[0-7][0-9]|38[0-5])/);};",
											"test_map.cycleNumber=function (element) {pm.expect(element.Name).eq('cycleNumber');pm.expect(element.ValueType).eq('Integer');pm.expect(element.Value).to.be.a(\"number\");pm.expect(element.Value).to.match(/([1-9]|[1-8][0-9]|9[0-9]|[12][0-9]{2}|3[0-7][0-9]|38[0-5])/);};",
											"test_map.processingLevel=function (element) {pm.expect(element.Name).eq('processingLevel');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');};",
											"test_map.processingDate=function (element) {pm.expect(element.Name).eq('processingDate');pm.expect(element.ValueType).eq('DateTimeOffset');pm.expect(element.Value).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);};",
											"test_map.processingCenter=function (element) {pm.expect(element.Name).eq('processingCenter');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');};",
											"test_map.processorName=function (element) {pm.expect(element.Name).eq('processorName');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');};",
											"test_map.processorVersion=function (element) {pm.expect(element.Name).eq('processorVersion');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');};",
											"test_map.coordinates=function (element) {pm.expect(element.Name).eq('coordinates');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');};",
											"test_map.baselineCollection=function (element) {pm.expect(element.Name).eq('baselineCollection');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');};",
											"test_map.salineWaterCover=function (element) {pm.expect(element.Name).eq('salineWaterCover');pm.expect(element.ValueType).eq('Double');pm.expect(element.Value).to.be.a(\"number\");};",
											"test_map.landCover=function (element) {pm.expect(element.Name).eq('landCover');pm.expect(element.ValueType).eq('Double');pm.expect(element.Value).to.be.a(\"number\");};",
											"test_map.coastalCover=function (element) {pm.expect(element.Name).eq('coastalCover');pm.expect(element.ValueType).eq('Double');pm.expect(element.Value).to.be.a(\"number\");};",
											"test_map.freshInlandWaterCover=function (element) {pm.expect(element.Name).eq('freshInlandWaterCover');pm.expect(element.ValueType).eq('Double');pm.expect(element.Value).to.be.a(\"number\");};",
											"test_map.tidalRegionCover=function (element) {pm.expect(element.Name).eq('tidalRegionCover');pm.expect(element.ValueType).eq('Double');pm.expect(element.Value).to.be.a(\"number\");};",
											"test_map.lastRelativeOrbitNumber=function (element) {pm.expect(element.Name).eq('lastRelativeOrbitNumber');pm.expect(element.ValueType).eq('Integer');pm.expect(element.Value).to.be.a(\"number\");pm.expect(element.Value).to.match(/([1-9]|[1-8][0-9]|9[0-9]|[12][0-9]{2}|3[0-7][0-9]|38[0-5])/);};",
											"",
											"test_schema={};",
											"test_schema.beginningDateTime=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.endingDateTime=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.platformShortName=function (num) {pm.expect(num).to.be.within(0,1)};",
											"test_schema.platformSerialIdentifier=function (num) {pm.expect(num).to.be.within(0,1)};",
											"test_schema.instrumentShortName=function (num) {pm.expect(num).to.be.within(0,1)};",
											"test_schema.operationalMode=function (num) {pm.expect(num).to.be.within(0,1)};",
											"test_schema.productType=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.timeliness=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.cloudCover=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.orbitNumber=function (num) {pm.expect(num).to.be.within(1,2)};",
											"test_schema.lastOrbitNumber=function (num) {pm.expect(num).to.be.within(1,2)};",
											"test_schema.orbitDirection=function (num) {pm.expect(num).to.be.within(0,1)};",
											"test_schema.lastOrbitDirection=function (num) {pm.expect(num).to.be.within(0,1)};",
											"test_schema.relativeOrbitNumber=function (num) {pm.expect(num).to.be.within(1,2)};",
											"test_schema.cycleNumber=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.processingLevel=function (num) {pm.expect(num).to.be.within(0,1)};",
											"test_schema.processingDate=function (num) {pm.expect(num).to.be.within(0,1)};",
											"test_schema.processingCenter=function (num) {pm.expect(num).to.be.within(0,1)};",
											"test_schema.processorName=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.processorVersion=function (num) {pm.expect(num).to.be.within(0,1)};",
											"test_schema.coordinates=function (num) {pm.expect(num).to.be.within(0,1)};",
											"test_schema.baselineCollection=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.salineWaterCover=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.landCover=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.coastalCover=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.freshInlandWaterCover=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.tidalRegionCover=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.lastRelativeOrbitNumber=function (num) {pm.expect(num).to.be.within(0,2)};",
											"",
											"            ",
											"properties_map = {};",
											"properties_map.Id=function (element) {pm.expect(element.Id).to.match(/[0-9a-fA-F]{8}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{12}/);};",
											"properties_map.Name=function (element) {pm.expect(element.Name).to.be.a(\"string\");};",
											"properties_map.ContentType=function (element) {pm.expect(element.ContentType).to.be.a(\"string\");};",
											"properties_map.ContentLength=function (element) {pm.expect(element.ContentLength).to.be.a(\"number\");};",
											"properties_map.OriginDate=function (element) {pm.expect(element.OriginDate).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d+([+-][0-2]\\d:[0-5]\\d|Z)/);};",
											"properties_map.PublicationDate=function (element) {pm.expect(element.PublicationDate).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);};",
											"properties_map.ModificationDate=function (element) {pm.expect(element.ModificationDate).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d+([+-][0-2]\\d:[0-5]\\d|Z)/);};",
											"properties_map.Online=function (element) {pm.expect(element.Online).to.be.oneOf([TRUE,FALSE,true,false]);};",
											"properties_map.EvictionDate=function (element) {if(element.EvictionDate){ pm.expect(element.EvictionDate).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d+([+-][0-2]\\d:[0-5]\\d|Z)/); }};",
											"properties_map.Checksum=function (element) {for(i=0; i<element.Checksum.length; i++ ){pm.expect(element.Checksum[i].Algorithm).to.be.oneOf([\"MD5\",\"SHA-1\",\"SHA-256\",\"SHA-512\"]);checksum_algorithm = {'MD5': '[a-fA-F0-9]{32}', 'SHA-1': '[0-9a-f]{5,40}', 'SHA-256': '[A-Fa-f0-9]{64}', 'SHA-512': '[A-Fa-f0-9]{128}'};pm.expect(element.Checksum[i].Value).to.match(new RegExp(checksum_algorithm[element.Checksum[i].Algorithm]));}};",
											"properties_map.ContentDate=function (element) {pm.expect(element.ContentDate[\"Start\"]).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);pm.expect(element.ContentDate[\"End\"]).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);};",
											"properties_map.Footprint=function (element) {if(element.Footprint){ pm.expect(element.Footprint).to.match(/geography'SRID=\\d+;[Polygon|Multipolygon|Point](.*)/); }};",
											"",
											"let schema_seen = {};",
											"",
											"function testSpecific(value, product){",
											"",
											"    if (schema_seen[value.Name]){",
											"        schema_seen[value.Name]++;",
											"    }else{",
											"        schema_seen[value.Name]=1;",
											"    }",
											"",
											"    if (test_map[value.Name]) {",
											"        pm.test(\"Test Attribute \"+value.Name + \" for Product: \"+product.Name+\" - \"+product.Id, function(){test_map[value.Name](value, product)});",
											"    }",
											"    else {",
											"        pm.test.skip(\"Test Attribute \"+value.Name + \" for Product: \"+product.Name+\" - \"+product.Id);",
											"    }",
											"}",
											"function propertySpecific(key, product){",
											"    if (properties_map[key]) {",
											"        pm.test(\"Test Property \"+key+\" for Product: \"+product.Name+\" - \"+product.Id, function(){properties_map[key](product)});",
											"    }",
											"    else {",
											"        pm.test.skip(\"Test Property \"+key+\" for Product: \"+product.Name+\" - \"+product.Id);",
											"    }",
											"}",
											"",
											"for (var counter = 0;  counter  < jsonDataElements.length; counter++){",
											"    var product = jsonDataElements[counter];",
											"    console.log(\"Processing Product: \"+product.Name+\" - \"+product.Id);",
											"",
											"    for (const[key, value] of Object.entries(properties_map)){",
											"        propertySpecific(key, jsonDataElements[counter]);",
											"    }",
											"",
											"    if(\"Attributes\" in jsonDataElements[counter]){",
											"        schema_seen = {};",
											"",
											"        pm.test(\"Test Attributes list\", function(){",
											"            pm.expect(jsonDataElements[counter].Attributes.length).to.be.above(0);",
											"        });",
											"",
											"        jsonDataElements[counter].Attributes.forEach(function(elem){",
											"            testSpecific(elem, jsonDataElements[counter]);",
											"        });",
											"        var product = jsonDataElements[counter];",
											"        for (const[key, value] of Object.entries(test_schema)) {pm.test(\"Schema Attribute \"+key+\" Product \"+product.Name+\" - \"+product.Id, function(){",
											"        if(schema_seen[key] == undefined){",
											"            schema_seen[key] = 0;",
											"        }",
											"        value(schema_seen[key], product)});}",
											"    }",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{service-root-uri}}/odata/v1/Products?$expand=Attributes&$top=1&$filter=(contains(Name,'SL_1_RBT___') or contains(Name,'SL_2_LST___') or contains(Name,'SL_2_FRP___')) and startswith(Name,'S3')\n",
									"host": [
										"{{service-root-uri}}"
									],
									"path": [
										"odata",
										"v1",
										"Products"
									],
									"query": [
										{
											"key": "$expand",
											"value": "Attributes"
										},
										{
											"key": "$top",
											"value": "1"
										},
										{
											"key": "$filter",
											"value": "(contains(Name,'SL_1_RBT___') or contains(Name,'SL_2_LST___') or contains(Name,'SL_2_FRP___')) and startswith(Name,'S3')\n"
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_1_RBT___') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_2_LST___') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_2_FRP___') and startswith(Name,'S3')\n",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "S3_SYNERGY_Products",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "79b92be2-9ae9-4e05-9e24-51e83d724a6e",
										"exec": [
											"var jsonDataElements = pm.response.json().value;",
											"pm.test(\"Response time is less than \" +  environment[\"query-timeout\"] + \"ms\", function(){",
											"    pm.expect(pm.response.responseTime).to.be.below(parseInt(environment[\"query-timeout\"]));",
											"});",
											"",
											"pm.test(\"Test OData context\", function(){",
											"    query_string = pm.request.url.getQueryString();",
											"    if(query_string.includes(\"$expand=Attributes\")){",
											"        pm.expect( pm.response.json()['@odata.context']).to.include(\"$metadata#Products(Attributes())\");",
											"    } else{",
											"        pm.expect( pm.response.json()['@odata.context']).to.include(\"$metadata#Products\");",
											"    }",
											"});",
											"",
											"var TRUE = true;",
											"var FALSE = false;",
											"",
											"test_map={};",
											"test_map.beginningDateTime=function (element) {pm.expect(element.Name).eq('beginningDateTime');pm.expect(element.ValueType).eq('DateTimeOffset');pm.expect(element.Value).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);};",
											"test_map.endingDateTime=function (element) {pm.expect(element.Name).eq('endingDateTime');pm.expect(element.ValueType).eq('DateTimeOffset');pm.expect(element.Value).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);};",
											"test_map.platformShortName=function (element) {pm.expect(element.Name).eq('platformShortName');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"SENTINEL-3\"]);};",
											"test_map.platformSerialIdentifier=function (element) {pm.expect(element.Name).eq('platformSerialIdentifier');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"A\",\"B\",\"C\",\"D\",\"_\"]);};",
											"test_map.instrumentShortName=function (element) {pm.expect(element.Name).eq('instrumentShortName');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"SYNERGY\"]);};",
											"test_map.operationalMode=function (element) {pm.expect(element.Name).eq('operationalMode');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');};",
											"test_map.productType=function (element) {pm.expect(element.Name).eq('productType');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"SY_1_MISR__\",\"SY_2_SYN___\",\"SY_2_V10___\",\"SY_2_VG1___\",\"SY_2_VGP___\",\"SY_2_VGK___\",\"SY_2_AOD___\"]);",
											"",
											"};",
											"test_map.timeliness=function (element) {pm.expect(element.Name).eq('timeliness');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"NR\",\"NT\",\"ST\",\"AL\"]);};",
											"test_map.cloudCover=function (element) {pm.expect(element.Name).eq('cloudCover');pm.expect(element.ValueType).eq('Double');pm.expect(element.Value).to.be.a(\"number\");};",
											"test_map.orbitNumber=function (element) {pm.expect(element.Name).eq('orbitNumber');pm.expect(element.ValueType).eq('Integer');pm.expect(element.Value).to.be.a(\"number\");};",
											"test_map.lastOrbitNumber=function (element) {pm.expect(element.Name).eq('lastOrbitNumber');pm.expect(element.ValueType).eq('Integer');pm.expect(element.Value).to.be.a(\"number\");};",
											"test_map.orbitDirection=function (element) {pm.expect(element.Name).eq('orbitDirection');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"ASCENDING\",\"DESCENDING\"]);};",
											"test_map.lastOrbitDirection=function (element) {pm.expect(element.Name).eq('lastOrbitDirection');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"ASCENDING\",\"DESCENDING\"]);};",
											"test_map.relativeOrbitNumber=function (element) {pm.expect(element.Name).eq('relativeOrbitNumber');pm.expect(element.ValueType).eq('Integer');pm.expect(element.Value).to.be.a(\"number\");pm.expect(element.Value).to.match(/([1-9]|[1-8][0-9]|9[0-9]|[12][0-9]{2}|3[0-7][0-9]|38[0-5])/);};",
											"test_map.cycleNumber=function (element) {pm.expect(element.Name).eq('cycleNumber');pm.expect(element.ValueType).eq('Integer');pm.expect(element.Value).to.be.a(\"number\");pm.expect(element.Value).to.match(/([1-9]|[1-8][0-9]|9[0-9]|[12][0-9]{2}|3[0-7][0-9]|38[0-5])/);};",
											"test_map.processingLevel=function (element) {pm.expect(element.Name).eq('processingLevel');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"1\",\"2\"]);};",
											"test_map.processingDate=function (element) {pm.expect(element.Name).eq('processingDate');pm.expect(element.ValueType).eq('DateTimeOffset');pm.expect(element.Value).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);};",
											"test_map.processingCenter=function (element) {pm.expect(element.Name).eq('processingCenter');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');};",
											"test_map.processorName=function (element) {pm.expect(element.Name).eq('processorName');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');};",
											"test_map.processorVersion=function (element) {pm.expect(element.Name).eq('processorVersion');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');};",
											"test_map.coordinates=function (element) {pm.expect(element.Name).eq('coordinates');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');};",
											"test_map.baselineCollection=function (element) {pm.expect(element.Name).eq('baselineCollection');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');};",
											"test_map.snowOrIceCover=function (element) {pm.expect(element.Name).eq('snowOrIceCover');pm.expect(element.ValueType).eq('Double');pm.expect(element.Value).to.be.a(\"number\");};",
											"test_map.salineWaterCover=function (element) {pm.expect(element.Name).eq('salineWaterCover');pm.expect(element.ValueType).eq('Double');pm.expect(element.Value).to.be.a(\"number\");};",
											"test_map.coastalCover=function (element) {pm.expect(element.Name).eq('coastalCover');pm.expect(element.ValueType).eq('Double');pm.expect(element.Value).to.be.a(\"number\");};",
											"test_map.freshInlandWaterCover=function (element) {pm.expect(element.Name).eq('freshInlandWaterCover');pm.expect(element.ValueType).eq('Double');pm.expect(element.Value).to.be.a(\"number\");};",
											"test_map.tidalRegionCover=function (element) {pm.expect(element.Name).eq('tidalRegionCover');pm.expect(element.ValueType).eq('Double');pm.expect(element.Value).to.be.a(\"number\");};",
											"test_map.landCover=function (element) {pm.expect(element.Name).eq('landCover');pm.expect(element.ValueType).eq('Double');pm.expect(element.Value).to.be.a(\"number\");};",
											"test_map.lastRelativeOrbitNumber=function (element) {pm.expect(element.Name).eq('lastRelativeOrbitNumber');pm.expect(element.ValueType).eq('Integer');pm.expect(element.Value).to.be.a(\"number\");pm.expect(element.Value).to.match(/([1-9]|[1-8][0-9]|9[0-9]|[12][0-9]{2}|3[0-7][0-9]|38[0-5])/);};",
											"",
											"test_schema={};",
											"test_schema.beginningDateTime=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.endingDateTime=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.platformShortName=function (num) {pm.expect(num).to.be.within(0,1)};",
											"test_schema.platformSerialIdentifier=function (num) {pm.expect(num).to.be.within(0,1)};",
											"test_schema.instrumentShortName=function (num) {pm.expect(num).to.be.within(0,1)};",
											"test_schema.operationalMode=function (num) {pm.expect(num).to.be.within(0,1)};",
											"test_schema.productType=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.timeliness=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.cloudCover=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.orbitNumber=function (num) {pm.expect(num).to.be.within(1,2)};",
											"test_schema.lastOrbitNumber=function (num) {pm.expect(num).to.be.within(1,2)};",
											"test_schema.orbitDirection=function (num) {pm.expect(num).to.be.within(0,1)};",
											"test_schema.lastOrbitDirection=function (num) {pm.expect(num).to.be.within(0,1)};",
											"test_schema.relativeOrbitNumber=function (num) {pm.expect(num).to.be.within(1,2)};",
											"test_schema.cycleNumber=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.processingLevel=function (num) {pm.expect(num).to.be.within(0,1)};",
											"test_schema.processingDate=function (num) {pm.expect(num).to.be.within(0,1)};",
											"test_schema.processingCenter=function (num) {pm.expect(num).to.be.within(0,1)};",
											"test_schema.processorName=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.processorVersion=function (num) {pm.expect(num).to.be.within(0,1)};",
											"test_schema.coordinates=function (num) {pm.expect(num).to.be.within(0,1)};",
											"test_schema.baselineCollection=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.snowOrIceCover=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.salineWaterCover=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.coastalCover=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.freshInlandWaterCover=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.tidalRegionCover=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.landCover=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.lastRelativeOrbitNumber=function (num) {pm.expect(num).to.be.within(0,2)};",
											"",
											"            ",
											"properties_map = {};",
											"properties_map.Id=function (element) {pm.expect(element.Id).to.match(/[0-9a-fA-F]{8}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{12}/);};",
											"properties_map.Name=function (element) {pm.expect(element.Name).to.be.a(\"string\");};",
											"properties_map.ContentType=function (element) {pm.expect(element.ContentType).to.be.a(\"string\");};",
											"properties_map.ContentLength=function (element) {pm.expect(element.ContentLength).to.be.a(\"number\");};",
											"properties_map.OriginDate=function (element) {pm.expect(element.OriginDate).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d+([+-][0-2]\\d:[0-5]\\d|Z)/);};",
											"properties_map.PublicationDate=function (element) {pm.expect(element.PublicationDate).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);};",
											"properties_map.ModificationDate=function (element) {pm.expect(element.ModificationDate).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d+([+-][0-2]\\d:[0-5]\\d|Z)/);};",
											"properties_map.Online=function (element) {pm.expect(element.Online).to.be.oneOf([TRUE,FALSE,true,false]);};",
											"properties_map.EvictionDate=function (element) {if(element.EvictionDate){ pm.expect(element.EvictionDate).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d+([+-][0-2]\\d:[0-5]\\d|Z)/); }};",
											"properties_map.Checksum=function (element) {for(i=0; i<element.Checksum.length; i++ ){pm.expect(element.Checksum[i].Algorithm).to.be.oneOf([\"MD5\",\"SHA-1\",\"SHA-256\",\"SHA-512\"]);checksum_algorithm = {'MD5': '[a-fA-F0-9]{32}', 'SHA-1': '[0-9a-f]{5,40}', 'SHA-256': '[A-Fa-f0-9]{64}', 'SHA-512': '[A-Fa-f0-9]{128}'};pm.expect(element.Checksum[i].Value).to.match(new RegExp(checksum_algorithm[element.Checksum[i].Algorithm]));}};",
											"properties_map.ContentDate=function (element) {pm.expect(element.ContentDate[\"Start\"]).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);pm.expect(element.ContentDate[\"End\"]).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);};",
											"properties_map.Footprint=function (element) {if(element.Footprint){ pm.expect(element.Footprint).to.match(/geography'SRID=\\d+;[Polygon|Multipolygon|Point](.*)/); }};",
											"",
											"let schema_seen = {};",
											"",
											"function testSpecific(value, product){",
											"",
											"    if (schema_seen[value.Name]){",
											"        schema_seen[value.Name]++;",
											"    }else{",
											"        schema_seen[value.Name]=1;",
											"    }",
											"",
											"    if (test_map[value.Name]) {",
											"        pm.test(\"Test Attribute \"+value.Name + \" for Product: \"+product.Name+\" - \"+product.Id, function(){test_map[value.Name](value, product)});",
											"    }",
											"    else {",
											"        pm.test.skip(\"Test Attribute \"+value.Name + \" for Product: \"+product.Name+\" - \"+product.Id);",
											"    }",
											"}",
											"function propertySpecific(key, product){",
											"    if (properties_map[key]) {",
											"        pm.test(\"Test Property \"+key+\" for Product: \"+product.Name+\" - \"+product.Id, function(){properties_map[key](product)});",
											"    }",
											"    else {",
											"        pm.test.skip(\"Test Property \"+key+\" for Product: \"+product.Name+\" - \"+product.Id);",
											"    }",
											"}",
											"",
											"for (var counter = 0;  counter  < jsonDataElements.length; counter++){",
											"    var product = jsonDataElements[counter];",
											"    console.log(\"Processing Product: \"+product.Name+\" - \"+product.Id);",
											"",
											"    for (const[key, value] of Object.entries(properties_map)){",
											"        propertySpecific(key, jsonDataElements[counter]);",
											"    }",
											"",
											"    if(\"Attributes\" in jsonDataElements[counter]){",
											"        schema_seen = {};",
											"",
											"        pm.test(\"Test Attributes list\", function(){",
											"            pm.expect(jsonDataElements[counter].Attributes.length).to.be.above(0);",
											"        });",
											"",
											"        jsonDataElements[counter].Attributes.forEach(function(elem){",
											"            testSpecific(elem, jsonDataElements[counter]);",
											"        });",
											"        var product = jsonDataElements[counter];",
											"        for (const[key, value] of Object.entries(test_schema)) {pm.test(\"Schema Attribute \"+key+\" Product \"+product.Name+\" - \"+product.Id, function(){",
											"        if(schema_seen[key] == undefined){",
											"            schema_seen[key] = 0;",
											"        }",
											"        value(schema_seen[key], product)});}",
											"    }",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{service-root-uri}}/odata/v1/Products?$expand=Attributes&$top=1&$filter=(contains(Name,'SY_1_MISR__') or contains(Name,'SY_2_SYN___') or contains(Name,'SY_2_V10___') or contains(Name,'SY_2_VG1___') or contains(Name,'SY_2_VGP___') or contains(Name,'SY_2_VGK___') or contains(Name,'SY_2_AOD___')) and startswith(Name,'S3')\n",
									"host": [
										"{{service-root-uri}}"
									],
									"path": [
										"odata",
										"v1",
										"Products"
									],
									"query": [
										{
											"key": "$expand",
											"value": "Attributes"
										},
										{
											"key": "$top",
											"value": "1"
										},
										{
											"key": "$filter",
											"value": "(contains(Name,'SY_1_MISR__') or contains(Name,'SY_2_SYN___') or contains(Name,'SY_2_V10___') or contains(Name,'SY_2_VG1___') or contains(Name,'SY_2_VGP___') or contains(Name,'SY_2_VGK___') or contains(Name,'SY_2_AOD___')) and startswith(Name,'S3')\n"
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SY_1_MISR__') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SY_2_SYN___') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SY_2_V10___') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SY_2_VG1___') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SY_2_VGP___') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SY_2_VGK___') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SY_2_AOD___') and startswith(Name,'S3')\n",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "S3_OLCI_L1+L2_Products",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9938259b-e68f-483f-97c4-971f15c2d7c0",
										"exec": [
											"var jsonDataElements = pm.response.json().value;",
											"pm.test(\"Response time is less than \" +  environment[\"query-timeout\"] + \"ms\", function(){",
											"    pm.expect(pm.response.responseTime).to.be.below(parseInt(environment[\"query-timeout\"]));",
											"});",
											"",
											"pm.test(\"Test OData context\", function(){",
											"    query_string = pm.request.url.getQueryString();",
											"    if(query_string.includes(\"$expand=Attributes\")){",
											"        pm.expect( pm.response.json()['@odata.context']).to.include(\"$metadata#Products(Attributes())\");",
											"    } else{",
											"        pm.expect( pm.response.json()['@odata.context']).to.include(\"$metadata#Products\");",
											"    }",
											"});",
											"",
											"var TRUE = true;",
											"var FALSE = false;",
											"",
											"test_map={};",
											"test_map.beginningDateTime=function (element) {pm.expect(element.Name).eq('beginningDateTime');pm.expect(element.ValueType).eq('DateTimeOffset');pm.expect(element.Value).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);};",
											"test_map.endingDateTime=function (element) {pm.expect(element.Name).eq('endingDateTime');pm.expect(element.ValueType).eq('DateTimeOffset');pm.expect(element.Value).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);};",
											"test_map.platformShortName=function (element) {pm.expect(element.Name).eq('platformShortName');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"SENTINEL-3\"]);};",
											"test_map.platformSerialIdentifier=function (element) {pm.expect(element.Name).eq('platformSerialIdentifier');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"A\",\"B\",\"C\",\"D\",\"_\"]);};",
											"test_map.instrumentShortName=function (element) {pm.expect(element.Name).eq('instrumentShortName');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"OLCI\"]);};",
											"test_map.operationalMode=function (element) {pm.expect(element.Name).eq('operationalMode');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');};",
											"test_map.productType=function (element) {pm.expect(element.Name).eq('productType');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"OL_1_EFR___\",\"OL_1_ERR___\",\"OL_1_RAC___\",\"OL_1_SPC___\",\"OL_2_LFR___\",\"OL_2_LRR___\"]);",
											"",
											"};",
											"test_map.timeliness=function (element) {pm.expect(element.Name).eq('timeliness');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"NR\",\"NT\",\"ST\",\"AL\"]);};",
											"test_map.cloudCover=function (element) {pm.expect(element.Name).eq('cloudCover');pm.expect(element.ValueType).eq('Double');pm.expect(element.Value).to.be.a(\"number\");};",
											"test_map.orbitNumber=function (element) {pm.expect(element.Name).eq('orbitNumber');pm.expect(element.ValueType).eq('Integer');pm.expect(element.Value).to.be.a(\"number\");};",
											"test_map.lastOrbitNumber=function (element) {pm.expect(element.Name).eq('lastOrbitNumber');pm.expect(element.ValueType).eq('Integer');pm.expect(element.Value).to.be.a(\"number\");};",
											"test_map.orbitDirection=function (element) {pm.expect(element.Name).eq('orbitDirection');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"ASCENDING\",\"DESCENDING\"]);};",
											"test_map.lastOrbitDirection=function (element) {pm.expect(element.Name).eq('lastOrbitDirection');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"ASCENDING\",\"DESCENDING\"]);};",
											"test_map.relativeOrbitNumber=function (element) {pm.expect(element.Name).eq('relativeOrbitNumber');pm.expect(element.ValueType).eq('Integer');pm.expect(element.Value).to.be.a(\"number\");pm.expect(element.Value).to.match(/([1-9]|[1-8][0-9]|9[0-9]|[12][0-9]{2}|3[0-7][0-9]|38[0-5])/);};",
											"test_map.cycleNumber=function (element) {pm.expect(element.Name).eq('cycleNumber');pm.expect(element.ValueType).eq('Integer');pm.expect(element.Value).to.be.a(\"number\");pm.expect(element.Value).to.match(/([1-9]|[1-8][0-9]|9[0-9]|[12][0-9]{2}|3[0-7][0-9]|38[0-5])/);};",
											"test_map.processingLevel=function (element) {pm.expect(element.Name).eq('processingLevel');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"1\",\"2\"]);};",
											"test_map.processingDate=function (element) {pm.expect(element.Name).eq('processingDate');pm.expect(element.ValueType).eq('DateTimeOffset');pm.expect(element.Value).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);};",
											"test_map.processingCenter=function (element) {pm.expect(element.Name).eq('processingCenter');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');};",
											"test_map.processorName=function (element) {pm.expect(element.Name).eq('processorName');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');};",
											"test_map.processorVersion=function (element) {pm.expect(element.Name).eq('processorVersion');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');};",
											"test_map.coordinates=function (element) {pm.expect(element.Name).eq('coordinates');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');};",
											"test_map.baselineCollection=function (element) {pm.expect(element.Name).eq('baselineCollection');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');};",
											"test_map.brightCover=function (element) {pm.expect(element.Name).eq('brightCover');pm.expect(element.ValueType).eq('Double');pm.expect(element.Value).to.be.a(\"number\");};",
											"test_map.salineWaterCover=function (element) {pm.expect(element.Name).eq('salineWaterCover');pm.expect(element.ValueType).eq('Double');pm.expect(element.Value).to.be.a(\"number\");};",
											"test_map.coastalCover=function (element) {pm.expect(element.Name).eq('coastalCover');pm.expect(element.ValueType).eq('Double');pm.expect(element.Value).to.be.a(\"number\");};",
											"test_map.freshInlandWaterCover=function (element) {pm.expect(element.Name).eq('freshInlandWaterCover');pm.expect(element.ValueType).eq('Double');pm.expect(element.Value).to.be.a(\"number\");};",
											"test_map.tidalRegionCover=function (element) {pm.expect(element.Name).eq('tidalRegionCover');pm.expect(element.ValueType).eq('Double');pm.expect(element.Value).to.be.a(\"number\");};",
											"test_map.landCover=function (element) {pm.expect(element.Name).eq('landCover');pm.expect(element.ValueType).eq('Double');pm.expect(element.Value).to.be.a(\"number\");};",
											"test_map.lastRelativeOrbitNumber=function (element) {pm.expect(element.Name).eq('lastRelativeOrbitNumber');pm.expect(element.ValueType).eq('Integer');pm.expect(element.Value).to.be.a(\"number\");pm.expect(element.Value).to.match(/([1-9]|[1-8][0-9]|9[0-9]|[12][0-9]{2}|3[0-7][0-9]|38[0-5])/);};",
											"",
											"test_schema={};",
											"test_schema.beginningDateTime=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.endingDateTime=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.platformShortName=function (num) {pm.expect(num).to.be.within(0,1)};",
											"test_schema.platformSerialIdentifier=function (num) {pm.expect(num).to.be.within(0,1)};",
											"test_schema.instrumentShortName=function (num) {pm.expect(num).to.be.within(0,1)};",
											"test_schema.operationalMode=function (num) {pm.expect(num).to.be.within(0,1)};",
											"test_schema.productType=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.timeliness=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.cloudCover=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.orbitNumber=function (num) {pm.expect(num).to.be.within(1,2)};",
											"test_schema.lastOrbitNumber=function (num) {pm.expect(num).to.be.within(1,2)};",
											"test_schema.orbitDirection=function (num) {pm.expect(num).to.be.within(0,1)};",
											"test_schema.lastOrbitDirection=function (num) {pm.expect(num).to.be.within(0,1)};",
											"test_schema.relativeOrbitNumber=function (num) {pm.expect(num).to.be.within(1,2)};",
											"test_schema.cycleNumber=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.processingLevel=function (num) {pm.expect(num).to.be.within(0,1)};",
											"test_schema.processingDate=function (num) {pm.expect(num).to.be.within(0,1)};",
											"test_schema.processingCenter=function (num) {pm.expect(num).to.be.within(0,1)};",
											"test_schema.processorName=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.processorVersion=function (num) {pm.expect(num).to.be.within(0,1)};",
											"test_schema.coordinates=function (num) {pm.expect(num).to.be.within(0,1)};",
											"test_schema.baselineCollection=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.brightCover=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.salineWaterCover=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.coastalCover=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.freshInlandWaterCover=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.tidalRegionCover=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.landCover=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.lastRelativeOrbitNumber=function (num) {pm.expect(num).to.be.within(0,2)};",
											"",
											"            ",
											"properties_map = {};",
											"properties_map.Id=function (element) {pm.expect(element.Id).to.match(/[0-9a-fA-F]{8}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{12}/);};",
											"properties_map.Name=function (element) {pm.expect(element.Name).to.be.a(\"string\");};",
											"properties_map.ContentType=function (element) {pm.expect(element.ContentType).to.be.a(\"string\");};",
											"properties_map.ContentLength=function (element) {pm.expect(element.ContentLength).to.be.a(\"number\");};",
											"properties_map.OriginDate=function (element) {pm.expect(element.OriginDate).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d+([+-][0-2]\\d:[0-5]\\d|Z)/);};",
											"properties_map.PublicationDate=function (element) {pm.expect(element.PublicationDate).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);};",
											"properties_map.ModificationDate=function (element) {pm.expect(element.ModificationDate).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d+([+-][0-2]\\d:[0-5]\\d|Z)/);};",
											"properties_map.Online=function (element) {pm.expect(element.Online).to.be.oneOf([TRUE,FALSE,true,false]);};",
											"properties_map.EvictionDate=function (element) {if(element.EvictionDate){ pm.expect(element.EvictionDate).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d+([+-][0-2]\\d:[0-5]\\d|Z)/); }};",
											"properties_map.Checksum=function (element) {for(i=0; i<element.Checksum.length; i++ ){pm.expect(element.Checksum[i].Algorithm).to.be.oneOf([\"MD5\",\"SHA-1\",\"SHA-256\",\"SHA-512\"]);checksum_algorithm = {'MD5': '[a-fA-F0-9]{32}', 'SHA-1': '[0-9a-f]{5,40}', 'SHA-256': '[A-Fa-f0-9]{64}', 'SHA-512': '[A-Fa-f0-9]{128}'};pm.expect(element.Checksum[i].Value).to.match(new RegExp(checksum_algorithm[element.Checksum[i].Algorithm]));}};",
											"properties_map.ContentDate=function (element) {pm.expect(element.ContentDate[\"Start\"]).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);pm.expect(element.ContentDate[\"End\"]).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);};",
											"properties_map.Footprint=function (element) {if(element.Footprint){ pm.expect(element.Footprint).to.match(/geography'SRID=\\d+;[Polygon|Multipolygon|Point](.*)/); }};",
											"",
											"let schema_seen = {};",
											"",
											"function testSpecific(value, product){",
											"",
											"    if (schema_seen[value.Name]){",
											"        schema_seen[value.Name]++;",
											"    }else{",
											"        schema_seen[value.Name]=1;",
											"    }",
											"",
											"    if (test_map[value.Name]) {",
											"        pm.test(\"Test Attribute \"+value.Name + \" for Product: \"+product.Name+\" - \"+product.Id, function(){test_map[value.Name](value, product)});",
											"    }",
											"    else {",
											"        pm.test.skip(\"Test Attribute \"+value.Name + \" for Product: \"+product.Name+\" - \"+product.Id);",
											"    }",
											"}",
											"function propertySpecific(key, product){",
											"    if (properties_map[key]) {",
											"        pm.test(\"Test Property \"+key+\" for Product: \"+product.Name+\" - \"+product.Id, function(){properties_map[key](product)});",
											"    }",
											"    else {",
											"        pm.test.skip(\"Test Property \"+key+\" for Product: \"+product.Name+\" - \"+product.Id);",
											"    }",
											"}",
											"",
											"for (var counter = 0;  counter  < jsonDataElements.length; counter++){",
											"    var product = jsonDataElements[counter];",
											"    console.log(\"Processing Product: \"+product.Name+\" - \"+product.Id);",
											"",
											"    for (const[key, value] of Object.entries(properties_map)){",
											"        propertySpecific(key, jsonDataElements[counter]);",
											"    }",
											"",
											"    if(\"Attributes\" in jsonDataElements[counter]){",
											"        schema_seen = {};",
											"",
											"        pm.test(\"Test Attributes list\", function(){",
											"            pm.expect(jsonDataElements[counter].Attributes.length).to.be.above(0);",
											"        });",
											"",
											"        jsonDataElements[counter].Attributes.forEach(function(elem){",
											"            testSpecific(elem, jsonDataElements[counter]);",
											"        });",
											"        var product = jsonDataElements[counter];",
											"        for (const[key, value] of Object.entries(test_schema)) {pm.test(\"Schema Attribute \"+key+\" Product \"+product.Name+\" - \"+product.Id, function(){",
											"        if(schema_seen[key] == undefined){",
											"            schema_seen[key] = 0;",
											"        }",
											"        value(schema_seen[key], product)});}",
											"    }",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{service-root-uri}}/odata/v1/Products?$expand=Attributes&$top=1&$filter=(contains(Name,'OL_1_EFR___') or contains(Name,'OL_1_ERR___') or contains(Name,'OL_1_RAC___') or contains(Name,'OL_1_SPC___') or contains(Name,'OL_2_LFR___') or contains(Name,'OL_2_LRR___')) and startswith(Name,'S3')\n",
									"host": [
										"{{service-root-uri}}"
									],
									"path": [
										"odata",
										"v1",
										"Products"
									],
									"query": [
										{
											"key": "$expand",
											"value": "Attributes"
										},
										{
											"key": "$top",
											"value": "1"
										},
										{
											"key": "$filter",
											"value": "(contains(Name,'OL_1_EFR___') or contains(Name,'OL_1_ERR___') or contains(Name,'OL_1_RAC___') or contains(Name,'OL_1_SPC___') or contains(Name,'OL_2_LFR___') or contains(Name,'OL_2_LRR___')) and startswith(Name,'S3')\n"
										},
										{
											"key": "$filter",
											"value": "contains(Name,'OL_1_EFR___') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'OL_1_ERR___') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'OL_1_RAC___') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'OL_1_SPC___') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'OL_2_LFR___') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'OL_2_LRR___') and startswith(Name,'S3')\n",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "S3_MWR_L1_Products",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0fa8cffe-016e-47f4-b261-d52c91bbd68b",
										"exec": [
											"var jsonDataElements = pm.response.json().value;",
											"pm.test(\"Response time is less than \" +  environment[\"query-timeout\"] + \"ms\", function(){",
											"    pm.expect(pm.response.responseTime).to.be.below(parseInt(environment[\"query-timeout\"]));",
											"});",
											"",
											"pm.test(\"Test OData context\", function(){",
											"    query_string = pm.request.url.getQueryString();",
											"    if(query_string.includes(\"$expand=Attributes\")){",
											"        pm.expect( pm.response.json()['@odata.context']).to.include(\"$metadata#Products(Attributes())\");",
											"    } else{",
											"        pm.expect( pm.response.json()['@odata.context']).to.include(\"$metadata#Products\");",
											"    }",
											"});",
											"",
											"var TRUE = true;",
											"var FALSE = false;",
											"",
											"test_map={};",
											"test_map.beginningDateTime=function (element) {pm.expect(element.Name).eq('beginningDateTime');pm.expect(element.ValueType).eq('DateTimeOffset');pm.expect(element.Value).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);};",
											"test_map.endingDateTime=function (element) {pm.expect(element.Name).eq('endingDateTime');pm.expect(element.ValueType).eq('DateTimeOffset');pm.expect(element.Value).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);};",
											"test_map.platformShortName=function (element) {pm.expect(element.Name).eq('platformShortName');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"SENTINEL-3\"]);};",
											"test_map.platformSerialIdentifier=function (element) {pm.expect(element.Name).eq('platformSerialIdentifier');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"A\",\"B\",\"C\",\"D\",\"_\"]);};",
											"test_map.instrumentShortName=function (element) {pm.expect(element.Name).eq('instrumentShortName');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"MWR\"]);};",
											"test_map.operationalMode=function (element) {pm.expect(element.Name).eq('operationalMode');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');};",
											"test_map.productType=function (element) {pm.expect(element.Name).eq('productType');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"MW_1_CAL___\",\"MW_1_MWR___\"]);",
											"",
											"};",
											"test_map.timeliness=function (element) {pm.expect(element.Name).eq('timeliness');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"NR\",\"NT\",\"ST\",\"AL\"]);};",
											"test_map.orbitNumber=function (element) {pm.expect(element.Name).eq('orbitNumber');pm.expect(element.ValueType).eq('Integer');pm.expect(element.Value).to.be.a(\"number\");};",
											"test_map.lastOrbitNumber=function (element) {pm.expect(element.Name).eq('lastOrbitNumber');pm.expect(element.ValueType).eq('Integer');pm.expect(element.Value).to.be.a(\"number\");};",
											"test_map.orbitDirection=function (element) {pm.expect(element.Name).eq('orbitDirection');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"ASCENDING\",\"DESCENDING\"]);};",
											"test_map.lastOrbitDirection=function (element) {pm.expect(element.Name).eq('lastOrbitDirection');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"ASCENDING\",\"DESCENDING\"]);};",
											"test_map.relativeOrbitNumber=function (element) {pm.expect(element.Name).eq('relativeOrbitNumber');pm.expect(element.ValueType).eq('Integer');pm.expect(element.Value).to.be.a(\"number\");pm.expect(element.Value).to.match(/([1-9]|[1-8][0-9]|9[0-9]|[12][0-9]{2}|3[0-7][0-9]|38[0-5])/);};",
											"test_map.cycleNumber=function (element) {pm.expect(element.Name).eq('cycleNumber');pm.expect(element.ValueType).eq('Integer');pm.expect(element.Value).to.be.a(\"number\");pm.expect(element.Value).to.match(/([1-9]|[1-8][0-9]|9[0-9]|[12][0-9]{2}|3[0-7][0-9]|38[0-5])/);};",
											"test_map.processingLevel=function (element) {pm.expect(element.Name).eq('processingLevel');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"1\"]);};",
											"test_map.processingDate=function (element) {pm.expect(element.Name).eq('processingDate');pm.expect(element.ValueType).eq('DateTimeOffset');pm.expect(element.Value).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);};",
											"test_map.processingCenter=function (element) {pm.expect(element.Name).eq('processingCenter');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');};",
											"test_map.processorName=function (element) {pm.expect(element.Name).eq('processorName');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');};",
											"test_map.processorVersion=function (element) {pm.expect(element.Name).eq('processorVersion');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');};",
											"test_map.coordinates=function (element) {pm.expect(element.Name).eq('coordinates');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');};",
											"test_map.baselineCollection=function (element) {pm.expect(element.Name).eq('baselineCollection');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');};",
											"test_map.lastRelativeOrbitNumber=function (element) {pm.expect(element.Name).eq('lastRelativeOrbitNumber');pm.expect(element.ValueType).eq('Integer');pm.expect(element.Value).to.be.a(\"number\");pm.expect(element.Value).to.match(/([1-9]|[1-8][0-9]|9[0-9]|[12][0-9]{2}|3[0-7][0-9]|38[0-5])/);};",
											"",
											"test_schema={};",
											"test_schema.beginningDateTime=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.endingDateTime=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.platformShortName=function (num) {pm.expect(num).to.be.within(0,1)};",
											"test_schema.platformSerialIdentifier=function (num) {pm.expect(num).to.be.within(0,1)};",
											"test_schema.instrumentShortName=function (num) {pm.expect(num).to.be.within(0,1)};",
											"test_schema.operationalMode=function (num) {pm.expect(num).to.be.within(0,1)};",
											"test_schema.productType=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.timeliness=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.orbitNumber=function (num) {pm.expect(num).to.be.within(1,2)};",
											"test_schema.lastOrbitNumber=function (num) {pm.expect(num).to.be.within(1,2)};",
											"test_schema.orbitDirection=function (num) {pm.expect(num).to.be.within(0,1)};",
											"test_schema.lastOrbitDirection=function (num) {pm.expect(num).to.be.within(0,1)};",
											"test_schema.relativeOrbitNumber=function (num) {pm.expect(num).to.be.within(1,2)};",
											"test_schema.cycleNumber=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.processingLevel=function (num) {pm.expect(num).to.be.within(0,1)};",
											"test_schema.processingDate=function (num) {pm.expect(num).to.be.within(0,1)};",
											"test_schema.processingCenter=function (num) {pm.expect(num).to.be.within(0,1)};",
											"test_schema.processorName=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.processorVersion=function (num) {pm.expect(num).to.be.within(0,1)};",
											"test_schema.coordinates=function (num) {pm.expect(num).to.be.within(0,1)};",
											"test_schema.baselineCollection=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.lastRelativeOrbitNumber=function (num) {pm.expect(num).to.be.within(0,2)};",
											"",
											"            ",
											"properties_map = {};",
											"properties_map.Id=function (element) {pm.expect(element.Id).to.match(/[0-9a-fA-F]{8}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{12}/);};",
											"properties_map.Name=function (element) {pm.expect(element.Name).to.be.a(\"string\");};",
											"properties_map.ContentType=function (element) {pm.expect(element.ContentType).to.be.a(\"string\");};",
											"properties_map.ContentLength=function (element) {pm.expect(element.ContentLength).to.be.a(\"number\");};",
											"properties_map.OriginDate=function (element) {pm.expect(element.OriginDate).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d+([+-][0-2]\\d:[0-5]\\d|Z)/);};",
											"properties_map.PublicationDate=function (element) {pm.expect(element.PublicationDate).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);};",
											"properties_map.ModificationDate=function (element) {pm.expect(element.ModificationDate).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d+([+-][0-2]\\d:[0-5]\\d|Z)/);};",
											"properties_map.Online=function (element) {pm.expect(element.Online).to.be.oneOf([TRUE,FALSE,true,false]);};",
											"properties_map.EvictionDate=function (element) {if(element.EvictionDate){ pm.expect(element.EvictionDate).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d+([+-][0-2]\\d:[0-5]\\d|Z)/); }};",
											"properties_map.Checksum=function (element) {for(i=0; i<element.Checksum.length; i++ ){pm.expect(element.Checksum[i].Algorithm).to.be.oneOf([\"MD5\",\"SHA-1\",\"SHA-256\",\"SHA-512\"]);checksum_algorithm = {'MD5': '[a-fA-F0-9]{32}', 'SHA-1': '[0-9a-f]{5,40}', 'SHA-256': '[A-Fa-f0-9]{64}', 'SHA-512': '[A-Fa-f0-9]{128}'};pm.expect(element.Checksum[i].Value).to.match(new RegExp(checksum_algorithm[element.Checksum[i].Algorithm]));}};",
											"properties_map.ContentDate=function (element) {pm.expect(element.ContentDate[\"Start\"]).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);pm.expect(element.ContentDate[\"End\"]).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);};",
											"properties_map.Footprint=function (element) {if(element.Footprint){ pm.expect(element.Footprint).to.match(/geography'SRID=\\d+;[Polygon|Multipolygon|Point](.*)/); }};",
											"",
											"let schema_seen = {};",
											"",
											"function testSpecific(value, product){",
											"",
											"    if (schema_seen[value.Name]){",
											"        schema_seen[value.Name]++;",
											"    }else{",
											"        schema_seen[value.Name]=1;",
											"    }",
											"",
											"    if (test_map[value.Name]) {",
											"        pm.test(\"Test Attribute \"+value.Name + \" for Product: \"+product.Name+\" - \"+product.Id, function(){test_map[value.Name](value, product)});",
											"    }",
											"    else {",
											"        pm.test.skip(\"Test Attribute \"+value.Name + \" for Product: \"+product.Name+\" - \"+product.Id);",
											"    }",
											"}",
											"function propertySpecific(key, product){",
											"    if (properties_map[key]) {",
											"        pm.test(\"Test Property \"+key+\" for Product: \"+product.Name+\" - \"+product.Id, function(){properties_map[key](product)});",
											"    }",
											"    else {",
											"        pm.test.skip(\"Test Property \"+key+\" for Product: \"+product.Name+\" - \"+product.Id);",
											"    }",
											"}",
											"",
											"for (var counter = 0;  counter  < jsonDataElements.length; counter++){",
											"    var product = jsonDataElements[counter];",
											"    console.log(\"Processing Product: \"+product.Name+\" - \"+product.Id);",
											"",
											"    for (const[key, value] of Object.entries(properties_map)){",
											"        propertySpecific(key, jsonDataElements[counter]);",
											"    }",
											"",
											"    if(\"Attributes\" in jsonDataElements[counter]){",
											"        schema_seen = {};",
											"",
											"        pm.test(\"Test Attributes list\", function(){",
											"            pm.expect(jsonDataElements[counter].Attributes.length).to.be.above(0);",
											"        });",
											"",
											"        jsonDataElements[counter].Attributes.forEach(function(elem){",
											"            testSpecific(elem, jsonDataElements[counter]);",
											"        });",
											"        var product = jsonDataElements[counter];",
											"        for (const[key, value] of Object.entries(test_schema)) {pm.test(\"Schema Attribute \"+key+\" Product \"+product.Name+\" - \"+product.Id, function(){",
											"        if(schema_seen[key] == undefined){",
											"            schema_seen[key] = 0;",
											"        }",
											"        value(schema_seen[key], product)});}",
											"    }",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{service-root-uri}}/odata/v1/Products?$expand=Attributes&$top=1&$filter=(contains(Name,'MW_1_CAL___') or contains(Name,'MW_1_MWR___')) and startswith(Name,'S3')\n",
									"host": [
										"{{service-root-uri}}"
									],
									"path": [
										"odata",
										"v1",
										"Products"
									],
									"query": [
										{
											"key": "$expand",
											"value": "Attributes"
										},
										{
											"key": "$top",
											"value": "1"
										},
										{
											"key": "$filter",
											"value": "(contains(Name,'MW_1_CAL___') or contains(Name,'MW_1_MWR___')) and startswith(Name,'S3')\n"
										},
										{
											"key": "$filter",
											"value": "contains(Name,'MW_1_CAL___') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'MW_1_MWR___') and startswith(Name,'S3')\n",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "S3_Level-0_Products_",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2ca72af2-6564-4677-9269-6d6d6701741b",
										"exec": [
											"var jsonDataElements = pm.response.json().value;",
											"pm.test(\"Response time is less than \" +  environment[\"query-timeout\"] + \"ms\", function(){",
											"    pm.expect(pm.response.responseTime).to.be.below(parseInt(environment[\"query-timeout\"]));",
											"});",
											"",
											"pm.test(\"Test OData context\", function(){",
											"    query_string = pm.request.url.getQueryString();",
											"    if(query_string.includes(\"$expand=Attributes\")){",
											"        pm.expect( pm.response.json()['@odata.context']).to.include(\"$metadata#Products(Attributes())\");",
											"    } else{",
											"        pm.expect( pm.response.json()['@odata.context']).to.include(\"$metadata#Products\");",
											"    }",
											"});",
											"",
											"var TRUE = true;",
											"var FALSE = false;",
											"",
											"test_map={};",
											"test_map.beginningDateTime=function (element) {pm.expect(element.Name).eq('beginningDateTime');pm.expect(element.ValueType).eq('DateTimeOffset');pm.expect(element.Value).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);};",
											"test_map.endingDateTime=function (element) {pm.expect(element.Name).eq('endingDateTime');pm.expect(element.ValueType).eq('DateTimeOffset');pm.expect(element.Value).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);};",
											"test_map.platformShortName=function (element) {pm.expect(element.Name).eq('platformShortName');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"SENTINEL-3\"]);};",
											"test_map.platformSerialIdentifier=function (element) {pm.expect(element.Name).eq('platformSerialIdentifier');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"A\",\"B\",\"C\",\"D\",\"_\"]);};",
											"test_map.instrumentShortName=function (element) {pm.expect(element.Name).eq('instrumentShortName');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"SRAL\",\"MWR\",\"OLCI\",\"SLSTR\",\"GNSS\",\"DORIS\",\"Telemetry\",\"SYNERGY\",\"HKTM\",\"NAVATT\"]);};",
											"test_map.operationalMode=function (element) {pm.expect(element.Name).eq('operationalMode');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');};",
											"test_map.productType=function (element) {pm.expect(element.Name).eq('productType');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"DO_0_DOP___\",\"DO_0_NAV___\",\"GN_0_GNS___\",\"MW_0_MWR___\",\"OL_0_CR0___\",\"OL_0_CR1___\",\"OL_0_EFR___\",\"SL_0_SLT___\",\"SR_0_SRA___\",\"SR_0_CAL___\",\"TM_0_HKM___\",\"TM_0_HKM2__\",\"TM_0_NAT___\"]);",
											"",
											"};",
											"test_map.timeliness=function (element) {pm.expect(element.Name).eq('timeliness');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"NR\",\"NT\",\"ST\",\"AL\"]);};",
											"test_map.orbitNumber=function (element) {pm.expect(element.Name).eq('orbitNumber');pm.expect(element.ValueType).eq('Integer');pm.expect(element.Value).to.be.a(\"number\");};",
											"test_map.lastOrbitNumber=function (element) {pm.expect(element.Name).eq('lastOrbitNumber');pm.expect(element.ValueType).eq('Integer');pm.expect(element.Value).to.be.a(\"number\");};",
											"test_map.orbitDirection=function (element) {pm.expect(element.Name).eq('orbitDirection');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"ASCENDING\",\"DESCENDING\"]);};",
											"test_map.lastOrbitDirection=function (element) {pm.expect(element.Name).eq('lastOrbitDirection');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"ASCENDING\",\"DESCENDING\"]);};",
											"test_map.relativeOrbitNumber=function (element) {pm.expect(element.Name).eq('relativeOrbitNumber');pm.expect(element.ValueType).eq('Integer');pm.expect(element.Value).to.be.a(\"number\");pm.expect(element.Value).to.match(/([1-9]|[1-8][0-9]|9[0-9]|[12][0-9]{2}|3[0-7][0-9]|38[0-5])/);};",
											"test_map.cycleNumber=function (element) {pm.expect(element.Name).eq('cycleNumber');pm.expect(element.ValueType).eq('Integer');pm.expect(element.Value).to.be.a(\"number\");pm.expect(element.Value).to.match(/([1-9]|[1-8][0-9]|9[0-9]|[12][0-9]{2}|3[0-7][0-9]|38[0-5])/);};",
											"test_map.processingLevel=function (element) {pm.expect(element.Name).eq('processingLevel');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"0\"]);};",
											"test_map.processingDate=function (element) {pm.expect(element.Name).eq('processingDate');pm.expect(element.ValueType).eq('DateTimeOffset');pm.expect(element.Value).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);};",
											"test_map.processingCenter=function (element) {pm.expect(element.Name).eq('processingCenter');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');};",
											"test_map.processorName=function (element) {pm.expect(element.Name).eq('processorName');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');};",
											"test_map.processorVersion=function (element) {pm.expect(element.Name).eq('processorVersion');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');};",
											"test_map.coordinates=function (element) {pm.expect(element.Name).eq('coordinates');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');};",
											"test_map.baselineCollection=function (element) {pm.expect(element.Name).eq('baselineCollection');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');};",
											"test_map.lastRelativeOrbitNumber=function (element) {pm.expect(element.Name).eq('lastRelativeOrbitNumber');pm.expect(element.ValueType).eq('Integer');pm.expect(element.Value).to.be.a(\"number\");pm.expect(element.Value).to.match(/([1-9]|[1-8][0-9]|9[0-9]|[12][0-9]{2}|3[0-7][0-9]|38[0-5])/);};",
											"",
											"test_schema={};",
											"test_schema.beginningDateTime=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.endingDateTime=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.platformShortName=function (num) {pm.expect(num).to.be.within(0,1)};",
											"test_schema.platformSerialIdentifier=function (num) {pm.expect(num).to.be.within(0,1)};",
											"test_schema.instrumentShortName=function (num) {pm.expect(num).to.be.within(0,1)};",
											"test_schema.operationalMode=function (num) {pm.expect(num).to.be.within(0,1)};",
											"test_schema.productType=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.timeliness=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.orbitNumber=function (num) {pm.expect(num).to.be.within(1,2)};",
											"test_schema.lastOrbitNumber=function (num) {pm.expect(num).to.be.within(1,2)};",
											"test_schema.orbitDirection=function (num) {pm.expect(num).to.be.within(0,1)};",
											"test_schema.lastOrbitDirection=function (num) {pm.expect(num).to.be.within(0,1)};",
											"test_schema.relativeOrbitNumber=function (num) {pm.expect(num).to.be.within(1,2)};",
											"test_schema.cycleNumber=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.processingLevel=function (num) {pm.expect(num).to.be.within(0,1)};",
											"test_schema.processingDate=function (num) {pm.expect(num).to.be.within(0,1)};",
											"test_schema.processingCenter=function (num) {pm.expect(num).to.be.within(0,1)};",
											"test_schema.processorName=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.processorVersion=function (num) {pm.expect(num).to.be.within(0,1)};",
											"test_schema.coordinates=function (num) {pm.expect(num).to.be.within(0,1)};",
											"test_schema.baselineCollection=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.lastRelativeOrbitNumber=function (num) {pm.expect(num).to.be.within(0,2)};",
											"",
											"            ",
											"properties_map = {};",
											"properties_map.Id=function (element) {pm.expect(element.Id).to.match(/[0-9a-fA-F]{8}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{12}/);};",
											"properties_map.Name=function (element) {pm.expect(element.Name).to.be.a(\"string\");};",
											"properties_map.ContentType=function (element) {pm.expect(element.ContentType).to.be.a(\"string\");};",
											"properties_map.ContentLength=function (element) {pm.expect(element.ContentLength).to.be.a(\"number\");};",
											"properties_map.OriginDate=function (element) {pm.expect(element.OriginDate).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d+([+-][0-2]\\d:[0-5]\\d|Z)/);};",
											"properties_map.PublicationDate=function (element) {pm.expect(element.PublicationDate).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);};",
											"properties_map.ModificationDate=function (element) {pm.expect(element.ModificationDate).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d+([+-][0-2]\\d:[0-5]\\d|Z)/);};",
											"properties_map.Online=function (element) {pm.expect(element.Online).to.be.oneOf([TRUE,FALSE,true,false]);};",
											"properties_map.EvictionDate=function (element) {if(element.EvictionDate){ pm.expect(element.EvictionDate).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d+([+-][0-2]\\d:[0-5]\\d|Z)/); }};",
											"properties_map.Checksum=function (element) {for(i=0; i<element.Checksum.length; i++ ){pm.expect(element.Checksum[i].Algorithm).to.be.oneOf([\"MD5\",\"SHA-1\",\"SHA-256\",\"SHA-512\"]);checksum_algorithm = {'MD5': '[a-fA-F0-9]{32}', 'SHA-1': '[0-9a-f]{5,40}', 'SHA-256': '[A-Fa-f0-9]{64}', 'SHA-512': '[A-Fa-f0-9]{128}'};pm.expect(element.Checksum[i].Value).to.match(new RegExp(checksum_algorithm[element.Checksum[i].Algorithm]));}};",
											"properties_map.ContentDate=function (element) {pm.expect(element.ContentDate[\"Start\"]).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);pm.expect(element.ContentDate[\"End\"]).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);};",
											"properties_map.Footprint=function (element) {if(element.Footprint){ pm.expect(element.Footprint).to.match(/geography'SRID=\\d+;[Polygon|Multipolygon|Point](.*)/); }};",
											"",
											"let schema_seen = {};",
											"",
											"function testSpecific(value, product){",
											"",
											"    if (schema_seen[value.Name]){",
											"        schema_seen[value.Name]++;",
											"    }else{",
											"        schema_seen[value.Name]=1;",
											"    }",
											"",
											"    if (test_map[value.Name]) {",
											"        pm.test(\"Test Attribute \"+value.Name + \" for Product: \"+product.Name+\" - \"+product.Id, function(){test_map[value.Name](value, product)});",
											"    }",
											"    else {",
											"        pm.test.skip(\"Test Attribute \"+value.Name + \" for Product: \"+product.Name+\" - \"+product.Id);",
											"    }",
											"}",
											"function propertySpecific(key, product){",
											"    if (properties_map[key]) {",
											"        pm.test(\"Test Property \"+key+\" for Product: \"+product.Name+\" - \"+product.Id, function(){properties_map[key](product)});",
											"    }",
											"    else {",
											"        pm.test.skip(\"Test Property \"+key+\" for Product: \"+product.Name+\" - \"+product.Id);",
											"    }",
											"}",
											"",
											"for (var counter = 0;  counter  < jsonDataElements.length; counter++){",
											"    var product = jsonDataElements[counter];",
											"    console.log(\"Processing Product: \"+product.Name+\" - \"+product.Id);",
											"",
											"    for (const[key, value] of Object.entries(properties_map)){",
											"        propertySpecific(key, jsonDataElements[counter]);",
											"    }",
											"",
											"    if(\"Attributes\" in jsonDataElements[counter]){",
											"        schema_seen = {};",
											"",
											"        pm.test(\"Test Attributes list\", function(){",
											"            pm.expect(jsonDataElements[counter].Attributes.length).to.be.above(0);",
											"        });",
											"",
											"        jsonDataElements[counter].Attributes.forEach(function(elem){",
											"            testSpecific(elem, jsonDataElements[counter]);",
											"        });",
											"        var product = jsonDataElements[counter];",
											"        for (const[key, value] of Object.entries(test_schema)) {pm.test(\"Schema Attribute \"+key+\" Product \"+product.Name+\" - \"+product.Id, function(){",
											"        if(schema_seen[key] == undefined){",
											"            schema_seen[key] = 0;",
											"        }",
											"        value(schema_seen[key], product)});}",
											"    }",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{service-root-uri}}/odata/v1/Products?$expand=Attributes&$top=1&$filter=(contains(Name,'DO_0_DOP___') or contains(Name,'DO_0_NAV___') or contains(Name,'GN_0_GNS___') or contains(Name,'MW_0_MWR___') or contains(Name,'OL_0_CR0___') or contains(Name,'OL_0_CR1___') or contains(Name,'OL_0_EFR___') or contains(Name,'SL_0_SLT___') or contains(Name,'SR_0_SRA___') or contains(Name,'SR_0_CAL___') or contains(Name,'TM_0_HKM___') or contains(Name,'TM_0_HKM2__') or contains(Name,'TM_0_NAT___')) and startswith(Name,'S3')\n",
									"host": [
										"{{service-root-uri}}"
									],
									"path": [
										"odata",
										"v1",
										"Products"
									],
									"query": [
										{
											"key": "$expand",
											"value": "Attributes"
										},
										{
											"key": "$top",
											"value": "1"
										},
										{
											"key": "$filter",
											"value": "(contains(Name,'DO_0_DOP___') or contains(Name,'DO_0_NAV___') or contains(Name,'GN_0_GNS___') or contains(Name,'MW_0_MWR___') or contains(Name,'OL_0_CR0___') or contains(Name,'OL_0_CR1___') or contains(Name,'OL_0_EFR___') or contains(Name,'SL_0_SLT___') or contains(Name,'SR_0_SRA___') or contains(Name,'SR_0_CAL___') or contains(Name,'TM_0_HKM___') or contains(Name,'TM_0_HKM2__') or contains(Name,'TM_0_NAT___')) and startswith(Name,'S3')\n"
										},
										{
											"key": "$filter",
											"value": "contains(Name,'DO_0_DOP___') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'DO_0_NAV___') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'GN_0_GNS___') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'MW_0_MWR___') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'OL_0_CR0___') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'OL_0_CR1___') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'OL_0_EFR___') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_0_SLT___') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_0_SRA___') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_0_CAL___') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'TM_0_HKM___') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'TM_0_HKM2__') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'TM_0_NAT___') and startswith(Name,'S3')\n",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "S3_Auxiliary_Data",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b775f6d0-2ab6-4434-b1ca-26f0a21871e7",
										"exec": [
											"var jsonDataElements = pm.response.json().value;",
											"pm.test(\"Response time is less than \" +  environment[\"query-timeout\"] + \"ms\", function(){",
											"    pm.expect(pm.response.responseTime).to.be.below(parseInt(environment[\"query-timeout\"]));",
											"});",
											"",
											"pm.test(\"Test OData context\", function(){",
											"    query_string = pm.request.url.getQueryString();",
											"    if(query_string.includes(\"$expand=Attributes\")){",
											"        pm.expect( pm.response.json()['@odata.context']).to.include(\"$metadata#Products(Attributes())\");",
											"    } else{",
											"        pm.expect( pm.response.json()['@odata.context']).to.include(\"$metadata#Products\");",
											"    }",
											"});",
											"",
											"var TRUE = true;",
											"var FALSE = false;",
											"",
											"test_map={};",
											"test_map.productType=function (element) {pm.expect(element.Name).eq('productType');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"AX___MF1_AX\",\"AX___MFA_AX\",\"AX___MA1_AX\",\"AX___MF2_AX\",\"AX___MA2_AX\",\"AX___OSF_AX\",\"AX___FPO_AX\",\"AX___FRO_AX\",\"AX___BA__AX\",\"AX___BB2_AX\",\"AX___DEM_AX\",\"AX___LWM_AX\",\"AX___OOM_AX\",\"AX___CLM_AX\",\"AX___TRM_AX\",\"AX___CST_AX\",\"SR___CHDNAX\",\"SR___CHDRAX\",\"SR_1_CONMAX\",\"SR_1_CONCAX\",\"SR_2_CON_AX\",\"SR___LSM_AX\",\"SR_2_IC01AX\",\"SR_2_IC02AX\",\"SR_2_IC03AX\",\"SR_2_IC04AX\",\"SR_2_IC05AX\",\"SR_2_IC06AX\",\"SR_2_IC07AX\",\"SR_2_IC08AX\",\"SR_2_IC09AX\",\"SR_2_IC10AX\",\"SR_2_IC11AX\",\"SR_2_EOT1AX\",\"SR_2_EOT2AX\",\"SR_2_LT1_AX\",\"SR_2_LT2_AX\",\"SR_2_LNEQAX\",\"SR_2_GEO_AX\",\"SR_2_MSS1AX\",\"SR_2_MSS2AX\",\"SR_2_ODLEAX\",\"SR_2_WNDLAX\",\"SR_2_WNDSAX\",\"SR_2_SIGLAX\",\"SR_2_SIGSAX\",\"SR_2_SET_AX\",\"SR_2_SSM_AX\",\"SR_2_MSMGAX\",\"SR_2_CP00AX\",\"SR_2_CP06AX\",\"SR_2_CP12AX\",\"SR_2_CP18AX\",\"SR_2_S1AMAX\",\"SR_2_S2AMAX\",\"SR_2_S1PHAX\",\"SR_2_S2PHAX\",\"SR_2_MDT_AX\",\"SR_2_SHD_AX\",\"SR_2_SSBLAX\",\"SR_2_SSBSAX\",\"SR_2_SD01AX\",\"SR_2_SD02AX\",\"SR_2_SD03AX\",\"SR_2_SD04AX\",\"SR_2_SD05AX\",\"SR_2_SD06AX\",\"SR_2_SD07AX\",\"SR_2_SD08AX\",\"SR_2_SD09AX\",\"SR_2_SD10AX\",\"SR_2_SD11AX\",\"SR_2_SD12AX\",\"SR_2_SI01AX\",\"SR_2_SI02AX\",\"SR_2_SI03AX\",\"SR_2_SI04AX\",\"SR_2_SI05AX\",\"SR_2_SI06AX\",\"SR_2_SI07AX\",\"SR_2_SI08AX\",\"SR_2_SI09AX\",\"SR_2_SI10AX\",\"SR_2_SI11AX\",\"SR_2_SI12AX\",\"SR_2_SST_AX\",\"SR_2_LRC_AX\",\"SR_2_SFL_AX\",\"SR_2_FLT_AX\",\"SR_2_RRC_AX\",\"SR_2_CCT_AX\",\"SR_2_SURFAX\",\"SR_2_RET_AX\",\"SR_2_MLM_AX\",\"SR_2_MAG_AX\",\"SR_2_LUTFAX\",\"SR_2_LUTEAX\",\"SR_2_LUTSAX\",\"SR___ROE_AX\",\"SR_1_CA1LAX\",\"SR_1_CA1SAX\",\"SR_1_CA2KAX\",\"SR_1_CA2CAX\",\"CAL2_C_LTM\",\"MW_1_NIR_AX\",\"MW_1_DNB_AX\",\"MW_1_MON_AX\",\"SL_1_VSC_AX\",\"SR___MGNPAX\",\"SR___POEPAX\",\"SR_2_PMPPAX\",\"SR_2_PCPPAX\",\"SR___MDO_AX\",\"SR___POESAX\",\"SR_2_PMPSAX\",\"SR_2_PCPSAX\",\"SR_2_RMO_AX\",\"SR_2_PMO_AX\",\"SR_2_POL_AX\",\"SR_2_PGI_AX\",\"SR_2_RGI_AX\",\"SR_1_USO_AX\",\"SR___MGNSAX\",\"SR_2_SIC_AX\",\"MW_1_SLC_AX\",\"MW___CHDNAX\",\"MW___CHDRAX\",\"MW___STD_AX\",\"OL_1_EO__AX\",\"OL_1_RAC_AX\",\"OL_1_SPC_AX\",\"OL_1_CLUTAX\",\"OL_1_INS_AX\",\"OL_1_CAL_AX\",\"OL_1_PRG_AX\",\"OL_2_PCP_AX\",\"OL_2_PPP_AX\",\"OL_2_CLP_AX\",\"OL_2_WVP_AX\",\"OL_2_ACP_AX\",\"OL_2_OCP_AX\",\"OL_2_VGP_AX\",\"SL_1_PCP_AX\",\"SL_1_ANC_AX\",\"SL_1_N_S1AX\",\"SL_1_N_S2AX\",\"SL_1_N_S3AX\",\"SL_1_O_S1AX\",\"SL_1_O_S2AX\",\"SL_1_O_S3AX\",\"SL_1_NAS4AX\",\"SL_1_NAS5AX\",\"SL_1_NAS6AX\",\"SL_1_NBS4AX\",\"SL_1_NBS5AX\",\"SL_1_NBS6AX\",\"SL_1_OAS4AX\",\"SL_1_OAS5AX\",\"SL_1_OAS6AX\",\"SL_1_OBS4AX\",\"SL_1_OBS5AX\",\"SL_1_OBS6AX\",\"SL_1_N_S7AX\",\"SL_1_N_S8AX\",\"SL_1_N_S9AX\",\"SL_1_N_F1AX\",\"SL_1_N_F2AX\",\"SL_1_O_S7AX\",\"SL_1_O_S8AX\",\"SL_1_O_S9AX\",\"SL_1_O_F1AX\",\"SL_1_O_F2AX\",\"SL_1_VIC_AX\",\"SL_1_GEO_AX\",\"SL_1_GEC_AX\",\"SL_1_CLO_AX\",\"SL_1_ESSTAX\",\"SL_2_PCP_AX\",\"SL_2_S6N_AX\",\"SL_2_S7N_AX\",\"SL_2_S8N_AX\",\"SL_2_S9N_AX\",\"SL_2_F1N_AX\",\"SL_2_F2N_AX\",\"SL_2_S7O_AX\",\"SL_2_S8O_AX\",\"SL_2_S9O_AX\",\"SL_2_N2_CAX\",\"SL_2_N3RCAX\",\"SL_2_N3_CAX\",\"SL_2_D2_CAX\",\"SL_2_D3_CAX\",\"SL_2_SST_AX\",\"SL_2_SDI3AX\",\"SL_2_SDI2AX\",\"SL_2_SSESAX\",\"SL_2_LSTCAX\",\"SL_2_LSTBAX\",\"SL_2_LSTVAX\",\"SL_2_LSTWAX\",\"SL_2_LSTEAX\",\"SL_2_FRPTAX\",\"SL_2_SSTAAX\",\"OL_1_PCPBAX\",\"SL_1_PCPBAX\",\"SL_1_PLTBAX\",\"OL_2_PCPBAX\",\"OL_2_PLTBAX\",\"SL_2_PCPBAX\",\"SL_2_PLTBAX\",\"AX___CHD_AX\",\"GN_1_GSVMAX\",\"GN_1_GSVHAX\",\"GN_1_GCLHAX\",\"GN_1_EOP_AX\",\"GN_1_EOPHAX\",\"GN_1_LSC_AX\",\"GN_1_NAV_AX\",\"GN_1_NSA_AX\",\"GN_1_NTR_AX\",\"GN_1_NPR_AX\",\"GN_1_ATX_AX\",\"GN_1_SAC_AX\",\"GN_1_CHD_AX\",\"GN_1_NSA3AX\",\"GN_1_NTR3AX\",\"GN_1_ATX3AX\",\"GN_1_MANHAX\",\"GN_1_MASSAX\",\"SR_2_NRPPAX\",\"SY_1_TPDBAX\",\"OL_1_MCHDAX\",\"SL_1_MCHDAX\",\"SY_1_PCP_AX\",\"SY_1_CDIBAX\",\"SY_2_PCP_AX\",\"SY_2_PCPSAX\",\"SY_2_RAD_AX\",\"SY_2_RADPAX\",\"SY_2_SPCPAX\",\"SY_2_RADSAX\",\"SY_2_PCPBAX\",\"SY_2_PLTBAX\",\"SY_2_CVPBAX\",\"SY_2_PVPBAX\",\"SY_2_CVSBAX\",\"SY_2_PVSBAX\",\"AX___TAI_AX\",\"SR___MOE_AX\",\"SR___POE_AX\",\"SR___MGN_AX\",\"SR_2_PMP_AX\",\"SR_2_PCP_AX\",\"SR___CHD_AX\",\"SR_1_CON_AX\",\"SR_2_LSM_AX\",\"AX___MAN_AX\",\"AX___MFC_AX\",\"SR___ATB_AX\",\"SR_2_GEOIAX\",\"SR_2_MSS_AX\",\"MW_1_CON_AX\",\"GN___CHD_AX\",\"AX___CN0_AX\",\"AX___GCP_AX\",\"OL_0_AX_PRC\",\"OL_1_CHARAX\",\"OL_1_PROGAX\",\"SL_1_CHF1AX\",\"SL_1_CHF7AX\",\"SL_1_CHS7AX\",\"SL_2_DATBAX\",\"SL_2_FRPAAX\",\"SL_2_SATBAX\",\"SY_1_GCPBAX\",\"SL_2_ACLMAX\",\"SL_2_ART_AX\",\"SL_2_OSR_AX\",\"SL_2_PCPAAX\",\"SY_2_ACLMAX\",\"SY_2_ART_AX\",\"SY_2_LSR_AX\",\"SY_2_OSR_AX\",\"SY_2_PCPAAX\",\"SL_2_CFM_AX\",\"SL_2_FXPAAX\",\"SL_2_PCPFAX\",\"SL_2_PLFMAX\",\"SL_2_SXPAAX\",\"SL_1_IRE_AX\",\"SL_1_LCC_AX\",\"SL_1_CDP_AX\",\"SL_1_CLP_AX\",\"SL_1_ADJ_AX\",\"SL_1_RTT_AX\",\"SY_2_AODCAX\"]);",
											"",
											"};",
											"test_map.timeliness=function (element) {pm.expect(element.Name).eq('timeliness');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"AL\"]);};",
											"test_map.platformShortName=function (element) {pm.expect(element.Name).eq('platformShortName');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"SENTINEL-3\"]);};",
											"test_map.platformSerialIdentifier=function (element) {pm.expect(element.Name).eq('platformSerialIdentifier');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"A\",\"B\",\"C\",\"D\",\"_\"]);};",
											"test_map.beginningDateTime=function (element) {pm.expect(element.Name).eq('beginningDateTime');pm.expect(element.ValueType).eq('DateTimeOffset');pm.expect(element.Value).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);};",
											"test_map.endingDateTime=function (element) {pm.expect(element.Name).eq('endingDateTime');pm.expect(element.ValueType).eq('DateTimeOffset');pm.expect(element.Value).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);};",
											"test_map.processingCenter=function (element) {pm.expect(element.Name).eq('processingCenter');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');};",
											"test_map.processorName=function (element) {pm.expect(element.Name).eq('processorName');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');};",
											"test_map.processorVersion=function (element) {pm.expect(element.Name).eq('processorVersion');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');};",
											"test_map.baselineCollection=function (element) {pm.expect(element.Name).eq('baselineCollection');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');};",
											"",
											"test_schema={};",
											"test_schema.productType=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.timeliness=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.platformShortName=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.platformSerialIdentifier=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.beginningDateTime=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.endingDateTime=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.processingCenter=function (num) {pm.expect(num).to.be.within(0,1)};",
											"test_schema.processorName=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.processorVersion=function (num) {pm.expect(num).to.be.within(0,1)};",
											"test_schema.baselineCollection=function (num) {pm.expect(num).to.be.eq(1)};",
											"",
											"            ",
											"properties_map = {};",
											"properties_map.Id=function (element) {pm.expect(element.Id).to.match(/[0-9a-fA-F]{8}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{12}/);};",
											"properties_map.Name=function (element) {pm.expect(element.Name).to.be.a(\"string\");};",
											"properties_map.ContentType=function (element) {pm.expect(element.ContentType).to.be.a(\"string\");};",
											"properties_map.ContentLength=function (element) {pm.expect(element.ContentLength).to.be.a(\"number\");};",
											"properties_map.OriginDate=function (element) {pm.expect(element.OriginDate).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d+([+-][0-2]\\d:[0-5]\\d|Z)/);};",
											"properties_map.PublicationDate=function (element) {pm.expect(element.PublicationDate).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);};",
											"properties_map.ModificationDate=function (element) {pm.expect(element.ModificationDate).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d+([+-][0-2]\\d:[0-5]\\d|Z)/);};",
											"properties_map.Online=function (element) {pm.expect(element.Online).to.be.oneOf([TRUE,FALSE,true,false]);};",
											"properties_map.EvictionDate=function (element) {if(element.EvictionDate){ pm.expect(element.EvictionDate).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d+([+-][0-2]\\d:[0-5]\\d|Z)/); }};",
											"properties_map.Checksum=function (element) {for(i=0; i<element.Checksum.length; i++ ){pm.expect(element.Checksum[i].Algorithm).to.be.oneOf([\"MD5\",\"SHA-1\",\"SHA-256\",\"SHA-512\"]);checksum_algorithm = {'MD5': '[a-fA-F0-9]{32}', 'SHA-1': '[0-9a-f]{5,40}', 'SHA-256': '[A-Fa-f0-9]{64}', 'SHA-512': '[A-Fa-f0-9]{128}'};pm.expect(element.Checksum[i].Value).to.match(new RegExp(checksum_algorithm[element.Checksum[i].Algorithm]));}};",
											"properties_map.ContentDate=function (element) {pm.expect(element.ContentDate[\"Start\"]).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);pm.expect(element.ContentDate[\"End\"]).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);};",
											"properties_map.Footprint=function (element) {if(element.Footprint){ pm.expect(element.Footprint).to.match(/geography'SRID=\\d+;[Polygon|Multipolygon|Point](.*)/); }};",
											"",
											"let schema_seen = {};",
											"",
											"function testSpecific(value, product){",
											"",
											"    if (schema_seen[value.Name]){",
											"        schema_seen[value.Name]++;",
											"    }else{",
											"        schema_seen[value.Name]=1;",
											"    }",
											"",
											"    if (test_map[value.Name]) {",
											"        pm.test(\"Test Attribute \"+value.Name + \" for Product: \"+product.Name+\" - \"+product.Id, function(){test_map[value.Name](value, product)});",
											"    }",
											"    else {",
											"        pm.test.skip(\"Test Attribute \"+value.Name + \" for Product: \"+product.Name+\" - \"+product.Id);",
											"    }",
											"}",
											"function propertySpecific(key, product){",
											"    if (properties_map[key]) {",
											"        pm.test(\"Test Property \"+key+\" for Product: \"+product.Name+\" - \"+product.Id, function(){properties_map[key](product)});",
											"    }",
											"    else {",
											"        pm.test.skip(\"Test Property \"+key+\" for Product: \"+product.Name+\" - \"+product.Id);",
											"    }",
											"}",
											"",
											"for (var counter = 0;  counter  < jsonDataElements.length; counter++){",
											"    var product = jsonDataElements[counter];",
											"    console.log(\"Processing Product: \"+product.Name+\" - \"+product.Id);",
											"",
											"    for (const[key, value] of Object.entries(properties_map)){",
											"        propertySpecific(key, jsonDataElements[counter]);",
											"    }",
											"",
											"    if(\"Attributes\" in jsonDataElements[counter]){",
											"        schema_seen = {};",
											"",
											"        pm.test(\"Test Attributes list\", function(){",
											"            pm.expect(jsonDataElements[counter].Attributes.length).to.be.above(0);",
											"        });",
											"",
											"        jsonDataElements[counter].Attributes.forEach(function(elem){",
											"            testSpecific(elem, jsonDataElements[counter]);",
											"        });",
											"        var product = jsonDataElements[counter];",
											"        for (const[key, value] of Object.entries(test_schema)) {pm.test(\"Schema Attribute \"+key+\" Product \"+product.Name+\" - \"+product.Id, function(){",
											"        if(schema_seen[key] == undefined){",
											"            schema_seen[key] = 0;",
											"        }",
											"        value(schema_seen[key], product)});}",
											"    }",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{service-root-uri}}/odata/v1/Products?$expand=Attributes&$top=1&$filter=(contains(Name,'AX') or contains(Name, 'CAL2_C_LTM')) and startswith(Name,'S3')\n",
									"host": [
										"{{service-root-uri}}"
									],
									"path": [
										"odata",
										"v1",
										"Products"
									],
									"query": [
										{
											"key": "$expand",
											"value": "Attributes"
										},
										{
											"key": "$top",
											"value": "1"
										},
										{
											"key": "$filter",
											"value": "(contains(Name,'AX') or contains(Name, 'CAL2_C_LTM')) and startswith(Name,'S3')\n"
										},
										{
											"key": "$filter",
											"value": "contains(Name,'AX___MF1_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'AX___MFA_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'AX___MA1_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'AX___MF2_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'AX___MA2_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'AX___OSF_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'AX___FPO_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'AX___FRO_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'AX___BA__AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'AX___BB2_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'AX___DEM_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'AX___LWM_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'AX___OOM_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'AX___CLM_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'AX___TRM_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'AX___CST_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR___CHDNAX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR___CHDRAX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_1_CONMAX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_1_CONCAX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_CON_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR___LSM_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_IC01AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_IC02AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_IC03AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_IC04AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_IC05AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_IC06AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_IC07AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_IC08AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_IC09AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_IC10AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_IC11AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_EOT1AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_EOT2AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_LT1_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_LT2_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_LNEQAX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_GEO_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_MSS1AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_MSS2AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_ODLEAX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_WNDLAX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_WNDSAX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_SIGLAX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_SIGSAX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_SET_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_SSM_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_MSMGAX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_CP00AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_CP06AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_CP12AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_CP18AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_S1AMAX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_S2AMAX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_S1PHAX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_S2PHAX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_MDT_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_SHD_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_SSBLAX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_SSBSAX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_SD01AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_SD02AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_SD03AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_SD04AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_SD05AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_SD06AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_SD07AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_SD08AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_SD09AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_SD10AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_SD11AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_SD12AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_SI01AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_SI02AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_SI03AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_SI04AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_SI05AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_SI06AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_SI07AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_SI08AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_SI09AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_SI10AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_SI11AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_SI12AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_SST_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_LRC_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_SFL_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_FLT_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_RRC_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_CCT_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_SURFAX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_RET_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_MLM_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_MAG_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_LUTFAX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_LUTEAX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_LUTSAX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR___ROE_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_1_CA1LAX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_1_CA1SAX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_1_CA2KAX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_1_CA2CAX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'CAL2_C_LTM') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'MW_1_NIR_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'MW_1_DNB_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'MW_1_MON_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_1_VSC_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR___MGNPAX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR___POEPAX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_PMPPAX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_PCPPAX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR___MDO_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR___POESAX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_PMPSAX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_PCPSAX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_RMO_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_PMO_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_POL_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_PGI_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_RGI_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_1_USO_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR___MGNSAX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_SIC_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'MW_1_SLC_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'MW___CHDNAX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'MW___CHDRAX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'MW___STD_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'OL_1_EO__AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'OL_1_RAC_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'OL_1_SPC_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'OL_1_CLUTAX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'OL_1_INS_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'OL_1_CAL_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'OL_1_PRG_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'OL_2_PCP_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'OL_2_PPP_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'OL_2_CLP_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'OL_2_WVP_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'OL_2_ACP_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'OL_2_OCP_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'OL_2_VGP_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_1_PCP_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_1_ANC_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_1_N_S1AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_1_N_S2AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_1_N_S3AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_1_O_S1AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_1_O_S2AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_1_O_S3AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_1_NAS4AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_1_NAS5AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_1_NAS6AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_1_NBS4AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_1_NBS5AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_1_NBS6AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_1_OAS4AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_1_OAS5AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_1_OAS6AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_1_OBS4AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_1_OBS5AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_1_OBS6AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_1_N_S7AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_1_N_S8AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_1_N_S9AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_1_N_F1AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_1_N_F2AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_1_O_S7AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_1_O_S8AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_1_O_S9AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_1_O_F1AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_1_O_F2AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_1_VIC_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_1_GEO_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_1_GEC_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_1_CLO_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_1_ESSTAX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_2_PCP_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_2_S6N_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_2_S7N_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_2_S8N_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_2_S9N_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_2_F1N_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_2_F2N_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_2_S7O_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_2_S8O_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_2_S9O_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_2_N2_CAX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_2_N3RCAX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_2_N3_CAX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_2_D2_CAX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_2_D3_CAX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_2_SST_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_2_SDI3AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_2_SDI2AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_2_SSESAX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_2_LSTCAX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_2_LSTBAX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_2_LSTVAX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_2_LSTWAX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_2_LSTEAX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_2_FRPTAX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_2_SSTAAX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'OL_1_PCPBAX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_1_PCPBAX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_1_PLTBAX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'OL_2_PCPBAX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'OL_2_PLTBAX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_2_PCPBAX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_2_PLTBAX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'AX___CHD_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'GN_1_GSVMAX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'GN_1_GSVHAX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'GN_1_GCLHAX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'GN_1_EOP_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'GN_1_EOPHAX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'GN_1_LSC_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'GN_1_NAV_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'GN_1_NSA_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'GN_1_NTR_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'GN_1_NPR_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'GN_1_ATX_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'GN_1_SAC_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'GN_1_CHD_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'GN_1_NSA3AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'GN_1_NTR3AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'GN_1_ATX3AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'GN_1_MANHAX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'GN_1_MASSAX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_NRPPAX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SY_1_TPDBAX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'OL_1_MCHDAX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_1_MCHDAX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SY_1_PCP_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SY_1_CDIBAX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SY_2_PCP_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SY_2_PCPSAX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SY_2_RAD_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SY_2_RADPAX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SY_2_SPCPAX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SY_2_RADSAX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SY_2_PCPBAX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SY_2_PLTBAX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SY_2_CVPBAX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SY_2_PVPBAX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SY_2_CVSBAX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SY_2_PVSBAX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'AX___TAI_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR___MOE_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR___POE_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR___MGN_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_PMP_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_PCP_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR___CHD_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_1_CON_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_LSM_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'AX___MAN_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'AX___MFC_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR___ATB_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_GEOIAX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_MSS_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'MW_1_CON_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'GN___CHD_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'AX___CN0_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'AX___GCP_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'OL_0_AX_PRC') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'OL_1_CHARAX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'OL_1_PROGAX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_1_CHF1AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_1_CHF7AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_1_CHS7AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_2_DATBAX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_2_FRPAAX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_2_SATBAX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SY_1_GCPBAX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_2_ACLMAX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_2_ART_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_2_OSR_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_2_PCPAAX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SY_2_ACLMAX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SY_2_ART_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SY_2_LSR_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SY_2_OSR_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SY_2_PCPAAX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_2_CFM_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_2_FXPAAX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_2_PCPFAX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_2_PLFMAX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_2_SXPAAX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_1_IRE_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_1_LCC_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_1_CDP_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_1_CLP_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_1_ADJ_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_1_RTT_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SY_2_AODCAX') and startswith(Name,'S3')\n",
											"disabled": true
										}
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "DD",
					"item": [
						{
							"name": "S3_SRAL_Products",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "07004edb-9148-4dca-8abe-40693d8d64be",
										"exec": [
											"var jsonDataElements = pm.response.json().value;",
											"pm.test(\"Response time is less than \" +  environment[\"query-timeout\"] + \"ms\", function(){",
											"    pm.expect(pm.response.responseTime).to.be.below(parseInt(environment[\"query-timeout\"]));",
											"});",
											"",
											"pm.test(\"Test OData context\", function(){",
											"    query_string = pm.request.url.getQueryString();",
											"    if(query_string.includes(\"$expand=Attributes\")){",
											"        pm.expect( pm.response.json()['@odata.context']).to.include(\"$metadata#Products(Attributes())\");",
											"    } else{",
											"        pm.expect( pm.response.json()['@odata.context']).to.include(\"$metadata#Products\");",
											"    }",
											"});",
											"",
											"var TRUE = true;",
											"var FALSE = false;",
											"",
											"test_map={};",
											"test_map.beginningDateTime=function (element) {pm.expect(element.Name).eq('beginningDateTime');pm.expect(element.ValueType).eq('DateTimeOffset');pm.expect(element.Value).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);};",
											"test_map.endingDateTime=function (element) {pm.expect(element.Name).eq('endingDateTime');pm.expect(element.ValueType).eq('DateTimeOffset');pm.expect(element.Value).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);};",
											"test_map.platformShortName=function (element) {pm.expect(element.Name).eq('platformShortName');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"SENTINEL-3\"]);};",
											"test_map.platformSerialIdentifier=function (element) {pm.expect(element.Name).eq('platformSerialIdentifier');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"A\",\"B\",\"C\",\"D\",\"_\"]);};",
											"test_map.instrumentShortName=function (element) {pm.expect(element.Name).eq('instrumentShortName');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"SRAL\"]);};",
											"test_map.operationalMode=function (element) {pm.expect(element.Name).eq('operationalMode');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');};",
											"test_map.productType=function (element) {pm.expect(element.Name).eq('productType');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"SR_1_CAL___\",\"SR_1_SRA___\",\"SR_1_SRA_A_\",\"SR_1_SRA_BS\",\"SR_2_LAN___\"]);",
											"",
											"};",
											"test_map.timeliness=function (element) {pm.expect(element.Name).eq('timeliness');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"NR\",\"NT\",\"ST\",\"AL\"]);};",
											"test_map.orbitNumber=function (element) {pm.expect(element.Name).eq('orbitNumber');pm.expect(element.ValueType).eq('Integer');pm.expect(element.Value).to.be.a(\"number\");};",
											"test_map.lastOrbitNumber=function (element) {pm.expect(element.Name).eq('lastOrbitNumber');pm.expect(element.ValueType).eq('Integer');pm.expect(element.Value).to.be.a(\"number\");};",
											"test_map.orbitDirection=function (element) {pm.expect(element.Name).eq('orbitDirection');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"ASCENDING\",\"DESCENDING\"]);};",
											"test_map.lastOrbitDirection=function (element) {pm.expect(element.Name).eq('lastOrbitDirection');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"ASCENDING\",\"DESCENDING\"]);};",
											"test_map.relativeOrbitNumber=function (element) {pm.expect(element.Name).eq('relativeOrbitNumber');pm.expect(element.ValueType).eq('Integer');pm.expect(element.Value).to.be.a(\"number\");pm.expect(element.Value).to.match(/([1-9]|[1-8][0-9]|9[0-9]|[12][0-9]{2}|3[0-7][0-9]|38[0-5])/);};",
											"test_map.cycleNumber=function (element) {pm.expect(element.Name).eq('cycleNumber');pm.expect(element.ValueType).eq('Integer');pm.expect(element.Value).to.be.a(\"number\");pm.expect(element.Value).to.match(/([1-9]|[1-8][0-9]|9[0-9]|[12][0-9]{2}|3[0-7][0-9]|38[0-5])/);};",
											"test_map.processingLevel=function (element) {pm.expect(element.Name).eq('processingLevel');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"1\",\"2\"]);};",
											"test_map.processingDate=function (element) {pm.expect(element.Name).eq('processingDate');pm.expect(element.ValueType).eq('DateTimeOffset');pm.expect(element.Value).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);};",
											"test_map.processingCenter=function (element) {pm.expect(element.Name).eq('processingCenter');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');};",
											"test_map.processorName=function (element) {pm.expect(element.Name).eq('processorName');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');};",
											"test_map.processorVersion=function (element) {pm.expect(element.Name).eq('processorVersion');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');};",
											"test_map.coordinates=function (element) {pm.expect(element.Name).eq('coordinates');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');};",
											"test_map.baselineCollection=function (element) {pm.expect(element.Name).eq('baselineCollection');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');};",
											"test_map.landCover=function (element) {pm.expect(element.Name).eq('landCover');pm.expect(element.ValueType).eq('Double');pm.expect(element.Value).to.be.a(\"number\");pm.expect(element.Value).to.match(/([0-9]|[1-8][0-9]|9[0-9]|100)/);};",
											"test_map.closedSeaCover=function (element) {pm.expect(element.Name).eq('closedSeaCover');pm.expect(element.ValueType).eq('Integer');pm.expect(element.Value).to.be.a(\"number\");pm.expect(element.Value).to.match(/([0-9]|[1-8][0-9]|9[0-9]|100)/);};",
											"test_map.continentalIceCover=function (element) {pm.expect(element.Name).eq('continentalIceCover');pm.expect(element.ValueType).eq('Integer');pm.expect(element.Value).to.be.a(\"number\");pm.expect(element.Value).to.match(/([0-9]|[1-8][0-9]|9[0-9]|100)/);};",
											"test_map.openOceanCover=function (element) {pm.expect(element.Name).eq('openOceanCover');pm.expect(element.ValueType).eq('Integer');pm.expect(element.Value).to.be.a(\"number\");pm.expect(element.Value).to.match(/([0-9]|[1-8][0-9]|9[0-9]|100)/);};",
											"test_map.lastRelativeOrbitNumber=function (element) {pm.expect(element.Name).eq('lastRelativeOrbitNumber');pm.expect(element.ValueType).eq('Integer');pm.expect(element.Value).to.be.a(\"number\");pm.expect(element.Value).to.match(/([1-9]|[1-8][0-9]|9[0-9]|[12][0-9]{2}|3[0-7][0-9]|38[0-5])/);};",
											"",
											"test_schema={};",
											"test_schema.beginningDateTime=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.endingDateTime=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.platformShortName=function (num) {pm.expect(num).to.be.within(0,1)};",
											"test_schema.platformSerialIdentifier=function (num) {pm.expect(num).to.be.within(0,1)};",
											"test_schema.instrumentShortName=function (num) {pm.expect(num).to.be.within(0,1)};",
											"test_schema.operationalMode=function (num) {pm.expect(num).to.be.within(0,1)};",
											"test_schema.productType=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.timeliness=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.orbitNumber=function (num) {pm.expect(num).to.be.within(1,2)};",
											"test_schema.lastOrbitNumber=function (num) {pm.expect(num).to.be.within(1,2)};",
											"test_schema.orbitDirection=function (num) {pm.expect(num).to.be.within(0,1)};",
											"test_schema.lastOrbitDirection=function (num) {pm.expect(num).to.be.within(0,1)};",
											"test_schema.relativeOrbitNumber=function (num) {pm.expect(num).to.be.within(1,2)};",
											"test_schema.cycleNumber=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.processingLevel=function (num) {pm.expect(num).to.be.within(0,1)};",
											"test_schema.processingDate=function (num) {pm.expect(num).to.be.within(0,1)};",
											"test_schema.processingCenter=function (num) {pm.expect(num).to.be.within(0,1)};",
											"test_schema.processorName=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.processorVersion=function (num) {pm.expect(num).to.be.within(0,1)};",
											"test_schema.coordinates=function (num) {pm.expect(num).to.be.within(0,1)};",
											"test_schema.baselineCollection=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.landCover=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.closedSeaCover=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.continentalIceCover=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.openOceanCover=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.lastRelativeOrbitNumber=function (num) {pm.expect(num).to.be.within(0,2)};",
											"",
											"            ",
											"properties_map = {};",
											"properties_map.Name=function (element) {pm.expect(element.Name).to.be.a(\"string\");};",
											"properties_map.ContentDate=function (element) {pm.expect(element.ContentDate[\"Start\"]).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);pm.expect(element.ContentDate[\"End\"]).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);};",
											"",
											"let schema_seen = {};",
											"",
											"function testSpecific(value, product){",
											"",
											"    if (schema_seen[value.Name]){",
											"        schema_seen[value.Name]++;",
											"    }else{",
											"        schema_seen[value.Name]=1;",
											"    }",
											"",
											"    if (test_map[value.Name]) {",
											"        pm.test(\"Test Attribute \"+value.Name + \" for Product: \"+product.Name+\" - \"+product.Id, function(){test_map[value.Name](value, product)});",
											"    }",
											"    else {",
											"        pm.test.skip(\"Test Attribute \"+value.Name + \" for Product: \"+product.Name+\" - \"+product.Id);",
											"    }",
											"}",
											"function propertySpecific(key, product){",
											"    if (properties_map[key]) {",
											"        pm.test(\"Test Property \"+key+\" for Product: \"+product.Name+\" - \"+product.Id, function(){properties_map[key](product)});",
											"    }",
											"    else {",
											"        pm.test.skip(\"Test Property \"+key+\" for Product: \"+product.Name+\" - \"+product.Id);",
											"    }",
											"}",
											"",
											"for (var counter = 0;  counter  < jsonDataElements.length; counter++){",
											"    var product = jsonDataElements[counter];",
											"    console.log(\"Processing Product: \"+product.Name+\" - \"+product.Id);",
											"",
											"    for (const[key, value] of Object.entries(properties_map)){",
											"        propertySpecific(key, jsonDataElements[counter]);",
											"    }",
											"",
											"    if(\"Attributes\" in jsonDataElements[counter]){",
											"        schema_seen = {};",
											"",
											"        pm.test(\"Test Attributes list\", function(){",
											"            pm.expect(jsonDataElements[counter].Attributes.length).to.be.above(0);",
											"        });",
											"",
											"        jsonDataElements[counter].Attributes.forEach(function(elem){",
											"            testSpecific(elem, jsonDataElements[counter]);",
											"        });",
											"        var product = jsonDataElements[counter];",
											"        for (const[key, value] of Object.entries(test_schema)) {pm.test(\"Schema Attribute \"+key+\" Product \"+product.Name+\" - \"+product.Id, function(){",
											"        if(schema_seen[key] == undefined){",
											"            schema_seen[key] = 0;",
											"        }",
											"        value(schema_seen[key], product)});}",
											"    }",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{service-root-uri}}/odata/v1/Products?$expand=Attributes&$top=1&$filter=(contains(Name,'SR_1_CAL___') or contains(Name,'SR_1_SRA___') or contains(Name,'SR_1_SRA_A_') or contains(Name,'SR_1_SRA_BS') or contains(Name,'SR_2_LAN___')) and startswith(Name,'S3')\n",
									"host": [
										"{{service-root-uri}}"
									],
									"path": [
										"odata",
										"v1",
										"Products"
									],
									"query": [
										{
											"key": "$expand",
											"value": "Attributes"
										},
										{
											"key": "$top",
											"value": "1"
										},
										{
											"key": "$filter",
											"value": "(contains(Name,'SR_1_CAL___') or contains(Name,'SR_1_SRA___') or contains(Name,'SR_1_SRA_A_') or contains(Name,'SR_1_SRA_BS') or contains(Name,'SR_2_LAN___')) and startswith(Name,'S3')\n"
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_1_CAL___') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_1_SRA___') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_1_SRA_A_') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_1_SRA_BS') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_LAN___') and startswith(Name,'S3')\n",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "S3_SLSTR_Products",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "557bd6dd-3d87-499a-8fe2-7dbddd2a9e1c",
										"exec": [
											"var jsonDataElements = pm.response.json().value;",
											"pm.test(\"Response time is less than \" +  environment[\"query-timeout\"] + \"ms\", function(){",
											"    pm.expect(pm.response.responseTime).to.be.below(parseInt(environment[\"query-timeout\"]));",
											"});",
											"",
											"pm.test(\"Test OData context\", function(){",
											"    query_string = pm.request.url.getQueryString();",
											"    if(query_string.includes(\"$expand=Attributes\")){",
											"        pm.expect( pm.response.json()['@odata.context']).to.include(\"$metadata#Products(Attributes())\");",
											"    } else{",
											"        pm.expect( pm.response.json()['@odata.context']).to.include(\"$metadata#Products\");",
											"    }",
											"});",
											"",
											"var TRUE = true;",
											"var FALSE = false;",
											"",
											"test_map={};",
											"test_map.beginningDateTime=function (element) {pm.expect(element.Name).eq('beginningDateTime');pm.expect(element.ValueType).eq('DateTimeOffset');pm.expect(element.Value).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);};",
											"test_map.endingDateTime=function (element) {pm.expect(element.Name).eq('endingDateTime');pm.expect(element.ValueType).eq('DateTimeOffset');pm.expect(element.Value).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);};",
											"test_map.platformShortName=function (element) {pm.expect(element.Name).eq('platformShortName');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"SENTINEL-3\"]);};",
											"test_map.platformSerialIdentifier=function (element) {pm.expect(element.Name).eq('platformSerialIdentifier');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"A\",\"B\",\"C\",\"D\",\"_\"]);};",
											"test_map.instrumentShortName=function (element) {pm.expect(element.Name).eq('instrumentShortName');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"SLSTR\"]);};",
											"test_map.operationalMode=function (element) {pm.expect(element.Name).eq('operationalMode');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');};",
											"test_map.productType=function (element) {pm.expect(element.Name).eq('productType');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"SL_1_RBT___\",\"SL_2_LST___\",\"SL_2_FRP___\"]);",
											"",
											"};",
											"test_map.timeliness=function (element) {pm.expect(element.Name).eq('timeliness');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"NR\",\"NT\",\"ST\",\"AL\"]);};",
											"test_map.cloudCover=function (element) {pm.expect(element.Name).eq('cloudCover');pm.expect(element.ValueType).eq('Double');pm.expect(element.Value).to.be.a(\"number\");};",
											"test_map.orbitNumber=function (element) {pm.expect(element.Name).eq('orbitNumber');pm.expect(element.ValueType).eq('Integer');pm.expect(element.Value).to.be.a(\"number\");};",
											"test_map.lastOrbitNumber=function (element) {pm.expect(element.Name).eq('lastOrbitNumber');pm.expect(element.ValueType).eq('Integer');pm.expect(element.Value).to.be.a(\"number\");};",
											"test_map.orbitDirection=function (element) {pm.expect(element.Name).eq('orbitDirection');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"ASCENDING\",\"DESCENDING\"]);};",
											"test_map.lastOrbitDirection=function (element) {pm.expect(element.Name).eq('lastOrbitDirection');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"ASCENDING\",\"DESCENDING\"]);};",
											"test_map.relativeOrbitNumber=function (element) {pm.expect(element.Name).eq('relativeOrbitNumber');pm.expect(element.ValueType).eq('Integer');pm.expect(element.Value).to.be.a(\"number\");pm.expect(element.Value).to.match(/([1-9]|[1-8][0-9]|9[0-9]|[12][0-9]{2}|3[0-7][0-9]|38[0-5])/);};",
											"test_map.cycleNumber=function (element) {pm.expect(element.Name).eq('cycleNumber');pm.expect(element.ValueType).eq('Integer');pm.expect(element.Value).to.be.a(\"number\");pm.expect(element.Value).to.match(/([1-9]|[1-8][0-9]|9[0-9]|[12][0-9]{2}|3[0-7][0-9]|38[0-5])/);};",
											"test_map.processingLevel=function (element) {pm.expect(element.Name).eq('processingLevel');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');};",
											"test_map.processingDate=function (element) {pm.expect(element.Name).eq('processingDate');pm.expect(element.ValueType).eq('DateTimeOffset');pm.expect(element.Value).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);};",
											"test_map.processingCenter=function (element) {pm.expect(element.Name).eq('processingCenter');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');};",
											"test_map.processorName=function (element) {pm.expect(element.Name).eq('processorName');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');};",
											"test_map.processorVersion=function (element) {pm.expect(element.Name).eq('processorVersion');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');};",
											"test_map.coordinates=function (element) {pm.expect(element.Name).eq('coordinates');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');};",
											"test_map.baselineCollection=function (element) {pm.expect(element.Name).eq('baselineCollection');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');};",
											"test_map.salineWaterCover=function (element) {pm.expect(element.Name).eq('salineWaterCover');pm.expect(element.ValueType).eq('Double');pm.expect(element.Value).to.be.a(\"number\");};",
											"test_map.landCover=function (element) {pm.expect(element.Name).eq('landCover');pm.expect(element.ValueType).eq('Double');pm.expect(element.Value).to.be.a(\"number\");};",
											"test_map.coastalCover=function (element) {pm.expect(element.Name).eq('coastalCover');pm.expect(element.ValueType).eq('Double');pm.expect(element.Value).to.be.a(\"number\");};",
											"test_map.freshInlandWaterCover=function (element) {pm.expect(element.Name).eq('freshInlandWaterCover');pm.expect(element.ValueType).eq('Double');pm.expect(element.Value).to.be.a(\"number\");};",
											"test_map.tidalRegionCover=function (element) {pm.expect(element.Name).eq('tidalRegionCover');pm.expect(element.ValueType).eq('Double');pm.expect(element.Value).to.be.a(\"number\");};",
											"test_map.lastRelativeOrbitNumber=function (element) {pm.expect(element.Name).eq('lastRelativeOrbitNumber');pm.expect(element.ValueType).eq('Integer');pm.expect(element.Value).to.be.a(\"number\");pm.expect(element.Value).to.match(/([1-9]|[1-8][0-9]|9[0-9]|[12][0-9]{2}|3[0-7][0-9]|38[0-5])/);};",
											"",
											"test_schema={};",
											"test_schema.beginningDateTime=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.endingDateTime=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.platformShortName=function (num) {pm.expect(num).to.be.within(0,1)};",
											"test_schema.platformSerialIdentifier=function (num) {pm.expect(num).to.be.within(0,1)};",
											"test_schema.instrumentShortName=function (num) {pm.expect(num).to.be.within(0,1)};",
											"test_schema.operationalMode=function (num) {pm.expect(num).to.be.within(0,1)};",
											"test_schema.productType=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.timeliness=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.cloudCover=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.orbitNumber=function (num) {pm.expect(num).to.be.within(1,2)};",
											"test_schema.lastOrbitNumber=function (num) {pm.expect(num).to.be.within(1,2)};",
											"test_schema.orbitDirection=function (num) {pm.expect(num).to.be.within(0,1)};",
											"test_schema.lastOrbitDirection=function (num) {pm.expect(num).to.be.within(0,1)};",
											"test_schema.relativeOrbitNumber=function (num) {pm.expect(num).to.be.within(1,2)};",
											"test_schema.cycleNumber=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.processingLevel=function (num) {pm.expect(num).to.be.within(0,1)};",
											"test_schema.processingDate=function (num) {pm.expect(num).to.be.within(0,1)};",
											"test_schema.processingCenter=function (num) {pm.expect(num).to.be.within(0,1)};",
											"test_schema.processorName=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.processorVersion=function (num) {pm.expect(num).to.be.within(0,1)};",
											"test_schema.coordinates=function (num) {pm.expect(num).to.be.within(0,1)};",
											"test_schema.baselineCollection=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.salineWaterCover=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.landCover=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.coastalCover=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.freshInlandWaterCover=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.tidalRegionCover=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.lastRelativeOrbitNumber=function (num) {pm.expect(num).to.be.within(0,2)};",
											"",
											"            ",
											"properties_map = {};",
											"properties_map.Name=function (element) {pm.expect(element.Name).to.be.a(\"string\");};",
											"properties_map.ContentDate=function (element) {pm.expect(element.ContentDate[\"Start\"]).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);pm.expect(element.ContentDate[\"End\"]).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);};",
											"",
											"let schema_seen = {};",
											"",
											"function testSpecific(value, product){",
											"",
											"    if (schema_seen[value.Name]){",
											"        schema_seen[value.Name]++;",
											"    }else{",
											"        schema_seen[value.Name]=1;",
											"    }",
											"",
											"    if (test_map[value.Name]) {",
											"        pm.test(\"Test Attribute \"+value.Name + \" for Product: \"+product.Name+\" - \"+product.Id, function(){test_map[value.Name](value, product)});",
											"    }",
											"    else {",
											"        pm.test.skip(\"Test Attribute \"+value.Name + \" for Product: \"+product.Name+\" - \"+product.Id);",
											"    }",
											"}",
											"function propertySpecific(key, product){",
											"    if (properties_map[key]) {",
											"        pm.test(\"Test Property \"+key+\" for Product: \"+product.Name+\" - \"+product.Id, function(){properties_map[key](product)});",
											"    }",
											"    else {",
											"        pm.test.skip(\"Test Property \"+key+\" for Product: \"+product.Name+\" - \"+product.Id);",
											"    }",
											"}",
											"",
											"for (var counter = 0;  counter  < jsonDataElements.length; counter++){",
											"    var product = jsonDataElements[counter];",
											"    console.log(\"Processing Product: \"+product.Name+\" - \"+product.Id);",
											"",
											"    for (const[key, value] of Object.entries(properties_map)){",
											"        propertySpecific(key, jsonDataElements[counter]);",
											"    }",
											"",
											"    if(\"Attributes\" in jsonDataElements[counter]){",
											"        schema_seen = {};",
											"",
											"        pm.test(\"Test Attributes list\", function(){",
											"            pm.expect(jsonDataElements[counter].Attributes.length).to.be.above(0);",
											"        });",
											"",
											"        jsonDataElements[counter].Attributes.forEach(function(elem){",
											"            testSpecific(elem, jsonDataElements[counter]);",
											"        });",
											"        var product = jsonDataElements[counter];",
											"        for (const[key, value] of Object.entries(test_schema)) {pm.test(\"Schema Attribute \"+key+\" Product \"+product.Name+\" - \"+product.Id, function(){",
											"        if(schema_seen[key] == undefined){",
											"            schema_seen[key] = 0;",
											"        }",
											"        value(schema_seen[key], product)});}",
											"    }",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{service-root-uri}}/odata/v1/Products?$expand=Attributes&$top=1&$filter=(contains(Name,'SL_1_RBT___') or contains(Name,'SL_2_LST___') or contains(Name,'SL_2_FRP___')) and startswith(Name,'S3')\n",
									"host": [
										"{{service-root-uri}}"
									],
									"path": [
										"odata",
										"v1",
										"Products"
									],
									"query": [
										{
											"key": "$expand",
											"value": "Attributes"
										},
										{
											"key": "$top",
											"value": "1"
										},
										{
											"key": "$filter",
											"value": "(contains(Name,'SL_1_RBT___') or contains(Name,'SL_2_LST___') or contains(Name,'SL_2_FRP___')) and startswith(Name,'S3')\n"
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_1_RBT___') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_2_LST___') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_2_FRP___') and startswith(Name,'S3')\n",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "S3_SYNERGY_Products",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "78b34e46-4686-4969-9915-0181fc9eb8eb",
										"exec": [
											"var jsonDataElements = pm.response.json().value;",
											"pm.test(\"Response time is less than \" +  environment[\"query-timeout\"] + \"ms\", function(){",
											"    pm.expect(pm.response.responseTime).to.be.below(parseInt(environment[\"query-timeout\"]));",
											"});",
											"",
											"pm.test(\"Test OData context\", function(){",
											"    query_string = pm.request.url.getQueryString();",
											"    if(query_string.includes(\"$expand=Attributes\")){",
											"        pm.expect( pm.response.json()['@odata.context']).to.include(\"$metadata#Products(Attributes())\");",
											"    } else{",
											"        pm.expect( pm.response.json()['@odata.context']).to.include(\"$metadata#Products\");",
											"    }",
											"});",
											"",
											"var TRUE = true;",
											"var FALSE = false;",
											"",
											"test_map={};",
											"test_map.beginningDateTime=function (element) {pm.expect(element.Name).eq('beginningDateTime');pm.expect(element.ValueType).eq('DateTimeOffset');pm.expect(element.Value).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);};",
											"test_map.endingDateTime=function (element) {pm.expect(element.Name).eq('endingDateTime');pm.expect(element.ValueType).eq('DateTimeOffset');pm.expect(element.Value).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);};",
											"test_map.platformShortName=function (element) {pm.expect(element.Name).eq('platformShortName');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"SENTINEL-3\"]);};",
											"test_map.platformSerialIdentifier=function (element) {pm.expect(element.Name).eq('platformSerialIdentifier');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"A\",\"B\",\"C\",\"D\",\"_\"]);};",
											"test_map.instrumentShortName=function (element) {pm.expect(element.Name).eq('instrumentShortName');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"SYNERGY\"]);};",
											"test_map.operationalMode=function (element) {pm.expect(element.Name).eq('operationalMode');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');};",
											"test_map.productType=function (element) {pm.expect(element.Name).eq('productType');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"SY_1_MISR__\",\"SY_2_SYN___\",\"SY_2_V10___\",\"SY_2_VG1___\",\"SY_2_VGP___\",\"SY_2_VGK___\",\"SY_2_AOD___\"]);",
											"",
											"};",
											"test_map.timeliness=function (element) {pm.expect(element.Name).eq('timeliness');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"NR\",\"NT\",\"ST\",\"AL\"]);};",
											"test_map.cloudCover=function (element) {pm.expect(element.Name).eq('cloudCover');pm.expect(element.ValueType).eq('Double');pm.expect(element.Value).to.be.a(\"number\");};",
											"test_map.orbitNumber=function (element) {pm.expect(element.Name).eq('orbitNumber');pm.expect(element.ValueType).eq('Integer');pm.expect(element.Value).to.be.a(\"number\");};",
											"test_map.lastOrbitNumber=function (element) {pm.expect(element.Name).eq('lastOrbitNumber');pm.expect(element.ValueType).eq('Integer');pm.expect(element.Value).to.be.a(\"number\");};",
											"test_map.orbitDirection=function (element) {pm.expect(element.Name).eq('orbitDirection');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"ASCENDING\",\"DESCENDING\"]);};",
											"test_map.lastOrbitDirection=function (element) {pm.expect(element.Name).eq('lastOrbitDirection');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"ASCENDING\",\"DESCENDING\"]);};",
											"test_map.relativeOrbitNumber=function (element) {pm.expect(element.Name).eq('relativeOrbitNumber');pm.expect(element.ValueType).eq('Integer');pm.expect(element.Value).to.be.a(\"number\");pm.expect(element.Value).to.match(/([1-9]|[1-8][0-9]|9[0-9]|[12][0-9]{2}|3[0-7][0-9]|38[0-5])/);};",
											"test_map.cycleNumber=function (element) {pm.expect(element.Name).eq('cycleNumber');pm.expect(element.ValueType).eq('Integer');pm.expect(element.Value).to.be.a(\"number\");pm.expect(element.Value).to.match(/([1-9]|[1-8][0-9]|9[0-9]|[12][0-9]{2}|3[0-7][0-9]|38[0-5])/);};",
											"test_map.processingLevel=function (element) {pm.expect(element.Name).eq('processingLevel');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"1\",\"2\"]);};",
											"test_map.processingDate=function (element) {pm.expect(element.Name).eq('processingDate');pm.expect(element.ValueType).eq('DateTimeOffset');pm.expect(element.Value).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);};",
											"test_map.processingCenter=function (element) {pm.expect(element.Name).eq('processingCenter');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');};",
											"test_map.processorName=function (element) {pm.expect(element.Name).eq('processorName');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');};",
											"test_map.processorVersion=function (element) {pm.expect(element.Name).eq('processorVersion');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');};",
											"test_map.coordinates=function (element) {pm.expect(element.Name).eq('coordinates');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');};",
											"test_map.baselineCollection=function (element) {pm.expect(element.Name).eq('baselineCollection');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');};",
											"test_map.snowOrIceCover=function (element) {pm.expect(element.Name).eq('snowOrIceCover');pm.expect(element.ValueType).eq('Double');pm.expect(element.Value).to.be.a(\"number\");};",
											"test_map.salineWaterCover=function (element) {pm.expect(element.Name).eq('salineWaterCover');pm.expect(element.ValueType).eq('Double');pm.expect(element.Value).to.be.a(\"number\");};",
											"test_map.coastalCover=function (element) {pm.expect(element.Name).eq('coastalCover');pm.expect(element.ValueType).eq('Double');pm.expect(element.Value).to.be.a(\"number\");};",
											"test_map.freshInlandWaterCover=function (element) {pm.expect(element.Name).eq('freshInlandWaterCover');pm.expect(element.ValueType).eq('Double');pm.expect(element.Value).to.be.a(\"number\");};",
											"test_map.tidalRegionCover=function (element) {pm.expect(element.Name).eq('tidalRegionCover');pm.expect(element.ValueType).eq('Double');pm.expect(element.Value).to.be.a(\"number\");};",
											"test_map.landCover=function (element) {pm.expect(element.Name).eq('landCover');pm.expect(element.ValueType).eq('Double');pm.expect(element.Value).to.be.a(\"number\");};",
											"test_map.lastRelativeOrbitNumber=function (element) {pm.expect(element.Name).eq('lastRelativeOrbitNumber');pm.expect(element.ValueType).eq('Integer');pm.expect(element.Value).to.be.a(\"number\");pm.expect(element.Value).to.match(/([1-9]|[1-8][0-9]|9[0-9]|[12][0-9]{2}|3[0-7][0-9]|38[0-5])/);};",
											"",
											"test_schema={};",
											"test_schema.beginningDateTime=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.endingDateTime=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.platformShortName=function (num) {pm.expect(num).to.be.within(0,1)};",
											"test_schema.platformSerialIdentifier=function (num) {pm.expect(num).to.be.within(0,1)};",
											"test_schema.instrumentShortName=function (num) {pm.expect(num).to.be.within(0,1)};",
											"test_schema.operationalMode=function (num) {pm.expect(num).to.be.within(0,1)};",
											"test_schema.productType=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.timeliness=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.cloudCover=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.orbitNumber=function (num) {pm.expect(num).to.be.within(1,2)};",
											"test_schema.lastOrbitNumber=function (num) {pm.expect(num).to.be.within(1,2)};",
											"test_schema.orbitDirection=function (num) {pm.expect(num).to.be.within(0,1)};",
											"test_schema.lastOrbitDirection=function (num) {pm.expect(num).to.be.within(0,1)};",
											"test_schema.relativeOrbitNumber=function (num) {pm.expect(num).to.be.within(1,2)};",
											"test_schema.cycleNumber=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.processingLevel=function (num) {pm.expect(num).to.be.within(0,1)};",
											"test_schema.processingDate=function (num) {pm.expect(num).to.be.within(0,1)};",
											"test_schema.processingCenter=function (num) {pm.expect(num).to.be.within(0,1)};",
											"test_schema.processorName=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.processorVersion=function (num) {pm.expect(num).to.be.within(0,1)};",
											"test_schema.coordinates=function (num) {pm.expect(num).to.be.within(0,1)};",
											"test_schema.baselineCollection=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.snowOrIceCover=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.salineWaterCover=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.coastalCover=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.freshInlandWaterCover=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.tidalRegionCover=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.landCover=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.lastRelativeOrbitNumber=function (num) {pm.expect(num).to.be.within(0,2)};",
											"",
											"            ",
											"properties_map = {};",
											"properties_map.Name=function (element) {pm.expect(element.Name).to.be.a(\"string\");};",
											"properties_map.ContentDate=function (element) {pm.expect(element.ContentDate[\"Start\"]).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);pm.expect(element.ContentDate[\"End\"]).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);};",
											"",
											"let schema_seen = {};",
											"",
											"function testSpecific(value, product){",
											"",
											"    if (schema_seen[value.Name]){",
											"        schema_seen[value.Name]++;",
											"    }else{",
											"        schema_seen[value.Name]=1;",
											"    }",
											"",
											"    if (test_map[value.Name]) {",
											"        pm.test(\"Test Attribute \"+value.Name + \" for Product: \"+product.Name+\" - \"+product.Id, function(){test_map[value.Name](value, product)});",
											"    }",
											"    else {",
											"        pm.test.skip(\"Test Attribute \"+value.Name + \" for Product: \"+product.Name+\" - \"+product.Id);",
											"    }",
											"}",
											"function propertySpecific(key, product){",
											"    if (properties_map[key]) {",
											"        pm.test(\"Test Property \"+key+\" for Product: \"+product.Name+\" - \"+product.Id, function(){properties_map[key](product)});",
											"    }",
											"    else {",
											"        pm.test.skip(\"Test Property \"+key+\" for Product: \"+product.Name+\" - \"+product.Id);",
											"    }",
											"}",
											"",
											"for (var counter = 0;  counter  < jsonDataElements.length; counter++){",
											"    var product = jsonDataElements[counter];",
											"    console.log(\"Processing Product: \"+product.Name+\" - \"+product.Id);",
											"",
											"    for (const[key, value] of Object.entries(properties_map)){",
											"        propertySpecific(key, jsonDataElements[counter]);",
											"    }",
											"",
											"    if(\"Attributes\" in jsonDataElements[counter]){",
											"        schema_seen = {};",
											"",
											"        pm.test(\"Test Attributes list\", function(){",
											"            pm.expect(jsonDataElements[counter].Attributes.length).to.be.above(0);",
											"        });",
											"",
											"        jsonDataElements[counter].Attributes.forEach(function(elem){",
											"            testSpecific(elem, jsonDataElements[counter]);",
											"        });",
											"        var product = jsonDataElements[counter];",
											"        for (const[key, value] of Object.entries(test_schema)) {pm.test(\"Schema Attribute \"+key+\" Product \"+product.Name+\" - \"+product.Id, function(){",
											"        if(schema_seen[key] == undefined){",
											"            schema_seen[key] = 0;",
											"        }",
											"        value(schema_seen[key], product)});}",
											"    }",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{service-root-uri}}/odata/v1/Products?$expand=Attributes&$top=1&$filter=(contains(Name,'SY_1_MISR__') or contains(Name,'SY_2_SYN___') or contains(Name,'SY_2_V10___') or contains(Name,'SY_2_VG1___') or contains(Name,'SY_2_VGP___') or contains(Name,'SY_2_VGK___') or contains(Name,'SY_2_AOD___')) and startswith(Name,'S3')\n",
									"host": [
										"{{service-root-uri}}"
									],
									"path": [
										"odata",
										"v1",
										"Products"
									],
									"query": [
										{
											"key": "$expand",
											"value": "Attributes"
										},
										{
											"key": "$top",
											"value": "1"
										},
										{
											"key": "$filter",
											"value": "(contains(Name,'SY_1_MISR__') or contains(Name,'SY_2_SYN___') or contains(Name,'SY_2_V10___') or contains(Name,'SY_2_VG1___') or contains(Name,'SY_2_VGP___') or contains(Name,'SY_2_VGK___') or contains(Name,'SY_2_AOD___')) and startswith(Name,'S3')\n"
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SY_1_MISR__') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SY_2_SYN___') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SY_2_V10___') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SY_2_VG1___') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SY_2_VGP___') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SY_2_VGK___') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SY_2_AOD___') and startswith(Name,'S3')\n",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "S3_OLCI_L1+L2_Products",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e4ad6ad4-a5b5-4feb-85c7-36b7282902a2",
										"exec": [
											"var jsonDataElements = pm.response.json().value;",
											"pm.test(\"Response time is less than \" +  environment[\"query-timeout\"] + \"ms\", function(){",
											"    pm.expect(pm.response.responseTime).to.be.below(parseInt(environment[\"query-timeout\"]));",
											"});",
											"",
											"pm.test(\"Test OData context\", function(){",
											"    query_string = pm.request.url.getQueryString();",
											"    if(query_string.includes(\"$expand=Attributes\")){",
											"        pm.expect( pm.response.json()['@odata.context']).to.include(\"$metadata#Products(Attributes())\");",
											"    } else{",
											"        pm.expect( pm.response.json()['@odata.context']).to.include(\"$metadata#Products\");",
											"    }",
											"});",
											"",
											"var TRUE = true;",
											"var FALSE = false;",
											"",
											"test_map={};",
											"test_map.beginningDateTime=function (element) {pm.expect(element.Name).eq('beginningDateTime');pm.expect(element.ValueType).eq('DateTimeOffset');pm.expect(element.Value).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);};",
											"test_map.endingDateTime=function (element) {pm.expect(element.Name).eq('endingDateTime');pm.expect(element.ValueType).eq('DateTimeOffset');pm.expect(element.Value).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);};",
											"test_map.platformShortName=function (element) {pm.expect(element.Name).eq('platformShortName');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"SENTINEL-3\"]);};",
											"test_map.platformSerialIdentifier=function (element) {pm.expect(element.Name).eq('platformSerialIdentifier');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"A\",\"B\",\"C\",\"D\",\"_\"]);};",
											"test_map.instrumentShortName=function (element) {pm.expect(element.Name).eq('instrumentShortName');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"OLCI\"]);};",
											"test_map.operationalMode=function (element) {pm.expect(element.Name).eq('operationalMode');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');};",
											"test_map.productType=function (element) {pm.expect(element.Name).eq('productType');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"OL_1_EFR___\",\"OL_1_ERR___\",\"OL_1_RAC___\",\"OL_1_SPC___\",\"OL_2_LFR___\",\"OL_2_LRR___\"]);",
											"",
											"};",
											"test_map.timeliness=function (element) {pm.expect(element.Name).eq('timeliness');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"NR\",\"NT\",\"ST\",\"AL\"]);};",
											"test_map.cloudCover=function (element) {pm.expect(element.Name).eq('cloudCover');pm.expect(element.ValueType).eq('Double');pm.expect(element.Value).to.be.a(\"number\");};",
											"test_map.orbitNumber=function (element) {pm.expect(element.Name).eq('orbitNumber');pm.expect(element.ValueType).eq('Integer');pm.expect(element.Value).to.be.a(\"number\");};",
											"test_map.lastOrbitNumber=function (element) {pm.expect(element.Name).eq('lastOrbitNumber');pm.expect(element.ValueType).eq('Integer');pm.expect(element.Value).to.be.a(\"number\");};",
											"test_map.orbitDirection=function (element) {pm.expect(element.Name).eq('orbitDirection');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"ASCENDING\",\"DESCENDING\"]);};",
											"test_map.lastOrbitDirection=function (element) {pm.expect(element.Name).eq('lastOrbitDirection');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"ASCENDING\",\"DESCENDING\"]);};",
											"test_map.relativeOrbitNumber=function (element) {pm.expect(element.Name).eq('relativeOrbitNumber');pm.expect(element.ValueType).eq('Integer');pm.expect(element.Value).to.be.a(\"number\");pm.expect(element.Value).to.match(/([1-9]|[1-8][0-9]|9[0-9]|[12][0-9]{2}|3[0-7][0-9]|38[0-5])/);};",
											"test_map.cycleNumber=function (element) {pm.expect(element.Name).eq('cycleNumber');pm.expect(element.ValueType).eq('Integer');pm.expect(element.Value).to.be.a(\"number\");pm.expect(element.Value).to.match(/([1-9]|[1-8][0-9]|9[0-9]|[12][0-9]{2}|3[0-7][0-9]|38[0-5])/);};",
											"test_map.processingLevel=function (element) {pm.expect(element.Name).eq('processingLevel');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"1\",\"2\"]);};",
											"test_map.processingDate=function (element) {pm.expect(element.Name).eq('processingDate');pm.expect(element.ValueType).eq('DateTimeOffset');pm.expect(element.Value).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);};",
											"test_map.processingCenter=function (element) {pm.expect(element.Name).eq('processingCenter');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');};",
											"test_map.processorName=function (element) {pm.expect(element.Name).eq('processorName');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');};",
											"test_map.processorVersion=function (element) {pm.expect(element.Name).eq('processorVersion');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');};",
											"test_map.coordinates=function (element) {pm.expect(element.Name).eq('coordinates');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');};",
											"test_map.baselineCollection=function (element) {pm.expect(element.Name).eq('baselineCollection');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');};",
											"test_map.brightCover=function (element) {pm.expect(element.Name).eq('brightCover');pm.expect(element.ValueType).eq('Double');pm.expect(element.Value).to.be.a(\"number\");};",
											"test_map.salineWaterCover=function (element) {pm.expect(element.Name).eq('salineWaterCover');pm.expect(element.ValueType).eq('Double');pm.expect(element.Value).to.be.a(\"number\");};",
											"test_map.coastalCover=function (element) {pm.expect(element.Name).eq('coastalCover');pm.expect(element.ValueType).eq('Double');pm.expect(element.Value).to.be.a(\"number\");};",
											"test_map.freshInlandWaterCover=function (element) {pm.expect(element.Name).eq('freshInlandWaterCover');pm.expect(element.ValueType).eq('Double');pm.expect(element.Value).to.be.a(\"number\");};",
											"test_map.tidalRegionCover=function (element) {pm.expect(element.Name).eq('tidalRegionCover');pm.expect(element.ValueType).eq('Double');pm.expect(element.Value).to.be.a(\"number\");};",
											"test_map.landCover=function (element) {pm.expect(element.Name).eq('landCover');pm.expect(element.ValueType).eq('Double');pm.expect(element.Value).to.be.a(\"number\");};",
											"test_map.lastRelativeOrbitNumber=function (element) {pm.expect(element.Name).eq('lastRelativeOrbitNumber');pm.expect(element.ValueType).eq('Integer');pm.expect(element.Value).to.be.a(\"number\");pm.expect(element.Value).to.match(/([1-9]|[1-8][0-9]|9[0-9]|[12][0-9]{2}|3[0-7][0-9]|38[0-5])/);};",
											"",
											"test_schema={};",
											"test_schema.beginningDateTime=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.endingDateTime=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.platformShortName=function (num) {pm.expect(num).to.be.within(0,1)};",
											"test_schema.platformSerialIdentifier=function (num) {pm.expect(num).to.be.within(0,1)};",
											"test_schema.instrumentShortName=function (num) {pm.expect(num).to.be.within(0,1)};",
											"test_schema.operationalMode=function (num) {pm.expect(num).to.be.within(0,1)};",
											"test_schema.productType=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.timeliness=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.cloudCover=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.orbitNumber=function (num) {pm.expect(num).to.be.within(1,2)};",
											"test_schema.lastOrbitNumber=function (num) {pm.expect(num).to.be.within(1,2)};",
											"test_schema.orbitDirection=function (num) {pm.expect(num).to.be.within(0,1)};",
											"test_schema.lastOrbitDirection=function (num) {pm.expect(num).to.be.within(0,1)};",
											"test_schema.relativeOrbitNumber=function (num) {pm.expect(num).to.be.within(1,2)};",
											"test_schema.cycleNumber=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.processingLevel=function (num) {pm.expect(num).to.be.within(0,1)};",
											"test_schema.processingDate=function (num) {pm.expect(num).to.be.within(0,1)};",
											"test_schema.processingCenter=function (num) {pm.expect(num).to.be.within(0,1)};",
											"test_schema.processorName=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.processorVersion=function (num) {pm.expect(num).to.be.within(0,1)};",
											"test_schema.coordinates=function (num) {pm.expect(num).to.be.within(0,1)};",
											"test_schema.baselineCollection=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.brightCover=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.salineWaterCover=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.coastalCover=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.freshInlandWaterCover=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.tidalRegionCover=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.landCover=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.lastRelativeOrbitNumber=function (num) {pm.expect(num).to.be.within(0,2)};",
											"",
											"            ",
											"properties_map = {};",
											"properties_map.Name=function (element) {pm.expect(element.Name).to.be.a(\"string\");};",
											"properties_map.ContentDate=function (element) {pm.expect(element.ContentDate[\"Start\"]).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);pm.expect(element.ContentDate[\"End\"]).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);};",
											"",
											"let schema_seen = {};",
											"",
											"function testSpecific(value, product){",
											"",
											"    if (schema_seen[value.Name]){",
											"        schema_seen[value.Name]++;",
											"    }else{",
											"        schema_seen[value.Name]=1;",
											"    }",
											"",
											"    if (test_map[value.Name]) {",
											"        pm.test(\"Test Attribute \"+value.Name + \" for Product: \"+product.Name+\" - \"+product.Id, function(){test_map[value.Name](value, product)});",
											"    }",
											"    else {",
											"        pm.test.skip(\"Test Attribute \"+value.Name + \" for Product: \"+product.Name+\" - \"+product.Id);",
											"    }",
											"}",
											"function propertySpecific(key, product){",
											"    if (properties_map[key]) {",
											"        pm.test(\"Test Property \"+key+\" for Product: \"+product.Name+\" - \"+product.Id, function(){properties_map[key](product)});",
											"    }",
											"    else {",
											"        pm.test.skip(\"Test Property \"+key+\" for Product: \"+product.Name+\" - \"+product.Id);",
											"    }",
											"}",
											"",
											"for (var counter = 0;  counter  < jsonDataElements.length; counter++){",
											"    var product = jsonDataElements[counter];",
											"    console.log(\"Processing Product: \"+product.Name+\" - \"+product.Id);",
											"",
											"    for (const[key, value] of Object.entries(properties_map)){",
											"        propertySpecific(key, jsonDataElements[counter]);",
											"    }",
											"",
											"    if(\"Attributes\" in jsonDataElements[counter]){",
											"        schema_seen = {};",
											"",
											"        pm.test(\"Test Attributes list\", function(){",
											"            pm.expect(jsonDataElements[counter].Attributes.length).to.be.above(0);",
											"        });",
											"",
											"        jsonDataElements[counter].Attributes.forEach(function(elem){",
											"            testSpecific(elem, jsonDataElements[counter]);",
											"        });",
											"        var product = jsonDataElements[counter];",
											"        for (const[key, value] of Object.entries(test_schema)) {pm.test(\"Schema Attribute \"+key+\" Product \"+product.Name+\" - \"+product.Id, function(){",
											"        if(schema_seen[key] == undefined){",
											"            schema_seen[key] = 0;",
											"        }",
											"        value(schema_seen[key], product)});}",
											"    }",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{service-root-uri}}/odata/v1/Products?$expand=Attributes&$top=1&$filter=(contains(Name,'OL_1_EFR___') or contains(Name,'OL_1_ERR___') or contains(Name,'OL_1_RAC___') or contains(Name,'OL_1_SPC___') or contains(Name,'OL_2_LFR___') or contains(Name,'OL_2_LRR___')) and startswith(Name,'S3')\n",
									"host": [
										"{{service-root-uri}}"
									],
									"path": [
										"odata",
										"v1",
										"Products"
									],
									"query": [
										{
											"key": "$expand",
											"value": "Attributes"
										},
										{
											"key": "$top",
											"value": "1"
										},
										{
											"key": "$filter",
											"value": "(contains(Name,'OL_1_EFR___') or contains(Name,'OL_1_ERR___') or contains(Name,'OL_1_RAC___') or contains(Name,'OL_1_SPC___') or contains(Name,'OL_2_LFR___') or contains(Name,'OL_2_LRR___')) and startswith(Name,'S3')\n"
										},
										{
											"key": "$filter",
											"value": "contains(Name,'OL_1_EFR___') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'OL_1_ERR___') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'OL_1_RAC___') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'OL_1_SPC___') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'OL_2_LFR___') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'OL_2_LRR___') and startswith(Name,'S3')\n",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "S3_Auxiliary_Data",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "889b853f-1137-48ba-ab71-c7ed9087e3bb",
										"exec": [
											"var jsonDataElements = pm.response.json().value;",
											"pm.test(\"Response time is less than \" +  environment[\"query-timeout\"] + \"ms\", function(){",
											"    pm.expect(pm.response.responseTime).to.be.below(parseInt(environment[\"query-timeout\"]));",
											"});",
											"",
											"pm.test(\"Test OData context\", function(){",
											"    query_string = pm.request.url.getQueryString();",
											"    if(query_string.includes(\"$expand=Attributes\")){",
											"        pm.expect( pm.response.json()['@odata.context']).to.include(\"$metadata#Products(Attributes())\");",
											"    } else{",
											"        pm.expect( pm.response.json()['@odata.context']).to.include(\"$metadata#Products\");",
											"    }",
											"});",
											"",
											"var TRUE = true;",
											"var FALSE = false;",
											"",
											"test_map={};",
											"test_map.productType=function (element) {pm.expect(element.Name).eq('productType');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"AX___MF1_AX\",\"AX___MFA_AX\",\"AX___MA1_AX\",\"AX___MF2_AX\",\"AX___MA2_AX\",\"AX___OSF_AX\",\"AX___FPO_AX\",\"AX___FRO_AX\",\"AX___BA__AX\",\"AX___BB2_AX\",\"AX___DEM_AX\",\"AX___LWM_AX\",\"AX___OOM_AX\",\"AX___CLM_AX\",\"AX___TRM_AX\",\"AX___CST_AX\",\"SR___CHDNAX\",\"SR___CHDRAX\",\"SR_1_CONMAX\",\"SR_1_CONCAX\",\"SR_2_CON_AX\",\"SR___LSM_AX\",\"SR_2_IC01AX\",\"SR_2_IC02AX\",\"SR_2_IC03AX\",\"SR_2_IC04AX\",\"SR_2_IC05AX\",\"SR_2_IC06AX\",\"SR_2_IC07AX\",\"SR_2_IC08AX\",\"SR_2_IC09AX\",\"SR_2_IC10AX\",\"SR_2_IC11AX\",\"SR_2_EOT1AX\",\"SR_2_EOT2AX\",\"SR_2_LT1_AX\",\"SR_2_LT2_AX\",\"SR_2_LNEQAX\",\"SR_2_GEO_AX\",\"SR_2_MSS1AX\",\"SR_2_MSS2AX\",\"SR_2_ODLEAX\",\"SR_2_WNDLAX\",\"SR_2_WNDSAX\",\"SR_2_SIGLAX\",\"SR_2_SIGSAX\",\"SR_2_SET_AX\",\"SR_2_SSM_AX\",\"SR_2_MSMGAX\",\"SR_2_CP00AX\",\"SR_2_CP06AX\",\"SR_2_CP12AX\",\"SR_2_CP18AX\",\"SR_2_S1AMAX\",\"SR_2_S2AMAX\",\"SR_2_S1PHAX\",\"SR_2_S2PHAX\",\"SR_2_MDT_AX\",\"SR_2_SHD_AX\",\"SR_2_SSBLAX\",\"SR_2_SSBSAX\",\"SR_2_SD01AX\",\"SR_2_SD02AX\",\"SR_2_SD03AX\",\"SR_2_SD04AX\",\"SR_2_SD05AX\",\"SR_2_SD06AX\",\"SR_2_SD07AX\",\"SR_2_SD08AX\",\"SR_2_SD09AX\",\"SR_2_SD10AX\",\"SR_2_SD11AX\",\"SR_2_SD12AX\",\"SR_2_SI01AX\",\"SR_2_SI02AX\",\"SR_2_SI03AX\",\"SR_2_SI04AX\",\"SR_2_SI05AX\",\"SR_2_SI06AX\",\"SR_2_SI07AX\",\"SR_2_SI08AX\",\"SR_2_SI09AX\",\"SR_2_SI10AX\",\"SR_2_SI11AX\",\"SR_2_SI12AX\",\"SR_2_SST_AX\",\"SR_2_LRC_AX\",\"SR_2_SFL_AX\",\"SR_2_FLT_AX\",\"SR_2_RRC_AX\",\"SR_2_CCT_AX\",\"SR_2_SURFAX\",\"SR_2_RET_AX\",\"SR_2_MLM_AX\",\"SR_2_MAG_AX\",\"SR_2_LUTFAX\",\"SR_2_LUTEAX\",\"SR_2_LUTSAX\",\"SR___ROE_AX\",\"SR_1_CA1LAX\",\"SR_1_CA1SAX\",\"SR_1_CA2KAX\",\"SR_1_CA2CAX\",\"CAL2_C_LTM\",\"MW_1_NIR_AX\",\"MW_1_DNB_AX\",\"MW_1_MON_AX\",\"SL_1_VSC_AX\",\"SR___MGNPAX\",\"SR___POEPAX\",\"SR_2_PMPPAX\",\"SR_2_PCPPAX\",\"SR___MDO_AX\",\"SR___POESAX\",\"SR_2_PMPSAX\",\"SR_2_PCPSAX\",\"SR_2_RMO_AX\",\"SR_2_PMO_AX\",\"SR_2_POL_AX\",\"SR_2_PGI_AX\",\"SR_2_RGI_AX\",\"SR_1_USO_AX\",\"SR___MGNSAX\",\"SR_2_SIC_AX\",\"MW_1_SLC_AX\",\"MW___CHDNAX\",\"MW___CHDRAX\",\"MW___STD_AX\",\"OL_1_EO__AX\",\"OL_1_RAC_AX\",\"OL_1_SPC_AX\",\"OL_1_CLUTAX\",\"OL_1_INS_AX\",\"OL_1_CAL_AX\",\"OL_1_PRG_AX\",\"OL_2_PCP_AX\",\"OL_2_PPP_AX\",\"OL_2_CLP_AX\",\"OL_2_WVP_AX\",\"OL_2_ACP_AX\",\"OL_2_OCP_AX\",\"OL_2_VGP_AX\",\"SL_1_PCP_AX\",\"SL_1_ANC_AX\",\"SL_1_N_S1AX\",\"SL_1_N_S2AX\",\"SL_1_N_S3AX\",\"SL_1_O_S1AX\",\"SL_1_O_S2AX\",\"SL_1_O_S3AX\",\"SL_1_NAS4AX\",\"SL_1_NAS5AX\",\"SL_1_NAS6AX\",\"SL_1_NBS4AX\",\"SL_1_NBS5AX\",\"SL_1_NBS6AX\",\"SL_1_OAS4AX\",\"SL_1_OAS5AX\",\"SL_1_OAS6AX\",\"SL_1_OBS4AX\",\"SL_1_OBS5AX\",\"SL_1_OBS6AX\",\"SL_1_N_S7AX\",\"SL_1_N_S8AX\",\"SL_1_N_S9AX\",\"SL_1_N_F1AX\",\"SL_1_N_F2AX\",\"SL_1_O_S7AX\",\"SL_1_O_S8AX\",\"SL_1_O_S9AX\",\"SL_1_O_F1AX\",\"SL_1_O_F2AX\",\"SL_1_VIC_AX\",\"SL_1_GEO_AX\",\"SL_1_GEC_AX\",\"SL_1_CLO_AX\",\"SL_1_ESSTAX\",\"SL_2_PCP_AX\",\"SL_2_S6N_AX\",\"SL_2_S7N_AX\",\"SL_2_S8N_AX\",\"SL_2_S9N_AX\",\"SL_2_F1N_AX\",\"SL_2_F2N_AX\",\"SL_2_S7O_AX\",\"SL_2_S8O_AX\",\"SL_2_S9O_AX\",\"SL_2_N2_CAX\",\"SL_2_N3RCAX\",\"SL_2_N3_CAX\",\"SL_2_D2_CAX\",\"SL_2_D3_CAX\",\"SL_2_SST_AX\",\"SL_2_SDI3AX\",\"SL_2_SDI2AX\",\"SL_2_SSESAX\",\"SL_2_LSTCAX\",\"SL_2_LSTBAX\",\"SL_2_LSTVAX\",\"SL_2_LSTWAX\",\"SL_2_LSTEAX\",\"SL_2_FRPTAX\",\"SL_2_SSTAAX\",\"OL_1_PCPBAX\",\"SL_1_PCPBAX\",\"SL_1_PLTBAX\",\"OL_2_PCPBAX\",\"OL_2_PLTBAX\",\"SL_2_PCPBAX\",\"SL_2_PLTBAX\",\"AX___CHD_AX\",\"GN_1_GSVMAX\",\"GN_1_GSVHAX\",\"GN_1_GCLHAX\",\"GN_1_EOP_AX\",\"GN_1_EOPHAX\",\"GN_1_LSC_AX\",\"GN_1_NAV_AX\",\"GN_1_NSA_AX\",\"GN_1_NTR_AX\",\"GN_1_NPR_AX\",\"GN_1_ATX_AX\",\"GN_1_SAC_AX\",\"GN_1_CHD_AX\",\"GN_1_NSA3AX\",\"GN_1_NTR3AX\",\"GN_1_ATX3AX\",\"GN_1_MANHAX\",\"GN_1_MASSAX\",\"SR_2_NRPPAX\",\"SY_1_TPDBAX\",\"OL_1_MCHDAX\",\"SL_1_MCHDAX\",\"SY_1_PCP_AX\",\"SY_1_CDIBAX\",\"SY_2_PCP_AX\",\"SY_2_PCPSAX\",\"SY_2_RAD_AX\",\"SY_2_RADPAX\",\"SY_2_SPCPAX\",\"SY_2_RADSAX\",\"SY_2_PCPBAX\",\"SY_2_PLTBAX\",\"SY_2_CVPBAX\",\"SY_2_PVPBAX\",\"SY_2_CVSBAX\",\"SY_2_PVSBAX\",\"AX___TAI_AX\",\"SR___MOE_AX\",\"SR___POE_AX\",\"SR___MGN_AX\",\"SR_2_PMP_AX\",\"SR_2_PCP_AX\",\"SR___CHD_AX\",\"SR_1_CON_AX\",\"SR_2_LSM_AX\",\"AX___MAN_AX\",\"AX___MFC_AX\",\"SR___ATB_AX\",\"SR_2_GEOIAX\",\"SR_2_MSS_AX\",\"MW_1_CON_AX\",\"GN___CHD_AX\",\"AX___CN0_AX\",\"AX___GCP_AX\",\"OL_0_AX_PRC\",\"OL_1_CHARAX\",\"OL_1_PROGAX\",\"SL_1_CHF1AX\",\"SL_1_CHF7AX\",\"SL_1_CHS7AX\",\"SL_2_DATBAX\",\"SL_2_FRPAAX\",\"SL_2_SATBAX\",\"SY_1_GCPBAX\",\"SL_2_ACLMAX\",\"SL_2_ART_AX\",\"SL_2_OSR_AX\",\"SL_2_PCPAAX\",\"SY_2_ACLMAX\",\"SY_2_ART_AX\",\"SY_2_LSR_AX\",\"SY_2_OSR_AX\",\"SY_2_PCPAAX\",\"SL_2_CFM_AX\",\"SL_2_FXPAAX\",\"SL_2_PCPFAX\",\"SL_2_PLFMAX\",\"SL_2_SXPAAX\",\"SL_1_IRE_AX\",\"SL_1_LCC_AX\",\"SL_1_CDP_AX\",\"SL_1_CLP_AX\",\"SL_1_ADJ_AX\",\"SL_1_RTT_AX\",\"SY_2_AODCAX\"]);",
											"",
											"};",
											"test_map.timeliness=function (element) {pm.expect(element.Name).eq('timeliness');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"AL\"]);};",
											"test_map.platformShortName=function (element) {pm.expect(element.Name).eq('platformShortName');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"SENTINEL-3\"]);};",
											"test_map.platformSerialIdentifier=function (element) {pm.expect(element.Name).eq('platformSerialIdentifier');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"A\",\"B\",\"C\",\"D\",\"_\"]);};",
											"test_map.beginningDateTime=function (element) {pm.expect(element.Name).eq('beginningDateTime');pm.expect(element.ValueType).eq('DateTimeOffset');pm.expect(element.Value).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);};",
											"test_map.endingDateTime=function (element) {pm.expect(element.Name).eq('endingDateTime');pm.expect(element.ValueType).eq('DateTimeOffset');pm.expect(element.Value).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);};",
											"test_map.processingCenter=function (element) {pm.expect(element.Name).eq('processingCenter');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');};",
											"test_map.processorName=function (element) {pm.expect(element.Name).eq('processorName');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');};",
											"test_map.processorVersion=function (element) {pm.expect(element.Name).eq('processorVersion');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');};",
											"test_map.baselineCollection=function (element) {pm.expect(element.Name).eq('baselineCollection');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');};",
											"",
											"test_schema={};",
											"test_schema.productType=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.timeliness=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.platformShortName=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.platformSerialIdentifier=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.beginningDateTime=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.endingDateTime=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.processingCenter=function (num) {pm.expect(num).to.be.within(0,1)};",
											"test_schema.processorName=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.processorVersion=function (num) {pm.expect(num).to.be.within(0,1)};",
											"test_schema.baselineCollection=function (num) {pm.expect(num).to.be.eq(1)};",
											"",
											"            ",
											"properties_map = {};",
											"properties_map.Name=function (element) {pm.expect(element.Name).to.be.a(\"string\");};",
											"properties_map.ContentDate=function (element) {pm.expect(element.ContentDate[\"Start\"]).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);pm.expect(element.ContentDate[\"End\"]).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);};",
											"",
											"let schema_seen = {};",
											"",
											"function testSpecific(value, product){",
											"",
											"    if (schema_seen[value.Name]){",
											"        schema_seen[value.Name]++;",
											"    }else{",
											"        schema_seen[value.Name]=1;",
											"    }",
											"",
											"    if (test_map[value.Name]) {",
											"        pm.test(\"Test Attribute \"+value.Name + \" for Product: \"+product.Name+\" - \"+product.Id, function(){test_map[value.Name](value, product)});",
											"    }",
											"    else {",
											"        pm.test.skip(\"Test Attribute \"+value.Name + \" for Product: \"+product.Name+\" - \"+product.Id);",
											"    }",
											"}",
											"function propertySpecific(key, product){",
											"    if (properties_map[key]) {",
											"        pm.test(\"Test Property \"+key+\" for Product: \"+product.Name+\" - \"+product.Id, function(){properties_map[key](product)});",
											"    }",
											"    else {",
											"        pm.test.skip(\"Test Property \"+key+\" for Product: \"+product.Name+\" - \"+product.Id);",
											"    }",
											"}",
											"",
											"for (var counter = 0;  counter  < jsonDataElements.length; counter++){",
											"    var product = jsonDataElements[counter];",
											"    console.log(\"Processing Product: \"+product.Name+\" - \"+product.Id);",
											"",
											"    for (const[key, value] of Object.entries(properties_map)){",
											"        propertySpecific(key, jsonDataElements[counter]);",
											"    }",
											"",
											"    if(\"Attributes\" in jsonDataElements[counter]){",
											"        schema_seen = {};",
											"",
											"        pm.test(\"Test Attributes list\", function(){",
											"            pm.expect(jsonDataElements[counter].Attributes.length).to.be.above(0);",
											"        });",
											"",
											"        jsonDataElements[counter].Attributes.forEach(function(elem){",
											"            testSpecific(elem, jsonDataElements[counter]);",
											"        });",
											"        var product = jsonDataElements[counter];",
											"        for (const[key, value] of Object.entries(test_schema)) {pm.test(\"Schema Attribute \"+key+\" Product \"+product.Name+\" - \"+product.Id, function(){",
											"        if(schema_seen[key] == undefined){",
											"            schema_seen[key] = 0;",
											"        }",
											"        value(schema_seen[key], product)});}",
											"    }",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{service-root-uri}}/odata/v1/Products?$expand=Attributes&$top=1&$filter=(contains(Name,'AX') or contains(Name, 'CAL2_C_LTM')) and startswith(Name,'S3')\n",
									"host": [
										"{{service-root-uri}}"
									],
									"path": [
										"odata",
										"v1",
										"Products"
									],
									"query": [
										{
											"key": "$expand",
											"value": "Attributes"
										},
										{
											"key": "$top",
											"value": "1"
										},
										{
											"key": "$filter",
											"value": "(contains(Name,'AX') or contains(Name, 'CAL2_C_LTM')) and startswith(Name,'S3')\n"
										},
										{
											"key": "$filter",
											"value": "contains(Name,'AX___MF1_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'AX___MFA_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'AX___MA1_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'AX___MF2_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'AX___MA2_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'AX___OSF_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'AX___FPO_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'AX___FRO_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'AX___BA__AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'AX___BB2_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'AX___DEM_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'AX___LWM_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'AX___OOM_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'AX___CLM_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'AX___TRM_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'AX___CST_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR___CHDNAX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR___CHDRAX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_1_CONMAX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_1_CONCAX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_CON_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR___LSM_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_IC01AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_IC02AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_IC03AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_IC04AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_IC05AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_IC06AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_IC07AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_IC08AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_IC09AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_IC10AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_IC11AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_EOT1AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_EOT2AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_LT1_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_LT2_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_LNEQAX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_GEO_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_MSS1AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_MSS2AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_ODLEAX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_WNDLAX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_WNDSAX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_SIGLAX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_SIGSAX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_SET_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_SSM_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_MSMGAX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_CP00AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_CP06AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_CP12AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_CP18AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_S1AMAX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_S2AMAX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_S1PHAX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_S2PHAX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_MDT_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_SHD_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_SSBLAX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_SSBSAX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_SD01AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_SD02AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_SD03AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_SD04AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_SD05AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_SD06AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_SD07AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_SD08AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_SD09AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_SD10AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_SD11AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_SD12AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_SI01AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_SI02AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_SI03AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_SI04AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_SI05AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_SI06AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_SI07AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_SI08AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_SI09AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_SI10AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_SI11AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_SI12AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_SST_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_LRC_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_SFL_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_FLT_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_RRC_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_CCT_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_SURFAX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_RET_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_MLM_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_MAG_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_LUTFAX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_LUTEAX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_LUTSAX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR___ROE_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_1_CA1LAX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_1_CA1SAX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_1_CA2KAX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_1_CA2CAX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'CAL2_C_LTM') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'MW_1_NIR_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'MW_1_DNB_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'MW_1_MON_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_1_VSC_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR___MGNPAX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR___POEPAX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_PMPPAX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_PCPPAX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR___MDO_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR___POESAX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_PMPSAX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_PCPSAX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_RMO_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_PMO_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_POL_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_PGI_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_RGI_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_1_USO_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR___MGNSAX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_SIC_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'MW_1_SLC_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'MW___CHDNAX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'MW___CHDRAX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'MW___STD_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'OL_1_EO__AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'OL_1_RAC_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'OL_1_SPC_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'OL_1_CLUTAX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'OL_1_INS_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'OL_1_CAL_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'OL_1_PRG_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'OL_2_PCP_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'OL_2_PPP_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'OL_2_CLP_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'OL_2_WVP_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'OL_2_ACP_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'OL_2_OCP_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'OL_2_VGP_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_1_PCP_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_1_ANC_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_1_N_S1AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_1_N_S2AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_1_N_S3AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_1_O_S1AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_1_O_S2AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_1_O_S3AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_1_NAS4AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_1_NAS5AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_1_NAS6AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_1_NBS4AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_1_NBS5AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_1_NBS6AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_1_OAS4AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_1_OAS5AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_1_OAS6AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_1_OBS4AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_1_OBS5AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_1_OBS6AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_1_N_S7AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_1_N_S8AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_1_N_S9AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_1_N_F1AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_1_N_F2AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_1_O_S7AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_1_O_S8AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_1_O_S9AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_1_O_F1AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_1_O_F2AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_1_VIC_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_1_GEO_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_1_GEC_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_1_CLO_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_1_ESSTAX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_2_PCP_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_2_S6N_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_2_S7N_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_2_S8N_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_2_S9N_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_2_F1N_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_2_F2N_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_2_S7O_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_2_S8O_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_2_S9O_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_2_N2_CAX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_2_N3RCAX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_2_N3_CAX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_2_D2_CAX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_2_D3_CAX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_2_SST_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_2_SDI3AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_2_SDI2AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_2_SSESAX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_2_LSTCAX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_2_LSTBAX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_2_LSTVAX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_2_LSTWAX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_2_LSTEAX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_2_FRPTAX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_2_SSTAAX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'OL_1_PCPBAX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_1_PCPBAX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_1_PLTBAX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'OL_2_PCPBAX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'OL_2_PLTBAX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_2_PCPBAX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_2_PLTBAX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'AX___CHD_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'GN_1_GSVMAX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'GN_1_GSVHAX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'GN_1_GCLHAX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'GN_1_EOP_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'GN_1_EOPHAX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'GN_1_LSC_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'GN_1_NAV_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'GN_1_NSA_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'GN_1_NTR_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'GN_1_NPR_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'GN_1_ATX_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'GN_1_SAC_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'GN_1_CHD_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'GN_1_NSA3AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'GN_1_NTR3AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'GN_1_ATX3AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'GN_1_MANHAX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'GN_1_MASSAX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_NRPPAX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SY_1_TPDBAX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'OL_1_MCHDAX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_1_MCHDAX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SY_1_PCP_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SY_1_CDIBAX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SY_2_PCP_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SY_2_PCPSAX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SY_2_RAD_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SY_2_RADPAX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SY_2_SPCPAX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SY_2_RADSAX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SY_2_PCPBAX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SY_2_PLTBAX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SY_2_CVPBAX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SY_2_PVPBAX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SY_2_CVSBAX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SY_2_PVSBAX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'AX___TAI_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR___MOE_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR___POE_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR___MGN_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_PMP_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_PCP_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR___CHD_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_1_CON_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_LSM_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'AX___MAN_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'AX___MFC_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR___ATB_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_GEOIAX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_MSS_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'MW_1_CON_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'GN___CHD_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'AX___CN0_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'AX___GCP_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'OL_0_AX_PRC') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'OL_1_CHARAX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'OL_1_PROGAX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_1_CHF1AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_1_CHF7AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_1_CHS7AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_2_DATBAX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_2_FRPAAX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_2_SATBAX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SY_1_GCPBAX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_2_ACLMAX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_2_ART_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_2_OSR_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_2_PCPAAX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SY_2_ACLMAX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SY_2_ART_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SY_2_LSR_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SY_2_OSR_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SY_2_PCPAAX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_2_CFM_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_2_FXPAAX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_2_PCPFAX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_2_PLFMAX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_2_SXPAAX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_1_IRE_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_1_LCC_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_1_CDP_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_1_CLP_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_1_ADJ_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_1_RTT_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SY_2_AODCAX') and startswith(Name,'S3')\n",
											"disabled": true
										}
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "PR",
					"item": [
						{
							"name": "S3_SRAL_Products",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ef88c1d9-d387-46ad-bc84-9455bdca93f5",
										"exec": [
											"var jsonDataElements = pm.response.json().value;",
											"pm.test(\"Response time is less than \" +  environment[\"query-timeout\"] + \"ms\", function(){",
											"    pm.expect(pm.response.responseTime).to.be.below(parseInt(environment[\"query-timeout\"]));",
											"});",
											"",
											"pm.test(\"Test OData context\", function(){",
											"    query_string = pm.request.url.getQueryString();",
											"    if(query_string.includes(\"$expand=Attributes\")){",
											"        pm.expect( pm.response.json()['@odata.context']).to.include(\"$metadata#Products(Attributes())\");",
											"    } else{",
											"        pm.expect( pm.response.json()['@odata.context']).to.include(\"$metadata#Products\");",
											"    }",
											"});",
											"",
											"var TRUE = true;",
											"var FALSE = false;",
											"",
											"test_map={};",
											"test_map.beginningDateTime=function (element) {pm.expect(element.Name).eq('beginningDateTime');pm.expect(element.ValueType).eq('DateTimeOffset');pm.expect(element.Value).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);};",
											"test_map.endingDateTime=function (element) {pm.expect(element.Name).eq('endingDateTime');pm.expect(element.ValueType).eq('DateTimeOffset');pm.expect(element.Value).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);};",
											"test_map.platformShortName=function (element) {pm.expect(element.Name).eq('platformShortName');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"SENTINEL-3\"]);};",
											"test_map.platformSerialIdentifier=function (element) {pm.expect(element.Name).eq('platformSerialIdentifier');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"A\",\"B\",\"C\",\"D\",\"_\"]);};",
											"test_map.instrumentShortName=function (element) {pm.expect(element.Name).eq('instrumentShortName');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"SRAL\"]);};",
											"test_map.operationalMode=function (element) {pm.expect(element.Name).eq('operationalMode');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');};",
											"test_map.productType=function (element) {pm.expect(element.Name).eq('productType');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"SR_1_CAL___\",\"SR_1_SRA___\",\"SR_1_SRA_A_\",\"SR_1_SRA_BS\",\"SR_2_LAN___\"]);",
											"",
											"};",
											"test_map.timeliness=function (element) {pm.expect(element.Name).eq('timeliness');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"NR\",\"NT\",\"ST\",\"AL\"]);};",
											"test_map.orbitNumber=function (element) {pm.expect(element.Name).eq('orbitNumber');pm.expect(element.ValueType).eq('Integer');pm.expect(element.Value).to.be.a(\"number\");};",
											"test_map.lastOrbitNumber=function (element) {pm.expect(element.Name).eq('lastOrbitNumber');pm.expect(element.ValueType).eq('Integer');pm.expect(element.Value).to.be.a(\"number\");};",
											"test_map.orbitDirection=function (element) {pm.expect(element.Name).eq('orbitDirection');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"ASCENDING\",\"DESCENDING\"]);};",
											"test_map.lastOrbitDirection=function (element) {pm.expect(element.Name).eq('lastOrbitDirection');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"ASCENDING\",\"DESCENDING\"]);};",
											"test_map.relativeOrbitNumber=function (element) {pm.expect(element.Name).eq('relativeOrbitNumber');pm.expect(element.ValueType).eq('Integer');pm.expect(element.Value).to.be.a(\"number\");pm.expect(element.Value).to.match(/([1-9]|[1-8][0-9]|9[0-9]|[12][0-9]{2}|3[0-7][0-9]|38[0-5])/);};",
											"test_map.cycleNumber=function (element) {pm.expect(element.Name).eq('cycleNumber');pm.expect(element.ValueType).eq('Integer');pm.expect(element.Value).to.be.a(\"number\");pm.expect(element.Value).to.match(/([1-9]|[1-8][0-9]|9[0-9]|[12][0-9]{2}|3[0-7][0-9]|38[0-5])/);};",
											"test_map.processingLevel=function (element) {pm.expect(element.Name).eq('processingLevel');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"1\",\"2\"]);};",
											"test_map.processingDate=function (element) {pm.expect(element.Name).eq('processingDate');pm.expect(element.ValueType).eq('DateTimeOffset');pm.expect(element.Value).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);};",
											"test_map.processingCenter=function (element) {pm.expect(element.Name).eq('processingCenter');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');};",
											"test_map.processorName=function (element) {pm.expect(element.Name).eq('processorName');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');};",
											"test_map.processorVersion=function (element) {pm.expect(element.Name).eq('processorVersion');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');};",
											"test_map.coordinates=function (element) {pm.expect(element.Name).eq('coordinates');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');};",
											"test_map.baselineCollection=function (element) {pm.expect(element.Name).eq('baselineCollection');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');};",
											"test_map.landCover=function (element) {pm.expect(element.Name).eq('landCover');pm.expect(element.ValueType).eq('Double');pm.expect(element.Value).to.be.a(\"number\");pm.expect(element.Value).to.match(/([0-9]|[1-8][0-9]|9[0-9]|100)/);};",
											"test_map.closedSeaCover=function (element) {pm.expect(element.Name).eq('closedSeaCover');pm.expect(element.ValueType).eq('Integer');pm.expect(element.Value).to.be.a(\"number\");pm.expect(element.Value).to.match(/([0-9]|[1-8][0-9]|9[0-9]|100)/);};",
											"test_map.continentalIceCover=function (element) {pm.expect(element.Name).eq('continentalIceCover');pm.expect(element.ValueType).eq('Integer');pm.expect(element.Value).to.be.a(\"number\");pm.expect(element.Value).to.match(/([0-9]|[1-8][0-9]|9[0-9]|100)/);};",
											"test_map.openOceanCover=function (element) {pm.expect(element.Name).eq('openOceanCover');pm.expect(element.ValueType).eq('Integer');pm.expect(element.Value).to.be.a(\"number\");pm.expect(element.Value).to.match(/([0-9]|[1-8][0-9]|9[0-9]|100)/);};",
											"test_map.lastRelativeOrbitNumber=function (element) {pm.expect(element.Name).eq('lastRelativeOrbitNumber');pm.expect(element.ValueType).eq('Integer');pm.expect(element.Value).to.be.a(\"number\");pm.expect(element.Value).to.match(/([1-9]|[1-8][0-9]|9[0-9]|[12][0-9]{2}|3[0-7][0-9]|38[0-5])/);};",
											"",
											"test_schema={};",
											"test_schema.beginningDateTime=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.endingDateTime=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.platformShortName=function (num) {pm.expect(num).to.be.within(0,1)};",
											"test_schema.platformSerialIdentifier=function (num) {pm.expect(num).to.be.within(0,1)};",
											"test_schema.instrumentShortName=function (num) {pm.expect(num).to.be.within(0,1)};",
											"test_schema.operationalMode=function (num) {pm.expect(num).to.be.within(0,1)};",
											"test_schema.productType=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.timeliness=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.orbitNumber=function (num) {pm.expect(num).to.be.within(1,2)};",
											"test_schema.lastOrbitNumber=function (num) {pm.expect(num).to.be.within(1,2)};",
											"test_schema.orbitDirection=function (num) {pm.expect(num).to.be.within(0,1)};",
											"test_schema.lastOrbitDirection=function (num) {pm.expect(num).to.be.within(0,1)};",
											"test_schema.relativeOrbitNumber=function (num) {pm.expect(num).to.be.within(1,2)};",
											"test_schema.cycleNumber=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.processingLevel=function (num) {pm.expect(num).to.be.within(0,1)};",
											"test_schema.processingDate=function (num) {pm.expect(num).to.be.within(0,1)};",
											"test_schema.processingCenter=function (num) {pm.expect(num).to.be.within(0,1)};",
											"test_schema.processorName=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.processorVersion=function (num) {pm.expect(num).to.be.within(0,1)};",
											"test_schema.coordinates=function (num) {pm.expect(num).to.be.within(0,1)};",
											"test_schema.baselineCollection=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.landCover=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.closedSeaCover=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.continentalIceCover=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.openOceanCover=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.lastRelativeOrbitNumber=function (num) {pm.expect(num).to.be.within(0,2)};",
											"",
											"            ",
											"properties_map = {};",
											"properties_map.Id=function (element) {pm.expect(element.Id).to.match(/[0-9a-fA-F]{8}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{12}/);};",
											"properties_map.Name=function (element) {pm.expect(element.Name).to.be.a(\"string\");};",
											"properties_map.ContentType=function (element) {pm.expect(element.ContentType).to.be.a(\"string\");};",
											"properties_map.ContentLength=function (element) {pm.expect(element.ContentLength).to.be.a(\"number\");};",
											"properties_map.PublicationDate=function (element) {pm.expect(element.PublicationDate).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);};",
											"properties_map.EvictionDate=function (element) {if(element.EvictionDate){ pm.expect(element.EvictionDate).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d+([+-][0-2]\\d:[0-5]\\d|Z)/); }};",
											"properties_map.Checksum=function (element) {for(i=0; i<element.Checksum.length; i++ ){pm.expect(element.Checksum[i].Algorithm).to.be.oneOf([\"MD5\",\"SHA-1\",\"SHA-256\",\"SHA-512\"]);checksum_algorithm = {'MD5': '[a-fA-F0-9]{32}', 'SHA-1': '[0-9a-f]{5,40}', 'SHA-256': '[A-Fa-f0-9]{64}', 'SHA-512': '[A-Fa-f0-9]{128}'};pm.expect(element.Checksum[i].Value).to.match(new RegExp(checksum_algorithm[element.Checksum[i].Algorithm]));}};",
											"properties_map.ContentDate=function (element) {pm.expect(element.ContentDate[\"Start\"]).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);pm.expect(element.ContentDate[\"End\"]).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);};",
											"properties_map.ProductionType=function (element) {pm.expect(element.ProductionType).to.be.oneOf([\"systematic_production\",\"on-demand default\",\"on-demand non-default\"]);};",
											"properties_map.Footprint=function (element) {if(element.Footprint){ pm.expect(element.Footprint).to.match(/geography'SRID=\\d+;[Polygon|Multipolygon|Point](.*)/); }};",
											"",
											"let schema_seen = {};",
											"",
											"function testSpecific(value, product){",
											"",
											"    if (schema_seen[value.Name]){",
											"        schema_seen[value.Name]++;",
											"    }else{",
											"        schema_seen[value.Name]=1;",
											"    }",
											"",
											"    if (test_map[value.Name]) {",
											"        pm.test(\"Test Attribute \"+value.Name + \" for Product: \"+product.Name+\" - \"+product.Id, function(){test_map[value.Name](value, product)});",
											"    }",
											"    else {",
											"        pm.test.skip(\"Test Attribute \"+value.Name + \" for Product: \"+product.Name+\" - \"+product.Id);",
											"    }",
											"}",
											"function propertySpecific(key, product){",
											"    if (properties_map[key]) {",
											"        pm.test(\"Test Property \"+key+\" for Product: \"+product.Name+\" - \"+product.Id, function(){properties_map[key](product)});",
											"    }",
											"    else {",
											"        pm.test.skip(\"Test Property \"+key+\" for Product: \"+product.Name+\" - \"+product.Id);",
											"    }",
											"}",
											"",
											"for (var counter = 0;  counter  < jsonDataElements.length; counter++){",
											"    var product = jsonDataElements[counter];",
											"    console.log(\"Processing Product: \"+product.Name+\" - \"+product.Id);",
											"",
											"    for (const[key, value] of Object.entries(properties_map)){",
											"        propertySpecific(key, jsonDataElements[counter]);",
											"    }",
											"",
											"    if(\"Attributes\" in jsonDataElements[counter]){",
											"        schema_seen = {};",
											"",
											"        pm.test(\"Test Attributes list\", function(){",
											"            pm.expect(jsonDataElements[counter].Attributes.length).to.be.above(0);",
											"        });",
											"",
											"        jsonDataElements[counter].Attributes.forEach(function(elem){",
											"            testSpecific(elem, jsonDataElements[counter]);",
											"        });",
											"        var product = jsonDataElements[counter];",
											"        for (const[key, value] of Object.entries(test_schema)) {pm.test(\"Schema Attribute \"+key+\" Product \"+product.Name+\" - \"+product.Id, function(){",
											"        if(schema_seen[key] == undefined){",
											"            schema_seen[key] = 0;",
											"        }",
											"        value(schema_seen[key], product)});}",
											"    }",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{service-root-uri}}/odata/v1/Products?$expand=Attributes&$top=1&$filter=(contains(Name,'SR_1_CAL___') or contains(Name,'SR_1_SRA___') or contains(Name,'SR_1_SRA_A_') or contains(Name,'SR_1_SRA_BS') or contains(Name,'SR_2_LAN___')) and startswith(Name,'S3')\n",
									"host": [
										"{{service-root-uri}}"
									],
									"path": [
										"odata",
										"v1",
										"Products"
									],
									"query": [
										{
											"key": "$expand",
											"value": "Attributes"
										},
										{
											"key": "$top",
											"value": "1"
										},
										{
											"key": "$filter",
											"value": "(contains(Name,'SR_1_CAL___') or contains(Name,'SR_1_SRA___') or contains(Name,'SR_1_SRA_A_') or contains(Name,'SR_1_SRA_BS') or contains(Name,'SR_2_LAN___')) and startswith(Name,'S3')\n"
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_1_CAL___') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_1_SRA___') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_1_SRA_A_') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_1_SRA_BS') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_LAN___') and startswith(Name,'S3')\n",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "S3_SLSTR_Products",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e56e6885-5fd1-41ef-b85d-252a52b91be5",
										"exec": [
											"var jsonDataElements = pm.response.json().value;",
											"pm.test(\"Response time is less than \" +  environment[\"query-timeout\"] + \"ms\", function(){",
											"    pm.expect(pm.response.responseTime).to.be.below(parseInt(environment[\"query-timeout\"]));",
											"});",
											"",
											"pm.test(\"Test OData context\", function(){",
											"    query_string = pm.request.url.getQueryString();",
											"    if(query_string.includes(\"$expand=Attributes\")){",
											"        pm.expect( pm.response.json()['@odata.context']).to.include(\"$metadata#Products(Attributes())\");",
											"    } else{",
											"        pm.expect( pm.response.json()['@odata.context']).to.include(\"$metadata#Products\");",
											"    }",
											"});",
											"",
											"var TRUE = true;",
											"var FALSE = false;",
											"",
											"test_map={};",
											"test_map.beginningDateTime=function (element) {pm.expect(element.Name).eq('beginningDateTime');pm.expect(element.ValueType).eq('DateTimeOffset');pm.expect(element.Value).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);};",
											"test_map.endingDateTime=function (element) {pm.expect(element.Name).eq('endingDateTime');pm.expect(element.ValueType).eq('DateTimeOffset');pm.expect(element.Value).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);};",
											"test_map.platformShortName=function (element) {pm.expect(element.Name).eq('platformShortName');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"SENTINEL-3\"]);};",
											"test_map.platformSerialIdentifier=function (element) {pm.expect(element.Name).eq('platformSerialIdentifier');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"A\",\"B\",\"C\",\"D\",\"_\"]);};",
											"test_map.instrumentShortName=function (element) {pm.expect(element.Name).eq('instrumentShortName');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"SLSTR\"]);};",
											"test_map.operationalMode=function (element) {pm.expect(element.Name).eq('operationalMode');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');};",
											"test_map.productType=function (element) {pm.expect(element.Name).eq('productType');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"SL_1_RBT___\",\"SL_2_LST___\",\"SL_2_FRP___\"]);",
											"",
											"};",
											"test_map.timeliness=function (element) {pm.expect(element.Name).eq('timeliness');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"NR\",\"NT\",\"ST\",\"AL\"]);};",
											"test_map.cloudCover=function (element) {pm.expect(element.Name).eq('cloudCover');pm.expect(element.ValueType).eq('Double');pm.expect(element.Value).to.be.a(\"number\");};",
											"test_map.orbitNumber=function (element) {pm.expect(element.Name).eq('orbitNumber');pm.expect(element.ValueType).eq('Integer');pm.expect(element.Value).to.be.a(\"number\");};",
											"test_map.lastOrbitNumber=function (element) {pm.expect(element.Name).eq('lastOrbitNumber');pm.expect(element.ValueType).eq('Integer');pm.expect(element.Value).to.be.a(\"number\");};",
											"test_map.orbitDirection=function (element) {pm.expect(element.Name).eq('orbitDirection');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"ASCENDING\",\"DESCENDING\"]);};",
											"test_map.lastOrbitDirection=function (element) {pm.expect(element.Name).eq('lastOrbitDirection');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"ASCENDING\",\"DESCENDING\"]);};",
											"test_map.relativeOrbitNumber=function (element) {pm.expect(element.Name).eq('relativeOrbitNumber');pm.expect(element.ValueType).eq('Integer');pm.expect(element.Value).to.be.a(\"number\");pm.expect(element.Value).to.match(/([1-9]|[1-8][0-9]|9[0-9]|[12][0-9]{2}|3[0-7][0-9]|38[0-5])/);};",
											"test_map.cycleNumber=function (element) {pm.expect(element.Name).eq('cycleNumber');pm.expect(element.ValueType).eq('Integer');pm.expect(element.Value).to.be.a(\"number\");pm.expect(element.Value).to.match(/([1-9]|[1-8][0-9]|9[0-9]|[12][0-9]{2}|3[0-7][0-9]|38[0-5])/);};",
											"test_map.processingLevel=function (element) {pm.expect(element.Name).eq('processingLevel');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');};",
											"test_map.processingDate=function (element) {pm.expect(element.Name).eq('processingDate');pm.expect(element.ValueType).eq('DateTimeOffset');pm.expect(element.Value).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);};",
											"test_map.processingCenter=function (element) {pm.expect(element.Name).eq('processingCenter');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');};",
											"test_map.processorName=function (element) {pm.expect(element.Name).eq('processorName');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');};",
											"test_map.processorVersion=function (element) {pm.expect(element.Name).eq('processorVersion');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');};",
											"test_map.coordinates=function (element) {pm.expect(element.Name).eq('coordinates');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');};",
											"test_map.baselineCollection=function (element) {pm.expect(element.Name).eq('baselineCollection');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');};",
											"test_map.salineWaterCover=function (element) {pm.expect(element.Name).eq('salineWaterCover');pm.expect(element.ValueType).eq('Double');pm.expect(element.Value).to.be.a(\"number\");};",
											"test_map.landCover=function (element) {pm.expect(element.Name).eq('landCover');pm.expect(element.ValueType).eq('Double');pm.expect(element.Value).to.be.a(\"number\");};",
											"test_map.coastalCover=function (element) {pm.expect(element.Name).eq('coastalCover');pm.expect(element.ValueType).eq('Double');pm.expect(element.Value).to.be.a(\"number\");};",
											"test_map.freshInlandWaterCover=function (element) {pm.expect(element.Name).eq('freshInlandWaterCover');pm.expect(element.ValueType).eq('Double');pm.expect(element.Value).to.be.a(\"number\");};",
											"test_map.tidalRegionCover=function (element) {pm.expect(element.Name).eq('tidalRegionCover');pm.expect(element.ValueType).eq('Double');pm.expect(element.Value).to.be.a(\"number\");};",
											"test_map.lastRelativeOrbitNumber=function (element) {pm.expect(element.Name).eq('lastRelativeOrbitNumber');pm.expect(element.ValueType).eq('Integer');pm.expect(element.Value).to.be.a(\"number\");pm.expect(element.Value).to.match(/([1-9]|[1-8][0-9]|9[0-9]|[12][0-9]{2}|3[0-7][0-9]|38[0-5])/);};",
											"",
											"test_schema={};",
											"test_schema.beginningDateTime=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.endingDateTime=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.platformShortName=function (num) {pm.expect(num).to.be.within(0,1)};",
											"test_schema.platformSerialIdentifier=function (num) {pm.expect(num).to.be.within(0,1)};",
											"test_schema.instrumentShortName=function (num) {pm.expect(num).to.be.within(0,1)};",
											"test_schema.operationalMode=function (num) {pm.expect(num).to.be.within(0,1)};",
											"test_schema.productType=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.timeliness=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.cloudCover=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.orbitNumber=function (num) {pm.expect(num).to.be.within(1,2)};",
											"test_schema.lastOrbitNumber=function (num) {pm.expect(num).to.be.within(1,2)};",
											"test_schema.orbitDirection=function (num) {pm.expect(num).to.be.within(0,1)};",
											"test_schema.lastOrbitDirection=function (num) {pm.expect(num).to.be.within(0,1)};",
											"test_schema.relativeOrbitNumber=function (num) {pm.expect(num).to.be.within(1,2)};",
											"test_schema.cycleNumber=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.processingLevel=function (num) {pm.expect(num).to.be.within(0,1)};",
											"test_schema.processingDate=function (num) {pm.expect(num).to.be.within(0,1)};",
											"test_schema.processingCenter=function (num) {pm.expect(num).to.be.within(0,1)};",
											"test_schema.processorName=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.processorVersion=function (num) {pm.expect(num).to.be.within(0,1)};",
											"test_schema.coordinates=function (num) {pm.expect(num).to.be.within(0,1)};",
											"test_schema.baselineCollection=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.salineWaterCover=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.landCover=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.coastalCover=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.freshInlandWaterCover=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.tidalRegionCover=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.lastRelativeOrbitNumber=function (num) {pm.expect(num).to.be.within(0,2)};",
											"",
											"            ",
											"properties_map = {};",
											"properties_map.Id=function (element) {pm.expect(element.Id).to.match(/[0-9a-fA-F]{8}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{12}/);};",
											"properties_map.Name=function (element) {pm.expect(element.Name).to.be.a(\"string\");};",
											"properties_map.ContentType=function (element) {pm.expect(element.ContentType).to.be.a(\"string\");};",
											"properties_map.ContentLength=function (element) {pm.expect(element.ContentLength).to.be.a(\"number\");};",
											"properties_map.PublicationDate=function (element) {pm.expect(element.PublicationDate).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);};",
											"properties_map.EvictionDate=function (element) {if(element.EvictionDate){ pm.expect(element.EvictionDate).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d+([+-][0-2]\\d:[0-5]\\d|Z)/); }};",
											"properties_map.Checksum=function (element) {for(i=0; i<element.Checksum.length; i++ ){pm.expect(element.Checksum[i].Algorithm).to.be.oneOf([\"MD5\",\"SHA-1\",\"SHA-256\",\"SHA-512\"]);checksum_algorithm = {'MD5': '[a-fA-F0-9]{32}', 'SHA-1': '[0-9a-f]{5,40}', 'SHA-256': '[A-Fa-f0-9]{64}', 'SHA-512': '[A-Fa-f0-9]{128}'};pm.expect(element.Checksum[i].Value).to.match(new RegExp(checksum_algorithm[element.Checksum[i].Algorithm]));}};",
											"properties_map.ContentDate=function (element) {pm.expect(element.ContentDate[\"Start\"]).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);pm.expect(element.ContentDate[\"End\"]).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);};",
											"properties_map.ProductionType=function (element) {pm.expect(element.ProductionType).to.be.oneOf([\"systematic_production\",\"on-demand default\",\"on-demand non-default\"]);};",
											"properties_map.Footprint=function (element) {if(element.Footprint){ pm.expect(element.Footprint).to.match(/geography'SRID=\\d+;[Polygon|Multipolygon|Point](.*)/); }};",
											"",
											"let schema_seen = {};",
											"",
											"function testSpecific(value, product){",
											"",
											"    if (schema_seen[value.Name]){",
											"        schema_seen[value.Name]++;",
											"    }else{",
											"        schema_seen[value.Name]=1;",
											"    }",
											"",
											"    if (test_map[value.Name]) {",
											"        pm.test(\"Test Attribute \"+value.Name + \" for Product: \"+product.Name+\" - \"+product.Id, function(){test_map[value.Name](value, product)});",
											"    }",
											"    else {",
											"        pm.test.skip(\"Test Attribute \"+value.Name + \" for Product: \"+product.Name+\" - \"+product.Id);",
											"    }",
											"}",
											"function propertySpecific(key, product){",
											"    if (properties_map[key]) {",
											"        pm.test(\"Test Property \"+key+\" for Product: \"+product.Name+\" - \"+product.Id, function(){properties_map[key](product)});",
											"    }",
											"    else {",
											"        pm.test.skip(\"Test Property \"+key+\" for Product: \"+product.Name+\" - \"+product.Id);",
											"    }",
											"}",
											"",
											"for (var counter = 0;  counter  < jsonDataElements.length; counter++){",
											"    var product = jsonDataElements[counter];",
											"    console.log(\"Processing Product: \"+product.Name+\" - \"+product.Id);",
											"",
											"    for (const[key, value] of Object.entries(properties_map)){",
											"        propertySpecific(key, jsonDataElements[counter]);",
											"    }",
											"",
											"    if(\"Attributes\" in jsonDataElements[counter]){",
											"        schema_seen = {};",
											"",
											"        pm.test(\"Test Attributes list\", function(){",
											"            pm.expect(jsonDataElements[counter].Attributes.length).to.be.above(0);",
											"        });",
											"",
											"        jsonDataElements[counter].Attributes.forEach(function(elem){",
											"            testSpecific(elem, jsonDataElements[counter]);",
											"        });",
											"        var product = jsonDataElements[counter];",
											"        for (const[key, value] of Object.entries(test_schema)) {pm.test(\"Schema Attribute \"+key+\" Product \"+product.Name+\" - \"+product.Id, function(){",
											"        if(schema_seen[key] == undefined){",
											"            schema_seen[key] = 0;",
											"        }",
											"        value(schema_seen[key], product)});}",
											"    }",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{service-root-uri}}/odata/v1/Products?$expand=Attributes&$top=1&$filter=(contains(Name,'SL_1_RBT___') or contains(Name,'SL_2_LST___') or contains(Name,'SL_2_FRP___')) and startswith(Name,'S3')\n",
									"host": [
										"{{service-root-uri}}"
									],
									"path": [
										"odata",
										"v1",
										"Products"
									],
									"query": [
										{
											"key": "$expand",
											"value": "Attributes"
										},
										{
											"key": "$top",
											"value": "1"
										},
										{
											"key": "$filter",
											"value": "(contains(Name,'SL_1_RBT___') or contains(Name,'SL_2_LST___') or contains(Name,'SL_2_FRP___')) and startswith(Name,'S3')\n"
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_1_RBT___') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_2_LST___') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_2_FRP___') and startswith(Name,'S3')\n",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "S3_SYNERGY_Products",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2e19fdfd-ecc0-4243-aa16-48ebbc01ee6f",
										"exec": [
											"var jsonDataElements = pm.response.json().value;",
											"pm.test(\"Response time is less than \" +  environment[\"query-timeout\"] + \"ms\", function(){",
											"    pm.expect(pm.response.responseTime).to.be.below(parseInt(environment[\"query-timeout\"]));",
											"});",
											"",
											"pm.test(\"Test OData context\", function(){",
											"    query_string = pm.request.url.getQueryString();",
											"    if(query_string.includes(\"$expand=Attributes\")){",
											"        pm.expect( pm.response.json()['@odata.context']).to.include(\"$metadata#Products(Attributes())\");",
											"    } else{",
											"        pm.expect( pm.response.json()['@odata.context']).to.include(\"$metadata#Products\");",
											"    }",
											"});",
											"",
											"var TRUE = true;",
											"var FALSE = false;",
											"",
											"test_map={};",
											"test_map.beginningDateTime=function (element) {pm.expect(element.Name).eq('beginningDateTime');pm.expect(element.ValueType).eq('DateTimeOffset');pm.expect(element.Value).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);};",
											"test_map.endingDateTime=function (element) {pm.expect(element.Name).eq('endingDateTime');pm.expect(element.ValueType).eq('DateTimeOffset');pm.expect(element.Value).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);};",
											"test_map.platformShortName=function (element) {pm.expect(element.Name).eq('platformShortName');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"SENTINEL-3\"]);};",
											"test_map.platformSerialIdentifier=function (element) {pm.expect(element.Name).eq('platformSerialIdentifier');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"A\",\"B\",\"C\",\"D\",\"_\"]);};",
											"test_map.instrumentShortName=function (element) {pm.expect(element.Name).eq('instrumentShortName');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"SYNERGY\"]);};",
											"test_map.operationalMode=function (element) {pm.expect(element.Name).eq('operationalMode');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');};",
											"test_map.productType=function (element) {pm.expect(element.Name).eq('productType');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"SY_1_MISR__\",\"SY_2_SYN___\",\"SY_2_V10___\",\"SY_2_VG1___\",\"SY_2_VGP___\",\"SY_2_VGK___\",\"SY_2_AOD___\"]);",
											"",
											"};",
											"test_map.timeliness=function (element) {pm.expect(element.Name).eq('timeliness');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"NR\",\"NT\",\"ST\",\"AL\"]);};",
											"test_map.cloudCover=function (element) {pm.expect(element.Name).eq('cloudCover');pm.expect(element.ValueType).eq('Double');pm.expect(element.Value).to.be.a(\"number\");};",
											"test_map.orbitNumber=function (element) {pm.expect(element.Name).eq('orbitNumber');pm.expect(element.ValueType).eq('Integer');pm.expect(element.Value).to.be.a(\"number\");};",
											"test_map.lastOrbitNumber=function (element) {pm.expect(element.Name).eq('lastOrbitNumber');pm.expect(element.ValueType).eq('Integer');pm.expect(element.Value).to.be.a(\"number\");};",
											"test_map.orbitDirection=function (element) {pm.expect(element.Name).eq('orbitDirection');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"ASCENDING\",\"DESCENDING\"]);};",
											"test_map.lastOrbitDirection=function (element) {pm.expect(element.Name).eq('lastOrbitDirection');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"ASCENDING\",\"DESCENDING\"]);};",
											"test_map.relativeOrbitNumber=function (element) {pm.expect(element.Name).eq('relativeOrbitNumber');pm.expect(element.ValueType).eq('Integer');pm.expect(element.Value).to.be.a(\"number\");pm.expect(element.Value).to.match(/([1-9]|[1-8][0-9]|9[0-9]|[12][0-9]{2}|3[0-7][0-9]|38[0-5])/);};",
											"test_map.cycleNumber=function (element) {pm.expect(element.Name).eq('cycleNumber');pm.expect(element.ValueType).eq('Integer');pm.expect(element.Value).to.be.a(\"number\");pm.expect(element.Value).to.match(/([1-9]|[1-8][0-9]|9[0-9]|[12][0-9]{2}|3[0-7][0-9]|38[0-5])/);};",
											"test_map.processingLevel=function (element) {pm.expect(element.Name).eq('processingLevel');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"1\",\"2\"]);};",
											"test_map.processingDate=function (element) {pm.expect(element.Name).eq('processingDate');pm.expect(element.ValueType).eq('DateTimeOffset');pm.expect(element.Value).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);};",
											"test_map.processingCenter=function (element) {pm.expect(element.Name).eq('processingCenter');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');};",
											"test_map.processorName=function (element) {pm.expect(element.Name).eq('processorName');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');};",
											"test_map.processorVersion=function (element) {pm.expect(element.Name).eq('processorVersion');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');};",
											"test_map.coordinates=function (element) {pm.expect(element.Name).eq('coordinates');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');};",
											"test_map.baselineCollection=function (element) {pm.expect(element.Name).eq('baselineCollection');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');};",
											"test_map.snowOrIceCover=function (element) {pm.expect(element.Name).eq('snowOrIceCover');pm.expect(element.ValueType).eq('Double');pm.expect(element.Value).to.be.a(\"number\");};",
											"test_map.salineWaterCover=function (element) {pm.expect(element.Name).eq('salineWaterCover');pm.expect(element.ValueType).eq('Double');pm.expect(element.Value).to.be.a(\"number\");};",
											"test_map.coastalCover=function (element) {pm.expect(element.Name).eq('coastalCover');pm.expect(element.ValueType).eq('Double');pm.expect(element.Value).to.be.a(\"number\");};",
											"test_map.freshInlandWaterCover=function (element) {pm.expect(element.Name).eq('freshInlandWaterCover');pm.expect(element.ValueType).eq('Double');pm.expect(element.Value).to.be.a(\"number\");};",
											"test_map.tidalRegionCover=function (element) {pm.expect(element.Name).eq('tidalRegionCover');pm.expect(element.ValueType).eq('Double');pm.expect(element.Value).to.be.a(\"number\");};",
											"test_map.landCover=function (element) {pm.expect(element.Name).eq('landCover');pm.expect(element.ValueType).eq('Double');pm.expect(element.Value).to.be.a(\"number\");};",
											"test_map.lastRelativeOrbitNumber=function (element) {pm.expect(element.Name).eq('lastRelativeOrbitNumber');pm.expect(element.ValueType).eq('Integer');pm.expect(element.Value).to.be.a(\"number\");pm.expect(element.Value).to.match(/([1-9]|[1-8][0-9]|9[0-9]|[12][0-9]{2}|3[0-7][0-9]|38[0-5])/);};",
											"",
											"test_schema={};",
											"test_schema.beginningDateTime=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.endingDateTime=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.platformShortName=function (num) {pm.expect(num).to.be.within(0,1)};",
											"test_schema.platformSerialIdentifier=function (num) {pm.expect(num).to.be.within(0,1)};",
											"test_schema.instrumentShortName=function (num) {pm.expect(num).to.be.within(0,1)};",
											"test_schema.operationalMode=function (num) {pm.expect(num).to.be.within(0,1)};",
											"test_schema.productType=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.timeliness=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.cloudCover=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.orbitNumber=function (num) {pm.expect(num).to.be.within(1,2)};",
											"test_schema.lastOrbitNumber=function (num) {pm.expect(num).to.be.within(1,2)};",
											"test_schema.orbitDirection=function (num) {pm.expect(num).to.be.within(0,1)};",
											"test_schema.lastOrbitDirection=function (num) {pm.expect(num).to.be.within(0,1)};",
											"test_schema.relativeOrbitNumber=function (num) {pm.expect(num).to.be.within(1,2)};",
											"test_schema.cycleNumber=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.processingLevel=function (num) {pm.expect(num).to.be.within(0,1)};",
											"test_schema.processingDate=function (num) {pm.expect(num).to.be.within(0,1)};",
											"test_schema.processingCenter=function (num) {pm.expect(num).to.be.within(0,1)};",
											"test_schema.processorName=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.processorVersion=function (num) {pm.expect(num).to.be.within(0,1)};",
											"test_schema.coordinates=function (num) {pm.expect(num).to.be.within(0,1)};",
											"test_schema.baselineCollection=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.snowOrIceCover=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.salineWaterCover=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.coastalCover=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.freshInlandWaterCover=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.tidalRegionCover=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.landCover=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.lastRelativeOrbitNumber=function (num) {pm.expect(num).to.be.within(0,2)};",
											"",
											"            ",
											"properties_map = {};",
											"properties_map.Id=function (element) {pm.expect(element.Id).to.match(/[0-9a-fA-F]{8}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{12}/);};",
											"properties_map.Name=function (element) {pm.expect(element.Name).to.be.a(\"string\");};",
											"properties_map.ContentType=function (element) {pm.expect(element.ContentType).to.be.a(\"string\");};",
											"properties_map.ContentLength=function (element) {pm.expect(element.ContentLength).to.be.a(\"number\");};",
											"properties_map.PublicationDate=function (element) {pm.expect(element.PublicationDate).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);};",
											"properties_map.EvictionDate=function (element) {if(element.EvictionDate){ pm.expect(element.EvictionDate).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d+([+-][0-2]\\d:[0-5]\\d|Z)/); }};",
											"properties_map.Checksum=function (element) {for(i=0; i<element.Checksum.length; i++ ){pm.expect(element.Checksum[i].Algorithm).to.be.oneOf([\"MD5\",\"SHA-1\",\"SHA-256\",\"SHA-512\"]);checksum_algorithm = {'MD5': '[a-fA-F0-9]{32}', 'SHA-1': '[0-9a-f]{5,40}', 'SHA-256': '[A-Fa-f0-9]{64}', 'SHA-512': '[A-Fa-f0-9]{128}'};pm.expect(element.Checksum[i].Value).to.match(new RegExp(checksum_algorithm[element.Checksum[i].Algorithm]));}};",
											"properties_map.ContentDate=function (element) {pm.expect(element.ContentDate[\"Start\"]).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);pm.expect(element.ContentDate[\"End\"]).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);};",
											"properties_map.ProductionType=function (element) {pm.expect(element.ProductionType).to.be.oneOf([\"systematic_production\",\"on-demand default\",\"on-demand non-default\"]);};",
											"properties_map.Footprint=function (element) {if(element.Footprint){ pm.expect(element.Footprint).to.match(/geography'SRID=\\d+;[Polygon|Multipolygon|Point](.*)/); }};",
											"",
											"let schema_seen = {};",
											"",
											"function testSpecific(value, product){",
											"",
											"    if (schema_seen[value.Name]){",
											"        schema_seen[value.Name]++;",
											"    }else{",
											"        schema_seen[value.Name]=1;",
											"    }",
											"",
											"    if (test_map[value.Name]) {",
											"        pm.test(\"Test Attribute \"+value.Name + \" for Product: \"+product.Name+\" - \"+product.Id, function(){test_map[value.Name](value, product)});",
											"    }",
											"    else {",
											"        pm.test.skip(\"Test Attribute \"+value.Name + \" for Product: \"+product.Name+\" - \"+product.Id);",
											"    }",
											"}",
											"function propertySpecific(key, product){",
											"    if (properties_map[key]) {",
											"        pm.test(\"Test Property \"+key+\" for Product: \"+product.Name+\" - \"+product.Id, function(){properties_map[key](product)});",
											"    }",
											"    else {",
											"        pm.test.skip(\"Test Property \"+key+\" for Product: \"+product.Name+\" - \"+product.Id);",
											"    }",
											"}",
											"",
											"for (var counter = 0;  counter  < jsonDataElements.length; counter++){",
											"    var product = jsonDataElements[counter];",
											"    console.log(\"Processing Product: \"+product.Name+\" - \"+product.Id);",
											"",
											"    for (const[key, value] of Object.entries(properties_map)){",
											"        propertySpecific(key, jsonDataElements[counter]);",
											"    }",
											"",
											"    if(\"Attributes\" in jsonDataElements[counter]){",
											"        schema_seen = {};",
											"",
											"        pm.test(\"Test Attributes list\", function(){",
											"            pm.expect(jsonDataElements[counter].Attributes.length).to.be.above(0);",
											"        });",
											"",
											"        jsonDataElements[counter].Attributes.forEach(function(elem){",
											"            testSpecific(elem, jsonDataElements[counter]);",
											"        });",
											"        var product = jsonDataElements[counter];",
											"        for (const[key, value] of Object.entries(test_schema)) {pm.test(\"Schema Attribute \"+key+\" Product \"+product.Name+\" - \"+product.Id, function(){",
											"        if(schema_seen[key] == undefined){",
											"            schema_seen[key] = 0;",
											"        }",
											"        value(schema_seen[key], product)});}",
											"    }",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{service-root-uri}}/odata/v1/Products?$expand=Attributes&$top=1&$filter=(contains(Name,'SY_1_MISR__') or contains(Name,'SY_2_SYN___') or contains(Name,'SY_2_V10___') or contains(Name,'SY_2_VG1___') or contains(Name,'SY_2_VGP___') or contains(Name,'SY_2_VGK___') or contains(Name,'SY_2_AOD___')) and startswith(Name,'S3')\n",
									"host": [
										"{{service-root-uri}}"
									],
									"path": [
										"odata",
										"v1",
										"Products"
									],
									"query": [
										{
											"key": "$expand",
											"value": "Attributes"
										},
										{
											"key": "$top",
											"value": "1"
										},
										{
											"key": "$filter",
											"value": "(contains(Name,'SY_1_MISR__') or contains(Name,'SY_2_SYN___') or contains(Name,'SY_2_V10___') or contains(Name,'SY_2_VG1___') or contains(Name,'SY_2_VGP___') or contains(Name,'SY_2_VGK___') or contains(Name,'SY_2_AOD___')) and startswith(Name,'S3')\n"
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SY_1_MISR__') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SY_2_SYN___') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SY_2_V10___') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SY_2_VG1___') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SY_2_VGP___') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SY_2_VGK___') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SY_2_AOD___') and startswith(Name,'S3')\n",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "S3_OLCI_L1+L2_Products",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "95c2aeb3-9224-4933-8669-56334ad98832",
										"exec": [
											"var jsonDataElements = pm.response.json().value;",
											"pm.test(\"Response time is less than \" +  environment[\"query-timeout\"] + \"ms\", function(){",
											"    pm.expect(pm.response.responseTime).to.be.below(parseInt(environment[\"query-timeout\"]));",
											"});",
											"",
											"pm.test(\"Test OData context\", function(){",
											"    query_string = pm.request.url.getQueryString();",
											"    if(query_string.includes(\"$expand=Attributes\")){",
											"        pm.expect( pm.response.json()['@odata.context']).to.include(\"$metadata#Products(Attributes())\");",
											"    } else{",
											"        pm.expect( pm.response.json()['@odata.context']).to.include(\"$metadata#Products\");",
											"    }",
											"});",
											"",
											"var TRUE = true;",
											"var FALSE = false;",
											"",
											"test_map={};",
											"test_map.beginningDateTime=function (element) {pm.expect(element.Name).eq('beginningDateTime');pm.expect(element.ValueType).eq('DateTimeOffset');pm.expect(element.Value).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);};",
											"test_map.endingDateTime=function (element) {pm.expect(element.Name).eq('endingDateTime');pm.expect(element.ValueType).eq('DateTimeOffset');pm.expect(element.Value).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);};",
											"test_map.platformShortName=function (element) {pm.expect(element.Name).eq('platformShortName');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"SENTINEL-3\"]);};",
											"test_map.platformSerialIdentifier=function (element) {pm.expect(element.Name).eq('platformSerialIdentifier');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"A\",\"B\",\"C\",\"D\",\"_\"]);};",
											"test_map.instrumentShortName=function (element) {pm.expect(element.Name).eq('instrumentShortName');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"OLCI\"]);};",
											"test_map.operationalMode=function (element) {pm.expect(element.Name).eq('operationalMode');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');};",
											"test_map.productType=function (element) {pm.expect(element.Name).eq('productType');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"OL_1_EFR___\",\"OL_1_ERR___\",\"OL_1_RAC___\",\"OL_1_SPC___\",\"OL_2_LFR___\",\"OL_2_LRR___\"]);",
											"",
											"};",
											"test_map.timeliness=function (element) {pm.expect(element.Name).eq('timeliness');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"NR\",\"NT\",\"ST\",\"AL\"]);};",
											"test_map.cloudCover=function (element) {pm.expect(element.Name).eq('cloudCover');pm.expect(element.ValueType).eq('Double');pm.expect(element.Value).to.be.a(\"number\");};",
											"test_map.orbitNumber=function (element) {pm.expect(element.Name).eq('orbitNumber');pm.expect(element.ValueType).eq('Integer');pm.expect(element.Value).to.be.a(\"number\");};",
											"test_map.lastOrbitNumber=function (element) {pm.expect(element.Name).eq('lastOrbitNumber');pm.expect(element.ValueType).eq('Integer');pm.expect(element.Value).to.be.a(\"number\");};",
											"test_map.orbitDirection=function (element) {pm.expect(element.Name).eq('orbitDirection');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"ASCENDING\",\"DESCENDING\"]);};",
											"test_map.lastOrbitDirection=function (element) {pm.expect(element.Name).eq('lastOrbitDirection');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"ASCENDING\",\"DESCENDING\"]);};",
											"test_map.relativeOrbitNumber=function (element) {pm.expect(element.Name).eq('relativeOrbitNumber');pm.expect(element.ValueType).eq('Integer');pm.expect(element.Value).to.be.a(\"number\");pm.expect(element.Value).to.match(/([1-9]|[1-8][0-9]|9[0-9]|[12][0-9]{2}|3[0-7][0-9]|38[0-5])/);};",
											"test_map.cycleNumber=function (element) {pm.expect(element.Name).eq('cycleNumber');pm.expect(element.ValueType).eq('Integer');pm.expect(element.Value).to.be.a(\"number\");pm.expect(element.Value).to.match(/([1-9]|[1-8][0-9]|9[0-9]|[12][0-9]{2}|3[0-7][0-9]|38[0-5])/);};",
											"test_map.processingLevel=function (element) {pm.expect(element.Name).eq('processingLevel');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"1\",\"2\"]);};",
											"test_map.processingDate=function (element) {pm.expect(element.Name).eq('processingDate');pm.expect(element.ValueType).eq('DateTimeOffset');pm.expect(element.Value).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);};",
											"test_map.processingCenter=function (element) {pm.expect(element.Name).eq('processingCenter');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');};",
											"test_map.processorName=function (element) {pm.expect(element.Name).eq('processorName');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');};",
											"test_map.processorVersion=function (element) {pm.expect(element.Name).eq('processorVersion');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');};",
											"test_map.coordinates=function (element) {pm.expect(element.Name).eq('coordinates');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');};",
											"test_map.baselineCollection=function (element) {pm.expect(element.Name).eq('baselineCollection');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');};",
											"test_map.brightCover=function (element) {pm.expect(element.Name).eq('brightCover');pm.expect(element.ValueType).eq('Double');pm.expect(element.Value).to.be.a(\"number\");};",
											"test_map.salineWaterCover=function (element) {pm.expect(element.Name).eq('salineWaterCover');pm.expect(element.ValueType).eq('Double');pm.expect(element.Value).to.be.a(\"number\");};",
											"test_map.coastalCover=function (element) {pm.expect(element.Name).eq('coastalCover');pm.expect(element.ValueType).eq('Double');pm.expect(element.Value).to.be.a(\"number\");};",
											"test_map.freshInlandWaterCover=function (element) {pm.expect(element.Name).eq('freshInlandWaterCover');pm.expect(element.ValueType).eq('Double');pm.expect(element.Value).to.be.a(\"number\");};",
											"test_map.tidalRegionCover=function (element) {pm.expect(element.Name).eq('tidalRegionCover');pm.expect(element.ValueType).eq('Double');pm.expect(element.Value).to.be.a(\"number\");};",
											"test_map.landCover=function (element) {pm.expect(element.Name).eq('landCover');pm.expect(element.ValueType).eq('Double');pm.expect(element.Value).to.be.a(\"number\");};",
											"test_map.lastRelativeOrbitNumber=function (element) {pm.expect(element.Name).eq('lastRelativeOrbitNumber');pm.expect(element.ValueType).eq('Integer');pm.expect(element.Value).to.be.a(\"number\");pm.expect(element.Value).to.match(/([1-9]|[1-8][0-9]|9[0-9]|[12][0-9]{2}|3[0-7][0-9]|38[0-5])/);};",
											"",
											"test_schema={};",
											"test_schema.beginningDateTime=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.endingDateTime=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.platformShortName=function (num) {pm.expect(num).to.be.within(0,1)};",
											"test_schema.platformSerialIdentifier=function (num) {pm.expect(num).to.be.within(0,1)};",
											"test_schema.instrumentShortName=function (num) {pm.expect(num).to.be.within(0,1)};",
											"test_schema.operationalMode=function (num) {pm.expect(num).to.be.within(0,1)};",
											"test_schema.productType=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.timeliness=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.cloudCover=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.orbitNumber=function (num) {pm.expect(num).to.be.within(1,2)};",
											"test_schema.lastOrbitNumber=function (num) {pm.expect(num).to.be.within(1,2)};",
											"test_schema.orbitDirection=function (num) {pm.expect(num).to.be.within(0,1)};",
											"test_schema.lastOrbitDirection=function (num) {pm.expect(num).to.be.within(0,1)};",
											"test_schema.relativeOrbitNumber=function (num) {pm.expect(num).to.be.within(1,2)};",
											"test_schema.cycleNumber=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.processingLevel=function (num) {pm.expect(num).to.be.within(0,1)};",
											"test_schema.processingDate=function (num) {pm.expect(num).to.be.within(0,1)};",
											"test_schema.processingCenter=function (num) {pm.expect(num).to.be.within(0,1)};",
											"test_schema.processorName=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.processorVersion=function (num) {pm.expect(num).to.be.within(0,1)};",
											"test_schema.coordinates=function (num) {pm.expect(num).to.be.within(0,1)};",
											"test_schema.baselineCollection=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.brightCover=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.salineWaterCover=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.coastalCover=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.freshInlandWaterCover=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.tidalRegionCover=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.landCover=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.lastRelativeOrbitNumber=function (num) {pm.expect(num).to.be.within(0,2)};",
											"",
											"            ",
											"properties_map = {};",
											"properties_map.Id=function (element) {pm.expect(element.Id).to.match(/[0-9a-fA-F]{8}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{12}/);};",
											"properties_map.Name=function (element) {pm.expect(element.Name).to.be.a(\"string\");};",
											"properties_map.ContentType=function (element) {pm.expect(element.ContentType).to.be.a(\"string\");};",
											"properties_map.ContentLength=function (element) {pm.expect(element.ContentLength).to.be.a(\"number\");};",
											"properties_map.PublicationDate=function (element) {pm.expect(element.PublicationDate).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);};",
											"properties_map.EvictionDate=function (element) {if(element.EvictionDate){ pm.expect(element.EvictionDate).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d+([+-][0-2]\\d:[0-5]\\d|Z)/); }};",
											"properties_map.Checksum=function (element) {for(i=0; i<element.Checksum.length; i++ ){pm.expect(element.Checksum[i].Algorithm).to.be.oneOf([\"MD5\",\"SHA-1\",\"SHA-256\",\"SHA-512\"]);checksum_algorithm = {'MD5': '[a-fA-F0-9]{32}', 'SHA-1': '[0-9a-f]{5,40}', 'SHA-256': '[A-Fa-f0-9]{64}', 'SHA-512': '[A-Fa-f0-9]{128}'};pm.expect(element.Checksum[i].Value).to.match(new RegExp(checksum_algorithm[element.Checksum[i].Algorithm]));}};",
											"properties_map.ContentDate=function (element) {pm.expect(element.ContentDate[\"Start\"]).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);pm.expect(element.ContentDate[\"End\"]).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);};",
											"properties_map.ProductionType=function (element) {pm.expect(element.ProductionType).to.be.oneOf([\"systematic_production\",\"on-demand default\",\"on-demand non-default\"]);};",
											"properties_map.Footprint=function (element) {if(element.Footprint){ pm.expect(element.Footprint).to.match(/geography'SRID=\\d+;[Polygon|Multipolygon|Point](.*)/); }};",
											"",
											"let schema_seen = {};",
											"",
											"function testSpecific(value, product){",
											"",
											"    if (schema_seen[value.Name]){",
											"        schema_seen[value.Name]++;",
											"    }else{",
											"        schema_seen[value.Name]=1;",
											"    }",
											"",
											"    if (test_map[value.Name]) {",
											"        pm.test(\"Test Attribute \"+value.Name + \" for Product: \"+product.Name+\" - \"+product.Id, function(){test_map[value.Name](value, product)});",
											"    }",
											"    else {",
											"        pm.test.skip(\"Test Attribute \"+value.Name + \" for Product: \"+product.Name+\" - \"+product.Id);",
											"    }",
											"}",
											"function propertySpecific(key, product){",
											"    if (properties_map[key]) {",
											"        pm.test(\"Test Property \"+key+\" for Product: \"+product.Name+\" - \"+product.Id, function(){properties_map[key](product)});",
											"    }",
											"    else {",
											"        pm.test.skip(\"Test Property \"+key+\" for Product: \"+product.Name+\" - \"+product.Id);",
											"    }",
											"}",
											"",
											"for (var counter = 0;  counter  < jsonDataElements.length; counter++){",
											"    var product = jsonDataElements[counter];",
											"    console.log(\"Processing Product: \"+product.Name+\" - \"+product.Id);",
											"",
											"    for (const[key, value] of Object.entries(properties_map)){",
											"        propertySpecific(key, jsonDataElements[counter]);",
											"    }",
											"",
											"    if(\"Attributes\" in jsonDataElements[counter]){",
											"        schema_seen = {};",
											"",
											"        pm.test(\"Test Attributes list\", function(){",
											"            pm.expect(jsonDataElements[counter].Attributes.length).to.be.above(0);",
											"        });",
											"",
											"        jsonDataElements[counter].Attributes.forEach(function(elem){",
											"            testSpecific(elem, jsonDataElements[counter]);",
											"        });",
											"        var product = jsonDataElements[counter];",
											"        for (const[key, value] of Object.entries(test_schema)) {pm.test(\"Schema Attribute \"+key+\" Product \"+product.Name+\" - \"+product.Id, function(){",
											"        if(schema_seen[key] == undefined){",
											"            schema_seen[key] = 0;",
											"        }",
											"        value(schema_seen[key], product)});}",
											"    }",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{service-root-uri}}/odata/v1/Products?$expand=Attributes&$top=1&$filter=(contains(Name,'OL_1_EFR___') or contains(Name,'OL_1_ERR___') or contains(Name,'OL_1_RAC___') or contains(Name,'OL_1_SPC___') or contains(Name,'OL_2_LFR___') or contains(Name,'OL_2_LRR___')) and startswith(Name,'S3')\n",
									"host": [
										"{{service-root-uri}}"
									],
									"path": [
										"odata",
										"v1",
										"Products"
									],
									"query": [
										{
											"key": "$expand",
											"value": "Attributes"
										},
										{
											"key": "$top",
											"value": "1"
										},
										{
											"key": "$filter",
											"value": "(contains(Name,'OL_1_EFR___') or contains(Name,'OL_1_ERR___') or contains(Name,'OL_1_RAC___') or contains(Name,'OL_1_SPC___') or contains(Name,'OL_2_LFR___') or contains(Name,'OL_2_LRR___')) and startswith(Name,'S3')\n"
										},
										{
											"key": "$filter",
											"value": "contains(Name,'OL_1_EFR___') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'OL_1_ERR___') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'OL_1_RAC___') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'OL_1_SPC___') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'OL_2_LFR___') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'OL_2_LRR___') and startswith(Name,'S3')\n",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "S3_MWR_L1_Products",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1898d6f7-cd5e-4071-96a4-d8b68325c769",
										"exec": [
											"var jsonDataElements = pm.response.json().value;",
											"pm.test(\"Response time is less than \" +  environment[\"query-timeout\"] + \"ms\", function(){",
											"    pm.expect(pm.response.responseTime).to.be.below(parseInt(environment[\"query-timeout\"]));",
											"});",
											"",
											"pm.test(\"Test OData context\", function(){",
											"    query_string = pm.request.url.getQueryString();",
											"    if(query_string.includes(\"$expand=Attributes\")){",
											"        pm.expect( pm.response.json()['@odata.context']).to.include(\"$metadata#Products(Attributes())\");",
											"    } else{",
											"        pm.expect( pm.response.json()['@odata.context']).to.include(\"$metadata#Products\");",
											"    }",
											"});",
											"",
											"var TRUE = true;",
											"var FALSE = false;",
											"",
											"test_map={};",
											"test_map.beginningDateTime=function (element) {pm.expect(element.Name).eq('beginningDateTime');pm.expect(element.ValueType).eq('DateTimeOffset');pm.expect(element.Value).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);};",
											"test_map.endingDateTime=function (element) {pm.expect(element.Name).eq('endingDateTime');pm.expect(element.ValueType).eq('DateTimeOffset');pm.expect(element.Value).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);};",
											"test_map.platformShortName=function (element) {pm.expect(element.Name).eq('platformShortName');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"SENTINEL-3\"]);};",
											"test_map.platformSerialIdentifier=function (element) {pm.expect(element.Name).eq('platformSerialIdentifier');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"A\",\"B\",\"C\",\"D\",\"_\"]);};",
											"test_map.instrumentShortName=function (element) {pm.expect(element.Name).eq('instrumentShortName');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"MWR\"]);};",
											"test_map.operationalMode=function (element) {pm.expect(element.Name).eq('operationalMode');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');};",
											"test_map.productType=function (element) {pm.expect(element.Name).eq('productType');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"MW_1_CAL___\",\"MW_1_MWR___\"]);",
											"",
											"};",
											"test_map.timeliness=function (element) {pm.expect(element.Name).eq('timeliness');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"NR\",\"NT\",\"ST\",\"AL\"]);};",
											"test_map.orbitNumber=function (element) {pm.expect(element.Name).eq('orbitNumber');pm.expect(element.ValueType).eq('Integer');pm.expect(element.Value).to.be.a(\"number\");};",
											"test_map.lastOrbitNumber=function (element) {pm.expect(element.Name).eq('lastOrbitNumber');pm.expect(element.ValueType).eq('Integer');pm.expect(element.Value).to.be.a(\"number\");};",
											"test_map.orbitDirection=function (element) {pm.expect(element.Name).eq('orbitDirection');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"ASCENDING\",\"DESCENDING\"]);};",
											"test_map.lastOrbitDirection=function (element) {pm.expect(element.Name).eq('lastOrbitDirection');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"ASCENDING\",\"DESCENDING\"]);};",
											"test_map.relativeOrbitNumber=function (element) {pm.expect(element.Name).eq('relativeOrbitNumber');pm.expect(element.ValueType).eq('Integer');pm.expect(element.Value).to.be.a(\"number\");pm.expect(element.Value).to.match(/([1-9]|[1-8][0-9]|9[0-9]|[12][0-9]{2}|3[0-7][0-9]|38[0-5])/);};",
											"test_map.cycleNumber=function (element) {pm.expect(element.Name).eq('cycleNumber');pm.expect(element.ValueType).eq('Integer');pm.expect(element.Value).to.be.a(\"number\");pm.expect(element.Value).to.match(/([1-9]|[1-8][0-9]|9[0-9]|[12][0-9]{2}|3[0-7][0-9]|38[0-5])/);};",
											"test_map.processingLevel=function (element) {pm.expect(element.Name).eq('processingLevel');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"1\"]);};",
											"test_map.processingDate=function (element) {pm.expect(element.Name).eq('processingDate');pm.expect(element.ValueType).eq('DateTimeOffset');pm.expect(element.Value).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);};",
											"test_map.processingCenter=function (element) {pm.expect(element.Name).eq('processingCenter');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');};",
											"test_map.processorName=function (element) {pm.expect(element.Name).eq('processorName');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');};",
											"test_map.processorVersion=function (element) {pm.expect(element.Name).eq('processorVersion');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');};",
											"test_map.coordinates=function (element) {pm.expect(element.Name).eq('coordinates');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');};",
											"test_map.baselineCollection=function (element) {pm.expect(element.Name).eq('baselineCollection');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');};",
											"test_map.lastRelativeOrbitNumber=function (element) {pm.expect(element.Name).eq('lastRelativeOrbitNumber');pm.expect(element.ValueType).eq('Integer');pm.expect(element.Value).to.be.a(\"number\");pm.expect(element.Value).to.match(/([1-9]|[1-8][0-9]|9[0-9]|[12][0-9]{2}|3[0-7][0-9]|38[0-5])/);};",
											"",
											"test_schema={};",
											"test_schema.beginningDateTime=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.endingDateTime=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.platformShortName=function (num) {pm.expect(num).to.be.within(0,1)};",
											"test_schema.platformSerialIdentifier=function (num) {pm.expect(num).to.be.within(0,1)};",
											"test_schema.instrumentShortName=function (num) {pm.expect(num).to.be.within(0,1)};",
											"test_schema.operationalMode=function (num) {pm.expect(num).to.be.within(0,1)};",
											"test_schema.productType=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.timeliness=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.orbitNumber=function (num) {pm.expect(num).to.be.within(1,2)};",
											"test_schema.lastOrbitNumber=function (num) {pm.expect(num).to.be.within(1,2)};",
											"test_schema.orbitDirection=function (num) {pm.expect(num).to.be.within(0,1)};",
											"test_schema.lastOrbitDirection=function (num) {pm.expect(num).to.be.within(0,1)};",
											"test_schema.relativeOrbitNumber=function (num) {pm.expect(num).to.be.within(1,2)};",
											"test_schema.cycleNumber=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.processingLevel=function (num) {pm.expect(num).to.be.within(0,1)};",
											"test_schema.processingDate=function (num) {pm.expect(num).to.be.within(0,1)};",
											"test_schema.processingCenter=function (num) {pm.expect(num).to.be.within(0,1)};",
											"test_schema.processorName=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.processorVersion=function (num) {pm.expect(num).to.be.within(0,1)};",
											"test_schema.coordinates=function (num) {pm.expect(num).to.be.within(0,1)};",
											"test_schema.baselineCollection=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.lastRelativeOrbitNumber=function (num) {pm.expect(num).to.be.within(0,2)};",
											"",
											"            ",
											"properties_map = {};",
											"properties_map.Id=function (element) {pm.expect(element.Id).to.match(/[0-9a-fA-F]{8}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{12}/);};",
											"properties_map.Name=function (element) {pm.expect(element.Name).to.be.a(\"string\");};",
											"properties_map.ContentType=function (element) {pm.expect(element.ContentType).to.be.a(\"string\");};",
											"properties_map.ContentLength=function (element) {pm.expect(element.ContentLength).to.be.a(\"number\");};",
											"properties_map.PublicationDate=function (element) {pm.expect(element.PublicationDate).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);};",
											"properties_map.EvictionDate=function (element) {if(element.EvictionDate){ pm.expect(element.EvictionDate).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d+([+-][0-2]\\d:[0-5]\\d|Z)/); }};",
											"properties_map.Checksum=function (element) {for(i=0; i<element.Checksum.length; i++ ){pm.expect(element.Checksum[i].Algorithm).to.be.oneOf([\"MD5\",\"SHA-1\",\"SHA-256\",\"SHA-512\"]);checksum_algorithm = {'MD5': '[a-fA-F0-9]{32}', 'SHA-1': '[0-9a-f]{5,40}', 'SHA-256': '[A-Fa-f0-9]{64}', 'SHA-512': '[A-Fa-f0-9]{128}'};pm.expect(element.Checksum[i].Value).to.match(new RegExp(checksum_algorithm[element.Checksum[i].Algorithm]));}};",
											"properties_map.ContentDate=function (element) {pm.expect(element.ContentDate[\"Start\"]).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);pm.expect(element.ContentDate[\"End\"]).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);};",
											"properties_map.ProductionType=function (element) {pm.expect(element.ProductionType).to.be.oneOf([\"systematic_production\",\"on-demand default\",\"on-demand non-default\"]);};",
											"properties_map.Footprint=function (element) {if(element.Footprint){ pm.expect(element.Footprint).to.match(/geography'SRID=\\d+;[Polygon|Multipolygon|Point](.*)/); }};",
											"",
											"let schema_seen = {};",
											"",
											"function testSpecific(value, product){",
											"",
											"    if (schema_seen[value.Name]){",
											"        schema_seen[value.Name]++;",
											"    }else{",
											"        schema_seen[value.Name]=1;",
											"    }",
											"",
											"    if (test_map[value.Name]) {",
											"        pm.test(\"Test Attribute \"+value.Name + \" for Product: \"+product.Name+\" - \"+product.Id, function(){test_map[value.Name](value, product)});",
											"    }",
											"    else {",
											"        pm.test.skip(\"Test Attribute \"+value.Name + \" for Product: \"+product.Name+\" - \"+product.Id);",
											"    }",
											"}",
											"function propertySpecific(key, product){",
											"    if (properties_map[key]) {",
											"        pm.test(\"Test Property \"+key+\" for Product: \"+product.Name+\" - \"+product.Id, function(){properties_map[key](product)});",
											"    }",
											"    else {",
											"        pm.test.skip(\"Test Property \"+key+\" for Product: \"+product.Name+\" - \"+product.Id);",
											"    }",
											"}",
											"",
											"for (var counter = 0;  counter  < jsonDataElements.length; counter++){",
											"    var product = jsonDataElements[counter];",
											"    console.log(\"Processing Product: \"+product.Name+\" - \"+product.Id);",
											"",
											"    for (const[key, value] of Object.entries(properties_map)){",
											"        propertySpecific(key, jsonDataElements[counter]);",
											"    }",
											"",
											"    if(\"Attributes\" in jsonDataElements[counter]){",
											"        schema_seen = {};",
											"",
											"        pm.test(\"Test Attributes list\", function(){",
											"            pm.expect(jsonDataElements[counter].Attributes.length).to.be.above(0);",
											"        });",
											"",
											"        jsonDataElements[counter].Attributes.forEach(function(elem){",
											"            testSpecific(elem, jsonDataElements[counter]);",
											"        });",
											"        var product = jsonDataElements[counter];",
											"        for (const[key, value] of Object.entries(test_schema)) {pm.test(\"Schema Attribute \"+key+\" Product \"+product.Name+\" - \"+product.Id, function(){",
											"        if(schema_seen[key] == undefined){",
											"            schema_seen[key] = 0;",
											"        }",
											"        value(schema_seen[key], product)});}",
											"    }",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{service-root-uri}}/odata/v1/Products?$expand=Attributes&$top=1&$filter=(contains(Name,'MW_1_CAL___') or contains(Name,'MW_1_MWR___')) and startswith(Name,'S3')\n",
									"host": [
										"{{service-root-uri}}"
									],
									"path": [
										"odata",
										"v1",
										"Products"
									],
									"query": [
										{
											"key": "$expand",
											"value": "Attributes"
										},
										{
											"key": "$top",
											"value": "1"
										},
										{
											"key": "$filter",
											"value": "(contains(Name,'MW_1_CAL___') or contains(Name,'MW_1_MWR___')) and startswith(Name,'S3')\n"
										},
										{
											"key": "$filter",
											"value": "contains(Name,'MW_1_CAL___') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'MW_1_MWR___') and startswith(Name,'S3')\n",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "S3_Level-0_Products_",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c14de3a2-f8a8-498a-a75a-beb1a801fa9d",
										"exec": [
											"var jsonDataElements = pm.response.json().value;",
											"pm.test(\"Response time is less than \" +  environment[\"query-timeout\"] + \"ms\", function(){",
											"    pm.expect(pm.response.responseTime).to.be.below(parseInt(environment[\"query-timeout\"]));",
											"});",
											"",
											"pm.test(\"Test OData context\", function(){",
											"    query_string = pm.request.url.getQueryString();",
											"    if(query_string.includes(\"$expand=Attributes\")){",
											"        pm.expect( pm.response.json()['@odata.context']).to.include(\"$metadata#Products(Attributes())\");",
											"    } else{",
											"        pm.expect( pm.response.json()['@odata.context']).to.include(\"$metadata#Products\");",
											"    }",
											"});",
											"",
											"var TRUE = true;",
											"var FALSE = false;",
											"",
											"test_map={};",
											"test_map.beginningDateTime=function (element) {pm.expect(element.Name).eq('beginningDateTime');pm.expect(element.ValueType).eq('DateTimeOffset');pm.expect(element.Value).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);};",
											"test_map.endingDateTime=function (element) {pm.expect(element.Name).eq('endingDateTime');pm.expect(element.ValueType).eq('DateTimeOffset');pm.expect(element.Value).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);};",
											"test_map.platformShortName=function (element) {pm.expect(element.Name).eq('platformShortName');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"SENTINEL-3\"]);};",
											"test_map.platformSerialIdentifier=function (element) {pm.expect(element.Name).eq('platformSerialIdentifier');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"A\",\"B\",\"C\",\"D\",\"_\"]);};",
											"test_map.instrumentShortName=function (element) {pm.expect(element.Name).eq('instrumentShortName');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"SRAL\",\"MWR\",\"OLCI\",\"SLSTR\",\"GNSS\",\"DORIS\",\"Telemetry\",\"SYNERGY\",\"HKTM\",\"NAVATT\"]);};",
											"test_map.operationalMode=function (element) {pm.expect(element.Name).eq('operationalMode');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');};",
											"test_map.productType=function (element) {pm.expect(element.Name).eq('productType');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"DO_0_DOP___\",\"DO_0_NAV___\",\"GN_0_GNS___\",\"MW_0_MWR___\",\"OL_0_CR0___\",\"OL_0_CR1___\",\"OL_0_EFR___\",\"SL_0_SLT___\",\"SR_0_SRA___\",\"SR_0_CAL___\",\"TM_0_HKM___\",\"TM_0_HKM2__\",\"TM_0_NAT___\"]);",
											"",
											"};",
											"test_map.timeliness=function (element) {pm.expect(element.Name).eq('timeliness');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"NR\",\"NT\",\"ST\",\"AL\"]);};",
											"test_map.orbitNumber=function (element) {pm.expect(element.Name).eq('orbitNumber');pm.expect(element.ValueType).eq('Integer');pm.expect(element.Value).to.be.a(\"number\");};",
											"test_map.lastOrbitNumber=function (element) {pm.expect(element.Name).eq('lastOrbitNumber');pm.expect(element.ValueType).eq('Integer');pm.expect(element.Value).to.be.a(\"number\");};",
											"test_map.orbitDirection=function (element) {pm.expect(element.Name).eq('orbitDirection');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"ASCENDING\",\"DESCENDING\"]);};",
											"test_map.lastOrbitDirection=function (element) {pm.expect(element.Name).eq('lastOrbitDirection');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"ASCENDING\",\"DESCENDING\"]);};",
											"test_map.relativeOrbitNumber=function (element) {pm.expect(element.Name).eq('relativeOrbitNumber');pm.expect(element.ValueType).eq('Integer');pm.expect(element.Value).to.be.a(\"number\");pm.expect(element.Value).to.match(/([1-9]|[1-8][0-9]|9[0-9]|[12][0-9]{2}|3[0-7][0-9]|38[0-5])/);};",
											"test_map.cycleNumber=function (element) {pm.expect(element.Name).eq('cycleNumber');pm.expect(element.ValueType).eq('Integer');pm.expect(element.Value).to.be.a(\"number\");pm.expect(element.Value).to.match(/([1-9]|[1-8][0-9]|9[0-9]|[12][0-9]{2}|3[0-7][0-9]|38[0-5])/);};",
											"test_map.processingLevel=function (element) {pm.expect(element.Name).eq('processingLevel');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"0\"]);};",
											"test_map.processingDate=function (element) {pm.expect(element.Name).eq('processingDate');pm.expect(element.ValueType).eq('DateTimeOffset');pm.expect(element.Value).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);};",
											"test_map.processingCenter=function (element) {pm.expect(element.Name).eq('processingCenter');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');};",
											"test_map.processorName=function (element) {pm.expect(element.Name).eq('processorName');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');};",
											"test_map.processorVersion=function (element) {pm.expect(element.Name).eq('processorVersion');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');};",
											"test_map.coordinates=function (element) {pm.expect(element.Name).eq('coordinates');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');};",
											"test_map.baselineCollection=function (element) {pm.expect(element.Name).eq('baselineCollection');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');};",
											"test_map.lastRelativeOrbitNumber=function (element) {pm.expect(element.Name).eq('lastRelativeOrbitNumber');pm.expect(element.ValueType).eq('Integer');pm.expect(element.Value).to.be.a(\"number\");pm.expect(element.Value).to.match(/([1-9]|[1-8][0-9]|9[0-9]|[12][0-9]{2}|3[0-7][0-9]|38[0-5])/);};",
											"",
											"test_schema={};",
											"test_schema.beginningDateTime=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.endingDateTime=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.platformShortName=function (num) {pm.expect(num).to.be.within(0,1)};",
											"test_schema.platformSerialIdentifier=function (num) {pm.expect(num).to.be.within(0,1)};",
											"test_schema.instrumentShortName=function (num) {pm.expect(num).to.be.within(0,1)};",
											"test_schema.operationalMode=function (num) {pm.expect(num).to.be.within(0,1)};",
											"test_schema.productType=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.timeliness=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.orbitNumber=function (num) {pm.expect(num).to.be.within(1,2)};",
											"test_schema.lastOrbitNumber=function (num) {pm.expect(num).to.be.within(1,2)};",
											"test_schema.orbitDirection=function (num) {pm.expect(num).to.be.within(0,1)};",
											"test_schema.lastOrbitDirection=function (num) {pm.expect(num).to.be.within(0,1)};",
											"test_schema.relativeOrbitNumber=function (num) {pm.expect(num).to.be.within(1,2)};",
											"test_schema.cycleNumber=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.processingLevel=function (num) {pm.expect(num).to.be.within(0,1)};",
											"test_schema.processingDate=function (num) {pm.expect(num).to.be.within(0,1)};",
											"test_schema.processingCenter=function (num) {pm.expect(num).to.be.within(0,1)};",
											"test_schema.processorName=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.processorVersion=function (num) {pm.expect(num).to.be.within(0,1)};",
											"test_schema.coordinates=function (num) {pm.expect(num).to.be.within(0,1)};",
											"test_schema.baselineCollection=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.lastRelativeOrbitNumber=function (num) {pm.expect(num).to.be.within(0,2)};",
											"",
											"            ",
											"properties_map = {};",
											"properties_map.Id=function (element) {pm.expect(element.Id).to.match(/[0-9a-fA-F]{8}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{12}/);};",
											"properties_map.Name=function (element) {pm.expect(element.Name).to.be.a(\"string\");};",
											"properties_map.ContentType=function (element) {pm.expect(element.ContentType).to.be.a(\"string\");};",
											"properties_map.ContentLength=function (element) {pm.expect(element.ContentLength).to.be.a(\"number\");};",
											"properties_map.PublicationDate=function (element) {pm.expect(element.PublicationDate).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);};",
											"properties_map.EvictionDate=function (element) {if(element.EvictionDate){ pm.expect(element.EvictionDate).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d+([+-][0-2]\\d:[0-5]\\d|Z)/); }};",
											"properties_map.Checksum=function (element) {for(i=0; i<element.Checksum.length; i++ ){pm.expect(element.Checksum[i].Algorithm).to.be.oneOf([\"MD5\",\"SHA-1\",\"SHA-256\",\"SHA-512\"]);checksum_algorithm = {'MD5': '[a-fA-F0-9]{32}', 'SHA-1': '[0-9a-f]{5,40}', 'SHA-256': '[A-Fa-f0-9]{64}', 'SHA-512': '[A-Fa-f0-9]{128}'};pm.expect(element.Checksum[i].Value).to.match(new RegExp(checksum_algorithm[element.Checksum[i].Algorithm]));}};",
											"properties_map.ContentDate=function (element) {pm.expect(element.ContentDate[\"Start\"]).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);pm.expect(element.ContentDate[\"End\"]).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);};",
											"properties_map.ProductionType=function (element) {pm.expect(element.ProductionType).to.be.oneOf([\"systematic_production\",\"on-demand default\",\"on-demand non-default\"]);};",
											"properties_map.Footprint=function (element) {if(element.Footprint){ pm.expect(element.Footprint).to.match(/geography'SRID=\\d+;[Polygon|Multipolygon|Point](.*)/); }};",
											"",
											"let schema_seen = {};",
											"",
											"function testSpecific(value, product){",
											"",
											"    if (schema_seen[value.Name]){",
											"        schema_seen[value.Name]++;",
											"    }else{",
											"        schema_seen[value.Name]=1;",
											"    }",
											"",
											"    if (test_map[value.Name]) {",
											"        pm.test(\"Test Attribute \"+value.Name + \" for Product: \"+product.Name+\" - \"+product.Id, function(){test_map[value.Name](value, product)});",
											"    }",
											"    else {",
											"        pm.test.skip(\"Test Attribute \"+value.Name + \" for Product: \"+product.Name+\" - \"+product.Id);",
											"    }",
											"}",
											"function propertySpecific(key, product){",
											"    if (properties_map[key]) {",
											"        pm.test(\"Test Property \"+key+\" for Product: \"+product.Name+\" - \"+product.Id, function(){properties_map[key](product)});",
											"    }",
											"    else {",
											"        pm.test.skip(\"Test Property \"+key+\" for Product: \"+product.Name+\" - \"+product.Id);",
											"    }",
											"}",
											"",
											"for (var counter = 0;  counter  < jsonDataElements.length; counter++){",
											"    var product = jsonDataElements[counter];",
											"    console.log(\"Processing Product: \"+product.Name+\" - \"+product.Id);",
											"",
											"    for (const[key, value] of Object.entries(properties_map)){",
											"        propertySpecific(key, jsonDataElements[counter]);",
											"    }",
											"",
											"    if(\"Attributes\" in jsonDataElements[counter]){",
											"        schema_seen = {};",
											"",
											"        pm.test(\"Test Attributes list\", function(){",
											"            pm.expect(jsonDataElements[counter].Attributes.length).to.be.above(0);",
											"        });",
											"",
											"        jsonDataElements[counter].Attributes.forEach(function(elem){",
											"            testSpecific(elem, jsonDataElements[counter]);",
											"        });",
											"        var product = jsonDataElements[counter];",
											"        for (const[key, value] of Object.entries(test_schema)) {pm.test(\"Schema Attribute \"+key+\" Product \"+product.Name+\" - \"+product.Id, function(){",
											"        if(schema_seen[key] == undefined){",
											"            schema_seen[key] = 0;",
											"        }",
											"        value(schema_seen[key], product)});}",
											"    }",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{service-root-uri}}/odata/v1/Products?$expand=Attributes&$top=1&$filter=(contains(Name,'DO_0_DOP___') or contains(Name,'DO_0_NAV___') or contains(Name,'GN_0_GNS___') or contains(Name,'MW_0_MWR___') or contains(Name,'OL_0_CR0___') or contains(Name,'OL_0_CR1___') or contains(Name,'OL_0_EFR___') or contains(Name,'SL_0_SLT___') or contains(Name,'SR_0_SRA___') or contains(Name,'SR_0_CAL___') or contains(Name,'TM_0_HKM___') or contains(Name,'TM_0_HKM2__') or contains(Name,'TM_0_NAT___')) and startswith(Name,'S3')\n",
									"host": [
										"{{service-root-uri}}"
									],
									"path": [
										"odata",
										"v1",
										"Products"
									],
									"query": [
										{
											"key": "$expand",
											"value": "Attributes"
										},
										{
											"key": "$top",
											"value": "1"
										},
										{
											"key": "$filter",
											"value": "(contains(Name,'DO_0_DOP___') or contains(Name,'DO_0_NAV___') or contains(Name,'GN_0_GNS___') or contains(Name,'MW_0_MWR___') or contains(Name,'OL_0_CR0___') or contains(Name,'OL_0_CR1___') or contains(Name,'OL_0_EFR___') or contains(Name,'SL_0_SLT___') or contains(Name,'SR_0_SRA___') or contains(Name,'SR_0_CAL___') or contains(Name,'TM_0_HKM___') or contains(Name,'TM_0_HKM2__') or contains(Name,'TM_0_NAT___')) and startswith(Name,'S3')\n"
										},
										{
											"key": "$filter",
											"value": "contains(Name,'DO_0_DOP___') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'DO_0_NAV___') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'GN_0_GNS___') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'MW_0_MWR___') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'OL_0_CR0___') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'OL_0_CR1___') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'OL_0_EFR___') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_0_SLT___') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_0_SRA___') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_0_CAL___') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'TM_0_HKM___') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'TM_0_HKM2__') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'TM_0_NAT___') and startswith(Name,'S3')\n",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "S3_Auxiliary_Data",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "61595e89-f53d-4066-8944-25bcf673e57e",
										"exec": [
											"var jsonDataElements = pm.response.json().value;",
											"pm.test(\"Response time is less than \" +  environment[\"query-timeout\"] + \"ms\", function(){",
											"    pm.expect(pm.response.responseTime).to.be.below(parseInt(environment[\"query-timeout\"]));",
											"});",
											"",
											"pm.test(\"Test OData context\", function(){",
											"    query_string = pm.request.url.getQueryString();",
											"    if(query_string.includes(\"$expand=Attributes\")){",
											"        pm.expect( pm.response.json()['@odata.context']).to.include(\"$metadata#Products(Attributes())\");",
											"    } else{",
											"        pm.expect( pm.response.json()['@odata.context']).to.include(\"$metadata#Products\");",
											"    }",
											"});",
											"",
											"var TRUE = true;",
											"var FALSE = false;",
											"",
											"test_map={};",
											"test_map.productType=function (element) {pm.expect(element.Name).eq('productType');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"AX___MF1_AX\",\"AX___MFA_AX\",\"AX___MA1_AX\",\"AX___MF2_AX\",\"AX___MA2_AX\",\"AX___OSF_AX\",\"AX___FPO_AX\",\"AX___FRO_AX\",\"AX___BA__AX\",\"AX___BB2_AX\",\"AX___DEM_AX\",\"AX___LWM_AX\",\"AX___OOM_AX\",\"AX___CLM_AX\",\"AX___TRM_AX\",\"AX___CST_AX\",\"SR___CHDNAX\",\"SR___CHDRAX\",\"SR_1_CONMAX\",\"SR_1_CONCAX\",\"SR_2_CON_AX\",\"SR___LSM_AX\",\"SR_2_IC01AX\",\"SR_2_IC02AX\",\"SR_2_IC03AX\",\"SR_2_IC04AX\",\"SR_2_IC05AX\",\"SR_2_IC06AX\",\"SR_2_IC07AX\",\"SR_2_IC08AX\",\"SR_2_IC09AX\",\"SR_2_IC10AX\",\"SR_2_IC11AX\",\"SR_2_EOT1AX\",\"SR_2_EOT2AX\",\"SR_2_LT1_AX\",\"SR_2_LT2_AX\",\"SR_2_LNEQAX\",\"SR_2_GEO_AX\",\"SR_2_MSS1AX\",\"SR_2_MSS2AX\",\"SR_2_ODLEAX\",\"SR_2_WNDLAX\",\"SR_2_WNDSAX\",\"SR_2_SIGLAX\",\"SR_2_SIGSAX\",\"SR_2_SET_AX\",\"SR_2_SSM_AX\",\"SR_2_MSMGAX\",\"SR_2_CP00AX\",\"SR_2_CP06AX\",\"SR_2_CP12AX\",\"SR_2_CP18AX\",\"SR_2_S1AMAX\",\"SR_2_S2AMAX\",\"SR_2_S1PHAX\",\"SR_2_S2PHAX\",\"SR_2_MDT_AX\",\"SR_2_SHD_AX\",\"SR_2_SSBLAX\",\"SR_2_SSBSAX\",\"SR_2_SD01AX\",\"SR_2_SD02AX\",\"SR_2_SD03AX\",\"SR_2_SD04AX\",\"SR_2_SD05AX\",\"SR_2_SD06AX\",\"SR_2_SD07AX\",\"SR_2_SD08AX\",\"SR_2_SD09AX\",\"SR_2_SD10AX\",\"SR_2_SD11AX\",\"SR_2_SD12AX\",\"SR_2_SI01AX\",\"SR_2_SI02AX\",\"SR_2_SI03AX\",\"SR_2_SI04AX\",\"SR_2_SI05AX\",\"SR_2_SI06AX\",\"SR_2_SI07AX\",\"SR_2_SI08AX\",\"SR_2_SI09AX\",\"SR_2_SI10AX\",\"SR_2_SI11AX\",\"SR_2_SI12AX\",\"SR_2_SST_AX\",\"SR_2_LRC_AX\",\"SR_2_SFL_AX\",\"SR_2_FLT_AX\",\"SR_2_RRC_AX\",\"SR_2_CCT_AX\",\"SR_2_SURFAX\",\"SR_2_RET_AX\",\"SR_2_MLM_AX\",\"SR_2_MAG_AX\",\"SR_2_LUTFAX\",\"SR_2_LUTEAX\",\"SR_2_LUTSAX\",\"SR___ROE_AX\",\"SR_1_CA1LAX\",\"SR_1_CA1SAX\",\"SR_1_CA2KAX\",\"SR_1_CA2CAX\",\"CAL2_C_LTM\",\"MW_1_NIR_AX\",\"MW_1_DNB_AX\",\"MW_1_MON_AX\",\"SL_1_VSC_AX\",\"SR___MGNPAX\",\"SR___POEPAX\",\"SR_2_PMPPAX\",\"SR_2_PCPPAX\",\"SR___MDO_AX\",\"SR___POESAX\",\"SR_2_PMPSAX\",\"SR_2_PCPSAX\",\"SR_2_RMO_AX\",\"SR_2_PMO_AX\",\"SR_2_POL_AX\",\"SR_2_PGI_AX\",\"SR_2_RGI_AX\",\"SR_1_USO_AX\",\"SR___MGNSAX\",\"SR_2_SIC_AX\",\"MW_1_SLC_AX\",\"MW___CHDNAX\",\"MW___CHDRAX\",\"MW___STD_AX\",\"OL_1_EO__AX\",\"OL_1_RAC_AX\",\"OL_1_SPC_AX\",\"OL_1_CLUTAX\",\"OL_1_INS_AX\",\"OL_1_CAL_AX\",\"OL_1_PRG_AX\",\"OL_2_PCP_AX\",\"OL_2_PPP_AX\",\"OL_2_CLP_AX\",\"OL_2_WVP_AX\",\"OL_2_ACP_AX\",\"OL_2_OCP_AX\",\"OL_2_VGP_AX\",\"SL_1_PCP_AX\",\"SL_1_ANC_AX\",\"SL_1_N_S1AX\",\"SL_1_N_S2AX\",\"SL_1_N_S3AX\",\"SL_1_O_S1AX\",\"SL_1_O_S2AX\",\"SL_1_O_S3AX\",\"SL_1_NAS4AX\",\"SL_1_NAS5AX\",\"SL_1_NAS6AX\",\"SL_1_NBS4AX\",\"SL_1_NBS5AX\",\"SL_1_NBS6AX\",\"SL_1_OAS4AX\",\"SL_1_OAS5AX\",\"SL_1_OAS6AX\",\"SL_1_OBS4AX\",\"SL_1_OBS5AX\",\"SL_1_OBS6AX\",\"SL_1_N_S7AX\",\"SL_1_N_S8AX\",\"SL_1_N_S9AX\",\"SL_1_N_F1AX\",\"SL_1_N_F2AX\",\"SL_1_O_S7AX\",\"SL_1_O_S8AX\",\"SL_1_O_S9AX\",\"SL_1_O_F1AX\",\"SL_1_O_F2AX\",\"SL_1_VIC_AX\",\"SL_1_GEO_AX\",\"SL_1_GEC_AX\",\"SL_1_CLO_AX\",\"SL_1_ESSTAX\",\"SL_2_PCP_AX\",\"SL_2_S6N_AX\",\"SL_2_S7N_AX\",\"SL_2_S8N_AX\",\"SL_2_S9N_AX\",\"SL_2_F1N_AX\",\"SL_2_F2N_AX\",\"SL_2_S7O_AX\",\"SL_2_S8O_AX\",\"SL_2_S9O_AX\",\"SL_2_N2_CAX\",\"SL_2_N3RCAX\",\"SL_2_N3_CAX\",\"SL_2_D2_CAX\",\"SL_2_D3_CAX\",\"SL_2_SST_AX\",\"SL_2_SDI3AX\",\"SL_2_SDI2AX\",\"SL_2_SSESAX\",\"SL_2_LSTCAX\",\"SL_2_LSTBAX\",\"SL_2_LSTVAX\",\"SL_2_LSTWAX\",\"SL_2_LSTEAX\",\"SL_2_FRPTAX\",\"SL_2_SSTAAX\",\"OL_1_PCPBAX\",\"SL_1_PCPBAX\",\"SL_1_PLTBAX\",\"OL_2_PCPBAX\",\"OL_2_PLTBAX\",\"SL_2_PCPBAX\",\"SL_2_PLTBAX\",\"AX___CHD_AX\",\"GN_1_GSVMAX\",\"GN_1_GSVHAX\",\"GN_1_GCLHAX\",\"GN_1_EOP_AX\",\"GN_1_EOPHAX\",\"GN_1_LSC_AX\",\"GN_1_NAV_AX\",\"GN_1_NSA_AX\",\"GN_1_NTR_AX\",\"GN_1_NPR_AX\",\"GN_1_ATX_AX\",\"GN_1_SAC_AX\",\"GN_1_CHD_AX\",\"GN_1_NSA3AX\",\"GN_1_NTR3AX\",\"GN_1_ATX3AX\",\"GN_1_MANHAX\",\"GN_1_MASSAX\",\"SR_2_NRPPAX\",\"SY_1_TPDBAX\",\"OL_1_MCHDAX\",\"SL_1_MCHDAX\",\"SY_1_PCP_AX\",\"SY_1_CDIBAX\",\"SY_2_PCP_AX\",\"SY_2_PCPSAX\",\"SY_2_RAD_AX\",\"SY_2_RADPAX\",\"SY_2_SPCPAX\",\"SY_2_RADSAX\",\"SY_2_PCPBAX\",\"SY_2_PLTBAX\",\"SY_2_CVPBAX\",\"SY_2_PVPBAX\",\"SY_2_CVSBAX\",\"SY_2_PVSBAX\",\"AX___TAI_AX\",\"SR___MOE_AX\",\"SR___POE_AX\",\"SR___MGN_AX\",\"SR_2_PMP_AX\",\"SR_2_PCP_AX\",\"SR___CHD_AX\",\"SR_1_CON_AX\",\"SR_2_LSM_AX\",\"AX___MAN_AX\",\"AX___MFC_AX\",\"SR___ATB_AX\",\"SR_2_GEOIAX\",\"SR_2_MSS_AX\",\"MW_1_CON_AX\",\"GN___CHD_AX\",\"AX___CN0_AX\",\"AX___GCP_AX\",\"OL_0_AX_PRC\",\"OL_1_CHARAX\",\"OL_1_PROGAX\",\"SL_1_CHF1AX\",\"SL_1_CHF7AX\",\"SL_1_CHS7AX\",\"SL_2_DATBAX\",\"SL_2_FRPAAX\",\"SL_2_SATBAX\",\"SY_1_GCPBAX\",\"SL_2_ACLMAX\",\"SL_2_ART_AX\",\"SL_2_OSR_AX\",\"SL_2_PCPAAX\",\"SY_2_ACLMAX\",\"SY_2_ART_AX\",\"SY_2_LSR_AX\",\"SY_2_OSR_AX\",\"SY_2_PCPAAX\",\"SL_2_CFM_AX\",\"SL_2_FXPAAX\",\"SL_2_PCPFAX\",\"SL_2_PLFMAX\",\"SL_2_SXPAAX\",\"SL_1_IRE_AX\",\"SL_1_LCC_AX\",\"SL_1_CDP_AX\",\"SL_1_CLP_AX\",\"SL_1_ADJ_AX\",\"SL_1_RTT_AX\",\"SY_2_AODCAX\"]);",
											"",
											"};",
											"test_map.timeliness=function (element) {pm.expect(element.Name).eq('timeliness');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"AL\"]);};",
											"test_map.platformShortName=function (element) {pm.expect(element.Name).eq('platformShortName');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"SENTINEL-3\"]);};",
											"test_map.platformSerialIdentifier=function (element) {pm.expect(element.Name).eq('platformSerialIdentifier');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');pm.expect(element.Value).to.be.oneOf([\"A\",\"B\",\"C\",\"D\",\"_\"]);};",
											"test_map.beginningDateTime=function (element) {pm.expect(element.Name).eq('beginningDateTime');pm.expect(element.ValueType).eq('DateTimeOffset');pm.expect(element.Value).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);};",
											"test_map.endingDateTime=function (element) {pm.expect(element.Name).eq('endingDateTime');pm.expect(element.ValueType).eq('DateTimeOffset');pm.expect(element.Value).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);};",
											"test_map.processingCenter=function (element) {pm.expect(element.Name).eq('processingCenter');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');};",
											"test_map.processorName=function (element) {pm.expect(element.Name).eq('processorName');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');};",
											"test_map.processorVersion=function (element) {pm.expect(element.Name).eq('processorVersion');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');};",
											"test_map.baselineCollection=function (element) {pm.expect(element.Name).eq('baselineCollection');pm.expect(element.ValueType).eq('String');pm.expect(element.Value).to.be.a('string');};",
											"",
											"test_schema={};",
											"test_schema.productType=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.timeliness=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.platformShortName=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.platformSerialIdentifier=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.beginningDateTime=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.endingDateTime=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.processingCenter=function (num) {pm.expect(num).to.be.within(0,1)};",
											"test_schema.processorName=function (num) {pm.expect(num).to.be.eq(1)};",
											"test_schema.processorVersion=function (num) {pm.expect(num).to.be.within(0,1)};",
											"test_schema.baselineCollection=function (num) {pm.expect(num).to.be.eq(1)};",
											"",
											"            ",
											"properties_map = {};",
											"properties_map.Id=function (element) {pm.expect(element.Id).to.match(/[0-9a-fA-F]{8}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{12}/);};",
											"properties_map.Name=function (element) {pm.expect(element.Name).to.be.a(\"string\");};",
											"properties_map.ContentType=function (element) {pm.expect(element.ContentType).to.be.a(\"string\");};",
											"properties_map.ContentLength=function (element) {pm.expect(element.ContentLength).to.be.a(\"number\");};",
											"properties_map.PublicationDate=function (element) {pm.expect(element.PublicationDate).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);};",
											"properties_map.EvictionDate=function (element) {if(element.EvictionDate){ pm.expect(element.EvictionDate).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d+([+-][0-2]\\d:[0-5]\\d|Z)/); }};",
											"properties_map.Checksum=function (element) {for(i=0; i<element.Checksum.length; i++ ){pm.expect(element.Checksum[i].Algorithm).to.be.oneOf([\"MD5\",\"SHA-1\",\"SHA-256\",\"SHA-512\"]);checksum_algorithm = {'MD5': '[a-fA-F0-9]{32}', 'SHA-1': '[0-9a-f]{5,40}', 'SHA-256': '[A-Fa-f0-9]{64}', 'SHA-512': '[A-Fa-f0-9]{128}'};pm.expect(element.Checksum[i].Value).to.match(new RegExp(checksum_algorithm[element.Checksum[i].Algorithm]));}};",
											"properties_map.ContentDate=function (element) {pm.expect(element.ContentDate[\"Start\"]).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);pm.expect(element.ContentDate[\"End\"]).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);};",
											"properties_map.ProductionType=function (element) {pm.expect(element.ProductionType).to.be.oneOf([\"systematic_production\",\"on-demand default\",\"on-demand non-default\"]);};",
											"properties_map.Footprint=function (element) {if(element.Footprint){ pm.expect(element.Footprint).to.match(/geography'SRID=\\d+;[Polygon|Multipolygon|Point](.*)/); }};",
											"",
											"let schema_seen = {};",
											"",
											"function testSpecific(value, product){",
											"",
											"    if (schema_seen[value.Name]){",
											"        schema_seen[value.Name]++;",
											"    }else{",
											"        schema_seen[value.Name]=1;",
											"    }",
											"",
											"    if (test_map[value.Name]) {",
											"        pm.test(\"Test Attribute \"+value.Name + \" for Product: \"+product.Name+\" - \"+product.Id, function(){test_map[value.Name](value, product)});",
											"    }",
											"    else {",
											"        pm.test.skip(\"Test Attribute \"+value.Name + \" for Product: \"+product.Name+\" - \"+product.Id);",
											"    }",
											"}",
											"function propertySpecific(key, product){",
											"    if (properties_map[key]) {",
											"        pm.test(\"Test Property \"+key+\" for Product: \"+product.Name+\" - \"+product.Id, function(){properties_map[key](product)});",
											"    }",
											"    else {",
											"        pm.test.skip(\"Test Property \"+key+\" for Product: \"+product.Name+\" - \"+product.Id);",
											"    }",
											"}",
											"",
											"for (var counter = 0;  counter  < jsonDataElements.length; counter++){",
											"    var product = jsonDataElements[counter];",
											"    console.log(\"Processing Product: \"+product.Name+\" - \"+product.Id);",
											"",
											"    for (const[key, value] of Object.entries(properties_map)){",
											"        propertySpecific(key, jsonDataElements[counter]);",
											"    }",
											"",
											"    if(\"Attributes\" in jsonDataElements[counter]){",
											"        schema_seen = {};",
											"",
											"        pm.test(\"Test Attributes list\", function(){",
											"            pm.expect(jsonDataElements[counter].Attributes.length).to.be.above(0);",
											"        });",
											"",
											"        jsonDataElements[counter].Attributes.forEach(function(elem){",
											"            testSpecific(elem, jsonDataElements[counter]);",
											"        });",
											"        var product = jsonDataElements[counter];",
											"        for (const[key, value] of Object.entries(test_schema)) {pm.test(\"Schema Attribute \"+key+\" Product \"+product.Name+\" - \"+product.Id, function(){",
											"        if(schema_seen[key] == undefined){",
											"            schema_seen[key] = 0;",
											"        }",
											"        value(schema_seen[key], product)});}",
											"    }",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{service-root-uri}}/odata/v1/Products?$expand=Attributes&$top=1&$filter=(contains(Name,'AX') or contains(Name, 'CAL2_C_LTM')) and startswith(Name,'S3')\n",
									"host": [
										"{{service-root-uri}}"
									],
									"path": [
										"odata",
										"v1",
										"Products"
									],
									"query": [
										{
											"key": "$expand",
											"value": "Attributes"
										},
										{
											"key": "$top",
											"value": "1"
										},
										{
											"key": "$filter",
											"value": "(contains(Name,'AX') or contains(Name, 'CAL2_C_LTM')) and startswith(Name,'S3')\n"
										},
										{
											"key": "$filter",
											"value": "contains(Name,'AX___MF1_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'AX___MFA_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'AX___MA1_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'AX___MF2_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'AX___MA2_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'AX___OSF_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'AX___FPO_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'AX___FRO_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'AX___BA__AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'AX___BB2_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'AX___DEM_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'AX___LWM_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'AX___OOM_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'AX___CLM_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'AX___TRM_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'AX___CST_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR___CHDNAX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR___CHDRAX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_1_CONMAX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_1_CONCAX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_CON_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR___LSM_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_IC01AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_IC02AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_IC03AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_IC04AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_IC05AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_IC06AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_IC07AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_IC08AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_IC09AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_IC10AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_IC11AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_EOT1AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_EOT2AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_LT1_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_LT2_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_LNEQAX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_GEO_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_MSS1AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_MSS2AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_ODLEAX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_WNDLAX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_WNDSAX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_SIGLAX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_SIGSAX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_SET_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_SSM_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_MSMGAX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_CP00AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_CP06AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_CP12AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_CP18AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_S1AMAX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_S2AMAX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_S1PHAX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_S2PHAX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_MDT_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_SHD_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_SSBLAX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_SSBSAX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_SD01AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_SD02AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_SD03AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_SD04AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_SD05AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_SD06AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_SD07AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_SD08AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_SD09AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_SD10AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_SD11AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_SD12AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_SI01AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_SI02AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_SI03AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_SI04AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_SI05AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_SI06AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_SI07AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_SI08AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_SI09AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_SI10AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_SI11AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_SI12AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_SST_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_LRC_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_SFL_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_FLT_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_RRC_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_CCT_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_SURFAX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_RET_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_MLM_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_MAG_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_LUTFAX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_LUTEAX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_LUTSAX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR___ROE_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_1_CA1LAX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_1_CA1SAX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_1_CA2KAX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_1_CA2CAX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'CAL2_C_LTM') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'MW_1_NIR_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'MW_1_DNB_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'MW_1_MON_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_1_VSC_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR___MGNPAX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR___POEPAX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_PMPPAX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_PCPPAX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR___MDO_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR___POESAX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_PMPSAX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_PCPSAX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_RMO_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_PMO_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_POL_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_PGI_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_RGI_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_1_USO_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR___MGNSAX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_SIC_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'MW_1_SLC_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'MW___CHDNAX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'MW___CHDRAX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'MW___STD_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'OL_1_EO__AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'OL_1_RAC_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'OL_1_SPC_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'OL_1_CLUTAX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'OL_1_INS_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'OL_1_CAL_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'OL_1_PRG_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'OL_2_PCP_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'OL_2_PPP_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'OL_2_CLP_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'OL_2_WVP_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'OL_2_ACP_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'OL_2_OCP_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'OL_2_VGP_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_1_PCP_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_1_ANC_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_1_N_S1AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_1_N_S2AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_1_N_S3AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_1_O_S1AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_1_O_S2AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_1_O_S3AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_1_NAS4AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_1_NAS5AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_1_NAS6AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_1_NBS4AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_1_NBS5AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_1_NBS6AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_1_OAS4AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_1_OAS5AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_1_OAS6AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_1_OBS4AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_1_OBS5AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_1_OBS6AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_1_N_S7AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_1_N_S8AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_1_N_S9AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_1_N_F1AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_1_N_F2AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_1_O_S7AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_1_O_S8AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_1_O_S9AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_1_O_F1AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_1_O_F2AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_1_VIC_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_1_GEO_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_1_GEC_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_1_CLO_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_1_ESSTAX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_2_PCP_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_2_S6N_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_2_S7N_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_2_S8N_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_2_S9N_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_2_F1N_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_2_F2N_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_2_S7O_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_2_S8O_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_2_S9O_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_2_N2_CAX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_2_N3RCAX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_2_N3_CAX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_2_D2_CAX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_2_D3_CAX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_2_SST_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_2_SDI3AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_2_SDI2AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_2_SSESAX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_2_LSTCAX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_2_LSTBAX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_2_LSTVAX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_2_LSTWAX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_2_LSTEAX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_2_FRPTAX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_2_SSTAAX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'OL_1_PCPBAX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_1_PCPBAX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_1_PLTBAX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'OL_2_PCPBAX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'OL_2_PLTBAX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_2_PCPBAX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_2_PLTBAX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'AX___CHD_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'GN_1_GSVMAX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'GN_1_GSVHAX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'GN_1_GCLHAX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'GN_1_EOP_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'GN_1_EOPHAX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'GN_1_LSC_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'GN_1_NAV_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'GN_1_NSA_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'GN_1_NTR_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'GN_1_NPR_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'GN_1_ATX_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'GN_1_SAC_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'GN_1_CHD_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'GN_1_NSA3AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'GN_1_NTR3AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'GN_1_ATX3AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'GN_1_MANHAX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'GN_1_MASSAX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_NRPPAX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SY_1_TPDBAX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'OL_1_MCHDAX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_1_MCHDAX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SY_1_PCP_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SY_1_CDIBAX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SY_2_PCP_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SY_2_PCPSAX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SY_2_RAD_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SY_2_RADPAX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SY_2_SPCPAX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SY_2_RADSAX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SY_2_PCPBAX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SY_2_PLTBAX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SY_2_CVPBAX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SY_2_PVPBAX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SY_2_CVSBAX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SY_2_PVSBAX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'AX___TAI_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR___MOE_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR___POE_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR___MGN_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_PMP_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_PCP_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR___CHD_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_1_CON_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_LSM_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'AX___MAN_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'AX___MFC_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR___ATB_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_GEOIAX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SR_2_MSS_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'MW_1_CON_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'GN___CHD_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'AX___CN0_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'AX___GCP_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'OL_0_AX_PRC') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'OL_1_CHARAX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'OL_1_PROGAX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_1_CHF1AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_1_CHF7AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_1_CHS7AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_2_DATBAX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_2_FRPAAX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_2_SATBAX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SY_1_GCPBAX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_2_ACLMAX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_2_ART_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_2_OSR_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_2_PCPAAX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SY_2_ACLMAX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SY_2_ART_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SY_2_LSR_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SY_2_OSR_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SY_2_PCPAAX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_2_CFM_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_2_FXPAAX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_2_PCPFAX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_2_PLFMAX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_2_SXPAAX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_1_IRE_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_1_LCC_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_1_CDP_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_1_CLP_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_1_ADJ_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SL_1_RTT_AX') and startswith(Name,'S3')\n",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "contains(Name,'SY_2_AODCAX') and startswith(Name,'S3')\n",
											"disabled": true
										}
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Filters",
			"item": [
				{
					"name": "Dynamic_filters",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "cbae8554-cfa8-48ac-975a-8f5b2d33c9d3",
								"exec": [
									"const supportedOperators = [\"eq\", \"ne\", \"gt\", \"ge\", \"lt\", \"le\", \"and\", \"or\", \"not\"];",
									"const supportedFunctions = [\"startswith\", \"contains\", \"endswith\"];",
									"",
									"function compare(a, b){",
									"    if(isNaN(a)){",
									"        return String(a).localeCompare(String(b));",
									"    } else {",
									"        return a > b;",
									"    }    ",
									"}",
									"",
									"function getOperator(inputString, possibleOperators) {",
									"    var op = null;",
									"    possibleOperators.forEach(function (el) { if (inputString.indexOf(el) >= 0) { op = el; } });",
									"    return op;",
									"}",
									"",
									"function opToJsFormat(op) {",
									"    res = null;",
									"    switch (op) {",
									"        case \"and\":",
									"            return \"&&\";",
									"        case \"or\":",
									"            return \"||\";",
									"        case \"not\":",
									"            return \"!\";",
									"        case \"eq\":",
									"            return \"==\";",
									"        case \"ne\":",
									"            return \"!=\";",
									"        case \"gt\":",
									"            return \">\";",
									"        case \"ge\":",
									"            return \">=\";",
									"        case \"lt\":",
									"            return \"<\";",
									"        case \"le\":",
									"            return \"<=\";",
									"    }",
									"}",
									"",
									"function get_query_filters(input_query) {",
									"",
									"    console.log(\"Parsing Filter...\");",
									"",
									"    var matcher = /(contains\\((.+?)\\)|startswith\\((.+?)\\)|endswith\\((.+?)\\)|any\\(.*?\\)|ContentDate\\/Start.*Z|ContentDate\\/End.*Z|[\\w.]+?\\s(?:eq|ne|gt|ge|lt|le)\\s(?:\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d+([+-][0-2]\\d:[0-5]\\d|Z)|[+-]?([0-9]*[.])?[0-9]+|\\w+|'.+?'))/g",
									"",
									"    var filters = input_query.match(matcher);",
									"    var i = 0;",
									"    var simpleString = input_query.replace(matcher, function () {",
									"        return i++;",
									"    });",
									"",
									"    console.log(simpleString);",
									"    console.log(filters);",
									"",
									"    var filterString = simpleString;",
									"",
									"    var groupString;",
									"    var groupFilter = null;",
									"    var testNextLevel = true;",
									"",
									"    while (testNextLevel) {",
									"        var closeParenthesisIndex = filterString.indexOf(')');",
									"        if (closeParenthesisIndex !== -1) {",
									"            var openParenthesisIndex = filterString.lastIndexOf('(', closeParenthesisIndex);",
									"",
									"            // Extract the string between the first deepest set of parenthesis",
									"            groupString = filterString.substring(openParenthesisIndex + 1, closeParenthesisIndex);",
									"",
									"            // Modify the filter string replacing the contents of the group string in addition to the parenthesis with the length of the filters array (which will be the index of the filter object that we push)",
									"            filterString = filterString.substring(0, openParenthesisIndex) + filters.length + filterString.substring(closeParenthesisIndex + 1);",
									"        } else {",
									"",
									"            // There are no more parenthesis groups",
									"            groupString = filterString;",
									"            testNextLevel = false;",
									"        }",
									"",
									"        // If the group uses both 'and' and 'or' then return null as an invalid filter string.",
									"        if (groupString.indexOf('and') >= 0 && groupString.indexOf('or') >= 0) {",
									"            console.log(\"Invalid Filter!\");",
									"            return null;",
									"        }",
									"",
									"        // Get the group indexes out of the group string",
									"        var groupFilterIndexes = groupString.match(/[0-9]+/g);",
									"        var groupFilters = [];",
									"",
									"        // Create an array with each of the filters who's index matches the group indexes",
									"        for (i = 0; i < groupFilterIndexes.length; i++) {",
									"            groupFilters.push(filters[Number(groupFilterIndexes[i])]);",
									"        }",
									"",
									"        //cycling over the supported operators",
									"        var op = getOperator(groupString, supportedOperators);",
									"",
									"        //redundant brakets management",
									"        if (op == null) {",
									"            groupFilters.push(\"true\");",
									"            op = \"and\";",
									"        }",
									"",
									"        // Create the filter object and push it onto the filters array",
									"        groupFilter = { op: op, filters: groupFilters };",
									"        filters.push(groupFilter);",
									"    }",
									"",
									"    return groupFilter;",
									"",
									"}",
									"",
									"function checkResponse(inputString, product) {",
									"    console.log(\"Input String: \" + inputString);",
									"    //console.log(\"Product:\");",
									"    //console.log(product);",
									"    var responseProperties = Object.keys(product);",
									"    var responseAttributes = {};",
									"",
									"    //Attribute",
									"    if (inputString.includes(\"any(\") && inputString.includes(\"/Name\") && inputString.includes(\"/Value\")) {",
									"        //Attribute Logic Assertion",
									"        if (responseProperties.indexOf(\"Attributes\") >= 0) {",
									"            product['Attributes'].forEach(function (el) {",
									"                responseAttributes[el.Name] = el.Value;",
									"            });",
									"",
									"            //functions in Attribute Value",
									"            var cleanedInputString = inputString.split(\"any(\").pop();",
									"            console.log(\"CLEANED ATTRIBUTE INPUTSTRING: \" + cleanedInputString);",
									"            if (cleanedInputString.includes(\"(\") && cleanedInputString.includes(\")\")) {",
									"                //get the function name",
									"                var functionName = cleanedInputString.split(\"(\")[0].split(\" \").pop();",
									"                if (supportedFunctions.indexOf(functionName) >= 0) {",
									"                    console.log(\"Found Attribute Function: \" + functionName);",
									"                    //get the attribute",
									"                    var attrToCheck = cleanedInputString.split('Name eq ').pop().split(\" \")[0].replace(/'/g, \"\").trim();",
									"                    console.log(\"Attribute KEY Found: \" + attrToCheck);",
									"                    //get the cleaned value",
									"                    var attrValueToCheck = cleanedInputString.split(\"(\")[1].split(\")\")[0].split(\",\")[1].trim().replace(/'/g, \"\");",
									"                    console.log(\"Attribute VALUE Found: \" + attrValueToCheck);",
									"",
									"                    switch (functionName) {",
									"                        case \"contains\":",
									"                            attributesUnderTest.push(attrToCheck + \" contains \" + attrValueToCheck);",
									"                            return (responseAttributes[attrToCheck].includes(attrValueToCheck)) ? true : false;",
									"                        case \"startswith\":",
									"                            attributesUnderTest.push(attrToCheck + \" startswith \" + attrValueToCheck);",
									"                            return responseAttributes[attrToCheck].startsWith(attrValueToCheck) ? true : false;",
									"                        case \"endswith\":",
									"                            attributesUnderTest.push(attrToCheck + \" endswith \" + attrValueToCheck);",
									"                            return responseAttributes[attrToCheck].endsWith(attrValueToCheck) ? true : false;",
									"                    }",
									"                }",
									"            } else {",
									"                //simple any(Attributes Name and Value)",
									"                var attrToCheck = inputString.split('Name eq ').pop().split(\" \")[0].replace(/'/g, \"\").trim();",
									"                console.log(\"Extracted Attribute KEY: \" + attrToCheck);",
									"                var attrValueToCheck = inputString.split('Value eq ').pop().split(\" \")[0].trim().replace(/'/g, \"\").replace(/\\)/g, \"\").replace(/\\\\/g, \"\");",
									"                console.log(\"Extracted Attribute VALUE: \" + attrValueToCheck);",
									"",
									"                attributesUnderTest.push(\"attr:\" + attrToCheck + \" eq \" + attrValueToCheck);",
									"",
									"                return responseAttributes[attrToCheck] == attrValueToCheck;",
									"            }",
									"        }",
									"    } else {",
									"        //inputString contains a function on a Property -> complex property not supported!",
									"        if (inputString.includes(\"(\") && inputString.includes(\")\")) {",
									"            //get the function name",
									"            var functionName = inputString.split(\"(\")[0];",
									"            if (supportedFunctions.indexOf(functionName) >= 0) {",
									"                console.log(\"Found Function: \" + functionName);",
									"                //get the property",
									"                var propertyToCheck = inputString.split(\"(\")[1].split(\",\")[0].trim();",
									"                console.log(\"Property Found: \" + propertyToCheck);",
									"",
									"                //get the cleaned value",
									"                var propValueToCheck = inputString.split(\"(\")[1].split(\")\")[0].split(\",\")[1].trim().replace(/'/g, \"\");",
									"                console.log(\"PropertyValue Found: \" + propValueToCheck);",
									"",
									"                switch (functionName) {",
									"                    case \"contains\":",
									"                        propertiesUnderTest.push(propertyToCheck + \" contains \" + propValueToCheck);",
									"                        return (product[propertyToCheck].includes(propValueToCheck)) ? true : false;",
									"                    case \"startswith\":",
									"                        propertiesUnderTest.push(propertyToCheck + \" startswith \" + propValueToCheck);",
									"                        return product[propertyToCheck].startsWith(propValueToCheck) ? true : false;",
									"                    case \"endswith\":",
									"                        propertiesUnderTest.push(propertyToCheck + \" endswith \" + propValueToCheck);",
									"                        return product[propertyToCheck].endsWith(propValueToCheck) ? true : false;",
									"                }",
									"            } else {",
									"                console.log(\"Unsupported Function: \" + functionName);",
									"                return false;",
									"            }",
									"        } else {",
									"            // single logic assertion in \"AND\" with \"true\"",
									"            if (inputString === \"true\") {",
									"                console.log(\"True Value!\");",
									"                return true;",
									"            } else {",
									"                //direct Property",
									"                var propertyToCheck = inputString.split(\" \")[0].trim();",
									"                var operatorToApply = inputString.split(\" \")[1];",
									"                var propValueToCheck = inputString.split(\" \")[2].trim().replace(/'/g, \"\");",
									"",
									"                console.log(\"Property Found: \" + propertyToCheck);",
									"                console.log(\"PropertyValue Found: \" + propValueToCheck);",
									"",
									"                if (supportedOperators.indexOf(operatorToApply) >= 0) {",
									"                    console.log(\"Operator To Apply: \" + operatorToApply);",
									"                    operator = opToJsFormat(operatorToApply);",
									"                    propertiesUnderTest.push(propertyToCheck + \" \" + operatorToApply + \" \" + propValueToCheck);",
									"",
									"                    var toEvalString = \"\";",
									"                    var subProperty = \"\";",
									"",
									"                    //Complex properties (ContentDate)",
									"                    if(propertyToCheck.includes(\"/\")){",
									"                        var rootPropertyToCheck = propertyToCheck.split(\"/\")[0];",
									"                        subProperty = propertyToCheck.split(\"/\")[1];",
									"",
									"                        console.log(\"Complex Property: \" + rootPropertyToCheck);",
									"                        console.log(\"Sub Property: \" + subProperty);",
									"",
									"                        toEvalString = \"product[rootPropertyToCheck][subProperty] \" + operator + \" propValueToCheck\";",
									"",
									"                    } else {",
									"                        toEvalString = \"product[propertyToCheck] \" + operator + \" propValueToCheck\";",
									"                    }",
									"",
									"                    return eval(toEvalString);",
									"                } else {",
									"                    console.log(\"Operator not supported\");",
									"                    return false;",
									"                }",
									"            }",
									"        }",
									"    }",
									"    console.log(\"Logic Assertion not computed: \" + inputString);",
									"    return Math.random() >= 0.5;",
									"}",
									"",
									"function treeIterator(tree, product) {",
									"    if (tree['filters'].length >= 0) {",
									"        var conditions = [];",
									"",
									"        var logicOperator = getOperator(tree['op'], supportedOperators);",
									"        var logicOperator = opToJsFormat(logicOperator);",
									"",
									"        //general tree: iterates over all filters (child nodes)",
									"        for (elem in tree['filters']) {",
									"            var currentCondition = typeof ((tree['filters'][elem])) == \"object\" ? treeIterator(tree['filters'][elem], product) : checkResponse(tree['filters'][elem], product);",
									"            conditions.push(currentCondition);",
									"            //optimize AND and OR",
									"            if(logicOperator == \"||\" && currentCondition){",
									"                break;",
									"            }",
									"            if(logicOperator == \"&&\" && !currentCondition){",
									"                break;",
									"            }",
									"        }",
									"        console.log(\"CURRENT CONDITIONS\");",
									"        console.log(conditions);",
									"",
									"        //building return string",
									"        var resString = \"(\";",
									"        for (elem in conditions) {",
									"            resString += conditions[elem] + \" \" + logicOperator.toString() + \" \";",
									"        }",
									"        resString = resString.substring(0, resString.length - 4);",
									"        resString += \")\";",
									"",
									"        console.log(\"RES String: \" + resString);",
									"",
									"        return resString;",
									"    }",
									"}",
									"",
									"try {",
									"    var jsonDataElements = pm.response.json().value;",
									"",
									"    console.log(\"Response: \");",
									"    console.log(jsonDataElements);",
									"",
									"    pm.test(\"Response time is less than \" + environment[\"query-timeout\"] + \"ms\", function () {",
									"        pm.expect(pm.response.responseTime).to.be.below(parseInt(environment[\"query-timeout\"]));",
									"    });",
									"",
									"    //MIN number of Records Test",
									"    var minimumExpRecords = parseInt(pm.collectionVariables.get('resp_min_records'));",
									"    pm.test(\"Expected minimum number of products Test: \" + minimumExpRecords, function(){",
									"        pm.expect(jsonDataElements.length).to.be.gte(minimumExpRecords);",
									"    });",
									"",
									"    //TOP and ORDERBY",
									"    var topFilterString = pm.request.url.getQueryString();",
									"    var topFilterValue = 0;",
									"",
									"    if(topFilterString.includes(\"$top=\")){",
									"        topFilterValue = parseInt(topFilterString.split(\"$top=\").pop());",
									"        console.log(jsonDataElements.length);",
									"",
									"        pm.test(\"TOP Filter - Response list lenght \" + jsonDataElements.length + \" is less or equal to TOP param Value: \" + topFilterValue, function(){",
									"            pm.expect(jsonDataElements.length).to.be.lte(topFilterValue);",
									"        });",
									"    }",
									"    ",
									"    var orderString = pm.request.url.getQueryString();",
									"    var orderParameters;",
									"",
									"    if(orderString.includes(\"$orderby=\")){",
									"        orderParameters = decodeURIComponent(orderString.split(\"$orderby=\").pop().split(\"&\")[0]);",
									"",
									"        var orderProperty = orderParameters;",
									"        var orderCriteria = \"asc\";",
									"",
									"        if(orderParameters.includes(\" \")){",
									"            orderProperty = orderParameters.split(\" \")[0];",
									"            orderCriteria = orderParameters.split(\" \")[1];",
									"        }",
									"",
									"        console.log(\"order Property: \" + orderProperty);",
									"        console.log(\"order Criteria: \" + orderCriteria);",
									"",
									"        //if with complex Property management",
									"        if(orderProperty.includes(\"/\")){",
									"            var complexProperty = orderProperty.split(\"/\")[0];",
									"            var subProperty = orderProperty.split(\"/\").pop();",
									"",
									"            console.log(complexProperty);",
									"            console.log(subProperty);",
									"",
									"            var simplerSortingList = jsonDataElements.map(ex=>ex[complexProperty][subProperty]);",
									"            var serverSorting = jsonDataElements.map(ex=>ex[complexProperty][subProperty]);",
									"        } else {",
									"            var simplerSortingList = jsonDataElements.map(ex=>ex[orderProperty]);",
									"            var serverSorting = jsonDataElements.map(ex=>ex[orderProperty]);",
									"        }",
									"",
									"        console.log(\"Unsorted list: \");",
									"        console.log(simplerSortingList);",
									"        ",
									"        simplerSortingList.sort(function(a, b){return compare(a, b)});",
									"",
									"",
									"        if(orderCriteria == \"desc\"){",
									"            simplerSortingList.reverse();    ",
									"        }",
									"",
									"        console.log(\"Sorted list: \");",
									"        console.log(simplerSortingList);",
									"            ",
									"        pm.test(\"ORDERBY Filter Test - Sort check\", function(){",
									"            pm.expect(simplerSortingList).to.deep.equal(serverSorting);",
									"        });",
									"    }",
									"",
									"    //FILTERS",
									"",
									"    var parsed_filters;",
									"",
									"    //POST or GET query",
									"    if (pm.request.method == \"POST\" && pm.request.body.raw) {",
									"        var productsFilters = JSON.parse(pm.request.body.raw);",
									"",
									"        var jsonBodyToLogicAssertions = \"\";",
									"",
									"        for (elem in productsFilters['products']) {",
									"            console.log(productsFilters['products'][elem]);",
									"            var currentAssertion = \"\";",
									"",
									"            var keys = [];",
									"            for (var k in productsFilters['products'][elem]) keys.push(k);",
									"            //console.log(keys);",
									"            var currentKey = keys[0];",
									"            console.log(\"Current Key: \" + currentKey);",
									"",
									"            var currentValue = productsFilters['products'][elem][currentKey].toString();",
									"            console.log(\"Current Value: \" + currentValue);",
									"",
									"            currentAssertion = \"\" + currentKey + \" eq '\" + currentValue + \"'\";",
									"            jsonBodyToLogicAssertions += currentAssertion + \" or \";",
									"        }",
									"",
									"        //cutting last \" or \"",
									"        jsonBodyToLogicAssertions = jsonBodyToLogicAssertions.substring(0, jsonBodyToLogicAssertions.length - 4);",
									"        console.log(\"PARSED POST: \" + jsonBodyToLogicAssertions);",
									"",
									"        parsed_filters = get_query_filters(jsonBodyToLogicAssertions);",
									"",
									"    } else if (pm.request.method == \"GET\" && pm.request.url.getQueryString().includes(\"$filter=\")) {",
									"        var filter_query = pm.request.url.getQueryString().split(\"$filter=\")[1];",
									"        filter_query = decodeURIComponent(filter_query.split(\"&\")[0]);",
									"        console.log(filter_query);",
									"        parsed_filters = get_query_filters(filter_query);",
									"",
									"    }",
									"",
									"    console.log(parsed_filters);",
									"",
									"    var attributesUnderTest = [];",
									"    var propertiesUnderTest = [];",
									"",
									"    if (typeof (parsed_filters) == \"object\") {",
									"        for (var counter = 0; counter < jsonDataElements.length; counter++) {",
									"",
									"            attributesUnderTest = [];",
									"            propertiesUnderTest = [];",
									"",
									"            var product = jsonDataElements[counter];",
									"            var treeExp = treeIterator(parsed_filters, product);",
									"            var booleanTreeExp = eval(treeExp);",
									"",
									"            console.log(treeExp); console.log(booleanTreeExp);",
									"",
									"            testMessage = product.Name;",
									"",
									"            /*",
									"            if(attributesUnderTest.length > 0){",
									"                testMessage += \" \";",
									"                for(elem in attributesUnderTest){",
									"                    testMessage += attributesUnderTest[elem] + \"; \";",
									"                }",
									"            }",
									"            if(propertiesUnderTest.length > 0){",
									"                testMessage += \" \";",
									"                for(elem in propertiesUnderTest){",
									"                    testMessage += propertiesUnderTest[elem] + \"; \";",
									"                }",
									"            }",
									"            */",
									"",
									"            pm.test(testMessage, function () {",
									"                pm.expect(booleanTreeExp).to.be.true;",
									"            });",
									"        }",
									"    }",
									"}",
									"",
									"catch (err) {",
									"    pm.test(\"Filters Test\", function () {",
									"        pm.expect.fail(err.toString());",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "dd9676c0-3418-453a-a1ef-a6dc2a37e5e1",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{service-root-uri}}/odata/v1/Products?$top=10&$expand=Attributes",
							"host": [
								"{{service-root-uri}}"
							],
							"path": [
								"odata",
								"v1",
								"Products"
							],
							"query": [
								{
									"key": "$top",
									"value": "10"
								},
								{
									"key": "$expand",
									"value": "Attributes"
								},
								{
									"key": "$filter",
									"value": "Name eq 'S1A_S5_GRDH_1SDV_20190826T063656_20190826T063715_028736_0340F7_6518.SAFE.zip'",
									"description": "Simple Property Name",
									"disabled": true
								},
								{
									"key": "$filter",
									"value": "PublicationDate eq 2020-06-08T16:14:02.036Z",
									"description": "Simple Property PublicationDate",
									"disabled": true
								},
								{
									"key": "$filter",
									"value": "ContentDate/Start eq 2019-08-26T06:36:56.989Z",
									"description": "Complex Property ContentDate",
									"disabled": true
								},
								{
									"key": "$filter",
									"value": "ContentLength eq 5979870 and OriginDate eq 2020-06-22T15:33:15.998Z",
									"description": "Properties Combination ContentLength OriginDate",
									"disabled": true
								},
								{
									"key": "$orderby",
									"value": "ContentDate/Start desc",
									"description": "TOP and ORDERBY",
									"disabled": true
								},
								{
									"key": "$filter",
									"value": "Attributes/OData.CSC.DateTimeOffsetAttribute/any(att:att/Name eq 'processingDate' and att/OData.CSC.DateTimeOffsetAttribute/Value eq '2020-09-17T13:43:25.252809Z')",
									"description": "Query by Attributes",
									"disabled": true
								},
								{
									"key": "$filter",
									"value": "contains(Name,'HK_RAW__') and Attributes/OData.CSC.StringAttribute/any(att:att/Name eq 'productType' and startswith(att/OData.CSC.StringAttribute/Value,'HK_RAW'))",
									"description": "Function on Property combined with Attributes Query",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "POST FilterList",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c171ed47-2788-4f12-b5b9-b3be8a6571c1",
								"exec": [
									"const supportedOperators = [\"eq\", \"ne\", \"gt\", \"ge\", \"lt\", \"le\", \"and\", \"or\", \"not\"];",
									"const supportedFunctions = [\"startswith\", \"contains\", \"endswith\"];",
									"",
									"function compare(a, b){",
									"    if(isNaN(a)){",
									"        return String(a).localeCompare(String(b));",
									"    } else {",
									"        return a > b;",
									"    }    ",
									"}",
									"",
									"function getOperator(inputString, possibleOperators) {",
									"    var op = null;",
									"    possibleOperators.forEach(function (el) { if (inputString.indexOf(el) >= 0) { op = el; } });",
									"    return op;",
									"}",
									"",
									"function opToJsFormat(op) {",
									"    res = null;",
									"    switch (op) {",
									"        case \"and\":",
									"            return \"&&\";",
									"        case \"or\":",
									"            return \"||\";",
									"        case \"not\":",
									"            return \"!\";",
									"        case \"eq\":",
									"            return \"==\";",
									"        case \"ne\":",
									"            return \"!=\";",
									"        case \"gt\":",
									"            return \">\";",
									"        case \"ge\":",
									"            return \">=\";",
									"        case \"lt\":",
									"            return \"<\";",
									"        case \"le\":",
									"            return \"<=\";",
									"    }",
									"}",
									"",
									"function get_query_filters(input_query) {",
									"",
									"    console.log(\"Parsing Filter...\");",
									"",
									"    var matcher = /(contains\\((.+?)\\)|startswith\\((.+?)\\)|endswith\\((.+?)\\)|any\\(.*?\\)|ContentDate\\/Start.*Z|ContentDate\\/End.*Z|[\\w.]+?\\s(?:eq|ne|gt|ge|lt|le)\\s(?:\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d+([+-][0-2]\\d:[0-5]\\d|Z)|[+-]?([0-9]*[.])?[0-9]+|\\w+|'.+?'))/g",
									"",
									"    var filters = input_query.match(matcher);",
									"    var i = 0;",
									"    var simpleString = input_query.replace(matcher, function () {",
									"        return i++;",
									"    });",
									"",
									"    console.log(simpleString);",
									"    console.log(filters);",
									"",
									"    var filterString = simpleString;",
									"",
									"    var groupString;",
									"    var groupFilter = null;",
									"    var testNextLevel = true;",
									"",
									"    while (testNextLevel) {",
									"        var closeParenthesisIndex = filterString.indexOf(')');",
									"        if (closeParenthesisIndex !== -1) {",
									"            var openParenthesisIndex = filterString.lastIndexOf('(', closeParenthesisIndex);",
									"",
									"            // Extract the string between the first deepest set of parenthesis",
									"            groupString = filterString.substring(openParenthesisIndex + 1, closeParenthesisIndex);",
									"",
									"            // Modify the filter string replacing the contents of the group string in addition to the parenthesis with the length of the filters array (which will be the index of the filter object that we push)",
									"            filterString = filterString.substring(0, openParenthesisIndex) + filters.length + filterString.substring(closeParenthesisIndex + 1);",
									"        } else {",
									"",
									"            // There are no more parenthesis groups",
									"            groupString = filterString;",
									"            testNextLevel = false;",
									"        }",
									"",
									"        // If the group uses both 'and' and 'or' then return null as an invalid filter string.",
									"        if (groupString.indexOf('and') >= 0 && groupString.indexOf('or') >= 0) {",
									"            console.log(\"Invalid Filter!\");",
									"            return null;",
									"        }",
									"",
									"        // Get the group indexes out of the group string",
									"        var groupFilterIndexes = groupString.match(/[0-9]+/g);",
									"        var groupFilters = [];",
									"",
									"        // Create an array with each of the filters who's index matches the group indexes",
									"        for (i = 0; i < groupFilterIndexes.length; i++) {",
									"            groupFilters.push(filters[Number(groupFilterIndexes[i])]);",
									"        }",
									"",
									"        //cycling over the supported operators",
									"        var op = getOperator(groupString, supportedOperators);",
									"",
									"        //redundant brakets management",
									"        if (op == null) {",
									"            groupFilters.push(\"true\");",
									"            op = \"and\";",
									"        }",
									"",
									"        // Create the filter object and push it onto the filters array",
									"        groupFilter = { op: op, filters: groupFilters };",
									"        filters.push(groupFilter);",
									"    }",
									"",
									"    return groupFilter;",
									"",
									"}",
									"",
									"function checkResponse(inputString, product) {",
									"    console.log(\"Input String: \" + inputString);",
									"    //console.log(\"Product:\");",
									"    //console.log(product);",
									"    var responseProperties = Object.keys(product);",
									"    var responseAttributes = {};",
									"",
									"    //Attribute",
									"    if (inputString.includes(\"any(\") && inputString.includes(\"/Name\") && inputString.includes(\"/Value\")) {",
									"        //Attribute Logic Assertion",
									"        if (responseProperties.indexOf(\"Attributes\") >= 0) {",
									"            product['Attributes'].forEach(function (el) {",
									"                responseAttributes[el.Name] = el.Value;",
									"            });",
									"",
									"            //functions in Attribute Value",
									"            var cleanedInputString = inputString.split(\"any(\").pop();",
									"            console.log(\"CLEANED ATTRIBUTE INPUTSTRING: \" + cleanedInputString);",
									"            if (cleanedInputString.includes(\"(\") && cleanedInputString.includes(\")\")) {",
									"                //get the function name",
									"                var functionName = cleanedInputString.split(\"(\")[0].split(\" \").pop();",
									"                if (supportedFunctions.indexOf(functionName) >= 0) {",
									"                    console.log(\"Found Attribute Function: \" + functionName);",
									"                    //get the attribute",
									"                    var attrToCheck = cleanedInputString.split('Name eq ').pop().split(\" \")[0].replace(/'/g, \"\").trim();",
									"                    console.log(\"Attribute KEY Found: \" + attrToCheck);",
									"                    //get the cleaned value",
									"                    var attrValueToCheck = cleanedInputString.split(\"(\")[1].split(\")\")[0].split(\",\")[1].trim().replace(/'/g, \"\");",
									"                    console.log(\"Attribute VALUE Found: \" + attrValueToCheck);",
									"",
									"                    switch (functionName) {",
									"                        case \"contains\":",
									"                            attributesUnderTest.push(attrToCheck + \" contains \" + attrValueToCheck);",
									"                            return (responseAttributes[attrToCheck].includes(attrValueToCheck)) ? true : false;",
									"                        case \"startswith\":",
									"                            attributesUnderTest.push(attrToCheck + \" startswith \" + attrValueToCheck);",
									"                            return responseAttributes[attrToCheck].startsWith(attrValueToCheck) ? true : false;",
									"                        case \"endswith\":",
									"                            attributesUnderTest.push(attrToCheck + \" endswith \" + attrValueToCheck);",
									"                            return responseAttributes[attrToCheck].endsWith(attrValueToCheck) ? true : false;",
									"                    }",
									"                }",
									"            } else {",
									"                //simple any(Attributes Name and Value)",
									"                var attrToCheck = inputString.split('Name eq ').pop().split(\" \")[0].replace(/'/g, \"\").trim();",
									"                console.log(\"Extracted Attribute KEY: \" + attrToCheck);",
									"                var attrValueToCheck = inputString.split('Value eq ').pop().split(\" \")[0].trim().replace(/'/g, \"\").replace(/\\)/g, \"\").replace(/\\\\/g, \"\");",
									"                console.log(\"Extracted Attribute VALUE: \" + attrValueToCheck);",
									"",
									"                attributesUnderTest.push(\"attr:\" + attrToCheck + \" eq \" + attrValueToCheck);",
									"",
									"                return responseAttributes[attrToCheck] == attrValueToCheck;",
									"            }",
									"        }",
									"    } else {",
									"        //inputString contains a function on a Property -> complex property not supported!",
									"        if (inputString.includes(\"(\") && inputString.includes(\")\")) {",
									"            //get the function name",
									"            var functionName = inputString.split(\"(\")[0];",
									"            if (supportedFunctions.indexOf(functionName) >= 0) {",
									"                console.log(\"Found Function: \" + functionName);",
									"                //get the property",
									"                var propertyToCheck = inputString.split(\"(\")[1].split(\",\")[0].trim();",
									"                console.log(\"Property Found: \" + propertyToCheck);",
									"",
									"                //get the cleaned value",
									"                var propValueToCheck = inputString.split(\"(\")[1].split(\")\")[0].split(\",\")[1].trim().replace(/'/g, \"\");",
									"                console.log(\"PropertyValue Found: \" + propValueToCheck);",
									"",
									"                switch (functionName) {",
									"                    case \"contains\":",
									"                        propertiesUnderTest.push(propertyToCheck + \" contains \" + propValueToCheck);",
									"                        return (product[propertyToCheck].includes(propValueToCheck)) ? true : false;",
									"                    case \"startswith\":",
									"                        propertiesUnderTest.push(propertyToCheck + \" startswith \" + propValueToCheck);",
									"                        return product[propertyToCheck].startsWith(propValueToCheck) ? true : false;",
									"                    case \"endswith\":",
									"                        propertiesUnderTest.push(propertyToCheck + \" endswith \" + propValueToCheck);",
									"                        return product[propertyToCheck].endsWith(propValueToCheck) ? true : false;",
									"                }",
									"            } else {",
									"                console.log(\"Unsupported Function: \" + functionName);",
									"                return false;",
									"            }",
									"        } else {",
									"            // single logic assertion in \"AND\" with \"true\"",
									"            if (inputString === \"true\") {",
									"                console.log(\"True Value!\");",
									"                return true;",
									"            } else {",
									"                //direct Property",
									"                var propertyToCheck = inputString.split(\" \")[0].trim();",
									"                var operatorToApply = inputString.split(\" \")[1];",
									"                var propValueToCheck = inputString.split(\" \")[2].trim().replace(/'/g, \"\");",
									"",
									"                console.log(\"Property Found: \" + propertyToCheck);",
									"                console.log(\"PropertyValue Found: \" + propValueToCheck);",
									"",
									"                if (supportedOperators.indexOf(operatorToApply) >= 0) {",
									"                    console.log(\"Operator To Apply: \" + operatorToApply);",
									"                    operator = opToJsFormat(operatorToApply);",
									"                    propertiesUnderTest.push(propertyToCheck + \" \" + operatorToApply + \" \" + propValueToCheck);",
									"",
									"                    var toEvalString = \"\";",
									"                    var subProperty = \"\";",
									"",
									"                    //Complex properties (ContentDate)",
									"                    if(propertyToCheck.includes(\"/\")){",
									"                        var rootPropertyToCheck = propertyToCheck.split(\"/\")[0];",
									"                        subProperty = propertyToCheck.split(\"/\")[1];",
									"",
									"                        console.log(\"Complex Property: \" + rootPropertyToCheck);",
									"                        console.log(\"Sub Property: \" + subProperty);",
									"",
									"                        toEvalString = \"product[rootPropertyToCheck][subProperty] \" + operator + \" propValueToCheck\";",
									"",
									"                    } else {",
									"                        toEvalString = \"product[propertyToCheck] \" + operator + \" propValueToCheck\";",
									"                    }",
									"",
									"                    return eval(toEvalString);",
									"                } else {",
									"                    console.log(\"Operator not supported\");",
									"                    return false;",
									"                }",
									"            }",
									"        }",
									"    }",
									"    console.log(\"Logic Assertion not computed: \" + inputString);",
									"    return Math.random() >= 0.5;",
									"}",
									"",
									"function treeIterator(tree, product) {",
									"    if (tree['filters'].length >= 0) {",
									"        var conditions = [];",
									"",
									"        var logicOperator = getOperator(tree['op'], supportedOperators);",
									"        var logicOperator = opToJsFormat(logicOperator);",
									"",
									"        //general tree: iterates over all filters (child nodes)",
									"        for (elem in tree['filters']) {",
									"            var currentCondition = typeof ((tree['filters'][elem])) == \"object\" ? treeIterator(tree['filters'][elem], product) : checkResponse(tree['filters'][elem], product);",
									"            conditions.push(currentCondition);",
									"            //optimize AND and OR",
									"            if(logicOperator == \"||\" && currentCondition){",
									"                break;",
									"            }",
									"            if(logicOperator == \"&&\" && !currentCondition){",
									"                break;",
									"            }",
									"        }",
									"        console.log(\"CURRENT CONDITIONS\");",
									"        console.log(conditions);",
									"",
									"        //building return string",
									"        var resString = \"(\";",
									"        for (elem in conditions) {",
									"            resString += conditions[elem] + \" \" + logicOperator.toString() + \" \";",
									"        }",
									"        resString = resString.substring(0, resString.length - 4);",
									"        resString += \")\";",
									"",
									"        console.log(\"RES String: \" + resString);",
									"",
									"        return resString;",
									"    }",
									"}",
									"",
									"try {",
									"    var jsonDataElements = pm.response.json().value;",
									"",
									"    console.log(\"Response: \");",
									"    console.log(jsonDataElements);",
									"",
									"    pm.test(\"Response time is less than \" + environment[\"query-timeout\"] + \"ms\", function () {",
									"        pm.expect(pm.response.responseTime).to.be.below(parseInt(environment[\"query-timeout\"]));",
									"    });",
									"",
									"    //MIN number of Records Test",
									"    var minimumExpRecords = parseInt(pm.collectionVariables.get('resp_min_records'));",
									"    pm.test(\"Expected minimum number of products Test: \" + minimumExpRecords, function(){",
									"        pm.expect(jsonDataElements.length).to.be.gte(minimumExpRecords);",
									"    });",
									"",
									"    //TOP and ORDERBY",
									"    var topFilterString = pm.request.url.getQueryString();",
									"    var topFilterValue = 0;",
									"",
									"    if(topFilterString.includes(\"$top=\")){",
									"        topFilterValue = parseInt(topFilterString.split(\"$top=\").pop());",
									"        console.log(jsonDataElements.length);",
									"",
									"        pm.test(\"TOP Filter - Response list lenght \" + jsonDataElements.length + \" is less or equal to TOP param Value: \" + topFilterValue, function(){",
									"            pm.expect(jsonDataElements.length).to.be.lte(topFilterValue);",
									"        });",
									"    }",
									"    ",
									"    var orderString = pm.request.url.getQueryString();",
									"    var orderParameters;",
									"",
									"    if(orderString.includes(\"$orderby=\")){",
									"        orderParameters = decodeURIComponent(orderString.split(\"$orderby=\").pop().split(\"&\")[0]);",
									"",
									"        var orderProperty = orderParameters;",
									"        var orderCriteria = \"asc\";",
									"",
									"        if(orderParameters.includes(\" \")){",
									"            orderProperty = orderParameters.split(\" \")[0];",
									"            orderCriteria = orderParameters.split(\" \")[1];",
									"        }",
									"",
									"        console.log(\"order Property: \" + orderProperty);",
									"        console.log(\"order Criteria: \" + orderCriteria);",
									"",
									"        //if with complex Property management",
									"        if(orderProperty.includes(\"/\")){",
									"            var complexProperty = orderProperty.split(\"/\")[0];",
									"            var subProperty = orderProperty.split(\"/\").pop();",
									"",
									"            console.log(complexProperty);",
									"            console.log(subProperty);",
									"",
									"            var simplerSortingList = jsonDataElements.map(ex=>ex[complexProperty][subProperty]);",
									"            var serverSorting = jsonDataElements.map(ex=>ex[complexProperty][subProperty]);",
									"        } else {",
									"            var simplerSortingList = jsonDataElements.map(ex=>ex[orderProperty]);",
									"            var serverSorting = jsonDataElements.map(ex=>ex[orderProperty]);",
									"        }",
									"",
									"        console.log(\"Unsorted list: \");",
									"        console.log(simplerSortingList);",
									"        ",
									"        simplerSortingList.sort(function(a, b){return compare(a, b)});",
									"",
									"",
									"        if(orderCriteria == \"desc\"){",
									"            simplerSortingList.reverse();    ",
									"        }",
									"",
									"        console.log(\"Sorted list: \");",
									"        console.log(simplerSortingList);",
									"            ",
									"        pm.test(\"ORDERBY Filter Test - Sort check\", function(){",
									"            pm.expect(simplerSortingList).to.deep.equal(serverSorting);",
									"        });",
									"    }",
									"",
									"    //FILTERS",
									"",
									"    var parsed_filters;",
									"",
									"    //POST or GET query",
									"    if (pm.request.method == \"POST\" && pm.request.body.raw) {",
									"        var productsFilters = JSON.parse(pm.request.body.raw);",
									"",
									"        var jsonBodyToLogicAssertions = \"\";",
									"",
									"        for (elem in productsFilters['FilterProducts']) {",
									"            console.log(productsFilters['FilterProducts'][elem]);",
									"            var currentAssertion = \"\";",
									"",
									"            var keys = [];",
									"            for (var k in productsFilters['FilterProducts'][elem]) keys.push(k);",
									"            //console.log(keys);",
									"            var currentKey = keys[0];",
									"            console.log(\"Current Key: \" + currentKey);",
									"",
									"            var currentValue = productsFilters['FilterProducts'][elem][currentKey].toString();",
									"            console.log(\"Current Value: \" + currentValue);",
									"",
									"            currentAssertion = \"\" + currentKey + \" eq '\" + currentValue + \"'\";",
									"            jsonBodyToLogicAssertions += currentAssertion + \" or \";",
									"        }",
									"",
									"        //cutting last \" or \"",
									"        jsonBodyToLogicAssertions = jsonBodyToLogicAssertions.substring(0, jsonBodyToLogicAssertions.length - 4);",
									"        console.log(\"PARSED POST: \" + jsonBodyToLogicAssertions);",
									"",
									"        parsed_filters = get_query_filters(jsonBodyToLogicAssertions);",
									"",
									"    } else if (pm.request.method == \"GET\" && pm.request.url.getQueryString().includes(\"$filter=\")) {",
									"        var filter_query = pm.request.url.getQueryString().split(\"$filter=\")[1];",
									"        filter_query = decodeURIComponent(filter_query.split(\"&\")[0]);",
									"        console.log(filter_query);",
									"        parsed_filters = get_query_filters(filter_query);",
									"",
									"    }",
									"",
									"    console.log(parsed_filters);",
									"",
									"    var attributesUnderTest = [];",
									"    var propertiesUnderTest = [];",
									"",
									"    if (typeof (parsed_filters) == \"object\") {",
									"        for (var counter = 0; counter < jsonDataElements.length; counter++) {",
									"",
									"            attributesUnderTest = [];",
									"            propertiesUnderTest = [];",
									"",
									"            var product = jsonDataElements[counter];",
									"            var treeExp = treeIterator(parsed_filters, product);",
									"            var booleanTreeExp = eval(treeExp);",
									"",
									"            console.log(treeExp); console.log(booleanTreeExp);",
									"",
									"            testMessage = product.Name;",
									"",
									"            /*",
									"            if(attributesUnderTest.length > 0){",
									"                testMessage += \" \";",
									"                for(elem in attributesUnderTest){",
									"                    testMessage += attributesUnderTest[elem] + \"; \";",
									"                }",
									"            }",
									"            if(propertiesUnderTest.length > 0){",
									"                testMessage += \" \";",
									"                for(elem in propertiesUnderTest){",
									"                    testMessage += propertiesUnderTest[elem] + \"; \";",
									"                }",
									"            }",
									"            */",
									"",
									"            pm.test(testMessage, function () {",
									"                pm.expect(booleanTreeExp).to.be.true;",
									"            });",
									"        }",
									"    }",
									"}",
									"",
									"catch (err) {",
									"    pm.test(\"Filters Test\", function () {",
									"        pm.expect.fail(err.toString());",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "ca9e0336-bd2f-4457-b4b9-9969f2e4e358",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\"FilterProducts\":[\r\n\t{\"Name\": \"S1A_IW_GRDH_1SDV_20200121T201716_20200121T201741_030903_038C0F_DAEC.SAFE.zip\"},\r\n\t{\"Name\": \"S1A_EW_GRDM_1ADH_20200121T014322_20200121T014427_030892_038BA2_CD80.SAFE.zip\"},\r\n\t{\"Name\": \"S1A_S4_GRDH_1SDV_20190827T045540_20190827T045605_028750_03416A_B108.SAFE.zip\"}\r\n]}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{service-root-uri}}/odata/v1/Products/OData.CSC.FilterList",
							"host": [
								"{{service-root-uri}}"
							],
							"path": [
								"odata",
								"v1",
								"Products",
								"OData.CSC.FilterList"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Orders",
			"item": [
				{
					"name": "Get_Offline_Products",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"try {\r",
									"    var jsonDataElements = pm.response.json().value;\r",
									"\r",
									"    console.log(\"Response: \");\r",
									"    console.log(jsonDataElements);\r",
									"\r",
									"    pm.test(\"Response time is less than \" + environment[\"query-timeout\"] + \"ms\", function () {\r",
									"        pm.expect(pm.response.responseTime).to.be.below(parseInt(environment[\"query-timeout\"]));\r",
									"    });\r",
									"\r",
									"    //MIN number of Records Test\r",
									"    var minimumExpRecords = parseInt(pm.collectionVariables.get('resp_min_records'));\r",
									"    pm.test(\"Expected minimum number of products Test: \" + minimumExpRecords, function(){\r",
									"        pm.expect(jsonDataElements.length).to.be.gte(minimumExpRecords);\r",
									"    });\r",
									"\r",
									"    pm.test(\"Test OData context\", function(){\r",
									"        query_string = pm.request.url.getQueryString();\r",
									"        if(query_string.includes(\"$expand=Attributes\")){\r",
									"            pm.expect( pm.response.json()['@odata.context']).to.include(\"$metadata#Products(Attributes())\");\r",
									"        } else{\r",
									"            pm.expect( pm.response.json()['@odata.context']).to.include(\"$metadata#Products\");\r",
									"        }\r",
									"    });\r",
									"\r",
									"    for (var counter = 0;  counter  < jsonDataElements.length; counter++){\r",
									"        var product = jsonDataElements[counter];\r",
									"        console.log(\"Processing Product: \"+product.Name+\" - \"+product.Id);\r",
									"\r",
									"        pm.test(\"Test Properties for product: \" + product.Id, function(){\r",
									"            pm.expect(product).to.have.property(\"Id\");\r",
									"            pm.expect(product.Id).to.be.a(\"string\");\r",
									"            pm.expect(product).to.have.property(\"Name\");\r",
									"            pm.expect(product.Name).to.be.a(\"string\");\r",
									"            pm.expect(product).to.have.property(\"ContentType\");\r",
									"            pm.expect(product.ContentType).to.be.a(\"string\");\r",
									"            pm.expect(product).to.have.property(\"ContentLength\");\r",
									"            pm.expect(product.ContentLength).to.be.a(\"number\");\r",
									"            pm.expect(product).to.have.property(\"OriginDate\");\r",
									"            pm.expect(product.OriginDate).to.be.a(\"string\");\r",
									"            pm.expect(product).to.have.property(\"PublicationDate\");\r",
									"            pm.expect(product.PublicationDate).to.be.a(\"string\");\r",
									"            pm.expect(product).to.have.property(\"ModificationDate\");\r",
									"            pm.expect(product.ModificationDate).to.be.a(\"string\");\r",
									"            pm.expect(product).to.have.property(\"Online\");\r",
									"            pm.expect(product.Online).to.be.a(\"boolean\");\r",
									"            pm.expect(product).to.have.property(\"Checksum\");\r",
									"            pm.expect(product.Checksum).to.be.an(\"array\");\r",
									"            pm.expect(product).to.have.property(\"ContentDate\");\r",
									"            pm.expect(product.ContentDate).to.be.an(\"object\");\r",
									"        }); \r",
									" \r",
									"        if(\"Attributes\" in jsonDataElements[counter]){\r",
									"            schema_seen = {};\r",
									"\r",
									"            pm.test(\"Test Attributes list for product: \" + jsonDataElements[counter].Id, function(){\r",
									"                pm.expect(jsonDataElements[counter].Attributes.length).to.be.above(0);\r",
									"                jsonDataElements[counter].Attributes.forEach(function(elem){\r",
									"                    pm.expect(elem).to.have.all.keys(\"Name\", \"Value\", \"ValueType\");\r",
									"                });\r",
									"            });  \r",
									"        }\r",
									"    }\r",
									"\r",
									"    pm.collectionVariables.set('offline_products', jsonDataElements);\r",
									"   \r",
									"}\r",
									"\r",
									"catch (err) {\r",
									"    pm.test(request.name, function () {\r",
									"        pm.expect.fail(err.toString());\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript",
								"id": "7a67e0ee-9a91-4819-bbb7-fc989783a80d"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{service-root-uri}}/odata/v1/Products?$filter=Online eq false",
							"host": [
								"{{service-root-uri}}"
							],
							"path": [
								"odata",
								"v1",
								"Products"
							],
							"query": [
								{
									"key": "$filter",
									"value": "Online eq false"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Order_Offline_Product",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"try {\r",
									"\r",
									"    var current_offline_product_id = decodeURIComponent(pm.request.url.getPathWithQuery()).split(\"Products(\")[1].split(\")/OData.CSC.Order\")[0];\r",
									"\r",
									"    pm.variables.unset(\"current_offline_product_id\");\r",
									"    if(current_offline_product_id == \"{{current_offline_product_id}}\"){\r",
									"        var current_offline_products = pm.collectionVariables.get('offline_products');\r",
									"        //get random product from collected offline products\r",
									"        var random_product = current_offline_products[Math.floor(Math.random()*current_offline_products.length)];\r",
									"        pm.variables.set(\"current_offline_product_id\", random_product[\"Id\"]);\r",
									"    } else {\r",
									"        pm.variables.set(\"current_offline_product_id\", current_offline_product_id);\r",
									"    }\r",
									"\r",
									"    console.log(pm.variables.get(\"current_offline_product_id\"));\r",
									"    \r",
									"} catch (err) {\r",
									"    pm.test(\"Filters Test\", function () {\r",
									"        pm.expect.fail(err.toString());\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript",
								"id": "9ee25589-d1d2-423a-8b44-927190032ff7"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"properties_map = {};\r",
									"\r",
									"properties_map.Id=function (element) {pm.expect(element.Id).to.match(/[0-9a-fA-F]{8}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{12}/);};\r",
									"\r",
									"properties_map.Status=function (element) {\r",
									"    pm.expect(element.Status).to.be.a(\"string\");\r",
									"    pm.expect(element.Status).to.be.oneOf([\"in_progress\",\"queued\",\"failed\",\"completed\", \"cancelled\"]);\r",
									"};\r",
									"properties_map.StatusMessage=function (element) {\r",
									"    pm.expect(element.StatusMessage).to.be.a(\"string\");\r",
									"    pm.expect(element.StatusMessage).to.be.oneOf([\r",
									"        \"request is under processing\",\r",
									"        \"request is queued\",\r",
									"        \"request product is available\",\r",
									"        \"product currently unavailable\",\r",
									"        \"request cancelled by user\"]);\r",
									"};\r",
									"properties_map.Priority=function (element) {pm.expect(element.Priority).to.be.a(\"number\");}; \r",
									"properties_map.SubmissionDate=function (element) {pm.expect(element.SubmissionDate).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d+([+-][0-2]\\d:[0-5]\\d|Z)/);};\r",
									"properties_map.EstimatedDate=function (element) {pm.expect(element.EstimatedDate).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);};\r",
									"\r",
									"// properties_map.OrderSize=function (element) {pm.expect(element.OrderSize).to.be.a(\"number\");};\r",
									"// properties_map.CompletedDate=function (element) {pm.expect(element.CompletedDate).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d+([+-][0-2]\\d:[0-5]\\d|Z)/);};\r",
									"// properties_map.EvictionDate=function (element) {if(element.EvictionDate){ pm.expect(element.EvictionDate).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d+([+-][0-2]\\d:[0-5]\\d|Z)/); }};\r",
									"\r",
									"function propertySpecific(key, order){\r",
									"    if (properties_map[key]) {\r",
									"        pm.test(\"Test Property \"+key+\" for Order: \" + order.Id, function(){properties_map[key](order)});\r",
									"    }\r",
									"    else {\r",
									"        pm.test.skip(\"Test Property \"+key+\" for Order: \" + order.Id);\r",
									"    }\r",
									"}\r",
									"\r",
									"try {\r",
									"    var jsonDataElements = pm.response.json();\r",
									"\r",
									"    pm.test(\"Test Response Status Code\", function(){\r",
									"        pm.expect(pm.response.code).to.be.oneOf([201,202]);\r",
									"    });\r",
									"\r",
									"    pm.test(\"Test OData context\", function(){\r",
									"        pm.expect( pm.response.json()['@odata.context']).to.include(\"$metadata#OData.CSC.Order\");\r",
									"    });\r",
									"\r",
									"    pm.test(\"Response time is less than \" +  environment[\"query-timeout\"] + \"ms\", function(){\r",
									"        pm.expect(pm.response.responseTime).to.be.below(parseInt(environment[\"query-timeout\"]));\r",
									"    });\r",
									"\r",
									"    var order_response = {};\r",
									"\r",
									"    for (const[key, value] of Object.entries(properties_map)){\r",
									"        propertySpecific(key, jsonDataElements);\r",
									"        //filling the collection variable order array\r",
									"        order_response[key] = jsonDataElements[key];\r",
									"        pm.collectionVariables.set(\"current_order_\" + key, jsonDataElements[key]);\r",
									"    }\r",
									"\r",
									"    pm.collectionVariables.set(\"expected_current_order_values\", order_response);\r",
									"    pm.collectionVariables.set(\"order_filter_counter\", 0);\r",
									"\r",
									"} catch (err) {\r",
									"    pm.test(request.name, function () {\r",
									"        pm.expect.fail(err.toString());\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript",
								"id": "01e5fd8f-3681-4716-9712-0d15f6ab7d47"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\"Priority\":43}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{service-root-uri}}/odata/v1/Products({{current_offline_product_id}})/OData.CSC.Order",
							"host": [
								"{{service-root-uri}}"
							],
							"path": [
								"odata",
								"v1",
								"Products({{current_offline_product_id}})",
								"OData.CSC.Order"
							]
						}
					},
					"response": []
				},
				{
					"name": "Order_Filter_By_Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonDataElements = pm.response.json().value;\r",
									"current_tested_filter_key = \"Id\";\r",
									"\r",
									"try {\r",
									"    current_order = jsonDataElements[0];\r",
									"\r",
									"    pm.test(\"Test Response Status Code\", function(){\r",
									"        pm.expect(pm.response.code).to.be.oneOf([200]);\r",
									"    });\r",
									"\r",
									"    pm.test(\"Test OData context\", function(){\r",
									"        pm.expect( pm.response.json()['@odata.context']).to.include(\"$metadata#Orders\");\r",
									"    });\r",
									"\r",
									"    pm.test(\"Response time is less than \" +  environment[\"query-timeout\"] + \"ms\", function(){\r",
									"        pm.expect(pm.response.responseTime).to.be.below(parseInt(environment[\"query-timeout\"]));\r",
									"    });\r",
									"\r",
									"    var expected_order_key_value = decodeURIComponent(pm.request.url.getQueryString()).split(\" eq \").pop().replace(/'/g, \"\");\r",
									"\r",
									"    pm.test(\"Expected Order \" + current_tested_filter_key + \" is: \" + expected_order_key_value, function(){\r",
									"        pm.expect(current_order[current_tested_filter_key]).to.equal(expected_order_key_value);\r",
									"    });\r",
									"\r",
									"} catch (err) {\r",
									"    pm.test(\"Order Filter \" + current_tested_filter_key + \" Test\", function () {\r",
									"        pm.expect.fail(err.toString());\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript",
								"id": "2462ba44-49ec-4909-aa8d-f6d5ff4ce9d3"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{service-root-uri}}/odata/v1/Orders?$filter=Id eq {{current_order_Id}}",
							"host": [
								"{{service-root-uri}}"
							],
							"path": [
								"odata",
								"v1",
								"Orders"
							],
							"query": [
								{
									"key": "$filter",
									"value": "Id eq {{current_order_Id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Order_Filter_By_EstimatedDate",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonDataElements = pm.response.json().value;\r",
									"current_tested_filter_key = \"EstimatedDate\";\r",
									"\r",
									"try {\r",
									"    current_order = jsonDataElements[0];\r",
									"\r",
									"    pm.test(\"Test Response Status Code\", function(){\r",
									"        pm.expect(pm.response.code).to.be.oneOf([200]);\r",
									"    });\r",
									"\r",
									"    pm.test(\"Test OData context\", function(){\r",
									"        pm.expect( pm.response.json()['@odata.context']).to.include(\"$metadata#Orders\");\r",
									"    });\r",
									"\r",
									"    pm.test(\"Response time is less than \" +  environment[\"query-timeout\"] + \"ms\", function(){\r",
									"        pm.expect(pm.response.responseTime).to.be.below(parseInt(environment[\"query-timeout\"]));\r",
									"    });\r",
									"\r",
									"    var expected_order_key_value = decodeURIComponent(pm.request.url.getQueryString()).split(\" eq \").pop().replace(/'/g, \"\");\r",
									"\r",
									"    console.log(expected_order_key_value);\r",
									"\r",
									"    pm.test(\"Expected Order \" + current_tested_filter_key + \" is: \" + expected_order_key_value, function(){\r",
									"        pm.expect(current_order[current_tested_filter_key]).to.equal(expected_order_key_value);\r",
									"    });\r",
									"\r",
									"} catch (err) {\r",
									"    pm.test(\"Order Filter \" + current_tested_filter_key + \" Test\", function () {\r",
									"        pm.expect.fail(err.toString());\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript",
								"id": "05f60157-792c-4e28-9104-2e799f15b7b0"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{service-root-uri}}/odata/v1/Orders?$filter=EstimatedDate eq {{current_order_EstimatedDate}}",
							"host": [
								"{{service-root-uri}}"
							],
							"path": [
								"odata",
								"v1",
								"Orders"
							],
							"query": [
								{
									"key": "$filter",
									"value": "EstimatedDate eq {{current_order_EstimatedDate}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Order_Filter_By_SubmissionDate",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonDataElements = pm.response.json().value;\r",
									"current_tested_filter_key = \"SubmissionDate\";\r",
									"\r",
									"try {\r",
									"    current_order = jsonDataElements[0];\r",
									"\r",
									"    pm.test(\"Test Response Status Code\", function(){\r",
									"        pm.expect(pm.response.code).to.be.oneOf([200]);\r",
									"    });\r",
									"\r",
									"    pm.test(\"Test OData context\", function(){\r",
									"        pm.expect( pm.response.json()['@odata.context']).to.include(\"$metadata#Orders\");\r",
									"    });\r",
									"\r",
									"    pm.test(\"Response time is less than \" +  environment[\"query-timeout\"] + \"ms\", function(){\r",
									"        pm.expect(pm.response.responseTime).to.be.below(parseInt(environment[\"query-timeout\"]));\r",
									"    });\r",
									"\r",
									"    var expected_order_key_value = decodeURIComponent(pm.request.url.getQueryString()).split(\" eq \").pop().replace(/'/g, \"\");\r",
									"\r",
									"    console.log(expected_order_key_value);\r",
									"\r",
									"    pm.test(\"Expected Order \" + current_tested_filter_key + \" is: \" + expected_order_key_value, function(){\r",
									"        pm.expect(current_order[current_tested_filter_key]).to.equal(expected_order_key_value);\r",
									"    });\r",
									"\r",
									"} catch (err) {\r",
									"    pm.test(\"Order Filter \" + current_tested_filter_key + \" Test\", function () {\r",
									"        pm.expect.fail(err.toString());\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript",
								"id": "4305b6eb-eada-4fd6-b3aa-be3dfccf8044"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{service-root-uri}}/odata/v1/Orders?$filter=SubmissionDate eq {{current_order_SubmissionDate}}",
							"host": [
								"{{service-root-uri}}"
							],
							"path": [
								"odata",
								"v1",
								"Orders"
							],
							"query": [
								{
									"key": "$filter",
									"value": "SubmissionDate eq {{current_order_SubmissionDate}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Order_Filter_By_Priority",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonDataElements = pm.response.json().value;\r",
									"current_tested_filter_key = \"Priority\";\r",
									"\r",
									"try {\r",
									"    current_order = jsonDataElements[0];\r",
									"\r",
									"    pm.test(\"Test Response Status Code\", function(){\r",
									"        pm.expect(pm.response.code).to.be.oneOf([200]);\r",
									"    });\r",
									"\r",
									"    pm.test(\"Test OData context\", function(){\r",
									"        pm.expect( pm.response.json()['@odata.context']).to.include(\"$metadata#Orders\");\r",
									"    });\r",
									"\r",
									"    pm.test(\"Response time is less than \" +  environment[\"query-timeout\"] + \"ms\", function(){\r",
									"        pm.expect(pm.response.responseTime).to.be.below(parseInt(environment[\"query-timeout\"]));\r",
									"    });\r",
									"\r",
									"    var expected_order_key_value = parseInt(decodeURIComponent(pm.request.url.getQueryString()).split(\" eq \").pop().replace(/'/g, \"\"));\r",
									"\r",
									"    console.log(expected_order_key_value);\r",
									"\r",
									"    pm.test(\"Expected Order \" + current_tested_filter_key + \" is: \" + expected_order_key_value, function(){\r",
									"        pm.expect(current_order[current_tested_filter_key]).to.equal(expected_order_key_value);\r",
									"    });\r",
									"\r",
									"} catch (err) {\r",
									"    pm.test(\"Order Filter \" + current_tested_filter_key + \" Test\", function () {\r",
									"        pm.expect.fail(err.toString());\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript",
								"id": "193dfcc5-d06e-4658-9552-2c78f67da387"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{service-root-uri}}/odata/v1/Orders?$filter=Priority eq {{current_order_Priority}}",
							"host": [
								"{{service-root-uri}}"
							],
							"path": [
								"odata",
								"v1",
								"Orders"
							],
							"query": [
								{
									"key": "$filter",
									"value": "Priority eq {{current_order_Priority}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Order_Filter_By_Status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonDataElements = pm.response.json().value;\r",
									"current_tested_filter_key = \"Status\";\r",
									"\r",
									"try {\r",
									"    current_order = jsonDataElements[0];\r",
									"\r",
									"    pm.test(\"Test Response Status Code\", function(){\r",
									"        pm.expect(pm.response.code).to.be.oneOf([200]);\r",
									"    });\r",
									"\r",
									"    pm.test(\"Test OData context\", function(){\r",
									"        pm.expect( pm.response.json()['@odata.context']).to.include(\"$metadata#Orders\");\r",
									"    });\r",
									"\r",
									"    pm.test(\"Response time is less than \" +  environment[\"query-timeout\"] + \"ms\", function(){\r",
									"        pm.expect(pm.response.responseTime).to.be.below(parseInt(environment[\"query-timeout\"]));\r",
									"    });\r",
									"\r",
									"    var expected_order_key_value = decodeURIComponent(pm.request.url.getQueryString()).split(\" eq \").pop().split(\"OData.CSC.JobStatus\").pop().replace(/'/g, \"\");\r",
									"    \r",
									"    pm.test(\"Expected Order \" + current_tested_filter_key + \" is: \" + expected_order_key_value, function(){\r",
									"        pm.expect(current_order[current_tested_filter_key]).to.equal(expected_order_key_value);\r",
									"    });\r",
									"\r",
									"} catch (err) {\r",
									"    pm.test(\"Order Filter \" + current_tested_filter_key + \" Test\", function () {\r",
									"        pm.expect.fail(err.toString());\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript",
								"id": "15d141bd-fd6a-4531-be49-c1c86ad96ed5"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{service-root-uri}}/odata/v1/Orders?$filter=Status eq OData.CSC.JobStatus'{{current_order_Status}}'",
							"host": [
								"{{service-root-uri}}"
							],
							"path": [
								"odata",
								"v1",
								"Orders"
							],
							"query": [
								{
									"key": "$filter",
									"value": "Status eq OData.CSC.JobStatus'{{current_order_Status}}'"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Order_Filter_By_StatusMessage",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonDataElements = pm.response.json().value;\r",
									"current_tested_filter_key = \"StatusMessage\";\r",
									"\r",
									"try {\r",
									"    current_order = jsonDataElements[0];\r",
									"\r",
									"    pm.test(\"Test Response Status Code\", function(){\r",
									"        pm.expect(pm.response.code).to.be.oneOf([200]);\r",
									"    });\r",
									"\r",
									"    pm.test(\"Test OData context\", function(){\r",
									"        pm.expect( pm.response.json()['@odata.context']).to.include(\"$metadata#Orders\");\r",
									"    });\r",
									"\r",
									"    pm.test(\"Response time is less than \" +  environment[\"query-timeout\"] + \"ms\", function(){\r",
									"        pm.expect(pm.response.responseTime).to.be.below(parseInt(environment[\"query-timeout\"]));\r",
									"    });\r",
									"\r",
									"    var expected_order_key_value = pm.collectionVariables.get(\"current_order_\" + current_tested_filter_key);\r",
									"\r",
									"    console.log(expected_order_key_value);\r",
									"\r",
									"    pm.test(\"Expected Order \" + current_tested_filter_key + \" is: \" + expected_order_key_value, function(){\r",
									"        pm.expect(current_order[current_tested_filter_key]).to.equal(expected_order_key_value);\r",
									"    });\r",
									"\r",
									"} catch (err) {\r",
									"    pm.test(\"Order Filter \" + current_tested_filter_key + \" Test\", function () {\r",
									"        pm.expect.fail(err.toString());\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript",
								"id": "0ab6206a-476b-4787-ae48-8b3b0814344c"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{service-root-uri}}/odata/v1/Orders?$filter=StatusMessage eq {{current_order_StatusMessage}}",
							"host": [
								"{{service-root-uri}}"
							],
							"path": [
								"odata",
								"v1",
								"Orders"
							],
							"query": [
								{
									"key": "$filter",
									"value": "StatusMessage eq {{current_order_StatusMessage}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get_Completed_Orders",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"try {\r",
									"    var jsonDataElements = pm.response.json().value;\r",
									"\r",
									"    console.log(\"Response: \");\r",
									"    console.log(jsonDataElements);\r",
									"\r",
									"    pm.test(\"Response time is less than \" + environment[\"query-timeout\"] + \"ms\", function () {\r",
									"        pm.expect(pm.response.responseTime).to.be.below(parseInt(environment[\"query-timeout\"]));\r",
									"    });\r",
									"\r",
									"    //MIN number of Records Test\r",
									"    var minimumExpRecords = parseInt(pm.collectionVariables.get('resp_min_records'));\r",
									"    pm.test(\"Expected minimum number of records Test: \" + minimumExpRecords, function(){\r",
									"        pm.expect(jsonDataElements.length).to.be.gte(minimumExpRecords);\r",
									"    });\r",
									"\r",
									"    pm.test(\"Test OData context\", function(){\r",
									"        query_string = pm.request.url.getQueryString();\r",
									"        pm.expect( pm.response.json()['@odata.context']).to.include(\"$metadata#Orders\");\r",
									"    });\r",
									"\r",
									"    for (var counter = 0;  counter  < jsonDataElements.length; counter++){\r",
									"        var current_order = jsonDataElements[counter];\r",
									"        console.log(\"Processing Order: \"+current_order.Id);\r",
									"\r",
									"        pm.test(\"Test Properties for Order: \" + current_order.Id, function(){\r",
									"            pm.expect(current_order).to.have.property(\"Id\");\r",
									"            pm.expect(current_order.Id).to.be.a(\"string\");\r",
									"            pm.expect(current_order).to.have.property(\"Status\");\r",
									"            pm.expect(current_order.Status).to.be.a(\"string\");\r",
									"            pm.expect(current_order).to.have.property(\"StatusMessage\");\r",
									"            pm.expect(current_order.StatusMessage).to.be.a(\"string\");\r",
									"            pm.expect(current_order).to.have.property(\"SubmissionDate\");\r",
									"            pm.expect(current_order.SubmissionDate).to.be.a(\"string\");\r",
									"            pm.expect(current_order).to.have.property(\"EstimatedDate\");\r",
									"            pm.expect(current_order.EstimatedDate).to.be.a(\"string\");\r",
									"            pm.expect(current_order).to.have.property(\"Priority\");\r",
									"            pm.expect(current_order.Priority).to.be.a(\"number\");\r",
									"        });\r",
									"    }\r",
									"\r",
									"    pm.collectionVariables.set('completed_orders', jsonDataElements);\r",
									"   \r",
									"}\r",
									"\r",
									"catch (err) {\r",
									"    pm.test(request.name, function () {\r",
									"        pm.expect.fail(err.toString());\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript",
								"id": "3868afec-f785-4c12-89b8-74c63dc2bcef"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{service-root-uri}}/odata/v1/Orders?$filter=Status eq OData.CSC.JobStatus'completed'",
							"host": [
								"{{service-root-uri}}"
							],
							"path": [
								"odata",
								"v1",
								"Orders"
							],
							"query": [
								{
									"key": "$filter",
									"value": "Status eq OData.CSC.JobStatus'completed'"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Completed_Order_Properties",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"try {\r",
									"    var current_completed_order = decodeURIComponent(pm.request.url.getQueryString()).split(\" eq \")[1];\r",
									"    console.log(current_completed_order);\r",
									"    pm.variables.unset(\"current_completed_order_id\");    \r",
									"    if(current_completed_order == \"{{current_completed_order_id}}\"){\r",
									"        current_completed_order = pm.collectionVariables.get('completed_orders');\r",
									"        //get random product from collected completed orders\r",
									"        var random_completed_order  = current_completed_order[Math.floor(Math.random()*current_completed_order.length)];\r",
									"        pm.variables.set(\"current_completed_order_id\", random_completed_order[\"Id\"]);\r",
									"    } else {\r",
									"        pm.variables.set(\"current_completed_order_id\", current_completed_order);\r",
									"    }\r",
									"} catch (err) {\r",
									"    pm.test(request.name, function () {\r",
									"        pm.expect.fail(err.toString());\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript",
								"id": "067d0cdb-35dc-41b4-99ba-04a2c96fcea4"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"properties_map = {};\r",
									"\r",
									"properties_map.Id=function (element) {pm.expect(element.Id).to.match(/[0-9a-fA-F]{8}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{12}/);};\r",
									"\r",
									"properties_map.Status=function (element) {\r",
									"    pm.expect(element.Status).to.be.a(\"string\");\r",
									"    pm.expect(element.Status).to.be.oneOf([\"in_progress\",\"queued\",\"failed\",\"completed\", \"cancelled\"]);\r",
									"};\r",
									"properties_map.StatusMessage=function (element) {\r",
									"    pm.expect(element.StatusMessage).to.be.a(\"string\");\r",
									"    pm.expect(element.StatusMessage).to.be.oneOf([\r",
									"        \"request is under processing\",\r",
									"        \"request is queued\",\r",
									"        \"request product is available\",\r",
									"        \"product currently unavailable\",\r",
									"        \"request cancelled by user\"]);\r",
									"};\r",
									"properties_map.Priority=function (element) {pm.expect(element.Priority).to.be.a(\"number\");}; \r",
									"properties_map.SubmissionDate=function (element) {pm.expect(element.SubmissionDate).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d+([+-][0-2]\\d:[0-5]\\d|Z)/);};\r",
									"properties_map.EstimatedDate=function (element) {pm.expect(element.EstimatedDate).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);};\r",
									"\r",
									"properties_map.OrderSize=function (element) {pm.expect(element.OrderSize).to.be.a(\"number\");};\r",
									"properties_map.CompletedDate=function (element) {pm.expect(element.CompletedDate).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d+([+-][0-2]\\d:[0-5]\\d|Z)/);};\r",
									"properties_map.EvictionDate=function (element) {if(element.EvictionDate){ pm.expect(element.EvictionDate).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d+([+-][0-2]\\d:[0-5]\\d|Z)/); }};\r",
									"\r",
									"function propertySpecific(key, order){\r",
									"    if (properties_map[key]) {\r",
									"        pm.test(\"Test Property \"+key+\" for Order: \" + order.Id, function(){properties_map[key](order)});\r",
									"    }\r",
									"    else {\r",
									"        pm.test.skip(\"Test Property \"+key+\" for Order: \" + order.Id);\r",
									"    }\r",
									"}\r",
									"\r",
									"try {\r",
									"    var jsonDataElements = pm.response.json().value[0];\r",
									"\r",
									"    pm.test(\"Test Response Status Code\", function(){\r",
									"        pm.expect(pm.response.code).to.be.oneOf([200]);\r",
									"    });\r",
									"\r",
									"    pm.test(\"Test OData context\", function(){\r",
									"        pm.expect( pm.response.json()['@odata.context']).to.include(\"$metadata#Orders\");\r",
									"    });\r",
									"\r",
									"    pm.test(\"Response time is less than \" +  environment[\"query-timeout\"] + \"ms\", function(){\r",
									"        pm.expect(pm.response.responseTime).to.be.below(parseInt(environment[\"query-timeout\"]));\r",
									"    });\r",
									"\r",
									"    var order_response = {};\r",
									"\r",
									"    for (const[key, value] of Object.entries(properties_map)){\r",
									"        propertySpecific(key, jsonDataElements);\r",
									"        //filling the collection variable order array\r",
									"        order_response[key] = jsonDataElements[key];\r",
									"        pm.collectionVariables.set(\"current_order_\" + key, jsonDataElements[key]);\r",
									"    }\r",
									"\r",
									"    pm.collectionVariables.set(\"expected_current_order_values\", order_response);\r",
									"    pm.collectionVariables.set(\"order_filter_counter\", 0);\r",
									"\r",
									"} catch (err) {\r",
									"    pm.test(request.name, function () {\r",
									"        pm.expect.fail(err.toString());\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript",
								"id": "b8767bf6-406b-4147-bebd-a3f3d53b06de"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{service-root-uri}}/odata/v1/Orders?$filter=Id eq {{current_completed_order_id}}",
							"host": [
								"{{service-root-uri}}"
							],
							"path": [
								"odata",
								"v1",
								"Orders"
							],
							"query": [
								{
									"key": "$filter",
									"value": "Id eq {{current_completed_order_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Order_Filter_By_OrderSize",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonDataElements = pm.response.json().value;\r",
									"current_tested_filter_key = \"OrderSize\";\r",
									"\r",
									"try {\r",
									"    current_order = jsonDataElements[0];\r",
									"\r",
									"    pm.test(\"Test Response Status Code\", function(){\r",
									"        pm.expect(pm.response.code).to.be.oneOf([200]);\r",
									"    });\r",
									"\r",
									"    pm.test(\"Test OData context\", function(){\r",
									"        pm.expect( pm.response.json()['@odata.context']).to.include(\"$metadata#Orders\");\r",
									"    });\r",
									"\r",
									"    pm.test(\"Response time is less than \" +  environment[\"query-timeout\"] + \"ms\", function(){\r",
									"        pm.expect(pm.response.responseTime).to.be.below(parseInt(environment[\"query-timeout\"]));\r",
									"    });\r",
									"\r",
									"    var expected_order_key_value = parseInt(decodeURIComponent(pm.request.url.getQueryString()).split(\" eq \").pop().replace(/'/g, \"\"));\r",
									"\r",
									"    pm.test(\"Expected Order \" + current_tested_filter_key + \" is: \" + expected_order_key_value, function(){\r",
									"        pm.expect(current_order[current_tested_filter_key]).to.equal(expected_order_key_value);\r",
									"    });\r",
									"\r",
									"} catch (err) {\r",
									"    pm.test(\"Order Filter \" + current_tested_filter_key + \" Test\", function () {\r",
									"        pm.expect.fail(err.toString());\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript",
								"id": "c32771a1-0f01-46c8-a3e5-ed00b5a576e1"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "a8160e12-0cef-4ec6-929c-ed840d014380"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{service-root-uri}}/odata/v1/Orders?$filter=OrderSize eq {{current_order_OrderSize}}",
							"host": [
								"{{service-root-uri}}"
							],
							"path": [
								"odata",
								"v1",
								"Orders"
							],
							"query": [
								{
									"key": "$filter",
									"value": "OrderSize eq {{current_order_OrderSize}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Order_Filter_By_CompletedDate",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonDataElements = pm.response.json().value;\r",
									"current_tested_filter_key = \"CompletedDate\";\r",
									"\r",
									"try {\r",
									"    current_order = jsonDataElements[0];\r",
									"\r",
									"    pm.test(\"Test Response Status Code\", function(){\r",
									"        pm.expect(pm.response.code).to.be.oneOf([200]);\r",
									"    });\r",
									"\r",
									"    pm.test(\"Test OData context\", function(){\r",
									"        pm.expect( pm.response.json()['@odata.context']).to.include(\"$metadata#Orders\");\r",
									"    });\r",
									"\r",
									"    pm.test(\"Response time is less than \" +  environment[\"query-timeout\"] + \"ms\", function(){\r",
									"        pm.expect(pm.response.responseTime).to.be.below(parseInt(environment[\"query-timeout\"]));\r",
									"    });\r",
									"\r",
									"    var expected_order_key_value = decodeURIComponent(pm.request.url.getQueryString()).split(\" eq \").pop().replace(/'/g, \"\");\r",
									"\r",
									"    console.log(expected_order_key_value);\r",
									"\r",
									"    pm.test(\"Expected Order \" + current_tested_filter_key + \" is: \" + expected_order_key_value, function(){\r",
									"        pm.expect(current_order[current_tested_filter_key]).to.equal(expected_order_key_value);\r",
									"    });\r",
									"\r",
									"} catch (err) {\r",
									"    pm.test(\"Order Filter \" + current_tested_filter_key + \" Test\", function () {\r",
									"        pm.expect.fail(err.toString());\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript",
								"id": "5466796d-794e-4555-a88d-d43ef2cf81c6"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "e4bdc1b5-a2be-4f87-a214-65a91e9f7490"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{service-root-uri}}/odata/v1/Orders?$filter=CompletedDate eq {{current_order_CompletedDate}}",
							"host": [
								"{{service-root-uri}}"
							],
							"path": [
								"odata",
								"v1",
								"Orders"
							],
							"query": [
								{
									"key": "$filter",
									"value": "CompletedDate eq {{current_order_CompletedDate}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Order_Filter_By_EvictionDate",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonDataElements = pm.response.json().value;\r",
									"current_tested_filter_key = \"EvictionDate\";\r",
									"\r",
									"try {\r",
									"    current_order = jsonDataElements[0];\r",
									"\r",
									"    pm.test(\"Test Response Status Code\", function(){\r",
									"        pm.expect(pm.response.code).to.be.oneOf([200]);\r",
									"    });\r",
									"\r",
									"    pm.test(\"Test OData context\", function(){\r",
									"        pm.expect( pm.response.json()['@odata.context']).to.include(\"$metadata#Orders\");\r",
									"    });\r",
									"\r",
									"    pm.test(\"Response time is less than \" +  environment[\"query-timeout\"] + \"ms\", function(){\r",
									"        pm.expect(pm.response.responseTime).to.be.below(parseInt(environment[\"query-timeout\"]));\r",
									"    });\r",
									"\r",
									"    var expected_order_key_value = decodeURIComponent(pm.request.url.getQueryString()).split(\" eq \").pop().replace(/'/g, \"\");\r",
									"\r",
									"    pm.test(\"Expected Order \" + current_tested_filter_key + \" is: \" + expected_order_key_value, function(){\r",
									"        pm.expect(current_order[current_tested_filter_key]).to.equal(expected_order_key_value);\r",
									"    });\r",
									"\r",
									"} catch (err) {\r",
									"    pm.test(\"Order Filter \" + current_tested_filter_key + \" Test\", function () {\r",
									"        pm.expect.fail(err.toString());\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript",
								"id": "ff69b0eb-24ec-4867-a8a0-811df699c5c4"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "cddf57c7-3ae6-4849-b71e-669a5b43c568"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{service-root-uri}}/odata/v1/Orders?$filter=EvictionDate eq {{current_order_EvictionDate}}",
							"host": [
								"{{service-root-uri}}"
							],
							"path": [
								"odata",
								"v1",
								"Orders"
							],
							"query": [
								{
									"key": "$filter",
									"value": "EvictionDate eq {{current_order_EvictionDate}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get_Online_Product_By_Order_Navigation",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"try {\r",
									"    var current_completed_order = decodeURIComponent(pm.request.url.getPathWithQuery()).split(\"/odata/v1/Orders(\")[1].split(\")/Product\")[0];\r",
									"    pm.variables.unset(\"current_completed_order_id\");\r",
									"    if(current_completed_order == \"{{current_completed_order_id}}\"){\r",
									"        current_completed_order = pm.collectionVariables.get('completed_orders');\r",
									"        //get random product from collected completed orders\r",
									"        var random_completed_order  = current_completed_order[Math.floor(Math.random()*current_completed_order.length)];\r",
									"        pm.variables.set(\"current_completed_order_id\", random_completed_order[\"Id\"]);\r",
									"    } else {\r",
									"        pm.variables.set(\"current_completed_order_id\", current_completed_order);\r",
									"    }\r",
									"} catch (err) {\r",
									"    pm.test(request.name, function () {\r",
									"        pm.expect.fail(err.toString());\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript",
								"id": "6988cc4c-ad74-41f3-a11f-dabb1b5cc975"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"try {\r",
									"    var jsonDataElements = pm.response.json();\r",
									"\r",
									"    console.log(jsonDataElements[\"Online\"]);\r",
									"\r",
									"    pm.test(\"Test Response Status Code\", function(){\r",
									"        pm.expect(pm.response.code).to.be.oneOf([200]);\r",
									"    });\r",
									"\r",
									"    pm.test(\"Test OData context\", function(){\r",
									"        pm.expect( pm.response.json()['@odata.context']).to.include(\"$metadata#OData.CSC.Product\");\r",
									"    });\r",
									"\r",
									"    pm.test(\"Response time is less than \" +  environment[\"query-timeout\"] + \"ms\", function(){\r",
									"        pm.expect(pm.response.responseTime).to.be.below(parseInt(environment[\"query-timeout\"]));\r",
									"    });\r",
									"\r",
									"    pm.test(\"Product Property Online\", function(){\r",
									"        pm.expect(jsonDataElements[\"Online\"]).be.equal(true);\r",
									"    });\r",
									"\r",
									"    pm.collectionVariables.set('current_online_product_id', jsonDataElements[\"Id\"]);\r",
									"\r",
									"} catch (err) {\r",
									"    pm.test(request.name, function () {\r",
									"        pm.expect.fail(err.toString());\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript",
								"id": "12d6cc3c-f303-47f2-90ba-976c494b4d20"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{service-root-uri}}/odata/v1/Orders({{current_completed_order_id}})/Product",
							"host": [
								"{{service-root-uri}}"
							],
							"path": [
								"odata",
								"v1",
								"Orders({{current_completed_order_id}})",
								"Product"
							]
						}
					},
					"response": []
				},
				{
					"name": "Product_Download_By_Order_Navigation",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"try {\r",
									"\r",
									"    var current_completed_order = decodeURIComponent(pm.request.url.getPathWithQuery()).split(\"/odata/v1/Orders(\")[1].split(\")/Product/$value\")[0];\r",
									"    \r",
									"    pm.variables.unset(\"current_completed_order_id\");\r",
									"    if(current_completed_order == \"{{current_completed_order_id}}\"){\r",
									"        current_completed_order = pm.collectionVariables.get('completed_orders');\r",
									"        //get random product from collected completed orders\r",
									"        var random_completed_order  = current_completed_order[Math.floor(Math.random()*current_completed_order.length)];\r",
									"        pm.variables.set(\"current_completed_order_id\", random_completed_order[\"Id\"]);\r",
									"    } else {\r",
									"        pm.variables.set(\"current_completed_order_id\", current_completed_order);\r",
									"    }\r",
									"    pm.request.headers.add({key: 'Range', value: 'bytes=0-1023' })\r",
									"\r",
									"} catch (err) {\r",
									"    pm.test(request.name, function () {\r",
									"        pm.expect.fail(err.toString());\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript",
								"id": "402da4eb-8e5b-4c12-9ee3-a6716f3f1577"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"try {\r",
									"\r",
									"    console.log(pm.response);\r",
									"\r",
									"    pm.test(\"Test Response Status Code\", function(){\r",
									"        pm.expect(pm.response.code).to.be.oneOf([200,206,202]);\r",
									"    });\r",
									"\r",
									"    pm.test(\"Response time is less than \" +  environment[\"query-timeout\"] + \"ms\", function(){\r",
									"        pm.expect(pm.response.responseTime).to.be.below(parseInt(environment[\"query-timeout\"]));\r",
									"    });\r",
									"\r",
									"    pm.test(\"Downloaded Size\", function(){\r",
									"        pm.expect(pm.response.responseSize).be.equal(1024);\r",
									"    });\r",
									"\r",
									"} catch (err) {\r",
									"    pm.test(request.name, function () {\r",
									"        pm.expect.fail(err.toString());\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript",
								"id": "75036b7c-1b4a-4630-824b-401298b8273c"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{service-root-uri}}/odata/v1/Orders({{current_completed_order_id}})/Product/$value",
							"host": [
								"{{service-root-uri}}"
							],
							"path": [
								"odata",
								"v1",
								"Orders({{current_completed_order_id}})",
								"Product",
								"$value"
							]
						}
					},
					"response": []
				},
				{
					"name": "Product_Download_By_Product_Navigation",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"try {\r",
									"    pm.request.headers.add({key: 'Range', value: 'bytes=0-1023' })\r",
									"} catch (err) {\r",
									"    pm.test(request.name, function () {\r",
									"        pm.expect.fail(err.toString());\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript",
								"id": "97fa888f-dbb9-4a37-ac00-6d93be42f1f8"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"try {\r",
									"\r",
									"    console.log(pm.response);\r",
									"\r",
									"    pm.test(\"Test Response Status Code\", function(){\r",
									"        pm.expect(pm.response.code).to.be.oneOf([200,206,202]);\r",
									"    });\r",
									"\r",
									"    pm.test(\"Response time is less than \" +  environment[\"query-timeout\"] + \"ms\", function(){\r",
									"        pm.expect(pm.response.responseTime).to.be.below(parseInt(environment[\"query-timeout\"]));\r",
									"    });\r",
									"\r",
									"    pm.test(\"Downloaded Size\", function(){\r",
									"        pm.expect(pm.response.responseSize).be.equal(1024);\r",
									"    });\r",
									"\r",
									"} catch (err) {\r",
									"    pm.test(request.name, function () {\r",
									"        pm.expect.fail(err.toString());\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript",
								"id": "382e633d-7bdc-45ee-9da2-bda8741c9ded"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{service-root-uri}}/odata/v1/Products({{current_online_product_id}})/$value",
							"host": [
								"{{service-root-uri}}"
							],
							"path": [
								"odata",
								"v1",
								"Products({{current_online_product_id}})",
								"$value"
							]
						}
					},
					"response": []
				},
				{
					"name": "Order_Cancel",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "05bc3c16-0325-4c0b-aa3a-64c87c864205"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"properties_map = {};\r",
									"\r",
									"properties_map.Id=function (element) {pm.expect(element.Id).to.match(/[0-9a-fA-F]{8}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{12}/);};\r",
									"\r",
									"properties_map.Status=function (element) {\r",
									"    pm.expect(element.Status).to.be.a(\"string\");\r",
									"    pm.expect(element.Status).to.be.oneOf([\"cancelled\"]);\r",
									"};\r",
									"properties_map.StatusMessage=function (element) {\r",
									"    pm.expect(element.StatusMessage).to.be.a(\"string\");\r",
									"    pm.expect(element.StatusMessage).to.be.oneOf([\"request cancelled by user\"]);\r",
									"};\r",
									"properties_map.Priority=function (element) {pm.expect(element.Priority).to.be.a(\"number\");}; \r",
									"properties_map.SubmissionDate=function (element) {pm.expect(element.SubmissionDate).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d+([+-][0-2]\\d:[0-5]\\d|Z)/);};\r",
									"properties_map.EstimatedDate=function (element) {pm.expect(element.EstimatedDate).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);};\r",
									"\r",
									"properties_map.OrderSize=function (element) {pm.expect(element.OrderSize).to.be.equal(0);};\r",
									"properties_map.CompletedDate=function (element) {pm.expect(element.CompletedDate).to.be.equal(null);};\r",
									"properties_map.EvictionDate=function (element) {if(element.EvictionDate){ pm.expect(element.EvictionDate).to.be.equal(null); }};\r",
									"\r",
									"function propertySpecific(key, order){\r",
									"    if (properties_map[key]) {\r",
									"        pm.test(\"Test Property \"+key+\" for Order: \" + order.Id, function(){properties_map[key](order)});\r",
									"    }\r",
									"    else {\r",
									"        pm.test.skip(\"Test Property \"+key+\" for Order: \" + order.Id);\r",
									"    }\r",
									"}\r",
									"\r",
									"try {\r",
									"    var jsonDataElements = pm.response.json();\r",
									"\r",
									"    pm.test(\"Test Response Status Code\", function(){\r",
									"        pm.expect(pm.response.code).to.be.oneOf([200]);\r",
									"    });\r",
									"\r",
									"    pm.test(\"Test OData context\", function(){\r",
									"        pm.expect( pm.response.json()['@odata.context']).to.include(\"$metadata#OData.CSC.Order\");\r",
									"    });\r",
									"\r",
									"    pm.test(\"Response time is less than \" +  environment[\"query-timeout\"] + \"ms\", function(){\r",
									"        pm.expect(pm.response.responseTime).to.be.below(parseInt(environment[\"query-timeout\"]));\r",
									"    });\r",
									"\r",
									"    for (const[key, value] of Object.entries(properties_map)){\r",
									"        propertySpecific(key, jsonDataElements);\r",
									"    }\r",
									"\r",
									"\r",
									"} catch (err) {\r",
									"    pm.test(request.name, function () {\r",
									"        pm.expect.fail(err.toString());\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript",
								"id": "fe2689a5-44c8-457c-9ef6-3b506ca0cfe8"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{service-root-uri}}/odata/v1/Orders({{current_order_Id}})/OData.CSC.Cancel",
							"host": [
								"{{service-root-uri}}"
							],
							"path": [
								"odata",
								"v1",
								"Orders({{current_order_Id}})",
								"OData.CSC.Cancel"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Bulks_BatchOrders",
			"item": [
				{
					"name": "BulkCreateMinParams",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"properties_map = {};\r",
									"properties_map.Id=function (element) {pm.expect(element.Id).to.match(/[0-9a-fA-F]{8}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{12}/);};\r",
									"properties_map.Status=function (element) {\r",
									"    pm.expect(element.Status).to.be.a(\"string\");\r",
									"    pm.expect(element.Status).to.be.oneOf([\"created\"]);\r",
									"};\r",
									"properties_map.StatusMessage=function (element) {\r",
									"    pm.expect(element.StatusMessage).to.be.a(\"string\");\r",
									"    pm.expect(element.StatusMessage).to.be.oneOf([\"Bulk has been created but no BatchOrders have been triggered\"]);\r",
									"};\r",
									"properties_map.FilterParam=function (element) {\r",
									"    pm.expect(element.FilterParam).to.be.a(\"string\");\r",
									"};\r",
									"properties_map.SubmissionDate=function (element) {pm.expect(element.SubmissionDate).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d+([+-][0-2]\\d:[0-5]\\d|Z)/);};\r",
									"\r",
									"properties_map.BatchsizeProducts=function (element) {\r",
									"    pm.expect(element.BatchsizeProducts).to.be.a(\"number\");\r",
									"};\r",
									"properties_map.BatchsizeVolume=function (element) {\r",
									"    pm.expect(element.BatchsizeVolume).to.be.a(\"number\");\r",
									"};\r",
									"properties_map.NotificationEndpoint=function (element) {\r",
									"    if(element.NotificationEndpoint){\r",
									"        pm.expect(element.NotificationEndpoint).to.be.equal(null);\r",
									"    }\r",
									"};\r",
									"properties_map.OrderbyParam=function (element) {\r",
									"    if(element.OrderbyParam){\r",
									"        pm.expect(element.OrderbyParam).to.be.equal(null);\r",
									"    }\r",
									"};\r",
									"\r",
									"\r",
									"function propertySpecific(key, order){\r",
									"    if (properties_map[key]) {\r",
									"        pm.test(\"Test Property \"+key+\" for Bulk: \" + order.Id, function(){properties_map[key](order)});\r",
									"    }\r",
									"    else {\r",
									"        pm.test.skip(\"Test Property \"+key+\" for Bulk: \" + order.Id);\r",
									"    }\r",
									"}\r",
									"\r",
									"try {\r",
									"    var jsonDataElements = pm.response.json().value[0];\r",
									"\r",
									"    pm.test(\"Test Response Status Code\", function(){\r",
									"        pm.expect(pm.response.code).to.be.oneOf([201,202]);\r",
									"    });\r",
									"\r",
									"    pm.test(\"Test OData context\", function(){\r",
									"        pm.expect( pm.response.json()['@odata.context']).to.include(\"$metadata#OData.CSC.Bulk\");\r",
									"    });\r",
									"\r",
									"    pm.test(\"Response time is less than \" +  environment[\"query-timeout\"] + \"ms\", function(){\r",
									"        pm.expect(pm.response.responseTime).to.be.below(parseInt(environment[\"query-timeout\"]));\r",
									"    });\r",
									"\r",
									"    var order_response = {};\r",
									"\r",
									"    for (const[key, value] of Object.entries(properties_map)){\r",
									"        propertySpecific(key, jsonDataElements);\r",
									"        //filling the collection variable order array\r",
									"        order_response[key] = jsonDataElements[key];\r",
									"        pm.collectionVariables.set(\"current_order_\" + key, jsonDataElements[key]);\r",
									"    }\r",
									"\r",
									"    pm.collectionVariables.set('bulk_id', jsonDataElements['Id']);\r",
									"    pm.collectionVariables.set('bulk_batchsize_products', jsonDataElements['BatchsizeProducts']);\r",
									"    pm.collectionVariables.set('current_batch_filter_param', JSON.parse(request.data)[\"FilterParam\"].split(\"$filter=\")[1]);\r",
									"}\r",
									"catch (err) {\r",
									"    pm.test(request.name, function () {\r",
									"        pm.expect.fail(err.toString());\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript",
								"id": "00c75ba9-18ad-438e-bc34-caf5a2d86a9e"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"@odata.context\": \"$metadata#Bulk/$entity\",\r\n\"FilterParam\": \"Products?$filter=contains(Name,'S')\"\r\n} ",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{service-root-uri}}/odata/v1/Bulks",
							"host": [
								"{{service-root-uri}}"
							],
							"path": [
								"odata",
								"v1",
								"Bulks"
							]
						}
					},
					"response": []
				},
				{
					"name": "BulkCreateMaxParams",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"properties_map = {};\r",
									"properties_map.Id=function (element) {pm.expect(element.Id).to.match(/[0-9a-fA-F]{8}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{12}/);};\r",
									"properties_map.Status=function (element) {\r",
									"    pm.expect(element.Status).to.be.a(\"string\");\r",
									"    pm.expect(element.Status).to.be.oneOf([\"created\"]);\r",
									"};\r",
									"properties_map.StatusMessage=function (element) {\r",
									"    pm.expect(element.StatusMessage).to.be.a(\"string\");\r",
									"    pm.expect(element.StatusMessage).to.be.oneOf([\"Bulk has been created but no BatchOrders have been triggered\"]);\r",
									"};\r",
									"properties_map.FilterParam=function (element) {\r",
									"    pm.expect(element.FilterParam).to.be.a(\"string\");\r",
									"    pm.expect(element.FilterParam).to.be.not.equal(null);\r",
									"};\r",
									"properties_map.SubmissionDate=function (element) {pm.expect(element.SubmissionDate).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d+([+-][0-2]\\d:[0-5]\\d|Z)/);};\r",
									"\r",
									"properties_map.BatchsizeProducts=function (element) {\r",
									"    pm.expect(element.BatchsizeProducts).to.be.a(\"number\");\r",
									"};\r",
									"properties_map.BatchsizeVolume=function (element) {\r",
									"    pm.expect(element.BatchsizeVolume).to.be.a(\"number\");\r",
									"};\r",
									"properties_map.NotificationEndpoint=function (element) {\r",
									"    if(element.NotificationEndpoint){\r",
									"        pm.expect(element.NotificationEndpoint).to.be.a(\"string\");\r",
									"    }\r",
									"};\r",
									"properties_map.OrderbyParam=function (element) {\r",
									"    if(element.OrderbyParam){\r",
									"        pm.expect(element.OrderbyParam).to.be.a(\"string\");   \r",
									"    }\r",
									"};\r",
									"\r",
									"\r",
									"function propertySpecific(key, order){\r",
									"    if (properties_map[key]) {\r",
									"        pm.test(\"Test Property \"+key+\" for Bulk: \" + order.Id, function(){properties_map[key](order)});\r",
									"    }\r",
									"    else {\r",
									"        pm.test.skip(\"Test Property \"+key+\" for Bulk: \" + order.Id);\r",
									"    }\r",
									"}\r",
									"\r",
									"try {\r",
									"    var jsonDataElements = pm.response.json().value[0];\r",
									"\r",
									"    pm.test(\"Test Response Status Code\", function(){\r",
									"        pm.expect(pm.response.code).to.be.oneOf([201,202]);\r",
									"    });\r",
									"\r",
									"    pm.test(\"Test OData context\", function(){\r",
									"        pm.expect( pm.response.json()['@odata.context']).to.include(\"$metadata#OData.CSC.Bulk\");\r",
									"    });\r",
									"\r",
									"    pm.test(\"Response time is less than \" +  environment[\"query-timeout\"] + \"ms\", function(){\r",
									"        pm.expect(pm.response.responseTime).to.be.below(parseInt(environment[\"query-timeout\"]));\r",
									"    });\r",
									"\r",
									"    var order_response = {};\r",
									"\r",
									"    for (const[key, value] of Object.entries(properties_map)){\r",
									"        propertySpecific(key, jsonDataElements);\r",
									"        //filling the collection variable order array\r",
									"        order_response[key] = jsonDataElements[key];\r",
									"        pm.collectionVariables.set(\"current_order_\" + key, jsonDataElements[key]);\r",
									"    }\r",
									"\r",
									"    pm.collectionVariables.set('bulk_id', jsonDataElements['Id']);\r",
									"    pm.collectionVariables.set('bulk_batchsize_products', jsonDataElements['BatchsizeProducts']);\r",
									"\r",
									"    pm.collectionVariables.set('current_batch_filter_param', JSON.parse(request.data)[\"FilterParam\"].split(\"$filter=\")[1]);\r",
									"}\r",
									"catch (err) {\r",
									"    pm.test(request.name, function () {\r",
									"        pm.expect.fail(err.toString());\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript",
								"id": "8be1d2cf-b010-48b9-862e-a923ec2c7841"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "2df676bc-8a75-4569-8c9b-ad3c6b95020c"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"@odata.context\": \"$metadata#Bulk/$entity\",\r\n\"FilterParam\": \"Products?$filter=contains(Name,'S2A')\",\r\n\"BatchsizeProducts\": 50,\r\n\"BatchsizeVolume\": 50,\r\n\"OrderbyParam\": \"Name asc\"\r\n} ",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{service-root-uri}}/odata/v1/Bulks",
							"host": [
								"{{service-root-uri}}"
							],
							"path": [
								"odata",
								"v1",
								"Bulks"
							]
						}
					},
					"response": []
				},
				{
					"name": "BulkDetails",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"properties_map = {};\r",
									"properties_map.Id=function (element) {pm.expect(element.Id).to.match(/[0-9a-fA-F]{8}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{12}/);};\r",
									"properties_map.Status=function (element) {\r",
									"    pm.expect(element.Status).to.be.a(\"string\");\r",
									"    pm.expect(element.Status).to.be.oneOf([\"created\", \"in_progress\", \"completed\", \"failed\", \"cancelled\"]);\r",
									"};\r",
									"properties_map.StatusMessage=function (element) {\r",
									"    pm.expect(element.StatusMessage).to.be.a(\"string\");\r",
									"    switch(element.Status){\r",
									"        case \"created\":\r",
									"            pm.expect(element.StatusMessage).to.be.oneOf([\"Bulk has been created but no BatchOrders have been triggered\"]);\r",
									"            break;\r",
									"        case \"in_progress\":\r",
									"            pm.expect(element.StatusMessage).to.be.oneOf([\"One or more BatchOrders are under processing\"]);\r",
									"            break;\r",
									"        case \"completed\":\r",
									"            pm.expect(element.StatusMessage).to.be.oneOf([\"requested products of all BatchOrders comprising the Bulk are in status 'completed'\"]);\r",
									"            break;\r",
									"        case \"cancelled\":\r",
									"            pm.expect(element.StatusMessage).to.be.oneOf([\"Bulk cancelled by user\"]);\r",
									"            break;\r",
									"        case \"failed\":\r",
									"            pm.expect(element.StatusMessage).to.be.oneOf([\"at least one product retrieval has failed\", \"at least one product currently unavailable\", \"at least one product not found on LTA\"]);\r",
									"            break;\r",
									"    }\r",
									"};\r",
									"properties_map.FilterParam=function (element) {\r",
									"    pm.expect(element.FilterParam).to.be.a(\"string\");\r",
									"};\r",
									"properties_map.SubmissionDate=function (element) {\r",
									"    pm.expect(element.SubmissionDate).to.be.a(\"string\");\r",
									"    pm.expect(element.SubmissionDate).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d+([+-][0-2]\\d:[0-5]\\d|Z)/);\r",
									"};\r",
									"properties_map.BatchsizeProducts=function (element) {\r",
									"    pm.expect(element.BatchsizeProducts).to.be.a(\"number\");\r",
									"};\r",
									"properties_map.BatchsizeVolume=function (element) {\r",
									"    pm.expect(element.BatchsizeVolume).to.be.a(\"number\");\r",
									"};\r",
									"properties_map.NotificationEndpoint=function (element) {\r",
									"    if(element.NotificationEndpoint){\r",
									"        if(typeof(element.NotificationEndpoint)==\"string\"){\r",
									"            pm.expect(element.NotificationEndpoint).to.be.a(\"string\");\r",
									"        } else pm.expect(element.NotificationEndpoint).to.be.equal(null);\r",
									"    }\r",
									"};\r",
									"properties_map.OrderbyParam=function (element) {\r",
									"    if(element.OrderbyParam){\r",
									"        if(typeof(element.OrderbyParam)==\"string\"){\r",
									"            pm.expect(element.OrderbyParam).to.be.a(\"string\");\r",
									"        } else pm.expect(element.OrderbyParam).to.be.equal(null);\r",
									"    }\r",
									"\r",
									"};\r",
									"properties_map.CompletedDate=function (element) {\r",
									"    if(element.CompletedDate){\r",
									"        switch(element.Status){\r",
									"            case \"completed\":\r",
									"                pm.expect(element.CompletedDate).to.be.a(\"string\");\r",
									"                pm.expect(element.CompletedDate).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d+([+-][0-2]\\d:[0-5]\\d|Z)/);\r",
									"                break;\r",
									"            default:\r",
									"                if(element.CompletedDate){\r",
									"                    pm.expect(element.CompletedDate).to.be.equal(null)\r",
									"                }     \r",
									"        }\r",
									"    }\r",
									"};\r",
									"\r",
									"function propertySpecific(key, order){\r",
									"    if (properties_map[key]) {\r",
									"        pm.test(\"Test Property \"+key+\" for Bulk: \" + order.Id, function(){properties_map[key](order)});\r",
									"    }\r",
									"    else {\r",
									"        pm.test.skip(\"Test Property \"+key+\" for Bulk: \" + order.Id);\r",
									"    }\r",
									"}\r",
									"\r",
									"try {\r",
									"    var jsonDataElements = pm.response.json().value;\r",
									"\r",
									"    pm.test(\"Test Response Status Code\", function(){\r",
									"        pm.expect(pm.response.code).to.be.oneOf([200]);\r",
									"    });\r",
									"\r",
									"    pm.test(\"Test OData context\", function(){\r",
									"        pm.expect( pm.response.json()['@odata.context']).to.include(\"metadata#Bulks\");\r",
									"    });\r",
									"\r",
									"    pm.test(\"Response time is less than \" +  environment[\"query-timeout\"] + \"ms\", function(){\r",
									"        pm.expect(pm.response.responseTime).to.be.below(parseInt(environment[\"query-timeout\"]));\r",
									"    });\r",
									"\r",
									"    for(bulk of jsonDataElements){\r",
									"        for (const[key, value] of Object.entries(properties_map)){\r",
									"            propertySpecific(key, bulk);\r",
									"        }\r",
									"    }\r",
									"}\r",
									"catch (err) {\r",
									"    pm.test(request.name, function () {\r",
									"        pm.expect.fail(err.toString());\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript",
								"id": "2cf154c7-95b5-4975-8db3-b5c774af699f"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "30f26905-6a68-4034-b1a6-49d686ea3177"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{service-root-uri}}/odata/v1/Bulks({{bulk_id}})",
							"host": [
								"{{service-root-uri}}"
							],
							"path": [
								"odata",
								"v1",
								"Bulks({{bulk_id}})"
							]
						}
					},
					"response": []
				},
				{
					"name": "BulkFilter_by_Status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"properties_map = {};\r",
									"properties_map.Id=function (element) {pm.expect(element.Id).to.match(/[0-9a-fA-F]{8}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{12}/);};\r",
									"properties_map.Status=function (element) {\r",
									"    pm.expect(element.Status).to.be.a(\"string\");\r",
									"    pm.expect(element.Status).to.be.oneOf([\"created\", \"in_progress\", \"completed\", \"failed\", \"cancelled\"]);\r",
									"};\r",
									"properties_map.StatusMessage=function (element) {\r",
									"    pm.expect(element.StatusMessage).to.be.a(\"string\");\r",
									"    switch(element.Status){\r",
									"        case \"created\":\r",
									"            pm.expect(element.StatusMessage).to.be.oneOf([\"Bulk has been created but no BatchOrders have been triggered\"]);\r",
									"            break;\r",
									"        case \"in_progress\":\r",
									"            pm.expect(element.StatusMessage).to.be.oneOf([\"One or more BatchOrders are under processing\"]);\r",
									"            break;\r",
									"        case \"completed\":\r",
									"            pm.expect(element.StatusMessage).to.be.oneOf([\"requested products of all BatchOrders comprising the Bulk are in status 'completed'\"]);\r",
									"            break;\r",
									"        case \"cancelled\":\r",
									"            pm.expect(element.StatusMessage).to.be.oneOf([\"Bulk cancelled by user\"]);\r",
									"            break;\r",
									"        case \"failed\":\r",
									"            pm.expect(element.StatusMessage).to.be.oneOf([\"at least one product retrieval has failed\", \"at least one product currently unavailable\", \"at least one product not found on LTA\"]);\r",
									"            break;\r",
									"    }\r",
									"};\r",
									"properties_map.FilterParam=function (element) {\r",
									"    pm.expect(element.FilterParam).to.be.a(\"string\");\r",
									"};\r",
									"properties_map.SubmissionDate=function (element) {\r",
									"    pm.expect(element.SubmissionDate).to.be.a(\"string\");\r",
									"    pm.expect(element.SubmissionDate).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d+([+-][0-2]\\d:[0-5]\\d|Z)/);\r",
									"};\r",
									"properties_map.BatchsizeProducts=function (element) {\r",
									"    pm.expect(element.BatchsizeProducts).to.be.a(\"number\");\r",
									"};\r",
									"properties_map.BatchsizeVolume=function (element) {\r",
									"    pm.expect(element.BatchsizeVolume).to.be.a(\"number\");\r",
									"};\r",
									"properties_map.NotificationEndpoint=function (element) {\r",
									"    if(element.NotificationEndpoint){\r",
									"        if(typeof(element.NotificationEndpoint)==\"string\"){\r",
									"            pm.expect(element.NotificationEndpoint).to.be.a(\"string\");\r",
									"        } else pm.expect(element.NotificationEndpoint).to.be.equal(null);\r",
									"    }\r",
									"};\r",
									"properties_map.OrderbyParam=function (element) {\r",
									"    if(element.OrderbyParam){\r",
									"        if(typeof(element.OrderbyParam)==\"string\"){\r",
									"            pm.expect(element.OrderbyParam).to.be.a(\"string\");\r",
									"        } else pm.expect(element.OrderbyParam).to.be.equal(null);\r",
									"    }\r",
									"\r",
									"};\r",
									"properties_map.CompletedDate=function (element) {\r",
									"    if(element.CompletedDate){\r",
									"        switch(element.Status){\r",
									"            case \"completed\":\r",
									"                pm.expect(element.CompletedDate).to.be.a(\"string\");\r",
									"                pm.expect(element.CompletedDate).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d+([+-][0-2]\\d:[0-5]\\d|Z)/);\r",
									"                break;\r",
									"            default:\r",
									"                if(element.CompletedDate){\r",
									"                    pm.expect(element.CompletedDate).to.be.equal(null)\r",
									"                }     \r",
									"        }\r",
									"    }\r",
									"};\r",
									"\r",
									"function propertySpecific(key, order){\r",
									"    if (properties_map[key]) {\r",
									"        pm.test(\"Test Property \"+key+\" for Bulk: \" + order.Id, function(){properties_map[key](order)});\r",
									"    }\r",
									"    else {\r",
									"        pm.test.skip(\"Test Property \"+key+\" for Bulk: \" + order.Id);\r",
									"    }\r",
									"}\r",
									"\r",
									"try {\r",
									"    var jsonDataElements = pm.response.json().value;\r",
									"\r",
									"    pm.test(\"Test Response Status Code\", function(){\r",
									"        pm.expect(pm.response.code).to.be.oneOf([200]);\r",
									"    });\r",
									"\r",
									"    pm.test(\"Test OData context\", function(){\r",
									"        pm.expect( pm.response.json()['@odata.context']).to.include(\"metadata#Bulks\");\r",
									"    });\r",
									"\r",
									"    pm.test(\"Response time is less than \" +  environment[\"query-timeout\"] + \"ms\", function(){\r",
									"        pm.expect(pm.response.responseTime).to.be.below(parseInt(environment[\"query-timeout\"]));\r",
									"    });\r",
									"\r",
									"    for(bulk of jsonDataElements){\r",
									"        for (const[key, value] of Object.entries(properties_map)){\r",
									"            propertySpecific(key, bulk);\r",
									"        }\r",
									"    }\r",
									"}\r",
									"catch (err) {\r",
									"    pm.test(request.name, function () {\r",
									"        pm.expect.fail(err.toString());\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript",
								"id": "4587c237-abc0-42cb-a193-577a4baa0000"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "496601f8-2d0e-4a65-abc3-cb2072623ecf"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{service-root-uri}}/odata/v1/Bulks?$filter=Status eq OData.CSC.JobStatus'created'",
							"host": [
								"{{service-root-uri}}"
							],
							"path": [
								"odata",
								"v1",
								"Bulks"
							],
							"query": [
								{
									"key": "$filter",
									"value": "Status eq OData.CSC.JobStatus'created'"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "BatchOrdersViaBulk",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"properties_map = {};\r",
									"properties_map.Id=function (element) {pm.expect(element.Id).to.match(/[0-9a-fA-F]{8}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{12}/);};\r",
									"properties_map.Status=function (element) {\r",
									"    pm.expect(element.Status).to.be.a(\"string\");\r",
									"    pm.expect(element.Status).to.be.oneOf([\"queued\", \"in_progress\", \"completed\", \"failed\", \"cancelled\"]);\r",
									"};\r",
									"properties_map.StatusMessage=function (element) {\r",
									"    pm.expect(element.StatusMessage).to.be.a(\"string\");\r",
									"    switch(element.Status){\r",
									"        case \"queued\":\r",
									"            pm.expect(element.StatusMessage).to.be.oneOf([\"BatchOrder request is queued\"]);\r",
									"            break;\r",
									"        case \"in_progress\":\r",
									"            pm.expect(element.StatusMessage).to.be.oneOf([\"BatchOrder is under processing\"]);\r",
									"            break;\r",
									"        case \"completed\":\r",
									"            pm.expect(element.StatusMessage).to.be.oneOf([\"requested products of BatchOrder are available\"]);\r",
									"            break;\r",
									"        case \"cancelled\":\r",
									"            pm.expect(element.StatusMessage).to.be.oneOf([\"BatchOrder cancelled by user\"]);\r",
									"            break;\r",
									"        case \"failed\":\r",
									"            pm.expect(element.StatusMessage).to.be.oneOf([\"at least one product retrieval has failed\", \"at least one product currently unavailable\", \"at least one product not found on LTA\"]);\r",
									"            break;\r",
									"    }\r",
									"};\r",
									"properties_map.CompletedDate=function (element) {\r",
									"    switch(element.Status){\r",
									"        case \"completed\":\r",
									"            pm.expect(element.CompletedDate).to.be.a(\"string\");\r",
									"            pm.expect(element.CompletedDate).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d+([+-][0-2]\\d:[0-5]\\d|Z)/);\r",
									"            break;\r",
									"        default:\r",
									"            if(element.CompletedDate){\r",
									"                pm.expect(element.CompletedDate).to.be.equal(null)\r",
									"            }\r",
									"    }\r",
									"};\r",
									"properties_map.SubmissionDate=function (element) {\r",
									"    switch(element.Status){\r",
									"        case \"queued\":\r",
									"            if(element.SubmissionDate){\r",
									"                pm.expect(element.SubmissionDate).to.be.oneOf([null]);\r",
									"            }\r",
									"            break;\r",
									"        case \"in_progress\", \"completed\":\r",
									"            pm.expect(element.SubmissionDate).to.be.a(\"string\");\r",
									"            pm.expect(element.SubmissionDate).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d+([+-][0-2]\\d:[0-5]\\d|Z)/);\r",
									"            break;\r",
									"        case \"cancelled\", \"failed\":\r",
									"            if(typeof(element.SubmissionDate)==\"string\"){\r",
									"                pm.expect(element.SubmissionDate).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d+([+-][0-2]\\d:[0-5]\\d|Z)/);\r",
									"            } else pm.expect(element.SubmissionDate).to.be.oneOf([null]);\r",
									"            break;\r",
									"    }\r",
									"};\r",
									"properties_map.EstimatedDate=function (element) {\r",
									"    switch(element.Status){\r",
									"        case \"queued\":\r",
									"            if(element.EstimatedDate){\r",
									"                pm.expect(element.EstimatedDate).to.be.oneOf([null]);\r",
									"            }\r",
									"            break;\r",
									"        case \"in_progress\", \"completed\":\r",
									"            pm.expect(element.EstimatedDate).to.be.a(\"string\");\r",
									"            pm.expect(element.EstimatedDate).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d+([+-][0-2]\\d:[0-5]\\d|Z)/);\r",
									"            break;\r",
									"        case \"cancelled\", \"failed\":\r",
									"            if(typeof(element.EstimatedDate)==\"string\"){\r",
									"                pm.expect(element.EstimatedDate).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d+([+-][0-2]\\d:[0-5]\\d|Z)/);\r",
									"            } else pm.expect(element.EstimatedDate).to.be.oneOf([null]);\r",
									"            break;\r",
									"    }\r",
									"};\r",
									"properties_map.OrderSize=function (element) {\r",
									"    switch(element.Status){\r",
									"        case \"queued\", \"in_progress\", \"cancelled\", \"failed\":\r",
									"            if(element.OrderSize){\r",
									"                pm.expect(element.OrderSize).to.be.oneOf([null]);\r",
									"            }            \r",
									"            break;\r",
									"        case \"completed\":\r",
									"            pm.expect(element.OrderSize).to.be.a(\"number\");\r",
									"            break;\r",
									"    }\r",
									"};\r",
									"properties_map.Priority=function (element) {\r",
									"    pm.expect(element.Priority).to.be.a(\"number\");\r",
									"};\r",
									"\r",
									"function propertySpecific(key, order){\r",
									"    if (properties_map[key]) {\r",
									"        pm.test(\"Test Property \"+key+\" for BatchOrder: \" + order.Id, function(){properties_map[key](order)});\r",
									"    }\r",
									"    else {\r",
									"        pm.test.skip(\"Test Property \"+key+\" for BatchOrder: \" + order.Id);\r",
									"    }\r",
									"}\r",
									"\r",
									"try {\r",
									"    var jsonDataElements = pm.response.json().value;\r",
									"    pm.collectionVariables.set('batch_orders', jsonDataElements);\r",
									"    var random_batch_order = jsonDataElements[Math.floor(Math.random()*jsonDataElements.length)];\r",
									"    pm.collectionVariables.set(\"current_batch_order_id\", random_batch_order[\"Id\"]);\r",
									"\r",
									"    console.log(random_batch_order);\r",
									"\r",
									"    pm.test(\"Test Response Status Code\", function(){\r",
									"        pm.expect(pm.response.code).to.be.oneOf([200]);\r",
									"    });\r",
									"\r",
									"    pm.test(\"Test OData context\", function(){\r",
									"        pm.expect( pm.response.json()['@odata.context']).to.include(\"$metadata#BatchOrder/$entity\");\r",
									"    });\r",
									"\r",
									"    pm.test(\"Response time is less than \" +  environment[\"query-timeout\"] + \"ms\", function(){\r",
									"        pm.expect(pm.response.responseTime).to.be.below(parseInt(environment[\"query-timeout\"]));\r",
									"    });\r",
									"\r",
									"    for (var counter = 0;  counter  < jsonDataElements.length; counter++){\r",
									"        var batch = jsonDataElements[counter];\r",
									"        console.log(\"Processing Batch: \"+batch.Id);\r",
									"        for (const[key, value] of Object.entries(properties_map)){\r",
									"            propertySpecific(key, batch);\r",
									"        }\r",
									"    }\r",
									"}\r",
									"catch (err) {\r",
									"    pm.test(request.name, function () {\r",
									"        pm.expect.fail(err.toString());\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript",
								"id": "14c607ca-e9ae-4a70-a108-6f9ef8b8c79a"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "8043ac46-eaf7-484c-b8f0-16143fafcf6a"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{service-root-uri}}/odata/v1/Bulks({{bulk_id}})/BatchOrders",
							"host": [
								"{{service-root-uri}}"
							],
							"path": [
								"odata",
								"v1",
								"Bulks({{bulk_id}})",
								"BatchOrders"
							]
						}
					},
					"response": []
				},
				{
					"name": "BatchOrderDetailsBeforeTrigger",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"properties_map = {};\r",
									"properties_map.Id=function (element) {pm.expect(element.Id).to.match(/[0-9a-fA-F]{8}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{12}/);};\r",
									"properties_map.Status=function (element) {\r",
									"    pm.expect(element.Status).to.be.a(\"string\");\r",
									"    pm.expect(element.Status).to.be.oneOf([\"queued\"]);\r",
									"};\r",
									"properties_map.StatusMessage=function (element) {\r",
									"    pm.expect(element.StatusMessage).to.be.a(\"string\");\r",
									"    pm.expect(element.StatusMessage).to.be.oneOf([\"BatchOrder request is queued\"]);\r",
									"};\r",
									"properties_map.CompletedDate=function (element) {\r",
									"    pm.expect(element.CompletedDate).to.be.equal(null);\r",
									"};\r",
									"properties_map.SubmissionDate=function (element) {\r",
									"    pm.expect(element.SubmissionDate).to.be.equal(null);\r",
									"};\r",
									"properties_map.EstimatedDate=function (element) {\r",
									"    pm.expect(element.EstimatedDate).to.be.equal(null);\r",
									"};\r",
									"properties_map.OrderSize=function (element) {\r",
									"    pm.expect(element.OrderSize).to.be.equal(null);\r",
									"};\r",
									"properties_map.Priority=function (element) {\r",
									"    pm.expect(element.Priority).to.be.a(\"number\");\r",
									"};\r",
									"\r",
									"function propertySpecific(key, order){\r",
									"    if (properties_map[key]) {\r",
									"        pm.test(\"Test Property \"+key+\" for BatchOrder: \" + order.Id, function(){properties_map[key](order)});\r",
									"    }\r",
									"    else {\r",
									"        pm.test.skip(\"Test Property \"+key+\" for BatchOrder: \" + order.Id);\r",
									"    }\r",
									"}\r",
									"\r",
									"try {\r",
									"    var jsonDataElements = pm.response.json().value[0];\r",
									"\r",
									"    pm.test(\"Test Response Status Code\", function(){\r",
									"        pm.expect(pm.response.code).to.be.oneOf([200]);\r",
									"    });\r",
									"    pm.test(\"Test OData context\", function(){\r",
									"        pm.expect( pm.response.json()['@odata.context']).to.include(\"$metadata#BatchOrder/$entity\");\r",
									"    });\r",
									"    pm.test(\"Response time is less than \" +  environment[\"query-timeout\"] + \"ms\", function(){\r",
									"        pm.expect(pm.response.responseTime).to.be.below(parseInt(environment[\"query-timeout\"]));\r",
									"    });\r",
									"\r",
									"    var batch = jsonDataElements;\r",
									"    console.log(\"Processing Batch: \"+batch.Id);\r",
									"\r",
									"    var batchorder_response = {};\r",
									"    for (const[key, value] of Object.entries(properties_map)){\r",
									"        propertySpecific(key, batch);\r",
									"        batchorder_response[key] = batch[key];\r",
									"        pm.collectionVariables.set(\"current_batchorder_\" + key, batch[key]);\r",
									"    }\r",
									"}\r",
									"catch (err) {\r",
									"    pm.test(request.name, function () {\r",
									"        pm.expect.fail(err.toString());\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript",
								"id": "0cfaf80c-14a1-4b1b-ac25-4dfc6ea338e0"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "07a93d8a-81cc-41e6-9ee9-bf6e64b391b1"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{service-root-uri}}/odata/v1/BatchOrders({{current_batch_order_id}})",
							"host": [
								"{{service-root-uri}}"
							],
							"path": [
								"odata",
								"v1",
								"BatchOrders({{current_batch_order_id}})"
							]
						}
					},
					"response": []
				},
				{
					"name": "BatchOrderProducts",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const supportedOperators = [\"eq\", \"ne\", \"gt\", \"ge\", \"lt\", \"le\", \"and\", \"or\", \"not\"];\r",
									"const supportedFunctions = [\"startswith\", \"contains\", \"endswith\"];\r",
									"\r",
									"function compare(a, b){\r",
									"    if(isNaN(a)){\r",
									"        return String(a).localeCompare(String(b));\r",
									"    } else {\r",
									"        return a > b;\r",
									"    }    \r",
									"}\r",
									"\r",
									"function getOperator(inputString, possibleOperators) {\r",
									"    var op = null;\r",
									"    possibleOperators.forEach(function (el) { if (inputString.indexOf(el) >= 0) { op = el; } });\r",
									"    return op;\r",
									"}\r",
									"\r",
									"function opToJsFormat(op) {\r",
									"    res = null;\r",
									"    switch (op) {\r",
									"        case \"and\":\r",
									"            return \"&&\";\r",
									"        case \"or\":\r",
									"            return \"||\";\r",
									"        case \"not\":\r",
									"            return \"!\";\r",
									"        case \"eq\":\r",
									"            return \"==\";\r",
									"        case \"ne\":\r",
									"            return \"!=\";\r",
									"        case \"gt\":\r",
									"            return \">\";\r",
									"        case \"ge\":\r",
									"            return \">=\";\r",
									"        case \"lt\":\r",
									"            return \"<\";\r",
									"        case \"le\":\r",
									"            return \"<=\";\r",
									"    }\r",
									"}\r",
									"\r",
									"function get_query_filters(input_query) {\r",
									"\r",
									"    console.log(\"Parsing Filter...\");\r",
									"\r",
									"    var matcher = /(contains\\((.+?)\\)|startswith\\((.+?)\\)|endswith\\((.+?)\\)|any\\(.*?\\)|ContentDate\\/Start.*Z|ContentDate\\/End.*Z|[\\w.]+?\\s(?:eq|ne|gt|ge|lt|le)\\s(?:\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d+([+-][0-2]\\d:[0-5]\\d|Z)|[+-]?([0-9]*[.])?[0-9]+|\\w+|'.+?'))/g\r",
									"\r",
									"    var filters = input_query.match(matcher);\r",
									"    var i = 0;\r",
									"    var simpleString = input_query.replace(matcher, function () {\r",
									"        return i++;\r",
									"    });\r",
									"\r",
									"    console.log(simpleString);\r",
									"    console.log(filters);\r",
									"\r",
									"    var filterString = simpleString;\r",
									"\r",
									"    var groupString;\r",
									"    var groupFilter = null;\r",
									"    var testNextLevel = true;\r",
									"\r",
									"    while (testNextLevel) {\r",
									"        var closeParenthesisIndex = filterString.indexOf(')');\r",
									"        if (closeParenthesisIndex !== -1) {\r",
									"            var openParenthesisIndex = filterString.lastIndexOf('(', closeParenthesisIndex);\r",
									"\r",
									"            // Extract the string between the first deepest set of parenthesis\r",
									"            groupString = filterString.substring(openParenthesisIndex + 1, closeParenthesisIndex);\r",
									"\r",
									"            // Modify the filter string replacing the contents of the group string in addition to the parenthesis with the length of the filters array (which will be the index of the filter object that we push)\r",
									"            filterString = filterString.substring(0, openParenthesisIndex) + filters.length + filterString.substring(closeParenthesisIndex + 1);\r",
									"        } else {\r",
									"\r",
									"            // There are no more parenthesis groups\r",
									"            groupString = filterString;\r",
									"            testNextLevel = false;\r",
									"        }\r",
									"\r",
									"        // If the group uses both 'and' and 'or' then return null as an invalid filter string.\r",
									"        if (groupString.indexOf('and') >= 0 && groupString.indexOf('or') >= 0) {\r",
									"            console.log(\"Invalid Filter!\");\r",
									"            return null;\r",
									"        }\r",
									"\r",
									"        // Get the group indexes out of the group string\r",
									"        var groupFilterIndexes = groupString.match(/[0-9]+/g);\r",
									"        var groupFilters = [];\r",
									"\r",
									"        // Create an array with each of the filters who's index matches the group indexes\r",
									"        for (i = 0; i < groupFilterIndexes.length; i++) {\r",
									"            groupFilters.push(filters[Number(groupFilterIndexes[i])]);\r",
									"        }\r",
									"\r",
									"        //cycling over the supported operators\r",
									"        var op = getOperator(groupString, supportedOperators);\r",
									"\r",
									"        //redundant brakets management\r",
									"        if (op == null) {\r",
									"            groupFilters.push(\"true\");\r",
									"            op = \"and\";\r",
									"        }\r",
									"\r",
									"        // Create the filter object and push it onto the filters array\r",
									"        groupFilter = { op: op, filters: groupFilters };\r",
									"        filters.push(groupFilter);\r",
									"    }\r",
									"\r",
									"    return groupFilter;\r",
									"\r",
									"}\r",
									"\r",
									"function checkResponse(inputString, product) {\r",
									"    console.log(\"Input String: \" + inputString);\r",
									"    //console.log(\"Product:\");\r",
									"    //console.log(product);\r",
									"    var responseProperties = Object.keys(product);\r",
									"    var responseAttributes = {};\r",
									"\r",
									"    //Attribute\r",
									"    if (inputString.includes(\"any(\") && inputString.includes(\"/Name\") && inputString.includes(\"/Value\")) {\r",
									"        //Attribute Logic Assertion\r",
									"        if (responseProperties.indexOf(\"Attributes\") >= 0) {\r",
									"            product['Attributes'].forEach(function (el) {\r",
									"                responseAttributes[el.Name] = el.Value;\r",
									"            });\r",
									"\r",
									"            //functions in Attribute Value\r",
									"            var cleanedInputString = inputString.split(\"any(\").pop();\r",
									"            console.log(\"CLEANED ATTRIBUTE INPUTSTRING: \" + cleanedInputString);\r",
									"            if (cleanedInputString.includes(\"(\") && cleanedInputString.includes(\")\")) {\r",
									"                //get the function name\r",
									"                var functionName = cleanedInputString.split(\"(\")[0].split(\" \").pop();\r",
									"                if (supportedFunctions.indexOf(functionName) >= 0) {\r",
									"                    console.log(\"Found Attribute Function: \" + functionName);\r",
									"                    //get the attribute\r",
									"                    var attrToCheck = cleanedInputString.split('Name eq ').pop().split(\" \")[0].replace(/'/g, \"\").trim();\r",
									"                    console.log(\"Attribute KEY Found: \" + attrToCheck);\r",
									"                    //get the cleaned value\r",
									"                    var attrValueToCheck = cleanedInputString.split(\"(\")[1].split(\")\")[0].split(\",\")[1].trim().replace(/'/g, \"\");\r",
									"                    console.log(\"Attribute VALUE Found: \" + attrValueToCheck);\r",
									"\r",
									"                    switch (functionName) {\r",
									"                        case \"contains\":\r",
									"                            attributesUnderTest.push(attrToCheck + \" contains \" + attrValueToCheck);\r",
									"                            return (responseAttributes[attrToCheck].includes(attrValueToCheck)) ? true : false;\r",
									"                        case \"startswith\":\r",
									"                            attributesUnderTest.push(attrToCheck + \" startswith \" + attrValueToCheck);\r",
									"                            return responseAttributes[attrToCheck].startsWith(attrValueToCheck) ? true : false;\r",
									"                        case \"endswith\":\r",
									"                            attributesUnderTest.push(attrToCheck + \" endswith \" + attrValueToCheck);\r",
									"                            return responseAttributes[attrToCheck].endsWith(attrValueToCheck) ? true : false;\r",
									"                    }\r",
									"                }\r",
									"            } else {\r",
									"                //simple any(Attributes Name and Value)\r",
									"                var attrToCheck = inputString.split('Name eq ').pop().split(\" \")[0].replace(/'/g, \"\").trim();\r",
									"                console.log(\"Extracted Attribute KEY: \" + attrToCheck);\r",
									"                var attrValueToCheck = inputString.split('Value eq ').pop().split(\" \")[0].trim().replace(/'/g, \"\").replace(/\\)/g, \"\").replace(/\\\\/g, \"\");\r",
									"                console.log(\"Extracted Attribute VALUE: \" + attrValueToCheck);\r",
									"\r",
									"                attributesUnderTest.push(\"attr:\" + attrToCheck + \" eq \" + attrValueToCheck);\r",
									"\r",
									"                return responseAttributes[attrToCheck] == attrValueToCheck;\r",
									"            }\r",
									"        }\r",
									"    } else {\r",
									"        //inputString contains a function on a Property -> complex property not supported!\r",
									"        if (inputString.includes(\"(\") && inputString.includes(\")\")) {\r",
									"            //get the function name\r",
									"            var functionName = inputString.split(\"(\")[0];\r",
									"            if (supportedFunctions.indexOf(functionName) >= 0) {\r",
									"                console.log(\"Found Function: \" + functionName);\r",
									"                //get the property\r",
									"                var propertyToCheck = inputString.split(\"(\")[1].split(\",\")[0].trim();\r",
									"                console.log(\"Property Found: \" + propertyToCheck);\r",
									"\r",
									"                //get the cleaned value\r",
									"                var propValueToCheck = inputString.split(\"(\")[1].split(\")\")[0].split(\",\")[1].trim().replace(/'/g, \"\");\r",
									"                console.log(\"PropertyValue Found: \" + propValueToCheck);\r",
									"\r",
									"                switch (functionName) {\r",
									"                    case \"contains\":\r",
									"                        propertiesUnderTest.push(propertyToCheck + \" contains \" + propValueToCheck);\r",
									"                        return (product[propertyToCheck].includes(propValueToCheck)) ? true : false;\r",
									"                    case \"startswith\":\r",
									"                        propertiesUnderTest.push(propertyToCheck + \" startswith \" + propValueToCheck);\r",
									"                        return product[propertyToCheck].startsWith(propValueToCheck) ? true : false;\r",
									"                    case \"endswith\":\r",
									"                        propertiesUnderTest.push(propertyToCheck + \" endswith \" + propValueToCheck);\r",
									"                        return product[propertyToCheck].endsWith(propValueToCheck) ? true : false;\r",
									"                }\r",
									"            } else {\r",
									"                console.log(\"Unsupported Function: \" + functionName);\r",
									"                return false;\r",
									"            }\r",
									"        } else {\r",
									"            // single logic assertion in \"AND\" with \"true\"\r",
									"            if (inputString === \"true\") {\r",
									"                console.log(\"True Value!\");\r",
									"                return true;\r",
									"            } else {\r",
									"                //direct Property\r",
									"                var propertyToCheck = inputString.split(\" \")[0].trim();\r",
									"                var operatorToApply = inputString.split(\" \")[1];\r",
									"                var propValueToCheck = inputString.split(\" \")[2].trim().replace(/'/g, \"\");\r",
									"\r",
									"                console.log(\"Property Found: \" + propertyToCheck);\r",
									"                console.log(\"PropertyValue Found: \" + propValueToCheck);\r",
									"\r",
									"                if (supportedOperators.indexOf(operatorToApply) >= 0) {\r",
									"                    console.log(\"Operator To Apply: \" + operatorToApply);\r",
									"                    operator = opToJsFormat(operatorToApply);\r",
									"                    propertiesUnderTest.push(propertyToCheck + \" \" + operatorToApply + \" \" + propValueToCheck);\r",
									"\r",
									"                    var toEvalString = \"\";\r",
									"                    var subProperty = \"\";\r",
									"\r",
									"                    //Complex properties (ContentDate)\r",
									"                    if(propertyToCheck.includes(\"/\")){\r",
									"                        var rootPropertyToCheck = propertyToCheck.split(\"/\")[0];\r",
									"                        subProperty = propertyToCheck.split(\"/\")[1];\r",
									"\r",
									"                        console.log(\"Complex Property: \" + rootPropertyToCheck);\r",
									"                        console.log(\"Sub Property: \" + subProperty);\r",
									"\r",
									"                        toEvalString = \"product[rootPropertyToCheck][subProperty] \" + operator + \" propValueToCheck\";\r",
									"\r",
									"                    } else {\r",
									"                        toEvalString = \"product[propertyToCheck] \" + operator + \" propValueToCheck\";\r",
									"                    }\r",
									"\r",
									"                    return eval(toEvalString);\r",
									"                } else {\r",
									"                    console.log(\"Operator not supported\");\r",
									"                    return false;\r",
									"                }\r",
									"            }\r",
									"        }\r",
									"    }\r",
									"    console.log(\"Logic Assertion not computed: \" + inputString);\r",
									"    return Math.random() >= 0.5;\r",
									"}\r",
									"\r",
									"function treeIterator(tree, product) {\r",
									"    if (tree['filters'].length >= 0) {\r",
									"        var conditions = [];\r",
									"\r",
									"        var logicOperator = getOperator(tree['op'], supportedOperators);\r",
									"        var logicOperator = opToJsFormat(logicOperator);\r",
									"\r",
									"        //general tree: iterates over all filters (child nodes)\r",
									"        for (elem in tree['filters']) {\r",
									"            var currentCondition = typeof ((tree['filters'][elem])) == \"object\" ? treeIterator(tree['filters'][elem], product) : checkResponse(tree['filters'][elem], product);\r",
									"            conditions.push(currentCondition);\r",
									"            //optimize AND and OR\r",
									"            if(logicOperator == \"||\" && currentCondition){\r",
									"                break;\r",
									"            }\r",
									"            if(logicOperator == \"&&\" && !currentCondition){\r",
									"                break;\r",
									"            }\r",
									"        }\r",
									"        console.log(\"CURRENT CONDITIONS\");\r",
									"        console.log(conditions);\r",
									"\r",
									"        //building return string\r",
									"        var resString = \"(\";\r",
									"        for (elem in conditions) {\r",
									"            resString += conditions[elem] + \" \" + logicOperator.toString() + \" \";\r",
									"        }\r",
									"        resString = resString.substring(0, resString.length - 4);\r",
									"        resString += \")\";\r",
									"\r",
									"        console.log(\"RES String: \" + resString);\r",
									"\r",
									"        return resString;\r",
									"    }\r",
									"}\r",
									"\r",
									"try {\r",
									"    var jsonDataElements = pm.response.json().value;\r",
									"\r",
									"    pm.test(\"Response time is less than \" + environment[\"query-timeout\"] + \"ms\", function () {\r",
									"        pm.expect(pm.response.responseTime).to.be.below(parseInt(environment[\"query-timeout\"]));\r",
									"    });\r",
									"\r",
									"    //MIN number of BatchOrder Products Test\r",
									"    var bulk_batchsize_products = pm.collectionVariables.get('bulk_batchsize_products');\r",
									"    pm.test(\"Expected BatchOrder number of products Test: \" + bulk_batchsize_products, function(){\r",
									"        pm.expect(jsonDataElements.length).to.be.lte(bulk_batchsize_products);\r",
									"        pm.expect(jsonDataElements.length).to.be.gte(1);\r",
									"    });\r",
									"\r",
									"    pm.test(\"Test OData context\", function(){\r",
									"        query_string = pm.request.url.getQueryString();\r",
									"        if(query_string.includes(\"$expand=Attributes\")){\r",
									"            pm.expect( pm.response.json()['@odata.context']).to.include(\"$metadata#Products(Attributes())\");\r",
									"        } else{\r",
									"            pm.expect( pm.response.json()['@odata.context']).to.include(\"$metadata#Products\");\r",
									"        }\r",
									"    });\r",
									"\r",
									"    for (var counter = 0;  counter  < jsonDataElements.length; counter++){\r",
									"        var product = jsonDataElements[counter];\r",
									"        console.log(\"Processing Product: \"+product.Name+\" - \"+product.Id);\r",
									"\r",
									"        pm.test(\"Test Properties for product: \" + product.Id, function(){\r",
									"            pm.expect(product).to.have.property(\"Id\");\r",
									"            pm.expect(product.Id).to.be.a(\"string\");\r",
									"            pm.expect(product).to.have.property(\"Name\");\r",
									"            pm.expect(product.Name).to.be.a(\"string\");\r",
									"            pm.expect(product).to.have.property(\"ContentType\");\r",
									"            pm.expect(product.ContentType).to.be.a(\"string\");\r",
									"            pm.expect(product).to.have.property(\"ContentLength\");\r",
									"            pm.expect(product.ContentLength).to.be.a(\"number\");\r",
									"            pm.expect(product).to.have.property(\"OriginDate\");\r",
									"            pm.expect(product.OriginDate).to.be.a(\"string\");\r",
									"            pm.expect(product).to.have.property(\"PublicationDate\");\r",
									"            pm.expect(product.PublicationDate).to.be.a(\"string\");\r",
									"            pm.expect(product).to.have.property(\"ModificationDate\");\r",
									"            pm.expect(product.ModificationDate).to.be.a(\"string\");\r",
									"            pm.expect(product).to.have.property(\"Online\");\r",
									"            pm.expect(product.Online).to.be.a(\"boolean\");\r",
									"            pm.expect(product).to.have.property(\"Checksum\");\r",
									"            pm.expect(product.Checksum).to.be.an(\"array\");\r",
									"            pm.expect(product).to.have.property(\"ContentDate\");\r",
									"            pm.expect(product.ContentDate).to.be.an(\"object\");\r",
									"        }); \r",
									" \r",
									"        if(\"Attributes\" in jsonDataElements[counter]){\r",
									"            schema_seen = {};\r",
									"\r",
									"            pm.test(\"Test Attributes list for product: \" + jsonDataElements[counter].Id, function(){\r",
									"                pm.expect(jsonDataElements[counter].Attributes.length).to.be.above(0);\r",
									"                jsonDataElements[counter].Attributes.forEach(function(elem){\r",
									"                    pm.expect(elem).to.have.all.keys(\"Name\", \"Value\", \"ValueType\");\r",
									"                });\r",
									"            });  \r",
									"        }\r",
									"    }\r",
									"\r",
									"    //Filter Param Test\r",
									"    var filterParam = pm.collectionVariables.get(\"current_batch_filter_param\");\r",
									"    parsed_filters = get_query_filters(filterParam);\r",
									"    console.log(parsed_filters);\r",
									"    if (typeof (parsed_filters) == \"object\") {\r",
									"        for (var counter = 0; counter < jsonDataElements.length; counter++) {\r",
									"\r",
									"            attributesUnderTest = [];\r",
									"            propertiesUnderTest = [];\r",
									"\r",
									"            var product = jsonDataElements[counter];\r",
									"            var treeExp = treeIterator(parsed_filters, product);\r",
									"            var booleanTreeExp = eval(treeExp);\r",
									"\r",
									"            console.log(treeExp); console.log(booleanTreeExp);\r",
									"\r",
									"            testMessage = \"FilterParam \" + filterParam + \" Check: \" + product.Name;\r",
									"\r",
									"            pm.test(testMessage, function () {\r",
									"                pm.expect(booleanTreeExp, \"FilterParam Check\").to.be.true;\r",
									"            });\r",
									"        }\r",
									"    }\r",
									"}\r",
									"\r",
									"catch (err) {\r",
									"    pm.test(request.name, function () {\r",
									"        pm.expect.fail(err.toString());\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript",
								"id": "46e055b4-87aa-4755-af43-f6ae429ddd46"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "66546538-f82e-46f6-a8e4-1911c2d73a64"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{service-root-uri}}/odata/v1/BatchOrders({{current_batch_order_id}})/Products",
							"host": [
								"{{service-root-uri}}"
							],
							"path": [
								"odata",
								"v1",
								"BatchOrders({{current_batch_order_id}})",
								"Products"
							]
						}
					},
					"response": []
				},
				{
					"name": "BatchOrderTriggering",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"try {\r",
									"    pm.test(\"Response time is less than \" + environment[\"query-timeout\"] + \"ms\", function () {\r",
									"        pm.expect(pm.response.responseTime).to.be.below(parseInt(environment[\"query-timeout\"]));\r",
									"    });\r",
									"    pm.test(\"Test Response Status Code\", function(){\r",
									"        pm.expect(pm.response.code).to.be.oneOf([204]);\r",
									"    });\r",
									"}\r",
									"catch (err) {\r",
									"    pm.test(request.name, function () {\r",
									"        pm.expect.fail(err.toString());\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript",
								"id": "65d4c38a-26ab-4c1b-8724-ec05a6cefad6"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"Priority\": 33\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{service-root-uri}}/odata/v1/BatchOrders({{current_batch_order_id}})/OData.CSC.BatchOrder",
							"host": [
								"{{service-root-uri}}"
							],
							"path": [
								"odata",
								"v1",
								"BatchOrders({{current_batch_order_id}})",
								"OData.CSC.BatchOrder"
							]
						}
					},
					"response": []
				},
				{
					"name": "BatchOrderDetailsAfterTrigger",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"properties_map = {};\r",
									"properties_map.Id=function (element) {pm.expect(element.Id).to.match(/[0-9a-fA-F]{8}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{12}/);};\r",
									"properties_map.Status=function (element) {\r",
									"    pm.expect(element.Status).to.be.a(\"string\");\r",
									"    pm.expect(element.Status).to.be.oneOf([\"in_progress\"]);\r",
									"};\r",
									"properties_map.StatusMessage=function (element) {\r",
									"    pm.expect(element.StatusMessage).to.be.a(\"string\");\r",
									"    pm.expect(element.StatusMessage).to.be.oneOf([\"BatchOrder is under processing\"]);\r",
									"};\r",
									"properties_map.CompletedDate=function (element) {\r",
									"    pm.expect(element.CompletedDate).to.be.equal(null);\r",
									"};\r",
									"properties_map.SubmissionDate=function (element) {\r",
									"    pm.expect(element.SubmissionDate).to.be.a(\"string\");\r",
									"    pm.expect(element.SubmissionDate).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d+([+-][0-2]\\d:[0-5]\\d|Z)/);\r",
									"};\r",
									"properties_map.EstimatedDate=function (element) {\r",
									"    pm.expect(element.EstimatedDate).to.be.a(\"string\");\r",
									"    pm.expect(element.EstimatedDate).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d+([+-][0-2]\\d:[0-5]\\d|Z)/);\r",
									"};\r",
									"properties_map.OrderSize=function (element) {\r",
									"    pm.expect(element.OrderSize).to.be.equal(null);\r",
									"};\r",
									"properties_map.Priority=function (element) {\r",
									"    pm.expect(element.Priority).to.be.a(\"number\");\r",
									"};\r",
									"\r",
									"function propertySpecific(key, order){\r",
									"    if (properties_map[key]) {\r",
									"        pm.test(\"Test Property \"+key+\" for BatchOrder: \" + order.Id, function(){properties_map[key](order)});\r",
									"    }\r",
									"    else {\r",
									"        pm.test.skip(\"Test Property \"+key+\" for BatchOrder: \" + order.Id);\r",
									"    }\r",
									"}\r",
									"\r",
									"try {\r",
									"    var jsonDataElements = pm.response.json().value[0];\r",
									"\r",
									"    pm.test(\"Test Response Status Code\", function(){\r",
									"        pm.expect(pm.response.code).to.be.oneOf([200]);\r",
									"    });\r",
									"    pm.test(\"Test OData context\", function(){\r",
									"        pm.expect( pm.response.json()['@odata.context']).to.include(\"$metadata#BatchOrder/$entity\");\r",
									"    });\r",
									"    pm.test(\"Response time is less than \" +  environment[\"query-timeout\"] + \"ms\", function(){\r",
									"        pm.expect(pm.response.responseTime).to.be.below(parseInt(environment[\"query-timeout\"]));\r",
									"    });\r",
									"\r",
									"    var batch = jsonDataElements;\r",
									"\r",
									"    var batchorder_response = {};\r",
									"    for (const[key, value] of Object.entries(properties_map)){\r",
									"        propertySpecific(key, batch);\r",
									"        batchorder_response[key] = batch[key];\r",
									"        pm.collectionVariables.set(\"current_batchorder_\" + key, batch[key]);\r",
									"    }\r",
									"}\r",
									"catch (err) {\r",
									"    pm.test(request.name, function () {\r",
									"        pm.expect.fail(err.toString());\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript",
								"id": "314b3367-2ce2-4632-bd50-a2a9369bf6e9"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "d5681535-fc4e-4d17-9417-4f55c061e4a5"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{service-root-uri}}/odata/v1/BatchOrders?$filter=Status eq OData.CSC.JobStatus'in_progress'",
							"host": [
								"{{service-root-uri}}"
							],
							"path": [
								"odata",
								"v1",
								"BatchOrders"
							],
							"query": [
								{
									"key": "$filter",
									"value": "Status eq OData.CSC.JobStatus'in_progress'"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GetCompletedBatchOrder",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"properties_map = {};\r",
									"properties_map.Id=function (element) {pm.expect(element.Id).to.match(/[0-9a-fA-F]{8}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{12}/);};\r",
									"properties_map.Status=function (element) {\r",
									"    pm.expect(element.Status).to.be.a(\"string\");\r",
									"    pm.expect(element.Status).to.be.oneOf([\"completed\"]);\r",
									"};\r",
									"properties_map.StatusMessage=function (element) {\r",
									"    pm.expect(element.StatusMessage).to.be.a(\"string\");\r",
									"    pm.expect(element.StatusMessage).to.be.oneOf([\"requested products of BatchOrder are available\"]);\r",
									"};\r",
									"properties_map.CompletedDate=function (element) {\r",
									"    pm.expect(element.CompletedDate).to.be.a(\"string\");\r",
									"    pm.expect(element.CompletedDate).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d+([+-][0-2]\\d:[0-5]\\d|Z)/);\r",
									"};\r",
									"properties_map.SubmissionDate=function (element) {\r",
									"    pm.expect(element.SubmissionDate).to.be.a(\"string\");\r",
									"    pm.expect(element.SubmissionDate).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d+([+-][0-2]\\d:[0-5]\\d|Z)/);\r",
									"};\r",
									"properties_map.EstimatedDate=function (element) {\r",
									"    pm.expect(element.EstimatedDate).to.be.a(\"string\");\r",
									"    pm.expect(element.EstimatedDate).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d+([+-][0-2]\\d:[0-5]\\d|Z)/);\r",
									"};\r",
									"properties_map.OrderSize=function (element) {\r",
									"    pm.expect(element.OrderSize).to.be.a(\"number\");\r",
									"};\r",
									"properties_map.Priority=function (element) {\r",
									"    pm.expect(element.Priority).to.be.a(\"number\");\r",
									"};\r",
									"\r",
									"function propertySpecific(key, order){\r",
									"    if (properties_map[key]) {\r",
									"        pm.test(\"Test Property \"+key+\" for BatchOrder: \" + order.Id, function(){properties_map[key](order)});\r",
									"    }\r",
									"    else {\r",
									"        pm.test.skip(\"Test Property \"+key+\" for BatchOrder: \" + order.Id);\r",
									"    }\r",
									"}\r",
									"\r",
									"try {\r",
									"    var jsonDataElements = pm.response.json().value[0];\r",
									"\r",
									"    pm.test(\"Test Response Status Code\", function(){\r",
									"        pm.expect(pm.response.code).to.be.oneOf([200]);\r",
									"    });\r",
									"    pm.test(\"Test OData context\", function(){\r",
									"        pm.expect( pm.response.json()['@odata.context']).to.include(\"$metadata#BatchOrder/$entity\");\r",
									"    });\r",
									"    pm.test(\"Response time is less than \" +  environment[\"query-timeout\"] + \"ms\", function(){\r",
									"        pm.expect(pm.response.responseTime).to.be.below(parseInt(environment[\"query-timeout\"]));\r",
									"    });\r",
									"\r",
									"    var batch = jsonDataElements;\r",
									"\r",
									"    var batchorder_response = {};\r",
									"    for (const[key, value] of Object.entries(properties_map)){\r",
									"        propertySpecific(key, batch);\r",
									"        batchorder_response[key] = batch[key];\r",
									"        pm.collectionVariables.set(\"current_batchorder_\" + key, batch[key]);\r",
									"    }\r",
									"\r",
									"}\r",
									"catch (err) {\r",
									"    pm.test(request.name, function () {\r",
									"        pm.expect.fail(err.toString());\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript",
								"id": "c8edce05-8b65-453f-ad0f-dc84a3d85aa4"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "492e26f1-ad00-414c-bedf-82f1d95b66bc"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{service-root-uri}}/odata/v1/BatchOrders?$filter=Status eq OData.CSC.JobStatus'completed'",
							"host": [
								"{{service-root-uri}}"
							],
							"path": [
								"odata",
								"v1",
								"BatchOrders"
							],
							"query": [
								{
									"key": "$filter",
									"value": "Status eq OData.CSC.JobStatus'completed'"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "BatchOrderFilter_by_Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonDataElements = pm.response.json().value;\r",
									"current_tested_filter_key = \"Id\";\r",
									"\r",
									"try {\r",
									"    current_batch_order = jsonDataElements[0];\r",
									"\r",
									"    pm.test(\"Test Response Status Code\", function(){\r",
									"        pm.expect(pm.response.code).to.be.oneOf([200]);\r",
									"    });\r",
									"\r",
									"    pm.test(\"Test OData context\", function(){\r",
									"        pm.expect( pm.response.json()['@odata.context']).to.include(\"$metadata#BatchOrder/$entity\");\r",
									"    });\r",
									"\r",
									"    pm.test(\"Response time is less than \" +  environment[\"query-timeout\"] + \"ms\", function(){\r",
									"        pm.expect(pm.response.responseTime).to.be.below(parseInt(environment[\"query-timeout\"]));\r",
									"    });\r",
									"\r",
									"    var expected_order_key_value = decodeURIComponent(pm.request.url.getQueryString()).split(\" eq \").pop().replace(/'/g, \"\");\r",
									"\r",
									"    pm.test(\"Expected BatchOrder \" + current_tested_filter_key + \" is: \" + expected_order_key_value, function(){\r",
									"        pm.expect(current_batch_order[current_tested_filter_key]).to.equal(expected_order_key_value);\r",
									"    });\r",
									"\r",
									"} catch (err) {\r",
									"    pm.test(request.name, function () {\r",
									"        pm.expect.fail(err.toString());\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript",
								"id": "718899b4-f2b1-4c7d-93de-b7419f4abe8f"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "0ac153c5-6557-4d0e-935a-0d68585910e1"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{service-root-uri}}/odata/v1/BatchOrders?$filter=Id eq {{current_batchorder_Id}}",
							"host": [
								"{{service-root-uri}}"
							],
							"path": [
								"odata",
								"v1",
								"BatchOrders"
							],
							"query": [
								{
									"key": "$filter",
									"value": "Id eq {{current_batchorder_Id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "BatchOrderFilter_by_Status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonDataElements = pm.response.json().value;\r",
									"current_tested_filter_key = \"Status\";\r",
									"\r",
									"try {\r",
									"    current_batch_order = jsonDataElements[0];\r",
									"\r",
									"    pm.test(\"Test Response Status Code\", function(){\r",
									"        pm.expect(pm.response.code).to.be.oneOf([200]);\r",
									"    });\r",
									"\r",
									"    pm.test(\"Test OData context\", function(){\r",
									"        pm.expect( pm.response.json()['@odata.context']).to.include(\"$metadata#BatchOrder/$entity\");\r",
									"    });\r",
									"\r",
									"    pm.test(\"Response time is less than \" +  environment[\"query-timeout\"] + \"ms\", function(){\r",
									"        pm.expect(pm.response.responseTime).to.be.below(parseInt(environment[\"query-timeout\"]));\r",
									"    });\r",
									"\r",
									"    var expected_order_key_value = decodeURIComponent(pm.request.url.getQueryString()).split(\" eq \").pop().split(\"OData.CSC.JobStatus\").pop().replace(/'/g, \"\");\r",
									"\r",
									"    pm.test(\"Expected BatchOrder \" + current_tested_filter_key + \" is: \" + expected_order_key_value, function(){\r",
									"        pm.expect(current_batch_order[current_tested_filter_key]).to.equal(expected_order_key_value);\r",
									"    });\r",
									"\r",
									"} catch (err) {\r",
									"    pm.test(request.name, function () {\r",
									"        pm.expect.fail(err.toString());\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript",
								"id": "7c5363a0-1de4-46ac-8387-505ffac2d9a7"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "032426b2-4974-4c80-91f4-e04908f4b620"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{service-root-uri}}/odata/v1/BatchOrders?$filter=Status eq OData.CSC.JobStatus'{{current_batchorder_Status}}'",
							"host": [
								"{{service-root-uri}}"
							],
							"path": [
								"odata",
								"v1",
								"BatchOrders"
							],
							"query": [
								{
									"key": "$filter",
									"value": "Status eq OData.CSC.JobStatus'{{current_batchorder_Status}}'"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "BatchOrderFilter_by_StatusMessage",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonDataElements = pm.response.json().value;\r",
									"current_tested_filter_key = \"StatusMessage\";\r",
									"\r",
									"try {\r",
									"    current_batch_order = jsonDataElements[0];\r",
									"\r",
									"    pm.test(\"Test Response Status Code\", function(){\r",
									"        pm.expect(pm.response.code).to.be.oneOf([200]);\r",
									"    });\r",
									"\r",
									"    pm.test(\"Test OData context\", function(){\r",
									"        pm.expect( pm.response.json()['@odata.context']).to.include(\"$metadata#BatchOrder/$entity\");\r",
									"    });\r",
									"\r",
									"    pm.test(\"Response time is less than \" +  environment[\"query-timeout\"] + \"ms\", function(){\r",
									"        pm.expect(pm.response.responseTime).to.be.below(parseInt(environment[\"query-timeout\"]));\r",
									"    });\r",
									"\r",
									"    var expected_order_key_value = decodeURIComponent(pm.request.url.getQueryString()).split(\" eq \").pop().replace(/'/g, \"\");\r",
									"\r",
									"    pm.test(\"Expected BatchOrder \" + current_tested_filter_key + \" is: \" + expected_order_key_value, function(){\r",
									"        pm.expect(current_batch_order[current_tested_filter_key]).to.equal(expected_order_key_value);\r",
									"    });\r",
									"\r",
									"} catch (err) {\r",
									"    pm.test(request.name, function () {\r",
									"        pm.expect.fail(err.toString());\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript",
								"id": "9cdcd161-5b00-481e-90f5-5dbc07eb42ba"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "c574ac67-1d71-4ac7-8b8b-99ec561844a4"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{service-root-uri}}/odata/v1/BatchOrders?$filter=StatusMessage eq {{current_batchorder_StatusMessage}}",
							"host": [
								"{{service-root-uri}}"
							],
							"path": [
								"odata",
								"v1",
								"BatchOrders"
							],
							"query": [
								{
									"key": "$filter",
									"value": "StatusMessage eq {{current_batchorder_StatusMessage}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "BatchOrderFilter_by_Priority",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonDataElements = pm.response.json().value;\r",
									"current_tested_filter_key = \"Priority\";\r",
									"\r",
									"try {\r",
									"    current_batch_order = jsonDataElements[0];\r",
									"\r",
									"    pm.test(\"Test Response Status Code\", function(){\r",
									"        pm.expect(pm.response.code).to.be.oneOf([200]);\r",
									"    });\r",
									"\r",
									"    pm.test(\"Test OData context\", function(){\r",
									"        pm.expect( pm.response.json()['@odata.context']).to.include(\"$metadata#BatchOrder/$entity\");\r",
									"    });\r",
									"\r",
									"    pm.test(\"Response time is less than \" +  environment[\"query-timeout\"] + \"ms\", function(){\r",
									"        pm.expect(pm.response.responseTime).to.be.below(parseInt(environment[\"query-timeout\"]));\r",
									"    });\r",
									"\r",
									"    var expected_order_key_value = parseInt(decodeURIComponent(pm.request.url.getQueryString()).split(\" eq \").pop().replace(/'/g, \"\"));\r",
									"\r",
									"    pm.test(\"Expected BatchOrder \" + current_tested_filter_key + \" is: \" + expected_order_key_value, function(){\r",
									"        pm.expect(current_batch_order[current_tested_filter_key]).to.equal(expected_order_key_value);\r",
									"    });\r",
									"\r",
									"} catch (err) {\r",
									"    pm.test(request.name, function () {\r",
									"        pm.expect.fail(err.toString());\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript",
								"id": "a40502df-a240-41a4-b7f4-817d30d133b4"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "6bf4d2b3-fb21-4123-b8e4-1d0327ced2c0"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{service-root-uri}}/odata/v1/BatchOrders?$filter=Priority eq {{current_batchorder_Priority}}",
							"host": [
								"{{service-root-uri}}"
							],
							"path": [
								"odata",
								"v1",
								"BatchOrders"
							],
							"query": [
								{
									"key": "$filter",
									"value": "Priority eq {{current_batchorder_Priority}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "BatchOrderFilter_by_OrderSize",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonDataElements = pm.response.json().value;\r",
									"current_tested_filter_key = \"OrderSize\";\r",
									"\r",
									"try {\r",
									"    current_batch_order = jsonDataElements[0];\r",
									"\r",
									"    pm.test(\"Test Response Status Code\", function(){\r",
									"        pm.expect(pm.response.code).to.be.oneOf([200]);\r",
									"    });\r",
									"\r",
									"    pm.test(\"Test OData context\", function(){\r",
									"        pm.expect( pm.response.json()['@odata.context']).to.include(\"$metadata#BatchOrder/$entity\");\r",
									"    });\r",
									"\r",
									"    pm.test(\"Response time is less than \" +  environment[\"query-timeout\"] + \"ms\", function(){\r",
									"        pm.expect(pm.response.responseTime).to.be.below(parseInt(environment[\"query-timeout\"]));\r",
									"    });\r",
									"\r",
									"    var expected_order_key_value = parseInt(decodeURIComponent(pm.request.url.getQueryString()).split(\" eq \").pop().replace(/'/g, \"\"));\r",
									"\r",
									"    pm.test(\"Expected BatchOrder \" + current_tested_filter_key + \" is: \" + expected_order_key_value, function(){\r",
									"        pm.expect(current_batch_order[current_tested_filter_key]).to.equal(expected_order_key_value);\r",
									"    });\r",
									"\r",
									"} catch (err) {\r",
									"    pm.test(request.name, function () {\r",
									"        pm.expect.fail(err.toString());\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript",
								"id": "99e94e3b-1316-480d-9b8a-2dc4ad2198c3"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "8d6b59f2-7f00-4d2e-9b6e-d7decb6e3e09"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{service-root-uri}}/odata/v1/BatchOrders?$filter=OrderSize eq {{current_batchorder_OrderSize}}",
							"host": [
								"{{service-root-uri}}"
							],
							"path": [
								"odata",
								"v1",
								"BatchOrders"
							],
							"query": [
								{
									"key": "$filter",
									"value": "OrderSize eq {{current_batchorder_OrderSize}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "BatchOrderFilter_by_SubmissionDate",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonDataElements = pm.response.json().value;\r",
									"current_tested_filter_key = \"SubmissionDate\";\r",
									"\r",
									"try {\r",
									"    current_batch_order = jsonDataElements[0];\r",
									"\r",
									"    pm.test(\"Test Response Status Code\", function(){\r",
									"        pm.expect(pm.response.code).to.be.oneOf([200]);\r",
									"    });\r",
									"\r",
									"    pm.test(\"Test OData context\", function(){\r",
									"        pm.expect( pm.response.json()['@odata.context']).to.include(\"$metadata#BatchOrder/$entity\");\r",
									"    });\r",
									"\r",
									"    pm.test(\"Response time is less than \" +  environment[\"query-timeout\"] + \"ms\", function(){\r",
									"        pm.expect(pm.response.responseTime).to.be.below(parseInt(environment[\"query-timeout\"]));\r",
									"    });\r",
									"\r",
									"    var expected_order_key_value = decodeURIComponent(pm.request.url.getQueryString()).split(\" eq \").pop().replace(/'/g, \"\");\r",
									"\r",
									"    pm.test(\"Expected BatchOrder \" + current_tested_filter_key + \" is: \" + expected_order_key_value, function(){\r",
									"        pm.expect(current_batch_order[current_tested_filter_key]).to.equal(expected_order_key_value);\r",
									"    });\r",
									"\r",
									"} catch (err) {\r",
									"    pm.test(request.name, function () {\r",
									"        pm.expect.fail(err.toString());\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript",
								"id": "1aa36ddf-3cd0-4589-b1f1-0d4ce0bed5d2"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "ea708b3c-78c0-4527-9008-c05e6ca35c73"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{service-root-uri}}/odata/v1/BatchOrders?$filter=SubmissionDate eq {{current_batchorder_SubmissionDate}}",
							"host": [
								"{{service-root-uri}}"
							],
							"path": [
								"odata",
								"v1",
								"BatchOrders"
							],
							"query": [
								{
									"key": "$filter",
									"value": "SubmissionDate eq {{current_batchorder_SubmissionDate}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "BatchOrderFilter_by_EstimatedDate",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonDataElements = pm.response.json().value;\r",
									"current_tested_filter_key = \"EstimatedDate\";\r",
									"\r",
									"try {\r",
									"    current_batch_order = jsonDataElements[0];\r",
									"\r",
									"    pm.test(\"Test Response Status Code\", function(){\r",
									"        pm.expect(pm.response.code).to.be.oneOf([200]);\r",
									"    });\r",
									"\r",
									"    pm.test(\"Test OData context\", function(){\r",
									"        pm.expect( pm.response.json()['@odata.context']).to.include(\"$metadata#BatchOrder/$entity\");\r",
									"    });\r",
									"\r",
									"    pm.test(\"Response time is less than \" +  environment[\"query-timeout\"] + \"ms\", function(){\r",
									"        pm.expect(pm.response.responseTime).to.be.below(parseInt(environment[\"query-timeout\"]));\r",
									"    });\r",
									"\r",
									"    var expected_order_key_value = decodeURIComponent(pm.request.url.getQueryString()).split(\" eq \").pop().replace(/'/g, \"\");\r",
									"\r",
									"    pm.test(\"Expected BatchOrder \" + current_tested_filter_key + \" is: \" + expected_order_key_value, function(){\r",
									"        pm.expect(current_batch_order[current_tested_filter_key]).to.equal(expected_order_key_value);\r",
									"    });\r",
									"\r",
									"} catch (err) {\r",
									"    pm.test(request.name, function () {\r",
									"        pm.expect.fail(err.toString());\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript",
								"id": "11734f2c-3940-4c1c-b498-73fe40200f20"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "2d9d7396-1d75-4c0f-a4e8-f80fc2baa59d"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{service-root-uri}}/odata/v1/BatchOrders?$filter=EstimatedDate eq {{current_batchorder_EstimatedDate}}",
							"host": [
								"{{service-root-uri}}"
							],
							"path": [
								"odata",
								"v1",
								"BatchOrders"
							],
							"query": [
								{
									"key": "$filter",
									"value": "EstimatedDate eq {{current_batchorder_EstimatedDate}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "BatchOrderFilter_by_CompletedDate",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonDataElements = pm.response.json().value;\r",
									"current_tested_filter_key = \"CompletedDate\";\r",
									"\r",
									"try {\r",
									"    current_batch_order = jsonDataElements[0];\r",
									"\r",
									"    pm.test(\"Test Response Status Code\", function(){\r",
									"        pm.expect(pm.response.code).to.be.oneOf([200]);\r",
									"    });\r",
									"\r",
									"    pm.test(\"Test OData context\", function(){\r",
									"        pm.expect( pm.response.json()['@odata.context']).to.include(\"$metadata#BatchOrder/$entity\");\r",
									"    });\r",
									"\r",
									"    pm.test(\"Response time is less than \" +  environment[\"query-timeout\"] + \"ms\", function(){\r",
									"        pm.expect(pm.response.responseTime).to.be.below(parseInt(environment[\"query-timeout\"]));\r",
									"    });\r",
									"\r",
									"    var expected_order_key_value = decodeURIComponent(pm.request.url.getQueryString()).split(\" eq \").pop().replace(/'/g, \"\");\r",
									"\r",
									"    pm.test(\"Expected BatchOrder \" + current_tested_filter_key + \" is: \" + expected_order_key_value, function(){\r",
									"        pm.expect(current_batch_order[current_tested_filter_key]).to.equal(expected_order_key_value);\r",
									"    });\r",
									"\r",
									"} catch (err) {\r",
									"    pm.test(request.name, function () {\r",
									"        pm.expect.fail(err.toString());\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript",
								"id": "a74097a3-d87d-4982-8d7d-ac5288e32bba"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "1113bc53-9e77-45f8-9e6c-72d3623b3849"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{service-root-uri}}/odata/v1/BatchOrders?$filter=CompletedDate eq {{current_batchorder_CompletedDate}}",
							"host": [
								"{{service-root-uri}}"
							],
							"path": [
								"odata",
								"v1",
								"BatchOrders"
							],
							"query": [
								{
									"key": "$filter",
									"value": "CompletedDate eq {{current_batchorder_CompletedDate}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "BatchOrderCancel",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"properties_map = {};\r",
									"properties_map.Id=function (element) {pm.expect(element.Id).to.match(/[0-9a-fA-F]{8}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{12}/);};\r",
									"properties_map.Status=function (element) {\r",
									"    pm.expect(element.Status).to.be.a(\"string\");\r",
									"    pm.expect(element.Status).to.be.oneOf([\"cancelled\"]);\r",
									"};\r",
									"properties_map.StatusMessage=function (element) {\r",
									"    pm.expect(element.StatusMessage).to.be.a(\"string\");\r",
									"    pm.expect(element.StatusMessage).to.be.oneOf([\"BatchOrder cancelled by user\"]);\r",
									"};\r",
									"properties_map.CompletedDate=function (element) {\r",
									"    pm.expect(element.CompletedDate).to.be.equal(null);\r",
									"};\r",
									"properties_map.SubmissionDate=function (element) {\r",
									"    pm.expect(element.SubmissionDate).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d+([+-][0-2]\\d:[0-5]\\d|Z)/);\r",
									"};\r",
									"properties_map.EstimatedDate=function (element) {\r",
									"        pm.expect(element.EstimatedDate).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d+([+-][0-2]\\d:[0-5]\\d|Z)/);\r",
									"};\r",
									"properties_map.OrderSize=function (element) {\r",
									"    pm.expect(element.OrderSize).to.be.equal(0);\r",
									"};\r",
									"properties_map.Priority=function (element) {\r",
									"    pm.expect(element.Priority).to.be.a(\"number\");\r",
									"};\r",
									"\r",
									"function propertySpecific(key, order){\r",
									"    if (properties_map[key]) {\r",
									"        pm.test(\"Test Property \"+key+\" for BatchOrder: \" + order.Id, function(){properties_map[key](order)});\r",
									"    }\r",
									"    else {\r",
									"        pm.test.skip(\"Test Property \"+key+\" for BatchOrder: \" + order.Id);\r",
									"    }\r",
									"}\r",
									"\r",
									"try {\r",
									"    var jsonDataElements = pm.response.json();\r",
									"\r",
									"    pm.test(\"Test Response Status Code\", function(){\r",
									"        pm.expect(pm.response.code).to.be.oneOf([200]);\r",
									"    });\r",
									"    pm.test(\"Test OData context\", function(){\r",
									"        pm.expect( pm.response.json()['@odata.context']).to.include(\"metadata#OData.CSC.BatchOrder\");\r",
									"    });\r",
									"    pm.test(\"Response time is less than \" +  environment[\"query-timeout\"] + \"ms\", function(){\r",
									"        pm.expect(pm.response.responseTime).to.be.below(parseInt(environment[\"query-timeout\"]));\r",
									"    });\r",
									"\r",
									"    var batch = jsonDataElements;\r",
									"    console.log(\"Processing Batch: \"+batch.Id);\r",
									"\r",
									"    for (const[key, value] of Object.entries(properties_map)){\r",
									"        propertySpecific(key, batch);\r",
									"    }\r",
									"}\r",
									"catch (err) {\r",
									"    pm.test(request.name, function () {\r",
									"        pm.expect.fail(err.toString());\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript",
								"id": "8ef00005-76d2-4682-9b1d-2ea3c9af3944"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "68b6706c-a8c1-4888-ad05-e5b3ae3ab30e"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{service-root-uri}}/odata/v1/BatchOrders({{current_batch_order_id}})/OData.CSC.Cancel",
							"host": [
								"{{service-root-uri}}"
							],
							"path": [
								"odata",
								"v1",
								"BatchOrders({{current_batch_order_id}})",
								"OData.CSC.Cancel"
							]
						}
					},
					"response": []
				},
				{
					"name": "BulkCancel",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"properties_map = {};\r",
									"properties_map.Id=function (element) {pm.expect(element.Id).to.match(/[0-9a-fA-F]{8}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{12}/);};\r",
									"properties_map.Status=function (element) {\r",
									"    pm.expect(element.Status).to.be.a(\"string\");\r",
									"    pm.expect(element.Status).to.be.oneOf([\"created\", \"in_progress\", \"completed\", \"failed\", \"cancelled\"]);\r",
									"};\r",
									"properties_map.StatusMessage=function (element) {\r",
									"    pm.expect(element.StatusMessage).to.be.a(\"string\");\r",
									"    switch(element.Status){\r",
									"        case \"created\":\r",
									"            pm.expect(element.StatusMessage).to.be.oneOf([\"Bulk has been created but no BatchOrders have been triggered\"]);\r",
									"            break;\r",
									"        case \"in_progress\":\r",
									"            pm.expect(element.StatusMessage).to.be.oneOf([\"One or more BatchOrders are under processing\"]);\r",
									"            break;\r",
									"        case \"completed\":\r",
									"            pm.expect(element.StatusMessage).to.be.oneOf([\"requested products of all BatchOrders comprising the Bulk are in status 'completed'\"]);\r",
									"            break;\r",
									"        case \"cancelled\":\r",
									"            pm.expect(element.StatusMessage).to.be.oneOf([\"Bulk cancelled by user\"]);\r",
									"            break;\r",
									"        case \"failed\":\r",
									"            pm.expect(element.StatusMessage).to.be.oneOf([\"at least one product retrieval has failed\", \"at least one product currently unavailable\", \"at least one product not found on LTA\"]);\r",
									"            break;\r",
									"    }\r",
									"};\r",
									"properties_map.FilterParam=function (element) {\r",
									"    pm.expect(element.FilterParam).to.be.a(\"string\");\r",
									"};\r",
									"properties_map.SubmissionDate=function (element) {\r",
									"    pm.expect(element.SubmissionDate).to.be.a(\"string\");\r",
									"    pm.expect(element.SubmissionDate).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d+([+-][0-2]\\d:[0-5]\\d|Z)/);\r",
									"};\r",
									"properties_map.BatchsizeProducts=function (element) {\r",
									"    pm.expect(element.BatchsizeProducts).to.be.a(\"number\");\r",
									"};\r",
									"properties_map.BatchsizeVolume=function (element) {\r",
									"    pm.expect(element.BatchsizeVolume).to.be.a(\"number\");\r",
									"};\r",
									"properties_map.NotificationEndpoint=function (element) {\r",
									"    if(element.NotificationEndpoint){\r",
									"        if(typeof(element.NotificationEndpoint)==\"string\"){\r",
									"            pm.expect(element.NotificationEndpoint).to.be.a(\"string\");\r",
									"        } else pm.expect(element.NotificationEndpoint).to.be.equal(null);\r",
									"    }\r",
									"};\r",
									"properties_map.OrderbyParam=function (element) {\r",
									"    if(element.OrderbyParam){\r",
									"        if(typeof(element.OrderbyParam)==\"string\"){\r",
									"            pm.expect(element.OrderbyParam).to.be.a(\"string\");\r",
									"        } else pm.expect(element.OrderbyParam).to.be.equal(null);\r",
									"    }\r",
									"\r",
									"};\r",
									"properties_map.CompletedDate=function (element) {\r",
									"    if(element.CompletedDate){\r",
									"        switch(element.Status){\r",
									"            case \"completed\":\r",
									"                pm.expect(element.CompletedDate).to.be.a(\"string\");\r",
									"                pm.expect(element.CompletedDate).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d+([+-][0-2]\\d:[0-5]\\d|Z)/);\r",
									"                break;\r",
									"            default:\r",
									"                if(element.CompletedDate){\r",
									"                    pm.expect(element.CompletedDate).to.be.equal(null)\r",
									"                }     \r",
									"        }\r",
									"    }\r",
									"};\r",
									"\r",
									"function propertySpecific(key, order){\r",
									"    if (properties_map[key]) {\r",
									"        pm.test(\"Test Property \"+key+\" for Bulk: \" + order.Id, function(){properties_map[key](order)});\r",
									"    }\r",
									"    else {\r",
									"        pm.test.skip(\"Test Property \"+key+\" for Bulk: \" + order.Id);\r",
									"    }\r",
									"}\r",
									"\r",
									"try {\r",
									"    var jsonDataElements = pm.response.json();\r",
									"\r",
									"    pm.test(\"Test Response Status Code\", function(){\r",
									"        pm.expect(pm.response.code).to.be.oneOf([200]);\r",
									"    });\r",
									"\r",
									"    pm.test(\"Test OData context\", function(){\r",
									"        pm.expect( pm.response.json()['@odata.context']).to.include(\"$metadata#OData.CSC.Bulk\");\r",
									"    });\r",
									"\r",
									"    pm.test(\"Response time is less than \" +  environment[\"query-timeout\"] + \"ms\", function(){\r",
									"        pm.expect(pm.response.responseTime).to.be.below(parseInt(environment[\"query-timeout\"]));\r",
									"    });\r",
									"\r",
									"    for (const[key, value] of Object.entries(properties_map)){\r",
									"        propertySpecific(key, jsonDataElements);\r",
									"    }\r",
									"\r",
									"}\r",
									"catch (err) {\r",
									"    pm.test(request.name, function () {\r",
									"        pm.expect.fail(err.toString());\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript",
								"id": "4eb913e3-e877-4aa0-8680-622956468f7f"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "7c521051-ba9e-4192-85e2-c6a643427810"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{service-root-uri}}/odata/v1/Bulks({{bulk_id}})/OData.CSC.Cancel",
							"host": [
								"{{service-root-uri}}"
							],
							"path": [
								"odata",
								"v1",
								"Bulks({{bulk_id}})",
								"OData.CSC.Cancel"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Subscriptions",
			"item": [
				{
					"name": "CreateSubscription_noStaging",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"properties_map = {};\r",
									"properties_map.Id=function (element) {pm.expect(element.Id).to.match(/[0-9a-fA-F]{8}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{12}/);};\r",
									"\r",
									"properties_map.FilterParam=function (element) {\r",
									"    pm.expect(element.FilterParam).to.be.a(\"string\");\r",
									"    pm.expect(element.FilterParam).to.be.not.equal(null);\r",
									"};\r",
									"\r",
									"properties_map.LastNotificationDate=function (element) {pm.expect(element.LastNotificationDate).to.be.equal(null);};\r",
									"\r",
									"properties_map.SubmissionDate=function (element) {pm.expect(element.SubmissionDate).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d+([+-][0-2]\\d:[0-5]\\d|Z)/);};\r",
									"\r",
									"properties_map.Priority=function (element) {\r",
									"    pm.expect(element.Priority).to.be.equal(null);\r",
									"};\r",
									"\r",
									"properties_map.Status=function (element) {\r",
									"    pm.expect(element.Status).to.be.a(\"string\");\r",
									"    pm.expect(element.Status).to.be.oneOf([\"running\"]);\r",
									"};\r",
									"\r",
									"properties_map.StageOrder=function (element) {\r",
									"    pm.expect(element.StageOrder).to.be.equal(false);\r",
									"};\r",
									"\r",
									"properties_map.SubscriptionEvent=function (element) {\r",
									"    pm.expect(element.SubscriptionEvent).to.be.a(\"string\");\r",
									"    pm.expect(element.SubscriptionEvent).to.be.oneOf([\"created\"]);\r",
									"};\r",
									"\r",
									"properties_map.NotificationEndpoint=function (element) {\r",
									"    pm.expect(element.NotificationEndpoint).to.be.a(\"string\");\r",
									"};\r",
									"\r",
									"\r",
									"function propertySpecific(key, order){\r",
									"    if (properties_map[key]) {\r",
									"        pm.test(\"Test Property \"+key+\" for Subscription: \" + order.Id, function(){properties_map[key](order)});\r",
									"    }\r",
									"    else {\r",
									"        pm.test.skip(\"Test Property \"+key+\" for Subscription: \" + order.Id);\r",
									"    }\r",
									"}\r",
									"\r",
									"try {\r",
									"    var jsonDataElements = pm.response.json();\r",
									"\r",
									"    pm.test(\"Test Response Status Code\", function(){\r",
									"        pm.expect(pm.response.code).to.be.oneOf([201,202]);\r",
									"    });\r",
									"\r",
									"    pm.test(\"Test OData context\", function(){\r",
									"        pm.expect( pm.response.json()['@odata.context']).to.include(\"$metadata#OData.CSC.Subscription\");\r",
									"    });\r",
									"\r",
									"    pm.test(\"Response time is less than \" +  environment[\"query-timeout\"] + \"ms\", function(){\r",
									"        pm.expect(pm.response.responseTime).to.be.below(parseInt(environment[\"query-timeout\"]));\r",
									"    });\r",
									"\r",
									"    for (const[key, value] of Object.entries(properties_map)){\r",
									"        propertySpecific(key, jsonDataElements);\r",
									"    }\r",
									"\r",
									"    pm.collectionVariables.set('no_staging_subscription', jsonDataElements);\r",
									"}\r",
									"catch (err) {\r",
									"    pm.test(request.name, function () {\r",
									"        pm.expect.fail(err.toString());\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript",
								"id": "ff348e50-5b01-4e1d-83b0-2f88a70d163a"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"@odata.context\": \"$metadata#Subscription/entity\",\r\n    \"FilterParam\": \"Products?$filter=startswith(Name,'S1')\",\r\n    \"SubscriptionEvent\": \"created\",\r\n    \"StageOrder\": false,\r\n    \"Priority\": 25,\r\n    \"NotificationEndpoint\": \"http://{{notification_server_url}}/{{lta_path}}\",\r\n    \"NotificationEpUsername\": \"{{notification_username}}\",\r\n    \"NotificationEpPassword\": \"{{notification_password}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{service-root-uri}}/odata/v1/Subscriptions",
							"host": [
								"{{service-root-uri}}"
							],
							"path": [
								"odata",
								"v1",
								"Subscriptions"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetProductAvailabilityNotifications",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const supportedOperators = [\"eq\", \"ne\", \"gt\", \"ge\", \"lt\", \"le\", \"and\", \"or\", \"not\"];\r",
									"const supportedFunctions = [\"startswith\", \"contains\", \"endswith\"];\r",
									"\r",
									"function compare(a, b){\r",
									"    if(isNaN(a)){\r",
									"        return String(a).localeCompare(String(b));\r",
									"    } else {\r",
									"        return a > b;\r",
									"    }    \r",
									"}\r",
									"\r",
									"function getOperator(inputString, possibleOperators) {\r",
									"    var op = null;\r",
									"    possibleOperators.forEach(function (el) { if (inputString.indexOf(el) >= 0) { op = el; } });\r",
									"    return op;\r",
									"}\r",
									"\r",
									"function opToJsFormat(op) {\r",
									"    res = null;\r",
									"    switch (op) {\r",
									"        case \"and\":\r",
									"            return \"&&\";\r",
									"        case \"or\":\r",
									"            return \"||\";\r",
									"        case \"not\":\r",
									"            return \"!\";\r",
									"        case \"eq\":\r",
									"            return \"==\";\r",
									"        case \"ne\":\r",
									"            return \"!=\";\r",
									"        case \"gt\":\r",
									"            return \">\";\r",
									"        case \"ge\":\r",
									"            return \">=\";\r",
									"        case \"lt\":\r",
									"            return \"<\";\r",
									"        case \"le\":\r",
									"            return \"<=\";\r",
									"    }\r",
									"}\r",
									"\r",
									"function get_query_filters(input_query) {\r",
									"\r",
									"    console.log(\"Parsing Filter...\");\r",
									"\r",
									"    var matcher = /(contains\\((.+?)\\)|startswith\\((.+?)\\)|endswith\\((.+?)\\)|any\\(.*?\\)|ContentDate\\/Start.*Z|ContentDate\\/End.*Z|[\\w.]+?\\s(?:eq|ne|gt|ge|lt|le)\\s(?:\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d+([+-][0-2]\\d:[0-5]\\d|Z)|[+-]?([0-9]*[.])?[0-9]+|\\w+|'.+?'))/g\r",
									"\r",
									"    var filters = input_query.match(matcher);\r",
									"    var i = 0;\r",
									"    var simpleString = input_query.replace(matcher, function () {\r",
									"        return i++;\r",
									"    });\r",
									"\r",
									"    console.log(simpleString);\r",
									"    console.log(filters);\r",
									"\r",
									"    var filterString = simpleString;\r",
									"\r",
									"    var groupString;\r",
									"    var groupFilter = null;\r",
									"    var testNextLevel = true;\r",
									"\r",
									"    while (testNextLevel) {\r",
									"        var closeParenthesisIndex = filterString.indexOf(')');\r",
									"        if (closeParenthesisIndex !== -1) {\r",
									"            var openParenthesisIndex = filterString.lastIndexOf('(', closeParenthesisIndex);\r",
									"\r",
									"            // Extract the string between the first deepest set of parenthesis\r",
									"            groupString = filterString.substring(openParenthesisIndex + 1, closeParenthesisIndex);\r",
									"\r",
									"            // Modify the filter string replacing the contents of the group string in addition to the parenthesis with the length of the filters array (which will be the index of the filter object that we push)\r",
									"            filterString = filterString.substring(0, openParenthesisIndex) + filters.length + filterString.substring(closeParenthesisIndex + 1);\r",
									"        } else {\r",
									"\r",
									"            // There are no more parenthesis groups\r",
									"            groupString = filterString;\r",
									"            testNextLevel = false;\r",
									"        }\r",
									"\r",
									"        // If the group uses both 'and' and 'or' then return null as an invalid filter string.\r",
									"        if (groupString.indexOf('and') >= 0 && groupString.indexOf('or') >= 0) {\r",
									"            console.log(\"Invalid Filter!\");\r",
									"            return null;\r",
									"        }\r",
									"\r",
									"        // Get the group indexes out of the group string\r",
									"        var groupFilterIndexes = groupString.match(/[0-9]+/g);\r",
									"        var groupFilters = [];\r",
									"\r",
									"        // Create an array with each of the filters who's index matches the group indexes\r",
									"        for (i = 0; i < groupFilterIndexes.length; i++) {\r",
									"            groupFilters.push(filters[Number(groupFilterIndexes[i])]);\r",
									"        }\r",
									"\r",
									"        //cycling over the supported operators\r",
									"        var op = getOperator(groupString, supportedOperators);\r",
									"\r",
									"        //redundant brakets management\r",
									"        if (op == null) {\r",
									"            groupFilters.push(\"true\");\r",
									"            op = \"and\";\r",
									"        }\r",
									"\r",
									"        // Create the filter object and push it onto the filters array\r",
									"        groupFilter = { op: op, filters: groupFilters };\r",
									"        filters.push(groupFilter);\r",
									"    }\r",
									"\r",
									"    return groupFilter;\r",
									"\r",
									"}\r",
									"\r",
									"function checkResponse(inputString, product) {\r",
									"    console.log(\"Input String: \" + inputString);\r",
									"    //console.log(\"Product:\");\r",
									"    //console.log(product);\r",
									"    var responseProperties = Object.keys(product);\r",
									"    var responseAttributes = {};\r",
									"\r",
									"    //Attribute\r",
									"    if (inputString.includes(\"any(\") && inputString.includes(\"/Name\") && inputString.includes(\"/Value\")) {\r",
									"        //Attribute Logic Assertion\r",
									"        if (responseProperties.indexOf(\"Attributes\") >= 0) {\r",
									"            product['Attributes'].forEach(function (el) {\r",
									"                responseAttributes[el.Name] = el.Value;\r",
									"            });\r",
									"\r",
									"            //functions in Attribute Value\r",
									"            var cleanedInputString = inputString.split(\"any(\").pop();\r",
									"            console.log(\"CLEANED ATTRIBUTE INPUTSTRING: \" + cleanedInputString);\r",
									"            if (cleanedInputString.includes(\"(\") && cleanedInputString.includes(\")\")) {\r",
									"                //get the function name\r",
									"                var functionName = cleanedInputString.split(\"(\")[0].split(\" \").pop();\r",
									"                if (supportedFunctions.indexOf(functionName) >= 0) {\r",
									"                    console.log(\"Found Attribute Function: \" + functionName);\r",
									"                    //get the attribute\r",
									"                    var attrToCheck = cleanedInputString.split('Name eq ').pop().split(\" \")[0].replace(/'/g, \"\").trim();\r",
									"                    console.log(\"Attribute KEY Found: \" + attrToCheck);\r",
									"                    //get the cleaned value\r",
									"                    var attrValueToCheck = cleanedInputString.split(\"(\")[1].split(\")\")[0].split(\",\")[1].trim().replace(/'/g, \"\");\r",
									"                    console.log(\"Attribute VALUE Found: \" + attrValueToCheck);\r",
									"\r",
									"                    switch (functionName) {\r",
									"                        case \"contains\":\r",
									"                            attributesUnderTest.push(attrToCheck + \" contains \" + attrValueToCheck);\r",
									"                            return (responseAttributes[attrToCheck].includes(attrValueToCheck)) ? true : false;\r",
									"                        case \"startswith\":\r",
									"                            attributesUnderTest.push(attrToCheck + \" startswith \" + attrValueToCheck);\r",
									"                            return responseAttributes[attrToCheck].startsWith(attrValueToCheck) ? true : false;\r",
									"                        case \"endswith\":\r",
									"                            attributesUnderTest.push(attrToCheck + \" endswith \" + attrValueToCheck);\r",
									"                            return responseAttributes[attrToCheck].endsWith(attrValueToCheck) ? true : false;\r",
									"                    }\r",
									"                }\r",
									"            } else {\r",
									"                //simple any(Attributes Name and Value)\r",
									"                var attrToCheck = inputString.split('Name eq ').pop().split(\" \")[0].replace(/'/g, \"\").trim();\r",
									"                console.log(\"Extracted Attribute KEY: \" + attrToCheck);\r",
									"                var attrValueToCheck = inputString.split('Value eq ').pop().split(\" \")[0].trim().replace(/'/g, \"\").replace(/\\)/g, \"\").replace(/\\\\/g, \"\");\r",
									"                console.log(\"Extracted Attribute VALUE: \" + attrValueToCheck);\r",
									"\r",
									"                attributesUnderTest.push(\"attr:\" + attrToCheck + \" eq \" + attrValueToCheck);\r",
									"\r",
									"                return responseAttributes[attrToCheck] == attrValueToCheck;\r",
									"            }\r",
									"        }\r",
									"    } else {\r",
									"        //inputString contains a function on a Property -> complex property not supported!\r",
									"        if (inputString.includes(\"(\") && inputString.includes(\")\")) {\r",
									"            //get the function name\r",
									"            var functionName = inputString.split(\"(\")[0];\r",
									"            if (supportedFunctions.indexOf(functionName) >= 0) {\r",
									"                console.log(\"Found Function: \" + functionName);\r",
									"                //get the property\r",
									"                var propertyToCheck = inputString.split(\"(\")[1].split(\",\")[0].trim();\r",
									"                console.log(\"Property Found: \" + propertyToCheck);\r",
									"\r",
									"                //get the cleaned value\r",
									"                var propValueToCheck = inputString.split(\"(\")[1].split(\")\")[0].split(\",\")[1].trim().replace(/'/g, \"\");\r",
									"                console.log(\"PropertyValue Found: \" + propValueToCheck);\r",
									"\r",
									"                switch (functionName) {\r",
									"                    case \"contains\":\r",
									"                        propertiesUnderTest.push(propertyToCheck + \" contains \" + propValueToCheck);\r",
									"                        return (product[propertyToCheck].includes(propValueToCheck)) ? true : false;\r",
									"                    case \"startswith\":\r",
									"                        propertiesUnderTest.push(propertyToCheck + \" startswith \" + propValueToCheck);\r",
									"                        return product[propertyToCheck].startsWith(propValueToCheck) ? true : false;\r",
									"                    case \"endswith\":\r",
									"                        propertiesUnderTest.push(propertyToCheck + \" endswith \" + propValueToCheck);\r",
									"                        return product[propertyToCheck].endsWith(propValueToCheck) ? true : false;\r",
									"                }\r",
									"            } else {\r",
									"                console.log(\"Unsupported Function: \" + functionName);\r",
									"                return false;\r",
									"            }\r",
									"        } else {\r",
									"            // single logic assertion in \"AND\" with \"true\"\r",
									"            if (inputString === \"true\") {\r",
									"                console.log(\"True Value!\");\r",
									"                return true;\r",
									"            } else {\r",
									"                //direct Property\r",
									"                var propertyToCheck = inputString.split(\" \")[0].trim();\r",
									"                var operatorToApply = inputString.split(\" \")[1];\r",
									"                var propValueToCheck = inputString.split(\" \")[2].trim().replace(/'/g, \"\");\r",
									"\r",
									"                console.log(\"Property Found: \" + propertyToCheck);\r",
									"                console.log(\"PropertyValue Found: \" + propValueToCheck);\r",
									"\r",
									"                if (supportedOperators.indexOf(operatorToApply) >= 0) {\r",
									"                    console.log(\"Operator To Apply: \" + operatorToApply);\r",
									"                    operator = opToJsFormat(operatorToApply);\r",
									"                    propertiesUnderTest.push(propertyToCheck + \" \" + operatorToApply + \" \" + propValueToCheck);\r",
									"\r",
									"                    var toEvalString = \"\";\r",
									"                    var subProperty = \"\";\r",
									"\r",
									"                    //Complex properties (ContentDate)\r",
									"                    if(propertyToCheck.includes(\"/\")){\r",
									"                        var rootPropertyToCheck = propertyToCheck.split(\"/\")[0];\r",
									"                        subProperty = propertyToCheck.split(\"/\")[1];\r",
									"\r",
									"                        console.log(\"Complex Property: \" + rootPropertyToCheck);\r",
									"                        console.log(\"Sub Property: \" + subProperty);\r",
									"\r",
									"                        toEvalString = \"product[rootPropertyToCheck][subProperty] \" + operator + \" propValueToCheck\";\r",
									"\r",
									"                    } else {\r",
									"                        toEvalString = \"product[propertyToCheck] \" + operator + \" propValueToCheck\";\r",
									"                    }\r",
									"\r",
									"                    return eval(toEvalString);\r",
									"                } else {\r",
									"                    console.log(\"Operator not supported\");\r",
									"                    return false;\r",
									"                }\r",
									"            }\r",
									"        }\r",
									"    }\r",
									"    console.log(\"Logic Assertion not computed: \" + inputString);\r",
									"    return Math.random() >= 0.5;\r",
									"}\r",
									"\r",
									"function treeIterator(tree, product) {\r",
									"    if (tree['filters'].length >= 0) {\r",
									"        var conditions = [];\r",
									"\r",
									"        var logicOperator = getOperator(tree['op'], supportedOperators);\r",
									"        var logicOperator = opToJsFormat(logicOperator);\r",
									"\r",
									"        //general tree: iterates over all filters (child nodes)\r",
									"        for (elem in tree['filters']) {\r",
									"            var currentCondition = typeof ((tree['filters'][elem])) == \"object\" ? treeIterator(tree['filters'][elem], product) : checkResponse(tree['filters'][elem], product);\r",
									"            conditions.push(currentCondition);\r",
									"            //optimize AND and OR\r",
									"            if(logicOperator == \"||\" && currentCondition){\r",
									"                break;\r",
									"            }\r",
									"            if(logicOperator == \"&&\" && !currentCondition){\r",
									"                break;\r",
									"            }\r",
									"        }\r",
									"        console.log(\"CURRENT CONDITIONS\");\r",
									"        console.log(conditions);\r",
									"\r",
									"        //building return string\r",
									"        var resString = \"(\";\r",
									"        for (elem in conditions) {\r",
									"            resString += conditions[elem] + \" \" + logicOperator.toString() + \" \";\r",
									"        }\r",
									"        resString = resString.substring(0, resString.length - 3);\r",
									"        resString += \")\";\r",
									"\r",
									"        console.log(\"RES String: \" + resString);\r",
									"\r",
									"        return resString;\r",
									"    }\r",
									"}\r",
									"\r",
									"properties_map = {};\r",
									"\r",
									"properties_map[\"@odata.context\"]=function(element){\r",
									"    pm.expect(element[\"@odata.context\"]).to.include(\"$metadata#Notification/$entity\");\r",
									"};\r",
									"\r",
									"properties_map.SubscriptionId=function (element) {pm.expect(element.SubscriptionId).to.match(/[0-9a-fA-F]{8}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{12}/);};\r",
									"\r",
									"properties_map.ProductId=function (element) {pm.expect(element.ProductId).to.match(/[0-9a-fA-F]{8}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{12}/);};\r",
									"\r",
									"properties_map.NotificationDate=function (element) {pm.expect(element.NotificationDate).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d+([+-][0-2]\\d:[0-5]\\d|Z)/);};\r",
									"\r",
									"properties_map.Name=function (element) {\r",
									"    pm.expect(element.Name).to.be.a(\"string\");\r",
									"};\r",
									"\r",
									"properties_map.SubscriptionEvent=function (element) {\r",
									"    pm.expect(element.SubscriptionEvent).to.be.a(\"string\");\r",
									"    pm.expect(element.SubscriptionEvent).to.be.oneOf([\"created\"]);\r",
									"};\r",
									"\r",
									"\r",
									"function propertySpecific(key, order){\r",
									"    if (properties_map[key]) {\r",
									"        pm.test(\"Test Property \"+key+\" for Subscription: \" + order.SubscriptionId, function(){properties_map[key](order)});\r",
									"    }\r",
									"    else {\r",
									"        pm.test.skip(\"Test Property \"+key+\" for Subscription: \" + order.SubscriptionId);\r",
									"    }\r",
									"}\r",
									"\r",
									"try {\r",
									"    var jsonDataElements = pm.response.json().requests;\r",
									"\r",
									"    pm.test(\"Test Response Status Code\", function(){\r",
									"        pm.expect(pm.response.code).to.be.oneOf([200]);\r",
									"    });\r",
									"\r",
									"    pm.test(\"Response time is less than \" +  environment[\"query-timeout\"] + \"ms\", function(){\r",
									"        pm.expect(pm.response.responseTime).to.be.below(parseInt(environment[\"query-timeout\"]));\r",
									"    });\r",
									"\r",
									"    var subscription = pm.collectionVariables.get('no_staging_subscription');\r",
									"    for(notification of jsonDataElements){\r",
									"        var current_notification = JSON.parse(notification[\"body\"]);\r",
									"        if(current_notification[\"SubscriptionId\"] == subscription[\"Id\"]){\r",
									"            console.log(current_notification);\r",
									"            for (const[key, value] of Object.entries(properties_map)){\r",
									"                propertySpecific(key, current_notification);\r",
									"            }\r",
									"\r",
									"            //FilterParam Check\r",
									"            var filterParam = subscription[\"FilterParam\"];\r",
									"            parsed_filters = get_query_filters(subscription[\"FilterParam\"]);\r",
									"            console.log(parsed_filters);\r",
									"            if (typeof (parsed_filters) == \"object\") {\r",
									"                \r",
									"                attributesUnderTest = [];\r",
									"                propertiesUnderTest = [];\r",
									"\r",
									"                var product = current_notification;\r",
									"                var treeExp = treeIterator(parsed_filters, product);\r",
									"                var booleanTreeExp = eval(treeExp);\r",
									"\r",
									"                console.log(treeExp); console.log(booleanTreeExp);\r",
									"\r",
									"                testMessage = \"FilterParam \" + filterParam + \" Check: \" + product.Name;\r",
									"\r",
									"                pm.test(testMessage, function () {\r",
									"                    pm.expect(booleanTreeExp, \"FilterParam Check\").to.be.true;\r",
									"                });\r",
									"            }\r",
									"        }\r",
									"    }\r",
									"\r",
									"}\r",
									"catch (err) {\r",
									"    pm.test(request.name, function () {\r",
									"        pm.expect.fail(err.toString());\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript",
								"id": "0341dbea-0f83-4101-ad9d-e5c5b6c094a6"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{subscription_auth_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"urlPattern\":\"/{{lta_path}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{mocklab_api_endpoint}}/{{notification_server_url}}/__admin/requests/find",
							"host": [
								"{{mocklab_api_endpoint}}"
							],
							"path": [
								"{{notification_server_url}}",
								"__admin",
								"requests",
								"find"
							]
						}
					},
					"response": []
				},
				{
					"name": "CreateSubscription_withStaging",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"properties_map = {};\r",
									"properties_map.Id=function (element) {pm.expect(element.Id).to.match(/[0-9a-fA-F]{8}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{12}/);};\r",
									"\r",
									"properties_map.FilterParam=function (element) {\r",
									"    pm.expect(element.FilterParam).to.be.a(\"string\");\r",
									"    pm.expect(element.FilterParam).to.be.not.equal(null);\r",
									"};\r",
									"\r",
									"properties_map.LastNotificationDate=function (element) {pm.expect(element.LastNotificationDate).to.be.equal(null);};\r",
									"\r",
									"properties_map.SubmissionDate=function (element) {pm.expect(element.SubmissionDate).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d+([+-][0-2]\\d:[0-5]\\d|Z)/);};\r",
									"\r",
									"properties_map.Priority=function (element) {\r",
									"    pm.expect(element.Priority).to.be.a(\"number\");\r",
									"    pm.expect(element.Priority).to.be.gte(0);\r",
									"    pm.expect(element.Priority).to.be.lte(100);\r",
									"};\r",
									"\r",
									"properties_map.Status=function (element) {\r",
									"    pm.expect(element.Status).to.be.a(\"string\");\r",
									"    pm.expect(element.Status).to.be.oneOf([\"running\"]);\r",
									"};\r",
									"\r",
									"properties_map.StageOrder=function (element) {\r",
									"    pm.expect(element.StageOrder).to.be.equal(true);\r",
									"};\r",
									"\r",
									"properties_map.SubscriptionEvent=function (element) {\r",
									"    pm.expect(element.SubscriptionEvent).to.be.a(\"string\");\r",
									"    pm.expect(element.SubscriptionEvent).to.be.oneOf([\"created\"]);\r",
									"};\r",
									"\r",
									"properties_map.NotificationEndpoint=function (element) {\r",
									"    pm.expect(element.NotificationEndpoint).to.be.a(\"string\");\r",
									"};\r",
									"\r",
									"\r",
									"function propertySpecific(key, order){\r",
									"    if (properties_map[key]) {\r",
									"        pm.test(\"Test Property \"+key+\" for Subscription: \" + order.Id, function(){properties_map[key](order)});\r",
									"    }\r",
									"    else {\r",
									"        pm.test.skip(\"Test Property \"+key+\" for Subscription: \" + order.Id);\r",
									"    }\r",
									"}\r",
									"\r",
									"try {\r",
									"    var jsonDataElements = pm.response.json();\r",
									"\r",
									"    pm.test(\"Test Response Status Code\", function(){\r",
									"        pm.expect(pm.response.code).to.be.oneOf([201,202]);\r",
									"    });\r",
									"\r",
									"    pm.test(\"Test OData context\", function(){\r",
									"        pm.expect( pm.response.json()['@odata.context']).to.include(\"$metadata#OData.CSC.Subscription\");\r",
									"    });\r",
									"\r",
									"    pm.test(\"Response time is less than \" +  environment[\"query-timeout\"] + \"ms\", function(){\r",
									"        pm.expect(pm.response.responseTime).to.be.below(parseInt(environment[\"query-timeout\"]));\r",
									"    });\r",
									"\r",
									"    for (const[key, value] of Object.entries(properties_map)){\r",
									"        propertySpecific(key, jsonDataElements);\r",
									"    }\r",
									"\r",
									"    pm.collectionVariables.set('staging_subscription', jsonDataElements);\r",
									"    pm.collectionVariables.set('subscription_id', jsonDataElements[\"Id\"]);\r",
									"\r",
									"}\r",
									"catch (err) {\r",
									"    pm.test(request.name, function () {\r",
									"        pm.expect.fail(err.toString());\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript",
								"id": "cee5d709-eaf0-4127-af1c-f582996bb57f"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"@odata.context\": \"$metadata#Subscription/entity\",\r\n    \"FilterParam\": \"Products?$filter=startswith(Name,'S1')\",\r\n    \"SubscriptionEvent\": \"created\",\r\n    \"StageOrder\": true,\r\n    \"Priority\": 25,\r\n    \"NotificationEndpoint\": \"http://{{notification_server_url}}/{{lta_path}}\",\r\n    \"NotificationEpUsername\": \"{{notification_username}}\",\r\n    \"NotificationEpPassword\": \"{{notification_password}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{service-root-uri}}/odata/v1/Subscriptions",
							"host": [
								"{{service-root-uri}}"
							],
							"path": [
								"odata",
								"v1",
								"Subscriptions"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetProductDownloadReadinessNotifications",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const supportedOperators = [\"eq\", \"ne\", \"gt\", \"ge\", \"lt\", \"le\", \"and\", \"or\", \"not\"];\r",
									"const supportedFunctions = [\"startswith\", \"contains\", \"endswith\"];\r",
									"\r",
									"function compare(a, b){\r",
									"    if(isNaN(a)){\r",
									"        return String(a).localeCompare(String(b));\r",
									"    } else {\r",
									"        return a > b;\r",
									"    }    \r",
									"}\r",
									"\r",
									"function getOperator(inputString, possibleOperators) {\r",
									"    var op = null;\r",
									"    possibleOperators.forEach(function (el) { if (inputString.indexOf(el) >= 0) { op = el; } });\r",
									"    return op;\r",
									"}\r",
									"\r",
									"function opToJsFormat(op) {\r",
									"    res = null;\r",
									"    switch (op) {\r",
									"        case \"and\":\r",
									"            return \"&&\";\r",
									"        case \"or\":\r",
									"            return \"||\";\r",
									"        case \"not\":\r",
									"            return \"!\";\r",
									"        case \"eq\":\r",
									"            return \"==\";\r",
									"        case \"ne\":\r",
									"            return \"!=\";\r",
									"        case \"gt\":\r",
									"            return \">\";\r",
									"        case \"ge\":\r",
									"            return \">=\";\r",
									"        case \"lt\":\r",
									"            return \"<\";\r",
									"        case \"le\":\r",
									"            return \"<=\";\r",
									"    }\r",
									"}\r",
									"\r",
									"function get_query_filters(input_query) {\r",
									"\r",
									"    console.log(\"Parsing Filter...\");\r",
									"\r",
									"    var matcher = /(contains\\((.+?)\\)|startswith\\((.+?)\\)|endswith\\((.+?)\\)|any\\(.*?\\)|ContentDate\\/Start.*Z|ContentDate\\/End.*Z|[\\w.]+?\\s(?:eq|ne|gt|ge|lt|le)\\s(?:\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d+([+-][0-2]\\d:[0-5]\\d|Z)|[+-]?([0-9]*[.])?[0-9]+|\\w+|'.+?'))/g\r",
									"\r",
									"    var filters = input_query.match(matcher);\r",
									"    var i = 0;\r",
									"    var simpleString = input_query.replace(matcher, function () {\r",
									"        return i++;\r",
									"    });\r",
									"\r",
									"    console.log(simpleString);\r",
									"    console.log(filters);\r",
									"\r",
									"    var filterString = simpleString;\r",
									"\r",
									"    var groupString;\r",
									"    var groupFilter = null;\r",
									"    var testNextLevel = true;\r",
									"\r",
									"    while (testNextLevel) {\r",
									"        var closeParenthesisIndex = filterString.indexOf(')');\r",
									"        if (closeParenthesisIndex !== -1) {\r",
									"            var openParenthesisIndex = filterString.lastIndexOf('(', closeParenthesisIndex);\r",
									"\r",
									"            // Extract the string between the first deepest set of parenthesis\r",
									"            groupString = filterString.substring(openParenthesisIndex + 1, closeParenthesisIndex);\r",
									"\r",
									"            // Modify the filter string replacing the contents of the group string in addition to the parenthesis with the length of the filters array (which will be the index of the filter object that we push)\r",
									"            filterString = filterString.substring(0, openParenthesisIndex) + filters.length + filterString.substring(closeParenthesisIndex + 1);\r",
									"        } else {\r",
									"\r",
									"            // There are no more parenthesis groups\r",
									"            groupString = filterString;\r",
									"            testNextLevel = false;\r",
									"        }\r",
									"\r",
									"        // If the group uses both 'and' and 'or' then return null as an invalid filter string.\r",
									"        if (groupString.indexOf('and') >= 0 && groupString.indexOf('or') >= 0) {\r",
									"            console.log(\"Invalid Filter!\");\r",
									"            return null;\r",
									"        }\r",
									"\r",
									"        // Get the group indexes out of the group string\r",
									"        var groupFilterIndexes = groupString.match(/[0-9]+/g);\r",
									"        var groupFilters = [];\r",
									"\r",
									"        // Create an array with each of the filters who's index matches the group indexes\r",
									"        for (i = 0; i < groupFilterIndexes.length; i++) {\r",
									"            groupFilters.push(filters[Number(groupFilterIndexes[i])]);\r",
									"        }\r",
									"\r",
									"        //cycling over the supported operators\r",
									"        var op = getOperator(groupString, supportedOperators);\r",
									"\r",
									"        //redundant brakets management\r",
									"        if (op == null) {\r",
									"            groupFilters.push(\"true\");\r",
									"            op = \"and\";\r",
									"        }\r",
									"\r",
									"        // Create the filter object and push it onto the filters array\r",
									"        groupFilter = { op: op, filters: groupFilters };\r",
									"        filters.push(groupFilter);\r",
									"    }\r",
									"\r",
									"    return groupFilter;\r",
									"\r",
									"}\r",
									"\r",
									"function checkResponse(inputString, product) {\r",
									"    console.log(\"Input String: \" + inputString);\r",
									"    //console.log(\"Product:\");\r",
									"    //console.log(product);\r",
									"    var responseProperties = Object.keys(product);\r",
									"    var responseAttributes = {};\r",
									"\r",
									"    //Attribute\r",
									"    if (inputString.includes(\"any(\") && inputString.includes(\"/Name\") && inputString.includes(\"/Value\")) {\r",
									"        //Attribute Logic Assertion\r",
									"        if (responseProperties.indexOf(\"Attributes\") >= 0) {\r",
									"            product['Attributes'].forEach(function (el) {\r",
									"                responseAttributes[el.Name] = el.Value;\r",
									"            });\r",
									"\r",
									"            //functions in Attribute Value\r",
									"            var cleanedInputString = inputString.split(\"any(\").pop();\r",
									"            console.log(\"CLEANED ATTRIBUTE INPUTSTRING: \" + cleanedInputString);\r",
									"            if (cleanedInputString.includes(\"(\") && cleanedInputString.includes(\")\")) {\r",
									"                //get the function name\r",
									"                var functionName = cleanedInputString.split(\"(\")[0].split(\" \").pop();\r",
									"                if (supportedFunctions.indexOf(functionName) >= 0) {\r",
									"                    console.log(\"Found Attribute Function: \" + functionName);\r",
									"                    //get the attribute\r",
									"                    var attrToCheck = cleanedInputString.split('Name eq ').pop().split(\" \")[0].replace(/'/g, \"\").trim();\r",
									"                    console.log(\"Attribute KEY Found: \" + attrToCheck);\r",
									"                    //get the cleaned value\r",
									"                    var attrValueToCheck = cleanedInputString.split(\"(\")[1].split(\")\")[0].split(\",\")[1].trim().replace(/'/g, \"\");\r",
									"                    console.log(\"Attribute VALUE Found: \" + attrValueToCheck);\r",
									"\r",
									"                    switch (functionName) {\r",
									"                        case \"contains\":\r",
									"                            attributesUnderTest.push(attrToCheck + \" contains \" + attrValueToCheck);\r",
									"                            return (responseAttributes[attrToCheck].includes(attrValueToCheck)) ? true : false;\r",
									"                        case \"startswith\":\r",
									"                            attributesUnderTest.push(attrToCheck + \" startswith \" + attrValueToCheck);\r",
									"                            return responseAttributes[attrToCheck].startsWith(attrValueToCheck) ? true : false;\r",
									"                        case \"endswith\":\r",
									"                            attributesUnderTest.push(attrToCheck + \" endswith \" + attrValueToCheck);\r",
									"                            return responseAttributes[attrToCheck].endsWith(attrValueToCheck) ? true : false;\r",
									"                    }\r",
									"                }\r",
									"            } else {\r",
									"                //simple any(Attributes Name and Value)\r",
									"                var attrToCheck = inputString.split('Name eq ').pop().split(\" \")[0].replace(/'/g, \"\").trim();\r",
									"                console.log(\"Extracted Attribute KEY: \" + attrToCheck);\r",
									"                var attrValueToCheck = inputString.split('Value eq ').pop().split(\" \")[0].trim().replace(/'/g, \"\").replace(/\\)/g, \"\").replace(/\\\\/g, \"\");\r",
									"                console.log(\"Extracted Attribute VALUE: \" + attrValueToCheck);\r",
									"\r",
									"                attributesUnderTest.push(\"attr:\" + attrToCheck + \" eq \" + attrValueToCheck);\r",
									"\r",
									"                return responseAttributes[attrToCheck] == attrValueToCheck;\r",
									"            }\r",
									"        }\r",
									"    } else {\r",
									"        //inputString contains a function on a Property -> complex property not supported!\r",
									"        if (inputString.includes(\"(\") && inputString.includes(\")\")) {\r",
									"            //get the function name\r",
									"            var functionName = inputString.split(\"(\")[0];\r",
									"            if (supportedFunctions.indexOf(functionName) >= 0) {\r",
									"                console.log(\"Found Function: \" + functionName);\r",
									"                //get the property\r",
									"                var propertyToCheck = inputString.split(\"(\")[1].split(\",\")[0].trim();\r",
									"                console.log(\"Property Found: \" + propertyToCheck);\r",
									"\r",
									"                //get the cleaned value\r",
									"                var propValueToCheck = inputString.split(\"(\")[1].split(\")\")[0].split(\",\")[1].trim().replace(/'/g, \"\");\r",
									"                console.log(\"PropertyValue Found: \" + propValueToCheck);\r",
									"\r",
									"                switch (functionName) {\r",
									"                    case \"contains\":\r",
									"                        propertiesUnderTest.push(propertyToCheck + \" contains \" + propValueToCheck);\r",
									"                        return (product[propertyToCheck].includes(propValueToCheck)) ? true : false;\r",
									"                    case \"startswith\":\r",
									"                        propertiesUnderTest.push(propertyToCheck + \" startswith \" + propValueToCheck);\r",
									"                        return product[propertyToCheck].startsWith(propValueToCheck) ? true : false;\r",
									"                    case \"endswith\":\r",
									"                        propertiesUnderTest.push(propertyToCheck + \" endswith \" + propValueToCheck);\r",
									"                        return product[propertyToCheck].endsWith(propValueToCheck) ? true : false;\r",
									"                }\r",
									"            } else {\r",
									"                console.log(\"Unsupported Function: \" + functionName);\r",
									"                return false;\r",
									"            }\r",
									"        } else {\r",
									"            // single logic assertion in \"AND\" with \"true\"\r",
									"            if (inputString === \"true\") {\r",
									"                console.log(\"True Value!\");\r",
									"                return true;\r",
									"            } else {\r",
									"                //direct Property\r",
									"                var propertyToCheck = inputString.split(\" \")[0].trim();\r",
									"                var operatorToApply = inputString.split(\" \")[1];\r",
									"                var propValueToCheck = inputString.split(\" \")[2].trim().replace(/'/g, \"\");\r",
									"\r",
									"                console.log(\"Property Found: \" + propertyToCheck);\r",
									"                console.log(\"PropertyValue Found: \" + propValueToCheck);\r",
									"\r",
									"                if (supportedOperators.indexOf(operatorToApply) >= 0) {\r",
									"                    console.log(\"Operator To Apply: \" + operatorToApply);\r",
									"                    operator = opToJsFormat(operatorToApply);\r",
									"                    propertiesUnderTest.push(propertyToCheck + \" \" + operatorToApply + \" \" + propValueToCheck);\r",
									"\r",
									"                    var toEvalString = \"\";\r",
									"                    var subProperty = \"\";\r",
									"\r",
									"                    //Complex properties (ContentDate)\r",
									"                    if(propertyToCheck.includes(\"/\")){\r",
									"                        var rootPropertyToCheck = propertyToCheck.split(\"/\")[0];\r",
									"                        subProperty = propertyToCheck.split(\"/\")[1];\r",
									"\r",
									"                        console.log(\"Complex Property: \" + rootPropertyToCheck);\r",
									"                        console.log(\"Sub Property: \" + subProperty);\r",
									"\r",
									"                        toEvalString = \"product[rootPropertyToCheck][subProperty] \" + operator + \" propValueToCheck\";\r",
									"\r",
									"                    } else {\r",
									"                        toEvalString = \"product[propertyToCheck] \" + operator + \" propValueToCheck\";\r",
									"                    }\r",
									"\r",
									"                    return eval(toEvalString);\r",
									"                } else {\r",
									"                    console.log(\"Operator not supported\");\r",
									"                    return false;\r",
									"                }\r",
									"            }\r",
									"        }\r",
									"    }\r",
									"    console.log(\"Logic Assertion not computed: \" + inputString);\r",
									"    return Math.random() >= 0.5;\r",
									"}\r",
									"\r",
									"function treeIterator(tree, product) {\r",
									"    if (tree['filters'].length >= 0) {\r",
									"        var conditions = [];\r",
									"\r",
									"        var logicOperator = getOperator(tree['op'], supportedOperators);\r",
									"        var logicOperator = opToJsFormat(logicOperator);\r",
									"\r",
									"        //general tree: iterates over all filters (child nodes)\r",
									"        for (elem in tree['filters']) {\r",
									"            var currentCondition = typeof ((tree['filters'][elem])) == \"object\" ? treeIterator(tree['filters'][elem], product) : checkResponse(tree['filters'][elem], product);\r",
									"            conditions.push(currentCondition);\r",
									"            //optimize AND and OR\r",
									"            if(logicOperator == \"||\" && currentCondition){\r",
									"                break;\r",
									"            }\r",
									"            if(logicOperator == \"&&\" && !currentCondition){\r",
									"                break;\r",
									"            }\r",
									"        }\r",
									"        console.log(\"CURRENT CONDITIONS\");\r",
									"        console.log(conditions);\r",
									"\r",
									"        //building return string\r",
									"        var resString = \"(\";\r",
									"        for (elem in conditions) {\r",
									"            resString += conditions[elem] + \" \" + logicOperator.toString() + \" \";\r",
									"        }\r",
									"        resString = resString.substring(0, resString.length - 3);\r",
									"        resString += \")\";\r",
									"\r",
									"        console.log(\"RES String: \" + resString);\r",
									"\r",
									"        return resString;\r",
									"    }\r",
									"}\r",
									"\r",
									"properties_map = {};\r",
									"\r",
									"properties_map[\"@odata.context\"]=function(element){\r",
									"    pm.expect(element[\"@odata.context\"]).to.include(\"$metadata#Notification/$entity\");\r",
									"};\r",
									"\r",
									"properties_map.SubscriptionId=function (element) {pm.expect(element.SubscriptionId).to.match(/[0-9a-fA-F]{8}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{12}/);};\r",
									"\r",
									"properties_map.ProductId=function (element) {pm.expect(element.ProductId).to.match(/[0-9a-fA-F]{8}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{12}/);};\r",
									"\r",
									"properties_map.NotificationDate=function (element) {pm.expect(element.NotificationDate).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d+([+-][0-2]\\d:[0-5]\\d|Z)/);};\r",
									"\r",
									"properties_map.Name=function (element) {\r",
									"    pm.expect(element.Name).to.be.a(\"string\");\r",
									"};\r",
									"\r",
									"properties_map.SubscriptionEvent=function (element) {\r",
									"    pm.expect(element.SubscriptionEvent).to.be.a(\"string\");\r",
									"    pm.expect(element.SubscriptionEvent).to.be.oneOf([\"created\"]);\r",
									"};\r",
									"\r",
									"\r",
									"function propertySpecific(key, order){\r",
									"    if (properties_map[key]) {\r",
									"        pm.test(\"Test Property \"+key+\" for Subscription: \" + order.SubscriptionId, function(){properties_map[key](order)});\r",
									"    }\r",
									"    else {\r",
									"        pm.test.skip(\"Test Property \"+key+\" for Subscription: \" + order.SubscriptionId);\r",
									"    }\r",
									"}\r",
									"\r",
									"try {\r",
									"    var jsonDataElements = pm.response.json().requests;\r",
									"\r",
									"    pm.test(\"Test Response Status Code\", function(){\r",
									"        pm.expect(pm.response.code).to.be.oneOf([200]);\r",
									"    });\r",
									"\r",
									"    pm.test(\"Response time is less than \" +  environment[\"query-timeout\"] + \"ms\", function(){\r",
									"        pm.expect(pm.response.responseTime).to.be.below(parseInt(environment[\"query-timeout\"]));\r",
									"    });\r",
									"\r",
									"    var subscription = pm.collectionVariables.get('staging_subscription');\r",
									"    for(notification of jsonDataElements){\r",
									"        var current_notification = JSON.parse(notification[\"body\"]);\r",
									"        console.log(current_notification);\r",
									"        console.log(subscription[\"Id\"]);\r",
									"        if(current_notification[\"SubscriptionId\"] == subscription[\"Id\"]){\r",
									"            console.log(current_notification);\r",
									"            for (const[key, value] of Object.entries(properties_map)){\r",
									"                propertySpecific(key, current_notification);\r",
									"            }\r",
									"\r",
									"            //FilterParam Check\r",
									"            var filterParam = subscription[\"FilterParam\"];\r",
									"            parsed_filters = get_query_filters(subscription[\"FilterParam\"]);\r",
									"            console.log(parsed_filters);\r",
									"            if (typeof (parsed_filters) == \"object\") {\r",
									"                \r",
									"                attributesUnderTest = [];\r",
									"                propertiesUnderTest = [];\r",
									"\r",
									"                var product = current_notification;\r",
									"                var treeExp = treeIterator(parsed_filters, product);\r",
									"                var booleanTreeExp = eval(treeExp);\r",
									"\r",
									"                console.log(treeExp); console.log(booleanTreeExp);\r",
									"\r",
									"                testMessage = \"FilterParam \" + filterParam + \" Check: \" + product.Name;\r",
									"\r",
									"                pm.test(testMessage, function () {\r",
									"                    pm.expect(booleanTreeExp, \"FilterParam Check\").to.be.true;\r",
									"                });\r",
									"            }\r",
									"        }\r",
									"    }\r",
									"\r",
									"}\r",
									"catch (err) {\r",
									"    pm.test(request.name, function () {\r",
									"        pm.expect.fail(err.toString());\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript",
								"id": "0b37b40f-3000-4aab-aa6a-3b90d676638a"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{subscription_auth_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"urlPattern\":\"/{{lta_path}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{mocklab_api_endpoint}}/{{notification_server_url}}/__admin/requests/find",
							"host": [
								"{{mocklab_api_endpoint}}"
							],
							"path": [
								"{{notification_server_url}}",
								"__admin",
								"requests",
								"find"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetStagedOrders",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"properties_map = {};\r",
									"\r",
									"properties_map.Id=function (element) {pm.expect(element.Id).to.match(/[0-9a-fA-F]{8}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{12}/);};\r",
									"\r",
									"properties_map.Status=function (element) {\r",
									"    pm.expect(element.Status).to.be.a(\"string\");\r",
									"    pm.expect(element.Status).to.be.oneOf([\"in_progress\",\"queued\",\"failed\",\"completed\", \"cancelled\"]);\r",
									"};\r",
									"\r",
									"properties_map.StatusMessage=function (element) {\r",
									"    pm.expect(element.StatusMessage).to.be.a(\"string\");\r",
									"    switch(element.Status){\r",
									"        case \"in_progress\":\r",
									"            pm.expect(element.StatusMessage).to.be.oneOf([\"request is under processing\"]);\r",
									"            break;\r",
									"        case \"queued\":\r",
									"            pm.expect(element.StatusMessage).to.be.oneOf([\"request is queued\"]);\r",
									"            break;\r",
									"        case \"failed\":\r",
									"            pm.expect(element.StatusMessage).to.be.oneOf([\r",
									"                \"product currently unavailable\",\r",
									"                \"product retrieval has failed\",\r",
									"                \"product not found on LTA\"]);\r",
									"            break;\r",
									"        case \"completed\":\r",
									"            pm.expect(element.StatusMessage).to.be.oneOf([\"request product is available\"]);\r",
									"            break;\r",
									"        case \"cancelled\":\r",
									"            pm.expect(element.StatusMessage).to.be.oneOf([\"request cancelled by user\"]);\r",
									"            break;\r",
									"    }\r",
									"};\r",
									"properties_map.Priority=function (element) {pm.expect(element.Priority).to.be.a(\"number\");}; \r",
									"properties_map.SubmissionDate=function (element) {pm.expect(element.SubmissionDate).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d+([+-][0-2]\\d:[0-5]\\d|Z)/);};\r",
									"properties_map.EstimatedDate=function (element) {pm.expect(element.EstimatedDate).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);};\r",
									"\r",
									"properties_map.OrderSize=function (element) {pm.expect(element.OrderSize).to.be.a(\"number\");};\r",
									"properties_map.CompletedDate=function (element) {\r",
									"    if(element.CompletedDate){\r",
									"        switch(element.Status){\r",
									"            case \"completed\":\r",
									"                pm.expect(element.CompletedDate).to.be.a(\"string\");\r",
									"                pm.expect(element.CompletedDate).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d+([+-][0-2]\\d:[0-5]\\d|Z)/);\r",
									"                break;\r",
									"            default:\r",
									"                pm.expect(element.CompletedDate).to.be.equal(null)\r",
									"        }\r",
									"    }\r",
									"}\r",
									"    \r",
									"properties_map.EvictionDate=function (element) {\r",
									"    if(element.EvictionDate){\r",
									"        switch(element.Status){\r",
									"            case \"completed\":\r",
									"                pm.expect(element.EvictionDate).to.be.a(\"string\");\r",
									"                pm.expect(element.EvictionDate).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d+([+-][0-2]\\d:[0-5]\\d|Z)/);\r",
									"                break;\r",
									"            default:\r",
									"                pm.expect(element.EvictionDate).to.be.equal(null) \r",
									"        }\r",
									"    }\r",
									"}\r",
									"\r",
									"function propertySpecific(key, order){\r",
									"    if (properties_map[key]) {\r",
									"        pm.test(\"Test Property \"+key+\" for Order: \" + order.Id, function(){properties_map[key](order)});\r",
									"    }\r",
									"    else {\r",
									"        pm.test.skip(\"Test Property \"+key+\" for Order: \" + order.Id);\r",
									"    }\r",
									"}\r",
									"\r",
									"try {\r",
									"    var jsonDataElements = pm.response.json().value[0];\r",
									"\r",
									"    pm.test(\"Test Response Status Code\", function(){\r",
									"        pm.expect(pm.response.code).to.be.oneOf([200]);\r",
									"    });\r",
									"\r",
									"    pm.test(\"Test OData context\", function(){\r",
									"        pm.expect( pm.response.json()['@odata.context']).to.include(\"$metadata#Orders\");\r",
									"    });\r",
									"\r",
									"    pm.test(\"Response time is less than \" +  environment[\"query-timeout\"] + \"ms\", function(){\r",
									"        pm.expect(pm.response.responseTime).to.be.below(parseInt(environment[\"query-timeout\"]));\r",
									"    });\r",
									"\r",
									"    var order_response = {};\r",
									"\r",
									"    for (const[key, value] of Object.entries(properties_map)){\r",
									"        propertySpecific(key, jsonDataElements);\r",
									"    }\r",
									"\r",
									"} catch (err) {\r",
									"    pm.test(request.name, function () {\r",
									"        pm.expect.fail(err.toString());\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript",
								"id": "41951a28-6768-4164-a465-7b1eb9558f56"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{service-root-uri}}/odata/v1/Subscriptions({{subscription_id}})/Orders",
							"host": [
								"{{service-root-uri}}"
							],
							"path": [
								"odata",
								"v1",
								"Subscriptions({{subscription_id}})",
								"Orders"
							]
						}
					},
					"response": []
				},
				{
					"name": "CreateSubscription_deletion",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"properties_map = {};\r",
									"properties_map.Id=function (element) {pm.expect(element.Id).to.match(/[0-9a-fA-F]{8}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{12}/);};\r",
									"\r",
									"properties_map.FilterParam=function (element) {\r",
									"    pm.expect(element.FilterParam).to.be.a(\"string\");\r",
									"    pm.expect(element.FilterParam).to.be.not.equal(null);\r",
									"};\r",
									"\r",
									"properties_map.LastNotificationDate=function (element) {pm.expect(element.LastNotificationDate).to.be.equal(null);};\r",
									"\r",
									"properties_map.SubmissionDate=function (element) {pm.expect(element.SubmissionDate).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d+([+-][0-2]\\d:[0-5]\\d|Z)/);};\r",
									"\r",
									"properties_map.Priority=function (element) {\r",
									"    pm.expect(element.Priority).to.be.equal(null);\r",
									"};\r",
									"\r",
									"properties_map.Status=function (element) {\r",
									"    pm.expect(element.Status).to.be.a(\"string\");\r",
									"    pm.expect(element.Status).to.be.oneOf([\"running\"]);\r",
									"};\r",
									"\r",
									"properties_map.StageOrder=function (element) {\r",
									"    pm.expect(element.StageOrder).to.be.equal(false);\r",
									"};\r",
									"\r",
									"properties_map.SubscriptionEvent=function (element) {\r",
									"    pm.expect(element.SubscriptionEvent).to.be.a(\"string\");\r",
									"    pm.expect(element.SubscriptionEvent).to.be.oneOf([\"deleted\"]);\r",
									"};\r",
									"\r",
									"properties_map.NotificationEndpoint=function (element) {\r",
									"    pm.expect(element.NotificationEndpoint).to.be.a(\"string\");\r",
									"};\r",
									"\r",
									"\r",
									"function propertySpecific(key, order){\r",
									"    if (properties_map[key]) {\r",
									"        pm.test(\"Test Property \"+key+\" for Subscription: \" + order.Id, function(){properties_map[key](order)});\r",
									"    }\r",
									"    else {\r",
									"        pm.test.skip(\"Test Property \"+key+\" for Subscription: \" + order.Id);\r",
									"    }\r",
									"}\r",
									"\r",
									"try {\r",
									"    var jsonDataElements = pm.response.json();\r",
									"\r",
									"    pm.test(\"Test Response Status Code\", function(){\r",
									"        pm.expect(pm.response.code).to.be.oneOf([201,202]);\r",
									"    });\r",
									"\r",
									"    pm.test(\"Test OData context\", function(){\r",
									"        pm.expect( pm.response.json()['@odata.context']).to.include(\"$metadata#OData.CSC.Subscription\");\r",
									"    });\r",
									"\r",
									"    pm.test(\"Response time is less than \" +  environment[\"query-timeout\"] + \"ms\", function(){\r",
									"        pm.expect(pm.response.responseTime).to.be.below(parseInt(environment[\"query-timeout\"]));\r",
									"    });\r",
									"\r",
									"    for (const[key, value] of Object.entries(properties_map)){\r",
									"        propertySpecific(key, jsonDataElements);\r",
									"    }\r",
									"\r",
									"    pm.collectionVariables.set('product_deleted_subscription', jsonDataElements);\r",
									"}\r",
									"catch (err) {\r",
									"    pm.test(request.name, function () {\r",
									"        pm.expect.fail(err.toString());\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript",
								"id": "f689f886-65e5-4417-86df-9ec6a3cc92b9"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"@odata.context\": \"$metadata#Subscription/entity\",\r\n    \"FilterParam\": \"Products?$filter=startswith(Name,'S1')\",\r\n    \"SubscriptionEvent\": \"deleted\",\r\n    \"StageOrder\": false,\r\n    \"Priority\": 25,\r\n    \"NotificationEndpoint\": \"http://{{notification_server_url}}/{{lta_path}}\",\r\n    \"NotificationEpUsername\": \"{{notification_username}}\",\r\n    \"NotificationEpPassword\": \"{{notification_password}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{service-root-uri}}/odata/v1/Subscriptions",
							"host": [
								"{{service-root-uri}}"
							],
							"path": [
								"odata",
								"v1",
								"Subscriptions"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetProductDeletedNotifications",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const supportedOperators = [\"eq\", \"ne\", \"gt\", \"ge\", \"lt\", \"le\", \"and\", \"or\", \"not\"];\r",
									"const supportedFunctions = [\"startswith\", \"contains\", \"endswith\"];\r",
									"\r",
									"function compare(a, b){\r",
									"    if(isNaN(a)){\r",
									"        return String(a).localeCompare(String(b));\r",
									"    } else {\r",
									"        return a > b;\r",
									"    }    \r",
									"}\r",
									"\r",
									"function getOperator(inputString, possibleOperators) {\r",
									"    var op = null;\r",
									"    possibleOperators.forEach(function (el) { if (inputString.indexOf(el) >= 0) { op = el; } });\r",
									"    return op;\r",
									"}\r",
									"\r",
									"function opToJsFormat(op) {\r",
									"    res = null;\r",
									"    switch (op) {\r",
									"        case \"and\":\r",
									"            return \"&&\";\r",
									"        case \"or\":\r",
									"            return \"||\";\r",
									"        case \"not\":\r",
									"            return \"!\";\r",
									"        case \"eq\":\r",
									"            return \"==\";\r",
									"        case \"ne\":\r",
									"            return \"!=\";\r",
									"        case \"gt\":\r",
									"            return \">\";\r",
									"        case \"ge\":\r",
									"            return \">=\";\r",
									"        case \"lt\":\r",
									"            return \"<\";\r",
									"        case \"le\":\r",
									"            return \"<=\";\r",
									"    }\r",
									"}\r",
									"\r",
									"function get_query_filters(input_query) {\r",
									"\r",
									"    console.log(\"Parsing Filter...\");\r",
									"\r",
									"    var matcher = /(contains\\((.+?)\\)|startswith\\((.+?)\\)|endswith\\((.+?)\\)|any\\(.*?\\)|ContentDate\\/Start.*Z|ContentDate\\/End.*Z|[\\w.]+?\\s(?:eq|ne|gt|ge|lt|le)\\s(?:\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d+([+-][0-2]\\d:[0-5]\\d|Z)|[+-]?([0-9]*[.])?[0-9]+|\\w+|'.+?'))/g\r",
									"\r",
									"    var filters = input_query.match(matcher);\r",
									"    var i = 0;\r",
									"    var simpleString = input_query.replace(matcher, function () {\r",
									"        return i++;\r",
									"    });\r",
									"\r",
									"    console.log(simpleString);\r",
									"    console.log(filters);\r",
									"\r",
									"    var filterString = simpleString;\r",
									"\r",
									"    var groupString;\r",
									"    var groupFilter = null;\r",
									"    var testNextLevel = true;\r",
									"\r",
									"    while (testNextLevel) {\r",
									"        var closeParenthesisIndex = filterString.indexOf(')');\r",
									"        if (closeParenthesisIndex !== -1) {\r",
									"            var openParenthesisIndex = filterString.lastIndexOf('(', closeParenthesisIndex);\r",
									"\r",
									"            // Extract the string between the first deepest set of parenthesis\r",
									"            groupString = filterString.substring(openParenthesisIndex + 1, closeParenthesisIndex);\r",
									"\r",
									"            // Modify the filter string replacing the contents of the group string in addition to the parenthesis with the length of the filters array (which will be the index of the filter object that we push)\r",
									"            filterString = filterString.substring(0, openParenthesisIndex) + filters.length + filterString.substring(closeParenthesisIndex + 1);\r",
									"        } else {\r",
									"\r",
									"            // There are no more parenthesis groups\r",
									"            groupString = filterString;\r",
									"            testNextLevel = false;\r",
									"        }\r",
									"\r",
									"        // If the group uses both 'and' and 'or' then return null as an invalid filter string.\r",
									"        if (groupString.indexOf('and') >= 0 && groupString.indexOf('or') >= 0) {\r",
									"            console.log(\"Invalid Filter!\");\r",
									"            return null;\r",
									"        }\r",
									"\r",
									"        // Get the group indexes out of the group string\r",
									"        var groupFilterIndexes = groupString.match(/[0-9]+/g);\r",
									"        var groupFilters = [];\r",
									"\r",
									"        // Create an array with each of the filters who's index matches the group indexes\r",
									"        for (i = 0; i < groupFilterIndexes.length; i++) {\r",
									"            groupFilters.push(filters[Number(groupFilterIndexes[i])]);\r",
									"        }\r",
									"\r",
									"        //cycling over the supported operators\r",
									"        var op = getOperator(groupString, supportedOperators);\r",
									"\r",
									"        //redundant brakets management\r",
									"        if (op == null) {\r",
									"            groupFilters.push(\"true\");\r",
									"            op = \"and\";\r",
									"        }\r",
									"\r",
									"        // Create the filter object and push it onto the filters array\r",
									"        groupFilter = { op: op, filters: groupFilters };\r",
									"        filters.push(groupFilter);\r",
									"    }\r",
									"\r",
									"    return groupFilter;\r",
									"\r",
									"}\r",
									"\r",
									"function checkResponse(inputString, product) {\r",
									"    console.log(\"Input String: \" + inputString);\r",
									"    //console.log(\"Product:\");\r",
									"    //console.log(product);\r",
									"    var responseProperties = Object.keys(product);\r",
									"    var responseAttributes = {};\r",
									"\r",
									"    //Attribute\r",
									"    if (inputString.includes(\"any(\") && inputString.includes(\"/Name\") && inputString.includes(\"/Value\")) {\r",
									"        //Attribute Logic Assertion\r",
									"        if (responseProperties.indexOf(\"Attributes\") >= 0) {\r",
									"            product['Attributes'].forEach(function (el) {\r",
									"                responseAttributes[el.Name] = el.Value;\r",
									"            });\r",
									"\r",
									"            //functions in Attribute Value\r",
									"            var cleanedInputString = inputString.split(\"any(\").pop();\r",
									"            console.log(\"CLEANED ATTRIBUTE INPUTSTRING: \" + cleanedInputString);\r",
									"            if (cleanedInputString.includes(\"(\") && cleanedInputString.includes(\")\")) {\r",
									"                //get the function name\r",
									"                var functionName = cleanedInputString.split(\"(\")[0].split(\" \").pop();\r",
									"                if (supportedFunctions.indexOf(functionName) >= 0) {\r",
									"                    console.log(\"Found Attribute Function: \" + functionName);\r",
									"                    //get the attribute\r",
									"                    var attrToCheck = cleanedInputString.split('Name eq ').pop().split(\" \")[0].replace(/'/g, \"\").trim();\r",
									"                    console.log(\"Attribute KEY Found: \" + attrToCheck);\r",
									"                    //get the cleaned value\r",
									"                    var attrValueToCheck = cleanedInputString.split(\"(\")[1].split(\")\")[0].split(\",\")[1].trim().replace(/'/g, \"\");\r",
									"                    console.log(\"Attribute VALUE Found: \" + attrValueToCheck);\r",
									"\r",
									"                    switch (functionName) {\r",
									"                        case \"contains\":\r",
									"                            attributesUnderTest.push(attrToCheck + \" contains \" + attrValueToCheck);\r",
									"                            return (responseAttributes[attrToCheck].includes(attrValueToCheck)) ? true : false;\r",
									"                        case \"startswith\":\r",
									"                            attributesUnderTest.push(attrToCheck + \" startswith \" + attrValueToCheck);\r",
									"                            return responseAttributes[attrToCheck].startsWith(attrValueToCheck) ? true : false;\r",
									"                        case \"endswith\":\r",
									"                            attributesUnderTest.push(attrToCheck + \" endswith \" + attrValueToCheck);\r",
									"                            return responseAttributes[attrToCheck].endsWith(attrValueToCheck) ? true : false;\r",
									"                    }\r",
									"                }\r",
									"            } else {\r",
									"                //simple any(Attributes Name and Value)\r",
									"                var attrToCheck = inputString.split('Name eq ').pop().split(\" \")[0].replace(/'/g, \"\").trim();\r",
									"                console.log(\"Extracted Attribute KEY: \" + attrToCheck);\r",
									"                var attrValueToCheck = inputString.split('Value eq ').pop().split(\" \")[0].trim().replace(/'/g, \"\").replace(/\\)/g, \"\").replace(/\\\\/g, \"\");\r",
									"                console.log(\"Extracted Attribute VALUE: \" + attrValueToCheck);\r",
									"\r",
									"                attributesUnderTest.push(\"attr:\" + attrToCheck + \" eq \" + attrValueToCheck);\r",
									"\r",
									"                return responseAttributes[attrToCheck] == attrValueToCheck;\r",
									"            }\r",
									"        }\r",
									"    } else {\r",
									"        //inputString contains a function on a Property -> complex property not supported!\r",
									"        if (inputString.includes(\"(\") && inputString.includes(\")\")) {\r",
									"            //get the function name\r",
									"            var functionName = inputString.split(\"(\")[0];\r",
									"            if (supportedFunctions.indexOf(functionName) >= 0) {\r",
									"                console.log(\"Found Function: \" + functionName);\r",
									"                //get the property\r",
									"                var propertyToCheck = inputString.split(\"(\")[1].split(\",\")[0].trim();\r",
									"                console.log(\"Property Found: \" + propertyToCheck);\r",
									"\r",
									"                //get the cleaned value\r",
									"                var propValueToCheck = inputString.split(\"(\")[1].split(\")\")[0].split(\",\")[1].trim().replace(/'/g, \"\");\r",
									"                console.log(\"PropertyValue Found: \" + propValueToCheck);\r",
									"\r",
									"                switch (functionName) {\r",
									"                    case \"contains\":\r",
									"                        propertiesUnderTest.push(propertyToCheck + \" contains \" + propValueToCheck);\r",
									"                        return (product[propertyToCheck].includes(propValueToCheck)) ? true : false;\r",
									"                    case \"startswith\":\r",
									"                        propertiesUnderTest.push(propertyToCheck + \" startswith \" + propValueToCheck);\r",
									"                        return product[propertyToCheck].startsWith(propValueToCheck) ? true : false;\r",
									"                    case \"endswith\":\r",
									"                        propertiesUnderTest.push(propertyToCheck + \" endswith \" + propValueToCheck);\r",
									"                        return product[propertyToCheck].endsWith(propValueToCheck) ? true : false;\r",
									"                }\r",
									"            } else {\r",
									"                console.log(\"Unsupported Function: \" + functionName);\r",
									"                return false;\r",
									"            }\r",
									"        } else {\r",
									"            // single logic assertion in \"AND\" with \"true\"\r",
									"            if (inputString === \"true\") {\r",
									"                console.log(\"True Value!\");\r",
									"                return true;\r",
									"            } else {\r",
									"                //direct Property\r",
									"                var propertyToCheck = inputString.split(\" \")[0].trim();\r",
									"                var operatorToApply = inputString.split(\" \")[1];\r",
									"                var propValueToCheck = inputString.split(\" \")[2].trim().replace(/'/g, \"\");\r",
									"\r",
									"                console.log(\"Property Found: \" + propertyToCheck);\r",
									"                console.log(\"PropertyValue Found: \" + propValueToCheck);\r",
									"\r",
									"                if (supportedOperators.indexOf(operatorToApply) >= 0) {\r",
									"                    console.log(\"Operator To Apply: \" + operatorToApply);\r",
									"                    operator = opToJsFormat(operatorToApply);\r",
									"                    propertiesUnderTest.push(propertyToCheck + \" \" + operatorToApply + \" \" + propValueToCheck);\r",
									"\r",
									"                    var toEvalString = \"\";\r",
									"                    var subProperty = \"\";\r",
									"\r",
									"                    //Complex properties (ContentDate)\r",
									"                    if(propertyToCheck.includes(\"/\")){\r",
									"                        var rootPropertyToCheck = propertyToCheck.split(\"/\")[0];\r",
									"                        subProperty = propertyToCheck.split(\"/\")[1];\r",
									"\r",
									"                        console.log(\"Complex Property: \" + rootPropertyToCheck);\r",
									"                        console.log(\"Sub Property: \" + subProperty);\r",
									"\r",
									"                        toEvalString = \"product[rootPropertyToCheck][subProperty] \" + operator + \" propValueToCheck\";\r",
									"\r",
									"                    } else {\r",
									"                        toEvalString = \"product[propertyToCheck] \" + operator + \" propValueToCheck\";\r",
									"                    }\r",
									"\r",
									"                    return eval(toEvalString);\r",
									"                } else {\r",
									"                    console.log(\"Operator not supported\");\r",
									"                    return false;\r",
									"                }\r",
									"            }\r",
									"        }\r",
									"    }\r",
									"    console.log(\"Logic Assertion not computed: \" + inputString);\r",
									"    return Math.random() >= 0.5;\r",
									"}\r",
									"\r",
									"function treeIterator(tree, product) {\r",
									"    if (tree['filters'].length >= 0) {\r",
									"        var conditions = [];\r",
									"\r",
									"        var logicOperator = getOperator(tree['op'], supportedOperators);\r",
									"        var logicOperator = opToJsFormat(logicOperator);\r",
									"\r",
									"        //general tree: iterates over all filters (child nodes)\r",
									"        for (elem in tree['filters']) {\r",
									"            var currentCondition = typeof ((tree['filters'][elem])) == \"object\" ? treeIterator(tree['filters'][elem], product) : checkResponse(tree['filters'][elem], product);\r",
									"            conditions.push(currentCondition);\r",
									"            //optimize AND and OR\r",
									"            if(logicOperator == \"||\" && currentCondition){\r",
									"                break;\r",
									"            }\r",
									"            if(logicOperator == \"&&\" && !currentCondition){\r",
									"                break;\r",
									"            }\r",
									"        }\r",
									"        console.log(\"CURRENT CONDITIONS\");\r",
									"        console.log(conditions);\r",
									"\r",
									"        //building return string\r",
									"        var resString = \"(\";\r",
									"        for (elem in conditions) {\r",
									"            resString += conditions[elem] + \" \" + logicOperator.toString() + \" \";\r",
									"        }\r",
									"        resString = resString.substring(0, resString.length - 3);\r",
									"        resString += \")\";\r",
									"\r",
									"        console.log(\"RES String: \" + resString);\r",
									"\r",
									"        return resString;\r",
									"    }\r",
									"}\r",
									"\r",
									"properties_map = {};\r",
									"\r",
									"properties_map[\"@odata.context\"]=function(element){\r",
									"    pm.expect(element[\"@odata.context\"]).to.include(\"$metadata#Notification/$entity\");\r",
									"};\r",
									"\r",
									"properties_map.SubscriptionId=function (element) {pm.expect(element.SubscriptionId).to.match(/[0-9a-fA-F]{8}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{12}/);};\r",
									"\r",
									"properties_map.ProductId=function (element) {pm.expect(element.ProductId).to.match(/[0-9a-fA-F]{8}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{12}/);};\r",
									"\r",
									"properties_map.NotificationDate=function (element) {pm.expect(element.NotificationDate).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d+([+-][0-2]\\d:[0-5]\\d|Z)/);};\r",
									"\r",
									"properties_map.Name=function (element) {\r",
									"    pm.expect(element.Name).to.be.a(\"string\");\r",
									"};\r",
									"\r",
									"properties_map.SubscriptionEvent=function (element) {\r",
									"    pm.expect(element.SubscriptionEvent).to.be.a(\"string\");\r",
									"    pm.expect(element.SubscriptionEvent).to.be.oneOf([\"deleted\"]);\r",
									"};\r",
									"\r",
									"\r",
									"function propertySpecific(key, order){\r",
									"    if (properties_map[key]) {\r",
									"        pm.test(\"Test Property \"+key+\" for Subscription: \" + order.SubscriptionId, function(){properties_map[key](order)});\r",
									"    }\r",
									"    else {\r",
									"        pm.test.skip(\"Test Property \"+key+\" for Subscription: \" + order.SubscriptionId);\r",
									"    }\r",
									"}\r",
									"\r",
									"try {\r",
									"    var jsonDataElements = pm.response.json().requests;\r",
									"\r",
									"    pm.test(\"Test Response Status Code\", function(){\r",
									"        pm.expect(pm.response.code).to.be.oneOf([200]);\r",
									"    });\r",
									"\r",
									"    pm.test(\"Response time is less than \" +  environment[\"query-timeout\"] + \"ms\", function(){\r",
									"        pm.expect(pm.response.responseTime).to.be.below(parseInt(environment[\"query-timeout\"]));\r",
									"    });\r",
									"\r",
									"    var subscription = pm.collectionVariables.get('product_deleted_subscription');\r",
									"    for(notification of jsonDataElements){\r",
									"        var current_notification = JSON.parse(notification[\"body\"]);\r",
									"        console.log(current_notification);\r",
									"        console.log(subscription[\"Id\"]);\r",
									"        if(current_notification[\"SubscriptionId\"] == subscription[\"Id\"]){\r",
									"            console.log(current_notification);\r",
									"            for (const[key, value] of Object.entries(properties_map)){\r",
									"                propertySpecific(key, current_notification);\r",
									"            }\r",
									"\r",
									"            //FilterParam Check\r",
									"            var filterParam = subscription[\"FilterParam\"];\r",
									"            parsed_filters = get_query_filters(subscription[\"FilterParam\"]);\r",
									"            console.log(parsed_filters);\r",
									"            if (typeof (parsed_filters) == \"object\") {\r",
									"                \r",
									"                attributesUnderTest = [];\r",
									"                propertiesUnderTest = [];\r",
									"\r",
									"                var product = current_notification;\r",
									"                var treeExp = treeIterator(parsed_filters, product);\r",
									"                var booleanTreeExp = eval(treeExp);\r",
									"\r",
									"                console.log(treeExp); console.log(booleanTreeExp);\r",
									"\r",
									"                testMessage = \"FilterParam \" + filterParam + \" Check: \" + product.Name;\r",
									"\r",
									"                pm.test(testMessage, function () {\r",
									"                    pm.expect(booleanTreeExp, \"FilterParam Check\").to.be.true;\r",
									"                });\r",
									"            }\r",
									"        }\r",
									"    }\r",
									"\r",
									"}\r",
									"catch (err) {\r",
									"    pm.test(request.name, function () {\r",
									"        pm.expect.fail(err.toString());\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript",
								"id": "5f5bec3d-6410-48d7-bee8-abe7719a6e2a"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{subscription_auth_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"urlPattern\":\"/{{lta_path}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{mocklab_api_endpoint}}/{{notification_server_url}}/__admin/requests/find",
							"host": [
								"{{mocklab_api_endpoint}}"
							],
							"path": [
								"{{notification_server_url}}",
								"__admin",
								"requests",
								"find"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get_Offline_Products",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"try {\r",
									"    var jsonDataElements = pm.response.json().value;\r",
									"\r",
									"    console.log(\"Response: \");\r",
									"    console.log(jsonDataElements);\r",
									"\r",
									"    pm.test(\"Response time is less than \" + environment[\"query-timeout\"] + \"ms\", function () {\r",
									"        pm.expect(pm.response.responseTime).to.be.below(parseInt(environment[\"query-timeout\"]));\r",
									"    });\r",
									"\r",
									"    //MIN number of Records Test\r",
									"    var minimumExpRecords = parseInt(pm.collectionVariables.get('resp_min_records'));\r",
									"    pm.test(\"Expected minimum number of products Test: \" + minimumExpRecords, function(){\r",
									"        pm.expect(jsonDataElements.length).to.be.gte(minimumExpRecords);\r",
									"    });\r",
									"\r",
									"    pm.test(\"Test OData context\", function(){\r",
									"        query_string = pm.request.url.getQueryString();\r",
									"        if(query_string.includes(\"$expand=Attributes\")){\r",
									"            pm.expect( pm.response.json()['@odata.context']).to.include(\"$metadata#Products(Attributes())\");\r",
									"        } else{\r",
									"            pm.expect( pm.response.json()['@odata.context']).to.include(\"$metadata#Products\");\r",
									"        }\r",
									"    });\r",
									"\r",
									"    for (var counter = 0;  counter  < jsonDataElements.length; counter++){\r",
									"        var product = jsonDataElements[counter];\r",
									"        console.log(\"Processing Product: \"+product.Name+\" - \"+product.Id);\r",
									"\r",
									"        pm.test(\"Test Properties for product: \" + product.Id, function(){\r",
									"            pm.expect(product).to.have.property(\"Id\");\r",
									"            pm.expect(product.Id).to.be.a(\"string\");\r",
									"            pm.expect(product).to.have.property(\"Name\");\r",
									"            pm.expect(product.Name).to.be.a(\"string\");\r",
									"            pm.expect(product).to.have.property(\"ContentType\");\r",
									"            pm.expect(product.ContentType).to.be.a(\"string\");\r",
									"            pm.expect(product).to.have.property(\"ContentLength\");\r",
									"            pm.expect(product.ContentLength).to.be.a(\"number\");\r",
									"            pm.expect(product).to.have.property(\"OriginDate\");\r",
									"            pm.expect(product.OriginDate).to.be.a(\"string\");\r",
									"            pm.expect(product).to.have.property(\"PublicationDate\");\r",
									"            pm.expect(product.PublicationDate).to.be.a(\"string\");\r",
									"            pm.expect(product).to.have.property(\"ModificationDate\");\r",
									"            pm.expect(product.ModificationDate).to.be.a(\"string\");\r",
									"            pm.expect(product).to.have.property(\"Online\");\r",
									"            pm.expect(product.Online).to.be.a(\"boolean\");\r",
									"            pm.expect(product).to.have.property(\"Checksum\");\r",
									"            pm.expect(product.Checksum).to.be.an(\"array\");\r",
									"            pm.expect(product).to.have.property(\"ContentDate\");\r",
									"            pm.expect(product.ContentDate).to.be.an(\"object\");\r",
									"        }); \r",
									" \r",
									"        if(\"Attributes\" in jsonDataElements[counter]){\r",
									"            schema_seen = {};\r",
									"\r",
									"            pm.test(\"Test Attributes list for product: \" + jsonDataElements[counter].Id, function(){\r",
									"                pm.expect(jsonDataElements[counter].Attributes.length).to.be.above(0);\r",
									"                jsonDataElements[counter].Attributes.forEach(function(elem){\r",
									"                    pm.expect(elem).to.have.all.keys(\"Name\", \"Value\", \"ValueType\");\r",
									"                });\r",
									"            });  \r",
									"        }\r",
									"    }\r",
									"\r",
									"    pm.collectionVariables.set('offline_products', jsonDataElements);\r",
									"   \r",
									"}\r",
									"\r",
									"catch (err) {\r",
									"    pm.test(request.name, function () {\r",
									"        pm.expect.fail(err.toString());\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript",
								"id": "ed74662c-d4d6-4ef0-a2dc-ba12ff716011"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{service-root-uri}}/odata/v1/Products?$filter=Online eq false",
							"host": [
								"{{service-root-uri}}"
							],
							"path": [
								"odata",
								"v1",
								"Products"
							],
							"query": [
								{
									"key": "$filter",
									"value": "Online eq false"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Order_Offline_Product",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"try {\r",
									"\r",
									"    var current_offline_product_id = decodeURIComponent(pm.request.url.getPathWithQuery()).split(\"Products(\")[1].split(\")/OData.CSC.Order\")[0];\r",
									"\r",
									"    pm.variables.unset(\"current_offline_product_id\");\r",
									"    if(current_offline_product_id == \"{{current_offline_product_id}}\"){\r",
									"        var current_offline_products = pm.collectionVariables.get('offline_products');\r",
									"        //get random product from collected offline products\r",
									"        var random_product = current_offline_products[Math.floor(Math.random()*current_offline_products.length)];\r",
									"        pm.variables.set(\"current_offline_product_id\", random_product[\"Id\"]);\r",
									"    } else {\r",
									"        pm.variables.set(\"current_offline_product_id\", current_offline_product_id);\r",
									"    }\r",
									"\r",
									"    console.log(pm.variables.get(\"current_offline_product_id\"));\r",
									"    \r",
									"} catch (err) {\r",
									"    pm.test(\"Filters Test\", function () {\r",
									"        pm.expect.fail(err.toString());\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript",
								"id": "05c088e6-7f02-4177-bfaf-7be09ff17d9d"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"properties_map = {};\r",
									"\r",
									"properties_map.Id=function (element) {pm.expect(element.Id).to.match(/[0-9a-fA-F]{8}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{12}/);};\r",
									"\r",
									"properties_map.Status=function (element) {\r",
									"    pm.expect(element.Status).to.be.a(\"string\");\r",
									"    pm.expect(element.Status).to.be.oneOf([\"in_progress\",\"queued\",\"failed\",\"completed\", \"cancelled\"]);\r",
									"};\r",
									"properties_map.StatusMessage=function (element) {\r",
									"    pm.expect(element.StatusMessage).to.be.a(\"string\");\r",
									"    pm.expect(element.StatusMessage).to.be.oneOf([\r",
									"        \"request is under processing\",\r",
									"        \"request is queued\",\r",
									"        \"request product is available\",\r",
									"        \"product currently unavailable\",\r",
									"        \"request cancelled by user\"]);\r",
									"};\r",
									"properties_map.Priority=function (element) {pm.expect(element.Priority).to.be.a(\"number\");}; \r",
									"properties_map.SubmissionDate=function (element) {pm.expect(element.SubmissionDate).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d+([+-][0-2]\\d:[0-5]\\d|Z)/);};\r",
									"properties_map.EstimatedDate=function (element) {pm.expect(element.EstimatedDate).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);};\r",
									"\r",
									"// properties_map.OrderSize=function (element) {pm.expect(element.OrderSize).to.be.a(\"number\");};\r",
									"// properties_map.CompletedDate=function (element) {pm.expect(element.CompletedDate).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d+([+-][0-2]\\d:[0-5]\\d|Z)/);};\r",
									"// properties_map.EvictionDate=function (element) {if(element.EvictionDate){ pm.expect(element.EvictionDate).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d+([+-][0-2]\\d:[0-5]\\d|Z)/); }};\r",
									"\r",
									"function propertySpecific(key, order){\r",
									"    if (properties_map[key]) {\r",
									"        pm.test(\"Test Property \"+key+\" for Order: \" + order.Id, function(){properties_map[key](order)});\r",
									"    }\r",
									"    else {\r",
									"        pm.test.skip(\"Test Property \"+key+\" for Order: \" + order.Id);\r",
									"    }\r",
									"}\r",
									"\r",
									"try {\r",
									"    var jsonDataElements = pm.response.json();\r",
									"\r",
									"    pm.test(\"Test Response Status Code\", function(){\r",
									"        pm.expect(pm.response.code).to.be.oneOf([201,202]);\r",
									"    });\r",
									"\r",
									"    pm.test(\"Test OData context\", function(){\r",
									"        pm.expect( pm.response.json()['@odata.context']).to.include(\"$metadata#OData.CSC.Order\");\r",
									"    });\r",
									"\r",
									"    pm.test(\"Response time is less than \" +  environment[\"query-timeout\"] + \"ms\", function(){\r",
									"        pm.expect(pm.response.responseTime).to.be.below(parseInt(environment[\"query-timeout\"]));\r",
									"    });\r",
									"\r",
									"    for (const[key, value] of Object.entries(properties_map)){\r",
									"        propertySpecific(key, jsonDataElements);\r",
									"        //filling the collection variable order array\r",
									"    }\r",
									"\r",
									"    pm.collectionVariables.set(\"current_order_id\", jsonDataElements.Id);\r",
									"\r",
									"} catch (err) {\r",
									"    pm.test(request.name, function () {\r",
									"        pm.expect.fail(err.toString());\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript",
								"id": "6e079d74-efd9-4968-ac1f-65b4a9491bd3"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"Priority\":43,\r\n    \"NotificationEndpoint\": \"http://{{notification_server_url}}/{{lta_path}}\",\r\n    \"NotificationEpUsername\": \"{{notification_username}}\",\r\n    \"NotificationEpPassword\": \"{{notification_password}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{service-root-uri}}/odata/v1/Products({{current_offline_product_id}})/OData.CSC.Order",
							"host": [
								"{{service-root-uri}}"
							],
							"path": [
								"odata",
								"v1",
								"Products({{current_offline_product_id}})",
								"OData.CSC.Order"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetOrderNotification",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"properties_map = {};\r",
									"\r",
									"properties_map[\"@odata.context\"]=function(element){\r",
									"    pm.expect(element[\"@odata.context\"]).to.include(\"$metadata#Notification/$entity\");\r",
									"};\r",
									"\r",
									"properties_map.OrderId=function (element) {pm.expect(element.OrderId).to.match(/[0-9a-fA-F]{8}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{12}/);};\r",
									"\r",
									"properties_map.ProductId=function (element) {pm.expect(element.ProductId).to.match(/[0-9a-fA-F]{8}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{12}/);};\r",
									"\r",
									"properties_map.NotificationDate=function (element) {pm.expect(element.NotificationDate).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d+([+-][0-2]\\d:[0-5]\\d|Z)/);};\r",
									"\r",
									"properties_map.Name=function (element) {\r",
									"    pm.expect(element.Name).to.be.a(\"string\");\r",
									"};\r",
									"\r",
									"\r",
									"function propertySpecific(key, order){\r",
									"    if (properties_map[key]) {\r",
									"        pm.test(\"Test Property \"+key+\" for Notification: \" + order.Name + \" Order: \" + order.OrderId, function(){properties_map[key](order)});\r",
									"    }\r",
									"    else {\r",
									"        pm.test.skip(\"Test Property \"+key+\" for Notification: \" + order.Name + \" Order: \" + order.OrderId);\r",
									"    }\r",
									"}\r",
									"\r",
									"try {\r",
									"    var jsonDataElements = pm.response.json().requests;\r",
									"\r",
									"    pm.test(\"Test Response Status Code\", function(){\r",
									"        pm.expect(pm.response.code).to.be.oneOf([200]);\r",
									"    });\r",
									"\r",
									"    pm.test(\"Response time is less than \" +  environment[\"query-timeout\"] + \"ms\", function(){\r",
									"        pm.expect(pm.response.responseTime).to.be.below(parseInt(environment[\"query-timeout\"]));\r",
									"    });\r",
									"\r",
									"    var order_id = pm.collectionVariables.get('current_order_id');\r",
									"    for(notification of jsonDataElements){\r",
									"        var current_notification = JSON.parse(notification[\"body\"]);\r",
									"        console.log(current_notification);\r",
									"        console.log(order_id);\r",
									"        if(current_notification[\"OrderId\"] == order_id){\r",
									"            console.log(current_notification);\r",
									"            for (const[key, value] of Object.entries(properties_map)){\r",
									"                propertySpecific(key, current_notification);\r",
									"            }\r",
									"        }\r",
									"    }\r",
									"\r",
									"}\r",
									"catch (err) {\r",
									"    pm.test(request.name, function () {\r",
									"        pm.expect.fail(err.toString());\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript",
								"id": "33d041a7-38da-4f4a-8ba5-024e9b6814e0"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{subscription_auth_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"urlPattern\":\"/{{lta_path}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{mocklab_api_endpoint}}/{{notification_server_url}}/__admin/requests/find",
							"host": [
								"{{mocklab_api_endpoint}}"
							],
							"path": [
								"{{notification_server_url}}",
								"__admin",
								"requests",
								"find"
							]
						}
					},
					"response": []
				},
				{
					"name": "BulkCreateMaxParams_with_Notification",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"properties_map = {};\r",
									"properties_map.Id=function (element) {pm.expect(element.Id).to.match(/[0-9a-fA-F]{8}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{12}/);};\r",
									"properties_map.Status=function (element) {\r",
									"    pm.expect(element.Status).to.be.a(\"string\");\r",
									"    pm.expect(element.Status).to.be.oneOf([\"created\"]);\r",
									"};\r",
									"properties_map.StatusMessage=function (element) {\r",
									"    pm.expect(element.StatusMessage).to.be.a(\"string\");\r",
									"    pm.expect(element.StatusMessage).to.be.oneOf([\"Bulk has been created but no BatchOrders have been triggered\"]);\r",
									"};\r",
									"properties_map.FilterParam=function (element) {\r",
									"    pm.expect(element.FilterParam).to.be.a(\"string\");\r",
									"    pm.expect(element.FilterParam).to.be.not.equal(null);\r",
									"};\r",
									"properties_map.SubmissionDate=function (element) {pm.expect(element.SubmissionDate).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d+([+-][0-2]\\d:[0-5]\\d|Z)/);};\r",
									"\r",
									"properties_map.BatchsizeProducts=function (element) {\r",
									"    pm.expect(element.BatchsizeProducts).to.be.a(\"number\");\r",
									"};\r",
									"properties_map.BatchsizeVolume=function (element) {\r",
									"    pm.expect(element.BatchsizeVolume).to.be.a(\"number\");\r",
									"};\r",
									"properties_map.NotificationEndpoint=function (element) {\r",
									"    if(element.NotificationEndpoint){\r",
									"        pm.expect(element.NotificationEndpoint).to.be.a(\"string\");\r",
									"    }\r",
									"};\r",
									"properties_map.OrderbyParam=function (element) {\r",
									"    if(element.OrderbyParam){\r",
									"        pm.expect(element.OrderbyParam).to.be.a(\"string\");   \r",
									"    }\r",
									"};\r",
									"\r",
									"\r",
									"function propertySpecific(key, order){\r",
									"    if (properties_map[key]) {\r",
									"        pm.test(\"Test Property \"+key+\" for Bulk: \" + order.Id, function(){properties_map[key](order)});\r",
									"    }\r",
									"    else {\r",
									"        pm.test.skip(\"Test Property \"+key+\" for Bulk: \" + order.Id);\r",
									"    }\r",
									"}\r",
									"\r",
									"try {\r",
									"    var jsonDataElements = pm.response.json().value[0];\r",
									"\r",
									"    pm.test(\"Test Response Status Code\", function(){\r",
									"        pm.expect(pm.response.code).to.be.oneOf([201,202]);\r",
									"    });\r",
									"\r",
									"    pm.test(\"Test OData context\", function(){\r",
									"        pm.expect( pm.response.json()['@odata.context']).to.include(\"$metadata#OData.CSC.Bulk\");\r",
									"    });\r",
									"\r",
									"    pm.test(\"Response time is less than \" +  environment[\"query-timeout\"] + \"ms\", function(){\r",
									"        pm.expect(pm.response.responseTime).to.be.below(parseInt(environment[\"query-timeout\"]));\r",
									"    });\r",
									"\r",
									"    var order_response = {};\r",
									"\r",
									"    for (const[key, value] of Object.entries(properties_map)){\r",
									"        propertySpecific(key, jsonDataElements);\r",
									"        //filling the collection variable order array\r",
									"        order_response[key] = jsonDataElements[key];\r",
									"        pm.collectionVariables.set(\"current_order_\" + key, jsonDataElements[key]);\r",
									"    }\r",
									"\r",
									"    pm.collectionVariables.set('bulk_id', jsonDataElements['Id']);\r",
									"    pm.collectionVariables.set('bulk_batchsize_products', jsonDataElements['BatchsizeProducts']);\r",
									"\r",
									"    pm.collectionVariables.set('current_batch_filter_param', JSON.parse(request.data)[\"FilterParam\"].split(\"$filter=\")[1]);\r",
									"}\r",
									"catch (err) {\r",
									"    pm.test(request.name, function () {\r",
									"        pm.expect.fail(err.toString());\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript",
								"id": "b0075e1a-ee9a-4bf7-ab4b-50546aebdbd9"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "50b7dd5a-13ec-445c-be61-369b9664a318"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"@odata.context\": \"$metadata#Bulk/$entity\",\r\n\"FilterParam\": \"Products?$filter=contains(Name,'S2A')\",\r\n\"BatchsizeProducts\": 10,\r\n\"BatchsizeVolume\": 50,\r\n\"OrderbyParam\": \"Name asc\",\r\n\"NotificationEndpoint\": \"http://{{notification_server_url}}/{{lta_path}}\",\r\n\"NotificationEpUsername\": \"{{notification_username}}\",\r\n\"NotificationEpPassword\": \"{{notification_password}}\"\r\n} ",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{service-root-uri}}/odata/v1/Bulks",
							"host": [
								"{{service-root-uri}}"
							],
							"path": [
								"odata",
								"v1",
								"Bulks"
							]
						}
					},
					"response": []
				},
				{
					"name": "BatchOrdersViaBulk",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"properties_map = {};\r",
									"properties_map.Id=function (element) {pm.expect(element.Id).to.match(/[0-9a-fA-F]{8}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{12}/);};\r",
									"properties_map.Status=function (element) {\r",
									"    pm.expect(element.Status).to.be.a(\"string\");\r",
									"    pm.expect(element.Status).to.be.oneOf([\"queued\", \"in_progress\", \"completed\", \"failed\", \"cancelled\"]);\r",
									"};\r",
									"properties_map.StatusMessage=function (element) {\r",
									"    pm.expect(element.StatusMessage).to.be.a(\"string\");\r",
									"    switch(element.Status){\r",
									"        case \"queued\":\r",
									"            pm.expect(element.StatusMessage).to.be.oneOf([\"BatchOrder request is queued\"]);\r",
									"            break;\r",
									"        case \"in_progress\":\r",
									"            pm.expect(element.StatusMessage).to.be.oneOf([\"BatchOrder is under processing\"]);\r",
									"            break;\r",
									"        case \"completed\":\r",
									"            pm.expect(element.StatusMessage).to.be.oneOf([\"requested products of BatchOrder are available\"]);\r",
									"            break;\r",
									"        case \"cancelled\":\r",
									"            pm.expect(element.StatusMessage).to.be.oneOf([\"BatchOrder cancelled by user\"]);\r",
									"            break;\r",
									"        case \"failed\":\r",
									"            pm.expect(element.StatusMessage).to.be.oneOf([\"at least one product retrieval has failed\", \"at least one product currently unavailable\", \"at least one product not found on LTA\"]);\r",
									"            break;\r",
									"    }\r",
									"};\r",
									"properties_map.CompletedDate=function (element) {\r",
									"    switch(element.Status){\r",
									"        case \"completed\":\r",
									"            pm.expect(element.CompletedDate).to.be.a(\"string\");\r",
									"            pm.expect(element.CompletedDate).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d+([+-][0-2]\\d:[0-5]\\d|Z)/);\r",
									"            break;\r",
									"        default:\r",
									"            if(element.CompletedDate){\r",
									"                pm.expect(element.CompletedDate).to.be.equal(null)\r",
									"            }\r",
									"    }\r",
									"};\r",
									"properties_map.SubmissionDate=function (element) {\r",
									"    switch(element.Status){\r",
									"        case \"queued\":\r",
									"            if(element.SubmissionDate){\r",
									"                pm.expect(element.SubmissionDate).to.be.oneOf([null]);\r",
									"            }\r",
									"            break;\r",
									"        case \"in_progress\", \"completed\":\r",
									"            pm.expect(element.SubmissionDate).to.be.a(\"string\");\r",
									"            pm.expect(element.SubmissionDate).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d+([+-][0-2]\\d:[0-5]\\d|Z)/);\r",
									"            break;\r",
									"        case \"cancelled\", \"failed\":\r",
									"            if(typeof(element.SubmissionDate)==\"string\"){\r",
									"                pm.expect(element.SubmissionDate).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d+([+-][0-2]\\d:[0-5]\\d|Z)/);\r",
									"            } else pm.expect(element.SubmissionDate).to.be.oneOf([null]);\r",
									"            break;\r",
									"    }\r",
									"};\r",
									"properties_map.EstimatedDate=function (element) {\r",
									"    switch(element.Status){\r",
									"        case \"queued\":\r",
									"            if(element.EstimatedDate){\r",
									"                pm.expect(element.EstimatedDate).to.be.oneOf([null]);\r",
									"            }\r",
									"            break;\r",
									"        case \"in_progress\", \"completed\":\r",
									"            pm.expect(element.EstimatedDate).to.be.a(\"string\");\r",
									"            pm.expect(element.EstimatedDate).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d+([+-][0-2]\\d:[0-5]\\d|Z)/);\r",
									"            break;\r",
									"        case \"cancelled\", \"failed\":\r",
									"            if(typeof(element.EstimatedDate)==\"string\"){\r",
									"                pm.expect(element.EstimatedDate).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d+([+-][0-2]\\d:[0-5]\\d|Z)/);\r",
									"            } else pm.expect(element.EstimatedDate).to.be.oneOf([null]);\r",
									"            break;\r",
									"    }\r",
									"};\r",
									"properties_map.OrderSize=function (element) {\r",
									"    switch(element.Status){\r",
									"        case \"queued\", \"in_progress\", \"cancelled\", \"failed\":\r",
									"            if(element.OrderSize){\r",
									"                pm.expect(element.OrderSize).to.be.oneOf([null]);\r",
									"            }            \r",
									"            break;\r",
									"        case \"completed\":\r",
									"            pm.expect(element.OrderSize).to.be.a(\"number\");\r",
									"            break;\r",
									"    }\r",
									"};\r",
									"properties_map.Priority=function (element) {\r",
									"    pm.expect(element.Priority).to.be.a(\"number\");\r",
									"};\r",
									"\r",
									"function propertySpecific(key, order){\r",
									"    if (properties_map[key]) {\r",
									"        pm.test(\"Test Property \"+key+\" for BatchOrder: \" + order.Id, function(){properties_map[key](order)});\r",
									"    }\r",
									"    else {\r",
									"        pm.test.skip(\"Test Property \"+key+\" for BatchOrder: \" + order.Id);\r",
									"    }\r",
									"}\r",
									"\r",
									"try {\r",
									"    var jsonDataElements = pm.response.json().value;\r",
									"    pm.collectionVariables.set('batch_orders', jsonDataElements);\r",
									"    var random_batch_order = jsonDataElements[Math.floor(Math.random()*jsonDataElements.length)];\r",
									"    pm.collectionVariables.set(\"current_batch_order_id\", random_batch_order[\"Id\"]);\r",
									"\r",
									"    console.log(random_batch_order);\r",
									"\r",
									"    pm.test(\"Test Response Status Code\", function(){\r",
									"        pm.expect(pm.response.code).to.be.oneOf([200]);\r",
									"    });\r",
									"\r",
									"    pm.test(\"Test OData context\", function(){\r",
									"        pm.expect( pm.response.json()['@odata.context']).to.include(\"$metadata#BatchOrder/$entity\");\r",
									"    });\r",
									"\r",
									"    pm.test(\"Response time is less than \" +  environment[\"query-timeout\"] + \"ms\", function(){\r",
									"        pm.expect(pm.response.responseTime).to.be.below(parseInt(environment[\"query-timeout\"]));\r",
									"    });\r",
									"\r",
									"    for (var counter = 0;  counter  < jsonDataElements.length; counter++){\r",
									"        var batch = jsonDataElements[counter];\r",
									"        console.log(\"Processing Batch: \"+batch.Id);\r",
									"        for (const[key, value] of Object.entries(properties_map)){\r",
									"            propertySpecific(key, batch);\r",
									"        }\r",
									"    }\r",
									"}\r",
									"catch (err) {\r",
									"    pm.test(request.name, function () {\r",
									"        pm.expect.fail(err.toString());\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript",
								"id": "87868ee2-2f9f-46ee-869e-077da9ec35e7"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "f32ae1a2-c70b-4ad3-afc5-64b8e21916fe"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{service-root-uri}}/odata/v1/Bulks({{bulk_id}})/BatchOrders",
							"host": [
								"{{service-root-uri}}"
							],
							"path": [
								"odata",
								"v1",
								"Bulks({{bulk_id}})",
								"BatchOrders"
							]
						}
					},
					"response": []
				},
				{
					"name": "BatchOrderTriggering",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"try {\r",
									"    pm.test(\"Response time is less than \" + environment[\"query-timeout\"] + \"ms\", function () {\r",
									"        pm.expect(pm.response.responseTime).to.be.below(parseInt(environment[\"query-timeout\"]));\r",
									"    });\r",
									"    pm.test(\"Test Response Status Code\", function(){\r",
									"        pm.expect(pm.response.code).to.be.oneOf([204]);\r",
									"    });\r",
									"}\r",
									"catch (err) {\r",
									"    pm.test(request.name, function () {\r",
									"        pm.expect.fail(err.toString());\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript",
								"id": "f7a7da30-15b0-4149-bd98-914519dd41a0"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"Priority\": 33\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{service-root-uri}}/odata/v1/BatchOrders({{current_batch_order_id}})/OData.CSC.BatchOrder",
							"host": [
								"{{service-root-uri}}"
							],
							"path": [
								"odata",
								"v1",
								"BatchOrders({{current_batch_order_id}})",
								"OData.CSC.BatchOrder"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetBulkStagedOrdersNotifications",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"properties_map = {};\r",
									"\r",
									"properties_map[\"@odata.context\"]=function(element){\r",
									"    pm.expect(element[\"@odata.context\"]).to.include(\"$metadata#Notification/$entity\");\r",
									"};\r",
									"\r",
									"properties_map.BatchOrderId=function (element) {pm.expect(element.BatchOrderId).to.match(/[0-9a-fA-F]{8}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{12}/);};\r",
									"\r",
									"properties_map.ProductId=function (element) {pm.expect(element.ProductId).to.match(/[0-9a-fA-F]{8}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{12}/);};\r",
									"\r",
									"properties_map.NotificationDate=function (element) {pm.expect(element.NotificationDate).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d+([+-][0-2]\\d:[0-5]\\d|Z)/);};\r",
									"\r",
									"properties_map.Name=function (element) {\r",
									"    pm.expect(element.Name).to.be.a(\"string\");\r",
									"};\r",
									"\r",
									"\r",
									"function propertySpecific(key, order){\r",
									"    if (properties_map[key]) {\r",
									"        pm.test(\"Test Property \"+key+\" for Notification: \" + order.Name + \" BatchOrder: \" + order.BatchOrderId, function(){properties_map[key](order)});\r",
									"    }\r",
									"    else {\r",
									"        pm.test.skip(\"Test Property \"+key+\" for Notification: \" + order.Name + \" BatchOrder: \" + order.BatchOrderId);\r",
									"    }\r",
									"}\r",
									"\r",
									"try {\r",
									"    var jsonDataElements = pm.response.json().requests;\r",
									"\r",
									"    pm.test(\"Test Response Status Code\", function(){\r",
									"        pm.expect(pm.response.code).to.be.oneOf([200]);\r",
									"    });\r",
									"\r",
									"    pm.test(\"Response time is less than \" +  environment[\"query-timeout\"] + \"ms\", function(){\r",
									"        pm.expect(pm.response.responseTime).to.be.below(parseInt(environment[\"query-timeout\"]));\r",
									"    });\r",
									"\r",
									"    var batchorder_id = pm.collectionVariables.get('current_batch_order_id');\r",
									"    for(notification of jsonDataElements){\r",
									"        var current_notification = JSON.parse(notification[\"body\"]);\r",
									"        console.log(current_notification);\r",
									"        console.log(batchorder_id);\r",
									"        if(current_notification[\"BatchOrderId\"] == batchorder_id){\r",
									"            console.log(current_notification);\r",
									"            for (const[key, value] of Object.entries(properties_map)){\r",
									"                propertySpecific(key, current_notification);\r",
									"            }\r",
									"        }\r",
									"    }\r",
									"\r",
									"}\r",
									"catch (err) {\r",
									"    pm.test(request.name, function () {\r",
									"        pm.expect.fail(err.toString());\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript",
								"id": "20314f2b-dbbb-494e-a987-9fc028ca3b15"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{subscription_auth_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"urlPattern\":\"/{{lta_path}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{mocklab_api_endpoint}}/{{notification_server_url}}/__admin/requests/find",
							"host": [
								"{{mocklab_api_endpoint}}"
							],
							"path": [
								"{{notification_server_url}}",
								"__admin",
								"requests",
								"find"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Metrics",
			"item": [
				{
					"name": "LTA",
					"item": [
						{
							"name": "LTA_Archived_productType_platformShortName_platformSerialIdentifier_size",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {\r",
											"    var jsonDataElements = pm.response.json().value;\r",
											"\r",
											"    pm.test(\"Response time is less than \" + environment[\"query-timeout\"] + \"ms\", function () {\r",
											"        pm.expect(pm.response.responseTime).to.be.below(parseInt(environment[\"query-timeout\"]));\r",
											"    });\r",
											"\r",
											"    pm.test(\"Test OData context\", function(){\r",
											"        query_string = pm.request.url.getQueryString();\r",
											"        pm.expect( pm.response.json()['@odata.context']).to.include(\"$metadata#Metrics\");\r",
											"    });\r",
											"\r",
											"    var metricName = decodeURIComponent(pm.request.url.getQueryString()).split(\"$filter=Name eq \")[1].replace(\"'\",\"\").split(\".\")[0];\r",
											"    console.log(metricName);\r",
											"\r",
											"    for(var elem of jsonDataElements){\r",
											"        pm.test(\"Test Metrics properties\", function(){\r",
											"\r",
											"            if(elem[\"Name\"]) pm.expect(elem[\"Name\"].split(\".\")[0]).to.be.equal(metricName);\r",
											"            else pm.expect.fail(\"Name not found in element properties\");\r",
											"            \r",
											"            if(elem[\"Timestamp\"]) pm.expect(elem[\"Timestamp\"]).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);\r",
											"            else pm.expect.fail(\"Timestamp not found in element properties\");\r",
											"                        \r",
											"            switch(metricName){\r",
											"                case \"systematic_production\":\r",
											"                case \"on-demand default\":\r",
											"                case \"on-demand non-default\":\r",
											"                case \"Archived\":\r",
											"                case \"Retrieved\":\r",
											"                case \"Download\":\r",
											"                    console.log(\"Expected Counter\");\r",
											"                    if(elem[\"MetricType\"]) pm.expect(elem[\"MetricType\"]).to.be.equal(\"Counter\");\r",
											"                    else pm.expect.fail(\"MetricType not found in element properties\");\r",
											"                    if(elem[\"Counter\"]) pm.expect(elem[\"Counter\"]).to.be.a(\"number\");\r",
											"                    else pm.expect.fail(\"Counter not found in element properties\");\r",
											"                    //pm.expect(elem[\"Gauge\"]).to.be.equal(null);\r",
											"                    break;\r",
											"                case \"SensingToPublication\":\r",
											"                case \"OriginToPublication\":\r",
											"                case \"SubmissionToCompletion\":\r",
											"                case \"Service\":\r",
											"                    console.log(\"Expected Gauge\");\r",
											"                    if(elem[\"MetricType\"]) pm.expect(elem[\"MetricType\"]).to.be.equal(\"Gauge\");\r",
											"                    else pm.expect.fail(\"MetricType not found in element properties\");\r",
											"                    if(elem[\"Gauge\"]){\r",
											"                        pm.expect(elem[\"Gauge\"]).to.be.a(\"string\");\r",
											"                        pm.expect(parseInt(elem[\"Gauge\"])).to.be.a(\"number\");\r",
											"                    } else pm.expect.fail(\"Gauge not found in element properties\");\r",
											"                    //pm.expect(elem[\"Counter\"]).to.be.equal(null);\r",
											"                    break;\r",
											"            }\r",
											"        });\r",
											"    }\r",
											"}\r",
											"\r",
											"catch (err) {\r",
											"    pm.test(request.name, function () {\r",
											"        pm.expect.fail(err.toString());\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript",
										"id": "a56ca2a9-1d83-4fac-9a4f-17717f95e897"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{service-root-uri}}/odata/v1/Metrics?$filter=Name eq 'Archived.{{metric_productType}}.{{metric_platformShortName}}.{{metric_platformSerialIdentifier}}.size'",
									"host": [
										"{{service-root-uri}}"
									],
									"path": [
										"odata",
										"v1",
										"Metrics"
									],
									"query": [
										{
											"key": "$filter",
											"value": "Name eq 'Archived.{{metric_productType}}.{{metric_platformShortName}}.{{metric_platformSerialIdentifier}}.size'"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "LTA_Archived_productType_platformShortName_platformSerialIdentifier_count",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {\r",
											"    var jsonDataElements = pm.response.json().value;\r",
											"\r",
											"    pm.test(\"Response time is less than \" + environment[\"query-timeout\"] + \"ms\", function () {\r",
											"        pm.expect(pm.response.responseTime).to.be.below(parseInt(environment[\"query-timeout\"]));\r",
											"    });\r",
											"\r",
											"    pm.test(\"Test OData context\", function(){\r",
											"        query_string = pm.request.url.getQueryString();\r",
											"        pm.expect( pm.response.json()['@odata.context']).to.include(\"$metadata#Metrics\");\r",
											"    });\r",
											"\r",
											"    var metricName = decodeURIComponent(pm.request.url.getQueryString()).split(\"$filter=Name eq \")[1].replace(\"'\",\"\").split(\".\")[0];\r",
											"    console.log(metricName);\r",
											"\r",
											"    for(var elem of jsonDataElements){\r",
											"        pm.test(\"Test Metrics properties\", function(){\r",
											"\r",
											"            if(elem[\"Name\"]) pm.expect(elem[\"Name\"].split(\".\")[0]).to.be.equal(metricName);\r",
											"            else pm.expect.fail(\"Name not found in element properties\");\r",
											"            \r",
											"            if(elem[\"Timestamp\"]) pm.expect(elem[\"Timestamp\"]).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);\r",
											"            else pm.expect.fail(\"Timestamp not found in element properties\");\r",
											"                        \r",
											"            switch(metricName){\r",
											"                case \"systematic_production\":\r",
											"                case \"on-demand default\":\r",
											"                case \"on-demand non-default\":\r",
											"                case \"Archived\":\r",
											"                case \"Retrieved\":\r",
											"                case \"Download\":\r",
											"                    console.log(\"Expected Counter\");\r",
											"                    if(elem[\"MetricType\"]) pm.expect(elem[\"MetricType\"]).to.be.equal(\"Counter\");\r",
											"                    else pm.expect.fail(\"MetricType not found in element properties\");\r",
											"                    if(elem[\"Counter\"]) pm.expect(elem[\"Counter\"]).to.be.a(\"number\");\r",
											"                    else pm.expect.fail(\"Counter not found in element properties\");\r",
											"                    //pm.expect(elem[\"Gauge\"]).to.be.equal(null);\r",
											"                    break;\r",
											"                case \"SensingToPublication\":\r",
											"                case \"OriginToPublication\":\r",
											"                case \"SubmissionToCompletion\":\r",
											"                case \"Service\":\r",
											"                    console.log(\"Expected Gauge\");\r",
											"                    if(elem[\"MetricType\"]) pm.expect(elem[\"MetricType\"]).to.be.equal(\"Gauge\");\r",
											"                    else pm.expect.fail(\"MetricType not found in element properties\");\r",
											"                    if(elem[\"Gauge\"]){\r",
											"                        pm.expect(elem[\"Gauge\"]).to.be.a(\"string\");\r",
											"                        pm.expect(parseInt(elem[\"Gauge\"])).to.be.a(\"number\");\r",
											"                    } else pm.expect.fail(\"Gauge not found in element properties\");\r",
											"                    //pm.expect(elem[\"Counter\"]).to.be.equal(null);\r",
											"                    break;\r",
											"            }\r",
											"        });\r",
											"    }\r",
											"}\r",
											"\r",
											"catch (err) {\r",
											"    pm.test(request.name, function () {\r",
											"        pm.expect.fail(err.toString());\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript",
										"id": "a734bda8-771f-4124-9810-52464be2e346"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{service-root-uri}}/odata/v1/Metrics?$filter=Name eq 'Archived.{{metric_productType}}.{{metric_platformShortName}}.{{metric_platformSerialIdentifier}}.count'",
									"host": [
										"{{service-root-uri}}"
									],
									"path": [
										"odata",
										"v1",
										"Metrics"
									],
									"query": [
										{
											"key": "$filter",
											"value": "Name eq 'Archived.{{metric_productType}}.{{metric_platformShortName}}.{{metric_platformSerialIdentifier}}.count'"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "LTA_Archived_platformShortName_platformSerialIdentifier_size",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {\r",
											"    var jsonDataElements = pm.response.json().value;\r",
											"\r",
											"    pm.test(\"Response time is less than \" + environment[\"query-timeout\"] + \"ms\", function () {\r",
											"        pm.expect(pm.response.responseTime).to.be.below(parseInt(environment[\"query-timeout\"]));\r",
											"    });\r",
											"\r",
											"    pm.test(\"Test OData context\", function(){\r",
											"        query_string = pm.request.url.getQueryString();\r",
											"        pm.expect( pm.response.json()['@odata.context']).to.include(\"$metadata#Metrics\");\r",
											"    });\r",
											"\r",
											"    var metricName = decodeURIComponent(pm.request.url.getQueryString()).split(\"$filter=Name eq \")[1].replace(\"'\",\"\").split(\".\")[0];\r",
											"    console.log(metricName);\r",
											"\r",
											"    for(var elem of jsonDataElements){\r",
											"        pm.test(\"Test Metrics properties\", function(){\r",
											"\r",
											"            if(elem[\"Name\"]) pm.expect(elem[\"Name\"].split(\".\")[0]).to.be.equal(metricName);\r",
											"            else pm.expect.fail(\"Name not found in element properties\");\r",
											"            \r",
											"            if(elem[\"Timestamp\"]) pm.expect(elem[\"Timestamp\"]).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);\r",
											"            else pm.expect.fail(\"Timestamp not found in element properties\");\r",
											"                        \r",
											"            switch(metricName){\r",
											"                case \"systematic_production\":\r",
											"                case \"on-demand default\":\r",
											"                case \"on-demand non-default\":\r",
											"                case \"Archived\":\r",
											"                case \"Retrieved\":\r",
											"                case \"Download\":\r",
											"                    console.log(\"Expected Counter\");\r",
											"                    if(elem[\"MetricType\"]) pm.expect(elem[\"MetricType\"]).to.be.equal(\"Counter\");\r",
											"                    else pm.expect.fail(\"MetricType not found in element properties\");\r",
											"                    if(elem[\"Counter\"]) pm.expect(elem[\"Counter\"]).to.be.a(\"number\");\r",
											"                    else pm.expect.fail(\"Counter not found in element properties\");\r",
											"                    //pm.expect(elem[\"Gauge\"]).to.be.equal(null);\r",
											"                    break;\r",
											"                case \"SensingToPublication\":\r",
											"                case \"OriginToPublication\":\r",
											"                case \"SubmissionToCompletion\":\r",
											"                case \"Service\":\r",
											"                    console.log(\"Expected Gauge\");\r",
											"                    if(elem[\"MetricType\"]) pm.expect(elem[\"MetricType\"]).to.be.equal(\"Gauge\");\r",
											"                    else pm.expect.fail(\"MetricType not found in element properties\");\r",
											"                    if(elem[\"Gauge\"]){\r",
											"                        pm.expect(elem[\"Gauge\"]).to.be.a(\"string\");\r",
											"                        pm.expect(parseInt(elem[\"Gauge\"])).to.be.a(\"number\");\r",
											"                    } else pm.expect.fail(\"Gauge not found in element properties\");\r",
											"                    //pm.expect(elem[\"Counter\"]).to.be.equal(null);\r",
											"                    break;\r",
											"            }\r",
											"        });\r",
											"    }\r",
											"}\r",
											"\r",
											"catch (err) {\r",
											"    pm.test(request.name, function () {\r",
											"        pm.expect.fail(err.toString());\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript",
										"id": "202fae35-7553-4b5f-8204-082ef90f91cf"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{service-root-uri}}/odata/v1/Metrics?$filter=Name eq 'Archived.{{metric_platformShortName}}.{{metric_platformSerialIdentifier}}.size'",
									"host": [
										"{{service-root-uri}}"
									],
									"path": [
										"odata",
										"v1",
										"Metrics"
									],
									"query": [
										{
											"key": "$filter",
											"value": "Name eq 'Archived.{{metric_platformShortName}}.{{metric_platformSerialIdentifier}}.size'"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "LTA_Archived_platformShortName_platformSerialIdentifier_count",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {\r",
											"    var jsonDataElements = pm.response.json().value;\r",
											"\r",
											"    pm.test(\"Response time is less than \" + environment[\"query-timeout\"] + \"ms\", function () {\r",
											"        pm.expect(pm.response.responseTime).to.be.below(parseInt(environment[\"query-timeout\"]));\r",
											"    });\r",
											"\r",
											"    pm.test(\"Test OData context\", function(){\r",
											"        query_string = pm.request.url.getQueryString();\r",
											"        pm.expect( pm.response.json()['@odata.context']).to.include(\"$metadata#Metrics\");\r",
											"    });\r",
											"\r",
											"    var metricName = decodeURIComponent(pm.request.url.getQueryString()).split(\"$filter=Name eq \")[1].replace(\"'\",\"\").split(\".\")[0];\r",
											"    console.log(metricName);\r",
											"\r",
											"    for(var elem of jsonDataElements){\r",
											"        pm.test(\"Test Metrics properties\", function(){\r",
											"\r",
											"            if(elem[\"Name\"]) pm.expect(elem[\"Name\"].split(\".\")[0]).to.be.equal(metricName);\r",
											"            else pm.expect.fail(\"Name not found in element properties\");\r",
											"            \r",
											"            if(elem[\"Timestamp\"]) pm.expect(elem[\"Timestamp\"]).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);\r",
											"            else pm.expect.fail(\"Timestamp not found in element properties\");\r",
											"                        \r",
											"            switch(metricName){\r",
											"                case \"systematic_production\":\r",
											"                case \"on-demand default\":\r",
											"                case \"on-demand non-default\":\r",
											"                case \"Archived\":\r",
											"                case \"Retrieved\":\r",
											"                case \"Download\":\r",
											"                    console.log(\"Expected Counter\");\r",
											"                    if(elem[\"MetricType\"]) pm.expect(elem[\"MetricType\"]).to.be.equal(\"Counter\");\r",
											"                    else pm.expect.fail(\"MetricType not found in element properties\");\r",
											"                    if(elem[\"Counter\"]) pm.expect(elem[\"Counter\"]).to.be.a(\"number\");\r",
											"                    else pm.expect.fail(\"Counter not found in element properties\");\r",
											"                    //pm.expect(elem[\"Gauge\"]).to.be.equal(null);\r",
											"                    break;\r",
											"                case \"SensingToPublication\":\r",
											"                case \"OriginToPublication\":\r",
											"                case \"SubmissionToCompletion\":\r",
											"                case \"Service\":\r",
											"                    console.log(\"Expected Gauge\");\r",
											"                    if(elem[\"MetricType\"]) pm.expect(elem[\"MetricType\"]).to.be.equal(\"Gauge\");\r",
											"                    else pm.expect.fail(\"MetricType not found in element properties\");\r",
											"                    if(elem[\"Gauge\"]){\r",
											"                        pm.expect(elem[\"Gauge\"]).to.be.a(\"string\");\r",
											"                        pm.expect(parseInt(elem[\"Gauge\"])).to.be.a(\"number\");\r",
											"                    } else pm.expect.fail(\"Gauge not found in element properties\");\r",
											"                    //pm.expect(elem[\"Counter\"]).to.be.equal(null);\r",
											"                    break;\r",
											"            }\r",
											"        });\r",
											"    }\r",
											"}\r",
											"\r",
											"catch (err) {\r",
											"    pm.test(request.name, function () {\r",
											"        pm.expect.fail(err.toString());\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript",
										"id": "f6ac25b2-25f9-40e8-80af-703311ec3168"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{service-root-uri}}/odata/v1/Metrics?$filter=Name eq 'Archived.{{metric_platformShortName}}.{{metric_platformSerialIdentifier}}.count'",
									"host": [
										"{{service-root-uri}}"
									],
									"path": [
										"odata",
										"v1",
										"Metrics"
									],
									"query": [
										{
											"key": "$filter",
											"value": "Name eq 'Archived.{{metric_platformShortName}}.{{metric_platformSerialIdentifier}}.count'"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "LTA_Retrieved_productType_platformShortName_platformSerialIdentifier_size",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {\r",
											"    var jsonDataElements = pm.response.json().value;\r",
											"\r",
											"    pm.test(\"Response time is less than \" + environment[\"query-timeout\"] + \"ms\", function () {\r",
											"        pm.expect(pm.response.responseTime).to.be.below(parseInt(environment[\"query-timeout\"]));\r",
											"    });\r",
											"\r",
											"    pm.test(\"Test OData context\", function(){\r",
											"        query_string = pm.request.url.getQueryString();\r",
											"        pm.expect( pm.response.json()['@odata.context']).to.include(\"$metadata#Metrics\");\r",
											"    });\r",
											"\r",
											"    var metricName = decodeURIComponent(pm.request.url.getQueryString()).split(\"$filter=Name eq \")[1].replace(\"'\",\"\").split(\".\")[0];\r",
											"    console.log(metricName);\r",
											"\r",
											"    for(var elem of jsonDataElements){\r",
											"        pm.test(\"Test Metrics properties\", function(){\r",
											"\r",
											"            if(elem[\"Name\"]) pm.expect(elem[\"Name\"].split(\".\")[0]).to.be.equal(metricName);\r",
											"            else pm.expect.fail(\"Name not found in element properties\");\r",
											"            \r",
											"            if(elem[\"Timestamp\"]) pm.expect(elem[\"Timestamp\"]).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);\r",
											"            else pm.expect.fail(\"Timestamp not found in element properties\");\r",
											"                        \r",
											"            switch(metricName){\r",
											"                case \"systematic_production\":\r",
											"                case \"on-demand default\":\r",
											"                case \"on-demand non-default\":\r",
											"                case \"Archived\":\r",
											"                case \"Retrieved\":\r",
											"                case \"Download\":\r",
											"                    console.log(\"Expected Counter\");\r",
											"                    if(elem[\"MetricType\"]) pm.expect(elem[\"MetricType\"]).to.be.equal(\"Counter\");\r",
											"                    else pm.expect.fail(\"MetricType not found in element properties\");\r",
											"                    if(elem[\"Counter\"]) pm.expect(elem[\"Counter\"]).to.be.a(\"number\");\r",
											"                    else pm.expect.fail(\"Counter not found in element properties\");\r",
											"                    //pm.expect(elem[\"Gauge\"]).to.be.equal(null);\r",
											"                    break;\r",
											"                case \"SensingToPublication\":\r",
											"                case \"OriginToPublication\":\r",
											"                case \"SubmissionToCompletion\":\r",
											"                case \"Service\":\r",
											"                    console.log(\"Expected Gauge\");\r",
											"                    if(elem[\"MetricType\"]) pm.expect(elem[\"MetricType\"]).to.be.equal(\"Gauge\");\r",
											"                    else pm.expect.fail(\"MetricType not found in element properties\");\r",
											"                    if(elem[\"Gauge\"]){\r",
											"                        pm.expect(elem[\"Gauge\"]).to.be.a(\"string\");\r",
											"                        pm.expect(parseInt(elem[\"Gauge\"])).to.be.a(\"number\");\r",
											"                    } else pm.expect.fail(\"Gauge not found in element properties\");\r",
											"                    //pm.expect(elem[\"Counter\"]).to.be.equal(null);\r",
											"                    break;\r",
											"            }\r",
											"        });\r",
											"    }\r",
											"}\r",
											"\r",
											"catch (err) {\r",
											"    pm.test(request.name, function () {\r",
											"        pm.expect.fail(err.toString());\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript",
										"id": "eeec2951-f138-4edd-9342-880d2ed155bd"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{service-root-uri}}/odata/v1/Metrics?$filter=Name eq 'Retrieved.{{metric_productType}}.{{metric_platformShortName}}.{{metric_platformSerialIdentifier}}.size'",
									"host": [
										"{{service-root-uri}}"
									],
									"path": [
										"odata",
										"v1",
										"Metrics"
									],
									"query": [
										{
											"key": "$filter",
											"value": "Name eq 'Retrieved.{{metric_productType}}.{{metric_platformShortName}}.{{metric_platformSerialIdentifier}}.size'"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "LTA_Retrieved_productType_platformShortName_platformSerialIdentifier_completed",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {\r",
											"    var jsonDataElements = pm.response.json().value;\r",
											"\r",
											"    pm.test(\"Response time is less than \" + environment[\"query-timeout\"] + \"ms\", function () {\r",
											"        pm.expect(pm.response.responseTime).to.be.below(parseInt(environment[\"query-timeout\"]));\r",
											"    });\r",
											"\r",
											"    pm.test(\"Test OData context\", function(){\r",
											"        query_string = pm.request.url.getQueryString();\r",
											"        pm.expect( pm.response.json()['@odata.context']).to.include(\"$metadata#Metrics\");\r",
											"    });\r",
											"\r",
											"    var metricName = decodeURIComponent(pm.request.url.getQueryString()).split(\"$filter=Name eq \")[1].replace(\"'\",\"\").split(\".\")[0];\r",
											"    console.log(metricName);\r",
											"\r",
											"    for(var elem of jsonDataElements){\r",
											"        pm.test(\"Test Metrics properties\", function(){\r",
											"\r",
											"            if(elem[\"Name\"]) pm.expect(elem[\"Name\"].split(\".\")[0]).to.be.equal(metricName);\r",
											"            else pm.expect.fail(\"Name not found in element properties\");\r",
											"            \r",
											"            if(elem[\"Timestamp\"]) pm.expect(elem[\"Timestamp\"]).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);\r",
											"            else pm.expect.fail(\"Timestamp not found in element properties\");\r",
											"                        \r",
											"            switch(metricName){\r",
											"                case \"systematic_production\":\r",
											"                case \"on-demand default\":\r",
											"                case \"on-demand non-default\":\r",
											"                case \"Archived\":\r",
											"                case \"Retrieved\":\r",
											"                case \"Download\":\r",
											"                    console.log(\"Expected Counter\");\r",
											"                    if(elem[\"MetricType\"]) pm.expect(elem[\"MetricType\"]).to.be.equal(\"Counter\");\r",
											"                    else pm.expect.fail(\"MetricType not found in element properties\");\r",
											"                    if(elem[\"Counter\"]) pm.expect(elem[\"Counter\"]).to.be.a(\"number\");\r",
											"                    else pm.expect.fail(\"Counter not found in element properties\");\r",
											"                    //pm.expect(elem[\"Gauge\"]).to.be.equal(null);\r",
											"                    break;\r",
											"                case \"SensingToPublication\":\r",
											"                case \"OriginToPublication\":\r",
											"                case \"SubmissionToCompletion\":\r",
											"                case \"Service\":\r",
											"                    console.log(\"Expected Gauge\");\r",
											"                    if(elem[\"MetricType\"]) pm.expect(elem[\"MetricType\"]).to.be.equal(\"Gauge\");\r",
											"                    else pm.expect.fail(\"MetricType not found in element properties\");\r",
											"                    if(elem[\"Gauge\"]){\r",
											"                        pm.expect(elem[\"Gauge\"]).to.be.a(\"string\");\r",
											"                        pm.expect(parseInt(elem[\"Gauge\"])).to.be.a(\"number\");\r",
											"                    } else pm.expect.fail(\"Gauge not found in element properties\");\r",
											"                    //pm.expect(elem[\"Counter\"]).to.be.equal(null);\r",
											"                    break;\r",
											"            }\r",
											"        });\r",
											"    }\r",
											"}\r",
											"\r",
											"catch (err) {\r",
											"    pm.test(request.name, function () {\r",
											"        pm.expect.fail(err.toString());\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript",
										"id": "c8e0f61f-9f4b-41e0-9a98-ec26f68452d7"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{service-root-uri}}/odata/v1/Metrics?$filter=Name eq 'Retrieved.{{metric_productType}}.{{metric_platformShortName}}.{{metric_platformSerialIdentifier}}.completed'",
									"host": [
										"{{service-root-uri}}"
									],
									"path": [
										"odata",
										"v1",
										"Metrics"
									],
									"query": [
										{
											"key": "$filter",
											"value": "Name eq 'Retrieved.{{metric_productType}}.{{metric_platformShortName}}.{{metric_platformSerialIdentifier}}.completed'"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "LTA_Retrieved_productType_platformShortName_platformSerialIdentifier_failed",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {\r",
											"    var jsonDataElements = pm.response.json().value;\r",
											"\r",
											"    pm.test(\"Response time is less than \" + environment[\"query-timeout\"] + \"ms\", function () {\r",
											"        pm.expect(pm.response.responseTime).to.be.below(parseInt(environment[\"query-timeout\"]));\r",
											"    });\r",
											"\r",
											"    pm.test(\"Test OData context\", function(){\r",
											"        query_string = pm.request.url.getQueryString();\r",
											"        pm.expect( pm.response.json()['@odata.context']).to.include(\"$metadata#Metrics\");\r",
											"    });\r",
											"\r",
											"    var metricName = decodeURIComponent(pm.request.url.getQueryString()).split(\"$filter=Name eq \")[1].replace(\"'\",\"\").split(\".\")[0];\r",
											"    console.log(metricName);\r",
											"\r",
											"    for(var elem of jsonDataElements){\r",
											"        pm.test(\"Test Metrics properties\", function(){\r",
											"\r",
											"            if(elem[\"Name\"]) pm.expect(elem[\"Name\"].split(\".\")[0]).to.be.equal(metricName);\r",
											"            else pm.expect.fail(\"Name not found in element properties\");\r",
											"            \r",
											"            if(elem[\"Timestamp\"]) pm.expect(elem[\"Timestamp\"]).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);\r",
											"            else pm.expect.fail(\"Timestamp not found in element properties\");\r",
											"                        \r",
											"            switch(metricName){\r",
											"                case \"systematic_production\":\r",
											"                case \"on-demand default\":\r",
											"                case \"on-demand non-default\":\r",
											"                case \"Archived\":\r",
											"                case \"Retrieved\":\r",
											"                case \"Download\":\r",
											"                    console.log(\"Expected Counter\");\r",
											"                    if(elem[\"MetricType\"]) pm.expect(elem[\"MetricType\"]).to.be.equal(\"Counter\");\r",
											"                    else pm.expect.fail(\"MetricType not found in element properties\");\r",
											"                    if(elem[\"Counter\"]) pm.expect(elem[\"Counter\"]).to.be.a(\"number\");\r",
											"                    else pm.expect.fail(\"Counter not found in element properties\");\r",
											"                    //pm.expect(elem[\"Gauge\"]).to.be.equal(null);\r",
											"                    break;\r",
											"                case \"SensingToPublication\":\r",
											"                case \"OriginToPublication\":\r",
											"                case \"SubmissionToCompletion\":\r",
											"                case \"Service\":\r",
											"                    console.log(\"Expected Gauge\");\r",
											"                    if(elem[\"MetricType\"]) pm.expect(elem[\"MetricType\"]).to.be.equal(\"Gauge\");\r",
											"                    else pm.expect.fail(\"MetricType not found in element properties\");\r",
											"                    if(elem[\"Gauge\"]){\r",
											"                        pm.expect(elem[\"Gauge\"]).to.be.a(\"string\");\r",
											"                        pm.expect(parseInt(elem[\"Gauge\"])).to.be.a(\"number\");\r",
											"                    } else pm.expect.fail(\"Gauge not found in element properties\");\r",
											"                    //pm.expect(elem[\"Counter\"]).to.be.equal(null);\r",
											"                    break;\r",
											"            }\r",
											"        });\r",
											"    }\r",
											"}\r",
											"\r",
											"catch (err) {\r",
											"    pm.test(request.name, function () {\r",
											"        pm.expect.fail(err.toString());\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript",
										"id": "77e4b254-66da-4955-853a-2a0f527eef33"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{service-root-uri}}/odata/v1/Metrics?$filter=Name eq 'Retrieved.{{metric_productType}}.{{metric_platformShortName}}.{{metric_platformSerialIdentifier}}.failed'",
									"host": [
										"{{service-root-uri}}"
									],
									"path": [
										"odata",
										"v1",
										"Metrics"
									],
									"query": [
										{
											"key": "$filter",
											"value": "Name eq 'Retrieved.{{metric_productType}}.{{metric_platformShortName}}.{{metric_platformSerialIdentifier}}.failed'"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "LTA_Download_productType_platformShortName_platformSerialIdentifier_ServiceAlias_completed",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {\r",
											"    var jsonDataElements = pm.response.json().value;\r",
											"\r",
											"    pm.test(\"Response time is less than \" + environment[\"query-timeout\"] + \"ms\", function () {\r",
											"        pm.expect(pm.response.responseTime).to.be.below(parseInt(environment[\"query-timeout\"]));\r",
											"    });\r",
											"\r",
											"    pm.test(\"Test OData context\", function(){\r",
											"        query_string = pm.request.url.getQueryString();\r",
											"        pm.expect( pm.response.json()['@odata.context']).to.include(\"$metadata#Metrics\");\r",
											"    });\r",
											"\r",
											"    var metricName = decodeURIComponent(pm.request.url.getQueryString()).split(\"$filter=Name eq \")[1].replace(\"'\",\"\").split(\".\")[0];\r",
											"    console.log(metricName);\r",
											"\r",
											"    for(var elem of jsonDataElements){\r",
											"        pm.test(\"Test Metrics properties\", function(){\r",
											"\r",
											"            if(elem[\"Name\"]) pm.expect(elem[\"Name\"].split(\".\")[0]).to.be.equal(metricName);\r",
											"            else pm.expect.fail(\"Name not found in element properties\");\r",
											"            \r",
											"            if(elem[\"Timestamp\"]) pm.expect(elem[\"Timestamp\"]).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);\r",
											"            else pm.expect.fail(\"Timestamp not found in element properties\");\r",
											"                        \r",
											"            switch(metricName){\r",
											"                case \"systematic_production\":\r",
											"                case \"on-demand default\":\r",
											"                case \"on-demand non-default\":\r",
											"                case \"Archived\":\r",
											"                case \"Retrieved\":\r",
											"                case \"Download\":\r",
											"                    console.log(\"Expected Counter\");\r",
											"                    if(elem[\"MetricType\"]) pm.expect(elem[\"MetricType\"]).to.be.equal(\"Counter\");\r",
											"                    else pm.expect.fail(\"MetricType not found in element properties\");\r",
											"                    if(elem[\"Counter\"]) pm.expect(elem[\"Counter\"]).to.be.a(\"number\");\r",
											"                    else pm.expect.fail(\"Counter not found in element properties\");\r",
											"                    //pm.expect(elem[\"Gauge\"]).to.be.equal(null);\r",
											"                    break;\r",
											"                case \"SensingToPublication\":\r",
											"                case \"OriginToPublication\":\r",
											"                case \"SubmissionToCompletion\":\r",
											"                case \"Service\":\r",
											"                    console.log(\"Expected Gauge\");\r",
											"                    if(elem[\"MetricType\"]) pm.expect(elem[\"MetricType\"]).to.be.equal(\"Gauge\");\r",
											"                    else pm.expect.fail(\"MetricType not found in element properties\");\r",
											"                    if(elem[\"Gauge\"]){\r",
											"                        pm.expect(elem[\"Gauge\"]).to.be.a(\"string\");\r",
											"                        pm.expect(parseInt(elem[\"Gauge\"])).to.be.a(\"number\");\r",
											"                    } else pm.expect.fail(\"Gauge not found in element properties\");\r",
											"                    //pm.expect(elem[\"Counter\"]).to.be.equal(null);\r",
											"                    break;\r",
											"            }\r",
											"        });\r",
											"    }\r",
											"}\r",
											"\r",
											"catch (err) {\r",
											"    pm.test(request.name, function () {\r",
											"        pm.expect.fail(err.toString());\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript",
										"id": "9907da3a-e85e-4bd2-9be3-bd2e06f127fe"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{service-root-uri}}/odata/v1/Metrics?$filter=Name eq 'Download.{{metric_productType}}.{{metric_platformShortName}}.{{metric_platformSerialIdentifier}}.{{metric_ServiceAlias}}.completed'",
									"host": [
										"{{service-root-uri}}"
									],
									"path": [
										"odata",
										"v1",
										"Metrics"
									],
									"query": [
										{
											"key": "$filter",
											"value": "Name eq 'Download.{{metric_productType}}.{{metric_platformShortName}}.{{metric_platformSerialIdentifier}}.{{metric_ServiceAlias}}.completed'"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "LTA_Download_productType_platformShortName_platformSerialIdentifier_ServiceAlias_failed",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {\r",
											"    var jsonDataElements = pm.response.json().value;\r",
											"\r",
											"    pm.test(\"Response time is less than \" + environment[\"query-timeout\"] + \"ms\", function () {\r",
											"        pm.expect(pm.response.responseTime).to.be.below(parseInt(environment[\"query-timeout\"]));\r",
											"    });\r",
											"\r",
											"    pm.test(\"Test OData context\", function(){\r",
											"        query_string = pm.request.url.getQueryString();\r",
											"        pm.expect( pm.response.json()['@odata.context']).to.include(\"$metadata#Metrics\");\r",
											"    });\r",
											"\r",
											"    var metricName = decodeURIComponent(pm.request.url.getQueryString()).split(\"$filter=Name eq \")[1].replace(\"'\",\"\").split(\".\")[0];\r",
											"    console.log(metricName);\r",
											"\r",
											"    for(var elem of jsonDataElements){\r",
											"        pm.test(\"Test Metrics properties\", function(){\r",
											"\r",
											"            if(elem[\"Name\"]) pm.expect(elem[\"Name\"].split(\".\")[0]).to.be.equal(metricName);\r",
											"            else pm.expect.fail(\"Name not found in element properties\");\r",
											"            \r",
											"            if(elem[\"Timestamp\"]) pm.expect(elem[\"Timestamp\"]).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);\r",
											"            else pm.expect.fail(\"Timestamp not found in element properties\");\r",
											"                        \r",
											"            switch(metricName){\r",
											"                case \"systematic_production\":\r",
											"                case \"on-demand default\":\r",
											"                case \"on-demand non-default\":\r",
											"                case \"Archived\":\r",
											"                case \"Retrieved\":\r",
											"                case \"Download\":\r",
											"                    console.log(\"Expected Counter\");\r",
											"                    if(elem[\"MetricType\"]) pm.expect(elem[\"MetricType\"]).to.be.equal(\"Counter\");\r",
											"                    else pm.expect.fail(\"MetricType not found in element properties\");\r",
											"                    if(elem[\"Counter\"]) pm.expect(elem[\"Counter\"]).to.be.a(\"number\");\r",
											"                    else pm.expect.fail(\"Counter not found in element properties\");\r",
											"                    //pm.expect(elem[\"Gauge\"]).to.be.equal(null);\r",
											"                    break;\r",
											"                case \"SensingToPublication\":\r",
											"                case \"OriginToPublication\":\r",
											"                case \"SubmissionToCompletion\":\r",
											"                case \"Service\":\r",
											"                    console.log(\"Expected Gauge\");\r",
											"                    if(elem[\"MetricType\"]) pm.expect(elem[\"MetricType\"]).to.be.equal(\"Gauge\");\r",
											"                    else pm.expect.fail(\"MetricType not found in element properties\");\r",
											"                    if(elem[\"Gauge\"]){\r",
											"                        pm.expect(elem[\"Gauge\"]).to.be.a(\"string\");\r",
											"                        pm.expect(parseInt(elem[\"Gauge\"])).to.be.a(\"number\");\r",
											"                    } else pm.expect.fail(\"Gauge not found in element properties\");\r",
											"                    //pm.expect(elem[\"Counter\"]).to.be.equal(null);\r",
											"                    break;\r",
											"            }\r",
											"        });\r",
											"    }\r",
											"}\r",
											"\r",
											"catch (err) {\r",
											"    pm.test(request.name, function () {\r",
											"        pm.expect.fail(err.toString());\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript",
										"id": "6a7f4342-d0b7-4b13-8479-f3d6843ee274"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{service-root-uri}}/odata/v1/Metrics?$filter=Name eq 'Download.{{metric_productType}}.{{metric_platformShortName}}.{{metric_platformSerialIdentifier}}.{{metric_ServiceAlias}}.failed'",
									"host": [
										"{{service-root-uri}}"
									],
									"path": [
										"odata",
										"v1",
										"Metrics"
									],
									"query": [
										{
											"key": "$filter",
											"value": "Name eq 'Download.{{metric_productType}}.{{metric_platformShortName}}.{{metric_platformSerialIdentifier}}.{{metric_ServiceAlias}}.failed'"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "LTA_Download_productType_platformShortName_platformSerialIdentifier_ServiceAlias_size",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {\r",
											"    var jsonDataElements = pm.response.json().value;\r",
											"\r",
											"    pm.test(\"Response time is less than \" + environment[\"query-timeout\"] + \"ms\", function () {\r",
											"        pm.expect(pm.response.responseTime).to.be.below(parseInt(environment[\"query-timeout\"]));\r",
											"    });\r",
											"\r",
											"    pm.test(\"Test OData context\", function(){\r",
											"        query_string = pm.request.url.getQueryString();\r",
											"        pm.expect( pm.response.json()['@odata.context']).to.include(\"$metadata#Metrics\");\r",
											"    });\r",
											"\r",
											"    var metricName = decodeURIComponent(pm.request.url.getQueryString()).split(\"$filter=Name eq \")[1].replace(\"'\",\"\").split(\".\")[0];\r",
											"    console.log(metricName);\r",
											"\r",
											"    for(var elem of jsonDataElements){\r",
											"        pm.test(\"Test Metrics properties\", function(){\r",
											"\r",
											"            if(elem[\"Name\"]) pm.expect(elem[\"Name\"].split(\".\")[0]).to.be.equal(metricName);\r",
											"            else pm.expect.fail(\"Name not found in element properties\");\r",
											"            \r",
											"            if(elem[\"Timestamp\"]) pm.expect(elem[\"Timestamp\"]).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);\r",
											"            else pm.expect.fail(\"Timestamp not found in element properties\");\r",
											"                        \r",
											"            switch(metricName){\r",
											"                case \"systematic_production\":\r",
											"                case \"on-demand default\":\r",
											"                case \"on-demand non-default\":\r",
											"                case \"Archived\":\r",
											"                case \"Retrieved\":\r",
											"                case \"Download\":\r",
											"                    console.log(\"Expected Counter\");\r",
											"                    if(elem[\"MetricType\"]) pm.expect(elem[\"MetricType\"]).to.be.equal(\"Counter\");\r",
											"                    else pm.expect.fail(\"MetricType not found in element properties\");\r",
											"                    if(elem[\"Counter\"]) pm.expect(elem[\"Counter\"]).to.be.a(\"number\");\r",
											"                    else pm.expect.fail(\"Counter not found in element properties\");\r",
											"                    //pm.expect(elem[\"Gauge\"]).to.be.equal(null);\r",
											"                    break;\r",
											"                case \"SensingToPublication\":\r",
											"                case \"OriginToPublication\":\r",
											"                case \"SubmissionToCompletion\":\r",
											"                case \"Service\":\r",
											"                    console.log(\"Expected Gauge\");\r",
											"                    if(elem[\"MetricType\"]) pm.expect(elem[\"MetricType\"]).to.be.equal(\"Gauge\");\r",
											"                    else pm.expect.fail(\"MetricType not found in element properties\");\r",
											"                    if(elem[\"Gauge\"]){\r",
											"                        pm.expect(elem[\"Gauge\"]).to.be.a(\"string\");\r",
											"                        pm.expect(parseInt(elem[\"Gauge\"])).to.be.a(\"number\");\r",
											"                    } else pm.expect.fail(\"Gauge not found in element properties\");\r",
											"                    //pm.expect(elem[\"Counter\"]).to.be.equal(null);\r",
											"                    break;\r",
											"            }\r",
											"        });\r",
											"    }\r",
											"}\r",
											"\r",
											"catch (err) {\r",
											"    pm.test(request.name, function () {\r",
											"        pm.expect.fail(err.toString());\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript",
										"id": "5ee08c7f-5fcb-4d1d-a5ae-cab7fb7071d0"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{service-root-uri}}/odata/v1/Metrics?$filter=Name eq 'Download.{{metric_productType}}.{{metric_platformShortName}}.{{metric_platformSerialIdentifier}}.{{metric_ServiceAlias}}.size'",
									"host": [
										"{{service-root-uri}}"
									],
									"path": [
										"odata",
										"v1",
										"Metrics"
									],
									"query": [
										{
											"key": "$filter",
											"value": "Name eq 'Download.{{metric_productType}}.{{metric_platformShortName}}.{{metric_platformSerialIdentifier}}.{{metric_ServiceAlias}}.size'"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "LTA_OriginToPublication_Daily_min_time_productType_platformShortName_platformSerialIdentifier",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {\r",
											"    var jsonDataElements = pm.response.json().value;\r",
											"\r",
											"    pm.test(\"Response time is less than \" + environment[\"query-timeout\"] + \"ms\", function () {\r",
											"        pm.expect(pm.response.responseTime).to.be.below(parseInt(environment[\"query-timeout\"]));\r",
											"    });\r",
											"\r",
											"    pm.test(\"Test OData context\", function(){\r",
											"        query_string = pm.request.url.getQueryString();\r",
											"        pm.expect( pm.response.json()['@odata.context']).to.include(\"$metadata#Metrics\");\r",
											"    });\r",
											"\r",
											"    var metricName = decodeURIComponent(pm.request.url.getQueryString()).split(\"$filter=Name eq \")[1].replace(\"'\",\"\").split(\".\")[0];\r",
											"    console.log(metricName);\r",
											"\r",
											"    for(var elem of jsonDataElements){\r",
											"        pm.test(\"Test Metrics properties\", function(){\r",
											"\r",
											"            if(elem[\"Name\"]) pm.expect(elem[\"Name\"].split(\".\")[0]).to.be.equal(metricName);\r",
											"            else pm.expect.fail(\"Name not found in element properties\");\r",
											"            \r",
											"            if(elem[\"Timestamp\"]) pm.expect(elem[\"Timestamp\"]).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);\r",
											"            else pm.expect.fail(\"Timestamp not found in element properties\");\r",
											"                        \r",
											"            switch(metricName){\r",
											"                case \"systematic_production\":\r",
											"                case \"on-demand default\":\r",
											"                case \"on-demand non-default\":\r",
											"                case \"Archived\":\r",
											"                case \"Retrieved\":\r",
											"                case \"Download\":\r",
											"                    console.log(\"Expected Counter\");\r",
											"                    if(elem[\"MetricType\"]) pm.expect(elem[\"MetricType\"]).to.be.equal(\"Counter\");\r",
											"                    else pm.expect.fail(\"MetricType not found in element properties\");\r",
											"                    if(elem[\"Counter\"]) pm.expect(elem[\"Counter\"]).to.be.a(\"number\");\r",
											"                    else pm.expect.fail(\"Counter not found in element properties\");\r",
											"                    //pm.expect(elem[\"Gauge\"]).to.be.equal(null);\r",
											"                    break;\r",
											"                case \"SensingToPublication\":\r",
											"                case \"OriginToPublication\":\r",
											"                case \"SubmissionToCompletion\":\r",
											"                case \"Service\":\r",
											"                    console.log(\"Expected Gauge\");\r",
											"                    if(elem[\"MetricType\"]) pm.expect(elem[\"MetricType\"]).to.be.equal(\"Gauge\");\r",
											"                    else pm.expect.fail(\"MetricType not found in element properties\");\r",
											"                    if(elem[\"Gauge\"]){\r",
											"                        pm.expect(elem[\"Gauge\"]).to.be.a(\"string\");\r",
											"                        pm.expect(parseInt(elem[\"Gauge\"])).to.be.a(\"number\");\r",
											"                    } else pm.expect.fail(\"Gauge not found in element properties\");\r",
											"                    //pm.expect(elem[\"Counter\"]).to.be.equal(null);\r",
											"                    break;\r",
											"            }\r",
											"        });\r",
											"    }\r",
											"}\r",
											"\r",
											"catch (err) {\r",
											"    pm.test(request.name, function () {\r",
											"        pm.expect.fail(err.toString());\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript",
										"id": "539b144e-dba4-4e49-a248-70aa54fb10f7"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{service-root-uri}}/odata/v1/Metrics?$filter=Name eq 'OriginToPublication.Daily.min.time.{{metric_productType}}.{{metric_platformShortName}}.{{metric_platformSerialIdentifier}}'",
									"host": [
										"{{service-root-uri}}"
									],
									"path": [
										"odata",
										"v1",
										"Metrics"
									],
									"query": [
										{
											"key": "$filter",
											"value": "Name eq 'OriginToPublication.Daily.min.time.{{metric_productType}}.{{metric_platformShortName}}.{{metric_platformSerialIdentifier}}'"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "LTA_OriginToPublication_Daily_max_time_productType_platformShortName_platformSerialIdentifier",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {\r",
											"    var jsonDataElements = pm.response.json().value;\r",
											"\r",
											"    pm.test(\"Response time is less than \" + environment[\"query-timeout\"] + \"ms\", function () {\r",
											"        pm.expect(pm.response.responseTime).to.be.below(parseInt(environment[\"query-timeout\"]));\r",
											"    });\r",
											"\r",
											"    pm.test(\"Test OData context\", function(){\r",
											"        query_string = pm.request.url.getQueryString();\r",
											"        pm.expect( pm.response.json()['@odata.context']).to.include(\"$metadata#Metrics\");\r",
											"    });\r",
											"\r",
											"    var metricName = decodeURIComponent(pm.request.url.getQueryString()).split(\"$filter=Name eq \")[1].replace(\"'\",\"\").split(\".\")[0];\r",
											"    console.log(metricName);\r",
											"\r",
											"    for(var elem of jsonDataElements){\r",
											"        pm.test(\"Test Metrics properties\", function(){\r",
											"\r",
											"            if(elem[\"Name\"]) pm.expect(elem[\"Name\"].split(\".\")[0]).to.be.equal(metricName);\r",
											"            else pm.expect.fail(\"Name not found in element properties\");\r",
											"            \r",
											"            if(elem[\"Timestamp\"]) pm.expect(elem[\"Timestamp\"]).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);\r",
											"            else pm.expect.fail(\"Timestamp not found in element properties\");\r",
											"                        \r",
											"            switch(metricName){\r",
											"                case \"systematic_production\":\r",
											"                case \"on-demand default\":\r",
											"                case \"on-demand non-default\":\r",
											"                case \"Archived\":\r",
											"                case \"Retrieved\":\r",
											"                case \"Download\":\r",
											"                    console.log(\"Expected Counter\");\r",
											"                    if(elem[\"MetricType\"]) pm.expect(elem[\"MetricType\"]).to.be.equal(\"Counter\");\r",
											"                    else pm.expect.fail(\"MetricType not found in element properties\");\r",
											"                    if(elem[\"Counter\"]) pm.expect(elem[\"Counter\"]).to.be.a(\"number\");\r",
											"                    else pm.expect.fail(\"Counter not found in element properties\");\r",
											"                    //pm.expect(elem[\"Gauge\"]).to.be.equal(null);\r",
											"                    break;\r",
											"                case \"SensingToPublication\":\r",
											"                case \"OriginToPublication\":\r",
											"                case \"SubmissionToCompletion\":\r",
											"                case \"Service\":\r",
											"                    console.log(\"Expected Gauge\");\r",
											"                    if(elem[\"MetricType\"]) pm.expect(elem[\"MetricType\"]).to.be.equal(\"Gauge\");\r",
											"                    else pm.expect.fail(\"MetricType not found in element properties\");\r",
											"                    if(elem[\"Gauge\"]){\r",
											"                        pm.expect(elem[\"Gauge\"]).to.be.a(\"string\");\r",
											"                        pm.expect(parseInt(elem[\"Gauge\"])).to.be.a(\"number\");\r",
											"                    } else pm.expect.fail(\"Gauge not found in element properties\");\r",
											"                    //pm.expect(elem[\"Counter\"]).to.be.equal(null);\r",
											"                    break;\r",
											"            }\r",
											"        });\r",
											"    }\r",
											"}\r",
											"\r",
											"catch (err) {\r",
											"    pm.test(request.name, function () {\r",
											"        pm.expect.fail(err.toString());\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript",
										"id": "cfb06c9c-82e2-4f8e-b103-234c5ba916fe"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{service-root-uri}}/odata/v1/Metrics?$filter=Name eq 'OriginToPublication.Daily.max.time.{{metric_productType}}.{{metric_platformShortName}}.{{metric_platformSerialIdentifier}}'",
									"host": [
										"{{service-root-uri}}"
									],
									"path": [
										"odata",
										"v1",
										"Metrics"
									],
									"query": [
										{
											"key": "$filter",
											"value": "Name eq 'OriginToPublication.Daily.max.time.{{metric_productType}}.{{metric_platformShortName}}.{{metric_platformSerialIdentifier}}'"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "LTA_OriginToPublication_Daily_avg_time_productType_platformShortName_platformSerialIdentifier",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {\r",
											"    var jsonDataElements = pm.response.json().value;\r",
											"\r",
											"    pm.test(\"Response time is less than \" + environment[\"query-timeout\"] + \"ms\", function () {\r",
											"        pm.expect(pm.response.responseTime).to.be.below(parseInt(environment[\"query-timeout\"]));\r",
											"    });\r",
											"\r",
											"    pm.test(\"Test OData context\", function(){\r",
											"        query_string = pm.request.url.getQueryString();\r",
											"        pm.expect( pm.response.json()['@odata.context']).to.include(\"$metadata#Metrics\");\r",
											"    });\r",
											"\r",
											"    var metricName = decodeURIComponent(pm.request.url.getQueryString()).split(\"$filter=Name eq \")[1].replace(\"'\",\"\").split(\".\")[0];\r",
											"    console.log(metricName);\r",
											"\r",
											"    for(var elem of jsonDataElements){\r",
											"        pm.test(\"Test Metrics properties\", function(){\r",
											"\r",
											"            if(elem[\"Name\"]) pm.expect(elem[\"Name\"].split(\".\")[0]).to.be.equal(metricName);\r",
											"            else pm.expect.fail(\"Name not found in element properties\");\r",
											"            \r",
											"            if(elem[\"Timestamp\"]) pm.expect(elem[\"Timestamp\"]).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);\r",
											"            else pm.expect.fail(\"Timestamp not found in element properties\");\r",
											"                        \r",
											"            switch(metricName){\r",
											"                case \"systematic_production\":\r",
											"                case \"on-demand default\":\r",
											"                case \"on-demand non-default\":\r",
											"                case \"Archived\":\r",
											"                case \"Retrieved\":\r",
											"                case \"Download\":\r",
											"                    console.log(\"Expected Counter\");\r",
											"                    if(elem[\"MetricType\"]) pm.expect(elem[\"MetricType\"]).to.be.equal(\"Counter\");\r",
											"                    else pm.expect.fail(\"MetricType not found in element properties\");\r",
											"                    if(elem[\"Counter\"]) pm.expect(elem[\"Counter\"]).to.be.a(\"number\");\r",
											"                    else pm.expect.fail(\"Counter not found in element properties\");\r",
											"                    //pm.expect(elem[\"Gauge\"]).to.be.equal(null);\r",
											"                    break;\r",
											"                case \"SensingToPublication\":\r",
											"                case \"OriginToPublication\":\r",
											"                case \"SubmissionToCompletion\":\r",
											"                case \"Service\":\r",
											"                    console.log(\"Expected Gauge\");\r",
											"                    if(elem[\"MetricType\"]) pm.expect(elem[\"MetricType\"]).to.be.equal(\"Gauge\");\r",
											"                    else pm.expect.fail(\"MetricType not found in element properties\");\r",
											"                    if(elem[\"Gauge\"]){\r",
											"                        pm.expect(elem[\"Gauge\"]).to.be.a(\"string\");\r",
											"                        pm.expect(parseInt(elem[\"Gauge\"])).to.be.a(\"number\");\r",
											"                    } else pm.expect.fail(\"Gauge not found in element properties\");\r",
											"                    //pm.expect(elem[\"Counter\"]).to.be.equal(null);\r",
											"                    break;\r",
											"            }\r",
											"        });\r",
											"    }\r",
											"}\r",
											"\r",
											"catch (err) {\r",
											"    pm.test(request.name, function () {\r",
											"        pm.expect.fail(err.toString());\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript",
										"id": "f7ee094f-8ae6-41ff-9a84-88e48d0bf2e7"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{service-root-uri}}/odata/v1/Metrics?$filter=Name eq 'OriginToPublication.Daily.avg.time.{{metric_productType}}.{{metric_platformShortName}}.{{metric_platformSerialIdentifier}}'",
									"host": [
										"{{service-root-uri}}"
									],
									"path": [
										"odata",
										"v1",
										"Metrics"
									],
									"query": [
										{
											"key": "$filter",
											"value": "Name eq 'OriginToPublication.Daily.avg.time.{{metric_productType}}.{{metric_platformShortName}}.{{metric_platformSerialIdentifier}}'"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "LTA_OriginToPublication_Monthly_min_time_productType_platformShortName_platformSerialIdentifier",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {\r",
											"    var jsonDataElements = pm.response.json().value;\r",
											"\r",
											"    pm.test(\"Response time is less than \" + environment[\"query-timeout\"] + \"ms\", function () {\r",
											"        pm.expect(pm.response.responseTime).to.be.below(parseInt(environment[\"query-timeout\"]));\r",
											"    });\r",
											"\r",
											"    pm.test(\"Test OData context\", function(){\r",
											"        query_string = pm.request.url.getQueryString();\r",
											"        pm.expect( pm.response.json()['@odata.context']).to.include(\"$metadata#Metrics\");\r",
											"    });\r",
											"\r",
											"    var metricName = decodeURIComponent(pm.request.url.getQueryString()).split(\"$filter=Name eq \")[1].replace(\"'\",\"\").split(\".\")[0];\r",
											"    console.log(metricName);\r",
											"\r",
											"    for(var elem of jsonDataElements){\r",
											"        pm.test(\"Test Metrics properties\", function(){\r",
											"\r",
											"            if(elem[\"Name\"]) pm.expect(elem[\"Name\"].split(\".\")[0]).to.be.equal(metricName);\r",
											"            else pm.expect.fail(\"Name not found in element properties\");\r",
											"            \r",
											"            if(elem[\"Timestamp\"]) pm.expect(elem[\"Timestamp\"]).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);\r",
											"            else pm.expect.fail(\"Timestamp not found in element properties\");\r",
											"                        \r",
											"            switch(metricName){\r",
											"                case \"systematic_production\":\r",
											"                case \"on-demand default\":\r",
											"                case \"on-demand non-default\":\r",
											"                case \"Archived\":\r",
											"                case \"Retrieved\":\r",
											"                case \"Download\":\r",
											"                    console.log(\"Expected Counter\");\r",
											"                    if(elem[\"MetricType\"]) pm.expect(elem[\"MetricType\"]).to.be.equal(\"Counter\");\r",
											"                    else pm.expect.fail(\"MetricType not found in element properties\");\r",
											"                    if(elem[\"Counter\"]) pm.expect(elem[\"Counter\"]).to.be.a(\"number\");\r",
											"                    else pm.expect.fail(\"Counter not found in element properties\");\r",
											"                    //pm.expect(elem[\"Gauge\"]).to.be.equal(null);\r",
											"                    break;\r",
											"                case \"SensingToPublication\":\r",
											"                case \"OriginToPublication\":\r",
											"                case \"SubmissionToCompletion\":\r",
											"                case \"Service\":\r",
											"                    console.log(\"Expected Gauge\");\r",
											"                    if(elem[\"MetricType\"]) pm.expect(elem[\"MetricType\"]).to.be.equal(\"Gauge\");\r",
											"                    else pm.expect.fail(\"MetricType not found in element properties\");\r",
											"                    if(elem[\"Gauge\"]){\r",
											"                        pm.expect(elem[\"Gauge\"]).to.be.a(\"string\");\r",
											"                        pm.expect(parseInt(elem[\"Gauge\"])).to.be.a(\"number\");\r",
											"                    } else pm.expect.fail(\"Gauge not found in element properties\");\r",
											"                    //pm.expect(elem[\"Counter\"]).to.be.equal(null);\r",
											"                    break;\r",
											"            }\r",
											"        });\r",
											"    }\r",
											"}\r",
											"\r",
											"catch (err) {\r",
											"    pm.test(request.name, function () {\r",
											"        pm.expect.fail(err.toString());\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript",
										"id": "ae94478e-33f8-4597-bc59-163f3d04dfd0"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{service-root-uri}}/odata/v1/Metrics?$filter=Name eq 'OriginToPublication.Monthly.min.time.{{metric_productType}}.{{metric_platformShortName}}.{{metric_platformSerialIdentifier}}'",
									"host": [
										"{{service-root-uri}}"
									],
									"path": [
										"odata",
										"v1",
										"Metrics"
									],
									"query": [
										{
											"key": "$filter",
											"value": "Name eq 'OriginToPublication.Monthly.min.time.{{metric_productType}}.{{metric_platformShortName}}.{{metric_platformSerialIdentifier}}'"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "LTA_OriginToPublication_Monthly_max_time_productType_platformShortName_platformSerialIdentifier",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {\r",
											"    var jsonDataElements = pm.response.json().value;\r",
											"\r",
											"    pm.test(\"Response time is less than \" + environment[\"query-timeout\"] + \"ms\", function () {\r",
											"        pm.expect(pm.response.responseTime).to.be.below(parseInt(environment[\"query-timeout\"]));\r",
											"    });\r",
											"\r",
											"    pm.test(\"Test OData context\", function(){\r",
											"        query_string = pm.request.url.getQueryString();\r",
											"        pm.expect( pm.response.json()['@odata.context']).to.include(\"$metadata#Metrics\");\r",
											"    });\r",
											"\r",
											"    var metricName = decodeURIComponent(pm.request.url.getQueryString()).split(\"$filter=Name eq \")[1].replace(\"'\",\"\").split(\".\")[0];\r",
											"    console.log(metricName);\r",
											"\r",
											"    for(var elem of jsonDataElements){\r",
											"        pm.test(\"Test Metrics properties\", function(){\r",
											"\r",
											"            if(elem[\"Name\"]) pm.expect(elem[\"Name\"].split(\".\")[0]).to.be.equal(metricName);\r",
											"            else pm.expect.fail(\"Name not found in element properties\");\r",
											"            \r",
											"            if(elem[\"Timestamp\"]) pm.expect(elem[\"Timestamp\"]).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);\r",
											"            else pm.expect.fail(\"Timestamp not found in element properties\");\r",
											"                        \r",
											"            switch(metricName){\r",
											"                case \"systematic_production\":\r",
											"                case \"on-demand default\":\r",
											"                case \"on-demand non-default\":\r",
											"                case \"Archived\":\r",
											"                case \"Retrieved\":\r",
											"                case \"Download\":\r",
											"                    console.log(\"Expected Counter\");\r",
											"                    if(elem[\"MetricType\"]) pm.expect(elem[\"MetricType\"]).to.be.equal(\"Counter\");\r",
											"                    else pm.expect.fail(\"MetricType not found in element properties\");\r",
											"                    if(elem[\"Counter\"]) pm.expect(elem[\"Counter\"]).to.be.a(\"number\");\r",
											"                    else pm.expect.fail(\"Counter not found in element properties\");\r",
											"                    //pm.expect(elem[\"Gauge\"]).to.be.equal(null);\r",
											"                    break;\r",
											"                case \"SensingToPublication\":\r",
											"                case \"OriginToPublication\":\r",
											"                case \"SubmissionToCompletion\":\r",
											"                case \"Service\":\r",
											"                    console.log(\"Expected Gauge\");\r",
											"                    if(elem[\"MetricType\"]) pm.expect(elem[\"MetricType\"]).to.be.equal(\"Gauge\");\r",
											"                    else pm.expect.fail(\"MetricType not found in element properties\");\r",
											"                    if(elem[\"Gauge\"]){\r",
											"                        pm.expect(elem[\"Gauge\"]).to.be.a(\"string\");\r",
											"                        pm.expect(parseInt(elem[\"Gauge\"])).to.be.a(\"number\");\r",
											"                    } else pm.expect.fail(\"Gauge not found in element properties\");\r",
											"                    //pm.expect(elem[\"Counter\"]).to.be.equal(null);\r",
											"                    break;\r",
											"            }\r",
											"        });\r",
											"    }\r",
											"}\r",
											"\r",
											"catch (err) {\r",
											"    pm.test(request.name, function () {\r",
											"        pm.expect.fail(err.toString());\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript",
										"id": "e2d1eb5a-30e6-48ab-8631-2b86f5423302"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{service-root-uri}}/odata/v1/Metrics?$filter=Name eq 'OriginToPublication.Monthly.max.time.{{metric_productType}}.{{metric_platformShortName}}.{{metric_platformSerialIdentifier}}'",
									"host": [
										"{{service-root-uri}}"
									],
									"path": [
										"odata",
										"v1",
										"Metrics"
									],
									"query": [
										{
											"key": "$filter",
											"value": "Name eq 'OriginToPublication.Monthly.max.time.{{metric_productType}}.{{metric_platformShortName}}.{{metric_platformSerialIdentifier}}'"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "LTA_OriginToPublication_Monthly_avg_time_productType_platformShortName_platformSerialIdentifier",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {\r",
											"    var jsonDataElements = pm.response.json().value;\r",
											"\r",
											"    pm.test(\"Response time is less than \" + environment[\"query-timeout\"] + \"ms\", function () {\r",
											"        pm.expect(pm.response.responseTime).to.be.below(parseInt(environment[\"query-timeout\"]));\r",
											"    });\r",
											"\r",
											"    pm.test(\"Test OData context\", function(){\r",
											"        query_string = pm.request.url.getQueryString();\r",
											"        pm.expect( pm.response.json()['@odata.context']).to.include(\"$metadata#Metrics\");\r",
											"    });\r",
											"\r",
											"    var metricName = decodeURIComponent(pm.request.url.getQueryString()).split(\"$filter=Name eq \")[1].replace(\"'\",\"\").split(\".\")[0];\r",
											"    console.log(metricName);\r",
											"\r",
											"    for(var elem of jsonDataElements){\r",
											"        pm.test(\"Test Metrics properties\", function(){\r",
											"\r",
											"            if(elem[\"Name\"]) pm.expect(elem[\"Name\"].split(\".\")[0]).to.be.equal(metricName);\r",
											"            else pm.expect.fail(\"Name not found in element properties\");\r",
											"            \r",
											"            if(elem[\"Timestamp\"]) pm.expect(elem[\"Timestamp\"]).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);\r",
											"            else pm.expect.fail(\"Timestamp not found in element properties\");\r",
											"                        \r",
											"            switch(metricName){\r",
											"                case \"systematic_production\":\r",
											"                case \"on-demand default\":\r",
											"                case \"on-demand non-default\":\r",
											"                case \"Archived\":\r",
											"                case \"Retrieved\":\r",
											"                case \"Download\":\r",
											"                    console.log(\"Expected Counter\");\r",
											"                    if(elem[\"MetricType\"]) pm.expect(elem[\"MetricType\"]).to.be.equal(\"Counter\");\r",
											"                    else pm.expect.fail(\"MetricType not found in element properties\");\r",
											"                    if(elem[\"Counter\"]) pm.expect(elem[\"Counter\"]).to.be.a(\"number\");\r",
											"                    else pm.expect.fail(\"Counter not found in element properties\");\r",
											"                    //pm.expect(elem[\"Gauge\"]).to.be.equal(null);\r",
											"                    break;\r",
											"                case \"SensingToPublication\":\r",
											"                case \"OriginToPublication\":\r",
											"                case \"SubmissionToCompletion\":\r",
											"                case \"Service\":\r",
											"                    console.log(\"Expected Gauge\");\r",
											"                    if(elem[\"MetricType\"]) pm.expect(elem[\"MetricType\"]).to.be.equal(\"Gauge\");\r",
											"                    else pm.expect.fail(\"MetricType not found in element properties\");\r",
											"                    if(elem[\"Gauge\"]){\r",
											"                        pm.expect(elem[\"Gauge\"]).to.be.a(\"string\");\r",
											"                        pm.expect(parseInt(elem[\"Gauge\"])).to.be.a(\"number\");\r",
											"                    } else pm.expect.fail(\"Gauge not found in element properties\");\r",
											"                    //pm.expect(elem[\"Counter\"]).to.be.equal(null);\r",
											"                    break;\r",
											"            }\r",
											"        });\r",
											"    }\r",
											"}\r",
											"\r",
											"catch (err) {\r",
											"    pm.test(request.name, function () {\r",
											"        pm.expect.fail(err.toString());\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript",
										"id": "11aadad6-3f08-471e-ae05-d350749496e8"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{service-root-uri}}/odata/v1/Metrics?$filter=Name eq 'OriginToPublication.Monthly.avg.time.{{metric_productType}}.{{metric_platformShortName}}.{{metric_platformSerialIdentifier}}'",
									"host": [
										"{{service-root-uri}}"
									],
									"path": [
										"odata",
										"v1",
										"Metrics"
									],
									"query": [
										{
											"key": "$filter",
											"value": "Name eq 'OriginToPublication.Monthly.avg.time.{{metric_productType}}.{{metric_platformShortName}}.{{metric_platformSerialIdentifier}}'"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "LTA_SubmissionToCompletion_Daily_min_time",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {\r",
											"    var jsonDataElements = pm.response.json().value;\r",
											"\r",
											"    pm.test(\"Response time is less than \" + environment[\"query-timeout\"] + \"ms\", function () {\r",
											"        pm.expect(pm.response.responseTime).to.be.below(parseInt(environment[\"query-timeout\"]));\r",
											"    });\r",
											"\r",
											"    pm.test(\"Test OData context\", function(){\r",
											"        query_string = pm.request.url.getQueryString();\r",
											"        pm.expect( pm.response.json()['@odata.context']).to.include(\"$metadata#Metrics\");\r",
											"    });\r",
											"\r",
											"    var metricName = decodeURIComponent(pm.request.url.getQueryString()).split(\"$filter=Name eq \")[1].replace(\"'\",\"\").split(\".\")[0];\r",
											"    console.log(metricName);\r",
											"\r",
											"    for(var elem of jsonDataElements){\r",
											"        pm.test(\"Test Metrics properties\", function(){\r",
											"\r",
											"            if(elem[\"Name\"]) pm.expect(elem[\"Name\"].split(\".\")[0]).to.be.equal(metricName);\r",
											"            else pm.expect.fail(\"Name not found in element properties\");\r",
											"            \r",
											"            if(elem[\"Timestamp\"]) pm.expect(elem[\"Timestamp\"]).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);\r",
											"            else pm.expect.fail(\"Timestamp not found in element properties\");\r",
											"                        \r",
											"            switch(metricName){\r",
											"                case \"systematic_production\":\r",
											"                case \"on-demand default\":\r",
											"                case \"on-demand non-default\":\r",
											"                case \"Archived\":\r",
											"                case \"Retrieved\":\r",
											"                case \"Download\":\r",
											"                    console.log(\"Expected Counter\");\r",
											"                    if(elem[\"MetricType\"]) pm.expect(elem[\"MetricType\"]).to.be.equal(\"Counter\");\r",
											"                    else pm.expect.fail(\"MetricType not found in element properties\");\r",
											"                    if(elem[\"Counter\"]) pm.expect(elem[\"Counter\"]).to.be.a(\"number\");\r",
											"                    else pm.expect.fail(\"Counter not found in element properties\");\r",
											"                    //pm.expect(elem[\"Gauge\"]).to.be.equal(null);\r",
											"                    break;\r",
											"                case \"SensingToPublication\":\r",
											"                case \"OriginToPublication\":\r",
											"                case \"SubmissionToCompletion\":\r",
											"                case \"Service\":\r",
											"                    console.log(\"Expected Gauge\");\r",
											"                    if(elem[\"MetricType\"]) pm.expect(elem[\"MetricType\"]).to.be.equal(\"Gauge\");\r",
											"                    else pm.expect.fail(\"MetricType not found in element properties\");\r",
											"                    if(elem[\"Gauge\"]){\r",
											"                        pm.expect(elem[\"Gauge\"]).to.be.a(\"string\");\r",
											"                        pm.expect(parseInt(elem[\"Gauge\"])).to.be.a(\"number\");\r",
											"                    } else pm.expect.fail(\"Gauge not found in element properties\");\r",
											"                    //pm.expect(elem[\"Counter\"]).to.be.equal(null);\r",
											"                    break;\r",
											"            }\r",
											"        });\r",
											"    }\r",
											"}\r",
											"\r",
											"catch (err) {\r",
											"    pm.test(request.name, function () {\r",
											"        pm.expect.fail(err.toString());\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript",
										"id": "ad04802c-5df6-4e4a-a0e5-aaa5ef9675e0"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{service-root-uri}}/odata/v1/Metrics?$filter=Name eq 'SubmissionToCompletion.Daily.min.time'",
									"host": [
										"{{service-root-uri}}"
									],
									"path": [
										"odata",
										"v1",
										"Metrics"
									],
									"query": [
										{
											"key": "$filter",
											"value": "Name eq 'SubmissionToCompletion.Daily.min.time'"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "LTA_SubmissionToCompletion_Daily_max_time",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {\r",
											"    var jsonDataElements = pm.response.json().value;\r",
											"\r",
											"    pm.test(\"Response time is less than \" + environment[\"query-timeout\"] + \"ms\", function () {\r",
											"        pm.expect(pm.response.responseTime).to.be.below(parseInt(environment[\"query-timeout\"]));\r",
											"    });\r",
											"\r",
											"    pm.test(\"Test OData context\", function(){\r",
											"        query_string = pm.request.url.getQueryString();\r",
											"        pm.expect( pm.response.json()['@odata.context']).to.include(\"$metadata#Metrics\");\r",
											"    });\r",
											"\r",
											"    var metricName = decodeURIComponent(pm.request.url.getQueryString()).split(\"$filter=Name eq \")[1].replace(\"'\",\"\").split(\".\")[0];\r",
											"    console.log(metricName);\r",
											"\r",
											"    for(var elem of jsonDataElements){\r",
											"        pm.test(\"Test Metrics properties\", function(){\r",
											"\r",
											"            if(elem[\"Name\"]) pm.expect(elem[\"Name\"].split(\".\")[0]).to.be.equal(metricName);\r",
											"            else pm.expect.fail(\"Name not found in element properties\");\r",
											"            \r",
											"            if(elem[\"Timestamp\"]) pm.expect(elem[\"Timestamp\"]).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);\r",
											"            else pm.expect.fail(\"Timestamp not found in element properties\");\r",
											"                        \r",
											"            switch(metricName){\r",
											"                case \"systematic_production\":\r",
											"                case \"on-demand default\":\r",
											"                case \"on-demand non-default\":\r",
											"                case \"Archived\":\r",
											"                case \"Retrieved\":\r",
											"                case \"Download\":\r",
											"                    console.log(\"Expected Counter\");\r",
											"                    if(elem[\"MetricType\"]) pm.expect(elem[\"MetricType\"]).to.be.equal(\"Counter\");\r",
											"                    else pm.expect.fail(\"MetricType not found in element properties\");\r",
											"                    if(elem[\"Counter\"]) pm.expect(elem[\"Counter\"]).to.be.a(\"number\");\r",
											"                    else pm.expect.fail(\"Counter not found in element properties\");\r",
											"                    //pm.expect(elem[\"Gauge\"]).to.be.equal(null);\r",
											"                    break;\r",
											"                case \"SensingToPublication\":\r",
											"                case \"OriginToPublication\":\r",
											"                case \"SubmissionToCompletion\":\r",
											"                case \"Service\":\r",
											"                    console.log(\"Expected Gauge\");\r",
											"                    if(elem[\"MetricType\"]) pm.expect(elem[\"MetricType\"]).to.be.equal(\"Gauge\");\r",
											"                    else pm.expect.fail(\"MetricType not found in element properties\");\r",
											"                    if(elem[\"Gauge\"]){\r",
											"                        pm.expect(elem[\"Gauge\"]).to.be.a(\"string\");\r",
											"                        pm.expect(parseInt(elem[\"Gauge\"])).to.be.a(\"number\");\r",
											"                    } else pm.expect.fail(\"Gauge not found in element properties\");\r",
											"                    //pm.expect(elem[\"Counter\"]).to.be.equal(null);\r",
											"                    break;\r",
											"            }\r",
											"        });\r",
											"    }\r",
											"}\r",
											"\r",
											"catch (err) {\r",
											"    pm.test(request.name, function () {\r",
											"        pm.expect.fail(err.toString());\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript",
										"id": "2f79b2d3-b674-4efa-b486-fa0abdc91b35"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{service-root-uri}}/odata/v1/Metrics?$filter=Name eq 'SubmissionToCompletion.Daily.max.time'",
									"host": [
										"{{service-root-uri}}"
									],
									"path": [
										"odata",
										"v1",
										"Metrics"
									],
									"query": [
										{
											"key": "$filter",
											"value": "Name eq 'SubmissionToCompletion.Daily.max.time'"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "LTA_SubmissionToCompletion_Daily_avg_time",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {\r",
											"    var jsonDataElements = pm.response.json().value;\r",
											"\r",
											"    pm.test(\"Response time is less than \" + environment[\"query-timeout\"] + \"ms\", function () {\r",
											"        pm.expect(pm.response.responseTime).to.be.below(parseInt(environment[\"query-timeout\"]));\r",
											"    });\r",
											"\r",
											"    pm.test(\"Test OData context\", function(){\r",
											"        query_string = pm.request.url.getQueryString();\r",
											"        pm.expect( pm.response.json()['@odata.context']).to.include(\"$metadata#Metrics\");\r",
											"    });\r",
											"\r",
											"    var metricName = decodeURIComponent(pm.request.url.getQueryString()).split(\"$filter=Name eq \")[1].replace(\"'\",\"\").split(\".\")[0];\r",
											"    console.log(metricName);\r",
											"\r",
											"    for(var elem of jsonDataElements){\r",
											"        pm.test(\"Test Metrics properties\", function(){\r",
											"\r",
											"            if(elem[\"Name\"]) pm.expect(elem[\"Name\"].split(\".\")[0]).to.be.equal(metricName);\r",
											"            else pm.expect.fail(\"Name not found in element properties\");\r",
											"            \r",
											"            if(elem[\"Timestamp\"]) pm.expect(elem[\"Timestamp\"]).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);\r",
											"            else pm.expect.fail(\"Timestamp not found in element properties\");\r",
											"                        \r",
											"            switch(metricName){\r",
											"                case \"systematic_production\":\r",
											"                case \"on-demand default\":\r",
											"                case \"on-demand non-default\":\r",
											"                case \"Archived\":\r",
											"                case \"Retrieved\":\r",
											"                case \"Download\":\r",
											"                    console.log(\"Expected Counter\");\r",
											"                    if(elem[\"MetricType\"]) pm.expect(elem[\"MetricType\"]).to.be.equal(\"Counter\");\r",
											"                    else pm.expect.fail(\"MetricType not found in element properties\");\r",
											"                    if(elem[\"Counter\"]) pm.expect(elem[\"Counter\"]).to.be.a(\"number\");\r",
											"                    else pm.expect.fail(\"Counter not found in element properties\");\r",
											"                    //pm.expect(elem[\"Gauge\"]).to.be.equal(null);\r",
											"                    break;\r",
											"                case \"SensingToPublication\":\r",
											"                case \"OriginToPublication\":\r",
											"                case \"SubmissionToCompletion\":\r",
											"                case \"Service\":\r",
											"                    console.log(\"Expected Gauge\");\r",
											"                    if(elem[\"MetricType\"]) pm.expect(elem[\"MetricType\"]).to.be.equal(\"Gauge\");\r",
											"                    else pm.expect.fail(\"MetricType not found in element properties\");\r",
											"                    if(elem[\"Gauge\"]){\r",
											"                        pm.expect(elem[\"Gauge\"]).to.be.a(\"string\");\r",
											"                        pm.expect(parseInt(elem[\"Gauge\"])).to.be.a(\"number\");\r",
											"                    } else pm.expect.fail(\"Gauge not found in element properties\");\r",
											"                    //pm.expect(elem[\"Counter\"]).to.be.equal(null);\r",
											"                    break;\r",
											"            }\r",
											"        });\r",
											"    }\r",
											"}\r",
											"\r",
											"catch (err) {\r",
											"    pm.test(request.name, function () {\r",
											"        pm.expect.fail(err.toString());\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript",
										"id": "d7f0b74c-d770-493a-8be2-27383a4663c6"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{service-root-uri}}/odata/v1/Metrics?$filter=Name eq 'SubmissionToCompletion.Daily.avg.time'",
									"host": [
										"{{service-root-uri}}"
									],
									"path": [
										"odata",
										"v1",
										"Metrics"
									],
									"query": [
										{
											"key": "$filter",
											"value": "Name eq 'SubmissionToCompletion.Daily.avg.time'"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "LTA_SubmissionToCompletion_Monthly_min_time",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {\r",
											"    var jsonDataElements = pm.response.json().value;\r",
											"\r",
											"    pm.test(\"Response time is less than \" + environment[\"query-timeout\"] + \"ms\", function () {\r",
											"        pm.expect(pm.response.responseTime).to.be.below(parseInt(environment[\"query-timeout\"]));\r",
											"    });\r",
											"\r",
											"    pm.test(\"Test OData context\", function(){\r",
											"        query_string = pm.request.url.getQueryString();\r",
											"        pm.expect( pm.response.json()['@odata.context']).to.include(\"$metadata#Metrics\");\r",
											"    });\r",
											"\r",
											"    var metricName = decodeURIComponent(pm.request.url.getQueryString()).split(\"$filter=Name eq \")[1].replace(\"'\",\"\").split(\".\")[0];\r",
											"    console.log(metricName);\r",
											"\r",
											"    for(var elem of jsonDataElements){\r",
											"        pm.test(\"Test Metrics properties\", function(){\r",
											"\r",
											"            if(elem[\"Name\"]) pm.expect(elem[\"Name\"].split(\".\")[0]).to.be.equal(metricName);\r",
											"            else pm.expect.fail(\"Name not found in element properties\");\r",
											"            \r",
											"            if(elem[\"Timestamp\"]) pm.expect(elem[\"Timestamp\"]).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);\r",
											"            else pm.expect.fail(\"Timestamp not found in element properties\");\r",
											"                        \r",
											"            switch(metricName){\r",
											"                case \"systematic_production\":\r",
											"                case \"on-demand default\":\r",
											"                case \"on-demand non-default\":\r",
											"                case \"Archived\":\r",
											"                case \"Retrieved\":\r",
											"                case \"Download\":\r",
											"                    console.log(\"Expected Counter\");\r",
											"                    if(elem[\"MetricType\"]) pm.expect(elem[\"MetricType\"]).to.be.equal(\"Counter\");\r",
											"                    else pm.expect.fail(\"MetricType not found in element properties\");\r",
											"                    if(elem[\"Counter\"]) pm.expect(elem[\"Counter\"]).to.be.a(\"number\");\r",
											"                    else pm.expect.fail(\"Counter not found in element properties\");\r",
											"                    //pm.expect(elem[\"Gauge\"]).to.be.equal(null);\r",
											"                    break;\r",
											"                case \"SensingToPublication\":\r",
											"                case \"OriginToPublication\":\r",
											"                case \"SubmissionToCompletion\":\r",
											"                case \"Service\":\r",
											"                    console.log(\"Expected Gauge\");\r",
											"                    if(elem[\"MetricType\"]) pm.expect(elem[\"MetricType\"]).to.be.equal(\"Gauge\");\r",
											"                    else pm.expect.fail(\"MetricType not found in element properties\");\r",
											"                    if(elem[\"Gauge\"]){\r",
											"                        pm.expect(elem[\"Gauge\"]).to.be.a(\"string\");\r",
											"                        pm.expect(parseInt(elem[\"Gauge\"])).to.be.a(\"number\");\r",
											"                    } else pm.expect.fail(\"Gauge not found in element properties\");\r",
											"                    //pm.expect(elem[\"Counter\"]).to.be.equal(null);\r",
											"                    break;\r",
											"            }\r",
											"        });\r",
											"    }\r",
											"}\r",
											"\r",
											"catch (err) {\r",
											"    pm.test(request.name, function () {\r",
											"        pm.expect.fail(err.toString());\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript",
										"id": "029541eb-9fc1-4ac0-a553-2d3b8d9c8d38"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{service-root-uri}}/odata/v1/Metrics?$filter=Name eq 'SubmissionToCompletion.Monthly.min.time'",
									"host": [
										"{{service-root-uri}}"
									],
									"path": [
										"odata",
										"v1",
										"Metrics"
									],
									"query": [
										{
											"key": "$filter",
											"value": "Name eq 'SubmissionToCompletion.Monthly.min.time'"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "LTA_SubmissionToCompletion_Monthly_max_time",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {\r",
											"    var jsonDataElements = pm.response.json().value;\r",
											"\r",
											"    pm.test(\"Response time is less than \" + environment[\"query-timeout\"] + \"ms\", function () {\r",
											"        pm.expect(pm.response.responseTime).to.be.below(parseInt(environment[\"query-timeout\"]));\r",
											"    });\r",
											"\r",
											"    pm.test(\"Test OData context\", function(){\r",
											"        query_string = pm.request.url.getQueryString();\r",
											"        pm.expect( pm.response.json()['@odata.context']).to.include(\"$metadata#Metrics\");\r",
											"    });\r",
											"\r",
											"    var metricName = decodeURIComponent(pm.request.url.getQueryString()).split(\"$filter=Name eq \")[1].replace(\"'\",\"\").split(\".\")[0];\r",
											"    console.log(metricName);\r",
											"\r",
											"    for(var elem of jsonDataElements){\r",
											"        pm.test(\"Test Metrics properties\", function(){\r",
											"\r",
											"            if(elem[\"Name\"]) pm.expect(elem[\"Name\"].split(\".\")[0]).to.be.equal(metricName);\r",
											"            else pm.expect.fail(\"Name not found in element properties\");\r",
											"            \r",
											"            if(elem[\"Timestamp\"]) pm.expect(elem[\"Timestamp\"]).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);\r",
											"            else pm.expect.fail(\"Timestamp not found in element properties\");\r",
											"                        \r",
											"            switch(metricName){\r",
											"                case \"systematic_production\":\r",
											"                case \"on-demand default\":\r",
											"                case \"on-demand non-default\":\r",
											"                case \"Archived\":\r",
											"                case \"Retrieved\":\r",
											"                case \"Download\":\r",
											"                    console.log(\"Expected Counter\");\r",
											"                    if(elem[\"MetricType\"]) pm.expect(elem[\"MetricType\"]).to.be.equal(\"Counter\");\r",
											"                    else pm.expect.fail(\"MetricType not found in element properties\");\r",
											"                    if(elem[\"Counter\"]) pm.expect(elem[\"Counter\"]).to.be.a(\"number\");\r",
											"                    else pm.expect.fail(\"Counter not found in element properties\");\r",
											"                    //pm.expect(elem[\"Gauge\"]).to.be.equal(null);\r",
											"                    break;\r",
											"                case \"SensingToPublication\":\r",
											"                case \"OriginToPublication\":\r",
											"                case \"SubmissionToCompletion\":\r",
											"                case \"Service\":\r",
											"                    console.log(\"Expected Gauge\");\r",
											"                    if(elem[\"MetricType\"]) pm.expect(elem[\"MetricType\"]).to.be.equal(\"Gauge\");\r",
											"                    else pm.expect.fail(\"MetricType not found in element properties\");\r",
											"                    if(elem[\"Gauge\"]){\r",
											"                        pm.expect(elem[\"Gauge\"]).to.be.a(\"string\");\r",
											"                        pm.expect(parseInt(elem[\"Gauge\"])).to.be.a(\"number\");\r",
											"                    } else pm.expect.fail(\"Gauge not found in element properties\");\r",
											"                    //pm.expect(elem[\"Counter\"]).to.be.equal(null);\r",
											"                    break;\r",
											"            }\r",
											"        });\r",
											"    }\r",
											"}\r",
											"\r",
											"catch (err) {\r",
											"    pm.test(request.name, function () {\r",
											"        pm.expect.fail(err.toString());\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript",
										"id": "d8f22ca5-45d3-4296-ab70-57c7bd85520b"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{service-root-uri}}/odata/v1/Metrics?$filter=Name eq 'SubmissionToCompletion.Monthly.max.time'",
									"host": [
										"{{service-root-uri}}"
									],
									"path": [
										"odata",
										"v1",
										"Metrics"
									],
									"query": [
										{
											"key": "$filter",
											"value": "Name eq 'SubmissionToCompletion.Monthly.max.time'"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "LTA_SubmissionToCompletion_Monthly_avg_time",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {\r",
											"    var jsonDataElements = pm.response.json().value;\r",
											"\r",
											"    pm.test(\"Response time is less than \" + environment[\"query-timeout\"] + \"ms\", function () {\r",
											"        pm.expect(pm.response.responseTime).to.be.below(parseInt(environment[\"query-timeout\"]));\r",
											"    });\r",
											"\r",
											"    pm.test(\"Test OData context\", function(){\r",
											"        query_string = pm.request.url.getQueryString();\r",
											"        pm.expect( pm.response.json()['@odata.context']).to.include(\"$metadata#Metrics\");\r",
											"    });\r",
											"\r",
											"    var metricName = decodeURIComponent(pm.request.url.getQueryString()).split(\"$filter=Name eq \")[1].replace(\"'\",\"\").split(\".\")[0];\r",
											"    console.log(metricName);\r",
											"\r",
											"    for(var elem of jsonDataElements){\r",
											"        pm.test(\"Test Metrics properties\", function(){\r",
											"\r",
											"            if(elem[\"Name\"]) pm.expect(elem[\"Name\"].split(\".\")[0]).to.be.equal(metricName);\r",
											"            else pm.expect.fail(\"Name not found in element properties\");\r",
											"            \r",
											"            if(elem[\"Timestamp\"]) pm.expect(elem[\"Timestamp\"]).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);\r",
											"            else pm.expect.fail(\"Timestamp not found in element properties\");\r",
											"                        \r",
											"            switch(metricName){\r",
											"                case \"systematic_production\":\r",
											"                case \"on-demand default\":\r",
											"                case \"on-demand non-default\":\r",
											"                case \"Archived\":\r",
											"                case \"Retrieved\":\r",
											"                case \"Download\":\r",
											"                    console.log(\"Expected Counter\");\r",
											"                    if(elem[\"MetricType\"]) pm.expect(elem[\"MetricType\"]).to.be.equal(\"Counter\");\r",
											"                    else pm.expect.fail(\"MetricType not found in element properties\");\r",
											"                    if(elem[\"Counter\"]) pm.expect(elem[\"Counter\"]).to.be.a(\"number\");\r",
											"                    else pm.expect.fail(\"Counter not found in element properties\");\r",
											"                    //pm.expect(elem[\"Gauge\"]).to.be.equal(null);\r",
											"                    break;\r",
											"                case \"SensingToPublication\":\r",
											"                case \"OriginToPublication\":\r",
											"                case \"SubmissionToCompletion\":\r",
											"                case \"Service\":\r",
											"                    console.log(\"Expected Gauge\");\r",
											"                    if(elem[\"MetricType\"]) pm.expect(elem[\"MetricType\"]).to.be.equal(\"Gauge\");\r",
											"                    else pm.expect.fail(\"MetricType not found in element properties\");\r",
											"                    if(elem[\"Gauge\"]){\r",
											"                        pm.expect(elem[\"Gauge\"]).to.be.a(\"string\");\r",
											"                        pm.expect(parseInt(elem[\"Gauge\"])).to.be.a(\"number\");\r",
											"                    } else pm.expect.fail(\"Gauge not found in element properties\");\r",
											"                    //pm.expect(elem[\"Counter\"]).to.be.equal(null);\r",
											"                    break;\r",
											"            }\r",
											"        });\r",
											"    }\r",
											"}\r",
											"\r",
											"catch (err) {\r",
											"    pm.test(request.name, function () {\r",
											"        pm.expect.fail(err.toString());\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript",
										"id": "d1767137-b0c6-4202-902d-a58a2c537644"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{service-root-uri}}/odata/v1/Metrics?$filter=Name eq 'SubmissionToCompletion.Monthly.avg.time'",
									"host": [
										"{{service-root-uri}}"
									],
									"path": [
										"odata",
										"v1",
										"Metrics"
									],
									"query": [
										{
											"key": "$filter",
											"value": "Name eq 'SubmissionToCompletion.Monthly.avg.time'"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "LTA_Service_KPI_value",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {\r",
											"    var jsonDataElements = pm.response.json().value;\r",
											"\r",
											"    pm.test(\"Response time is less than \" + environment[\"query-timeout\"] + \"ms\", function () {\r",
											"        pm.expect(pm.response.responseTime).to.be.below(parseInt(environment[\"query-timeout\"]));\r",
											"    });\r",
											"\r",
											"    pm.test(\"Test OData context\", function(){\r",
											"        query_string = pm.request.url.getQueryString();\r",
											"        pm.expect( pm.response.json()['@odata.context']).to.include(\"$metadata#Metrics\");\r",
											"    });\r",
											"\r",
											"    var metricName = decodeURIComponent(pm.request.url.getQueryString()).split(\"$filter=Name eq \")[1].replace(\"'\",\"\").split(\".\")[0];\r",
											"    console.log(metricName);\r",
											"\r",
											"    for(var elem of jsonDataElements){\r",
											"        pm.test(\"Test Metrics properties\", function(){\r",
											"\r",
											"            if(elem[\"Name\"]) pm.expect(elem[\"Name\"].split(\".\")[0]).to.be.equal(metricName);\r",
											"            else pm.expect.fail(\"Name not found in element properties\");\r",
											"            \r",
											"            if(elem[\"Timestamp\"]) pm.expect(elem[\"Timestamp\"]).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);\r",
											"            else pm.expect.fail(\"Timestamp not found in element properties\");\r",
											"                        \r",
											"            switch(metricName){\r",
											"                case \"systematic_production\":\r",
											"                case \"on-demand default\":\r",
											"                case \"on-demand non-default\":\r",
											"                case \"Archived\":\r",
											"                case \"Retrieved\":\r",
											"                case \"Download\":\r",
											"                    console.log(\"Expected Counter\");\r",
											"                    if(elem[\"MetricType\"]) pm.expect(elem[\"MetricType\"]).to.be.equal(\"Counter\");\r",
											"                    else pm.expect.fail(\"MetricType not found in element properties\");\r",
											"                    if(elem[\"Counter\"]) pm.expect(elem[\"Counter\"]).to.be.a(\"number\");\r",
											"                    else pm.expect.fail(\"Counter not found in element properties\");\r",
											"                    //pm.expect(elem[\"Gauge\"]).to.be.equal(null);\r",
											"                    break;\r",
											"                case \"SensingToPublication\":\r",
											"                case \"OriginToPublication\":\r",
											"                case \"SubmissionToCompletion\":\r",
											"                case \"Service\":\r",
											"                    console.log(\"Expected Gauge\");\r",
											"                    if(elem[\"MetricType\"]) pm.expect(elem[\"MetricType\"]).to.be.equal(\"Gauge\");\r",
											"                    else pm.expect.fail(\"MetricType not found in element properties\");\r",
											"                    if(elem[\"Gauge\"]){\r",
											"                        pm.expect(elem[\"Gauge\"]).to.be.a(\"string\");\r",
											"                        pm.expect(parseInt(elem[\"Gauge\"])).to.be.a(\"number\");\r",
											"                    } else pm.expect.fail(\"Gauge not found in element properties\");\r",
											"                    //pm.expect(elem[\"Counter\"]).to.be.equal(null);\r",
											"                    break;\r",
											"            }\r",
											"        });\r",
											"    }\r",
											"}\r",
											"\r",
											"catch (err) {\r",
											"    pm.test(request.name, function () {\r",
											"        pm.expect.fail(err.toString());\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript",
										"id": "30e28f13-0949-40c5-b8f0-ceae83a36626"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{service-root-uri}}/odata/v1/Metrics?$filter=Name eq 'Service.{{metric_KPI}}.value'",
									"host": [
										"{{service-root-uri}}"
									],
									"path": [
										"odata",
										"v1",
										"Metrics"
									],
									"query": [
										{
											"key": "$filter",
											"value": "Name eq 'Service.{{metric_KPI}}.value'"
										}
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "PRIP",
					"item": [
						{
							"name": "PRIP_productionType_productType_platformShortName_platformSerialIdentifier_size",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {\r",
											"    var jsonDataElements = pm.response.json().value;\r",
											"\r",
											"    pm.test(\"Response time is less than \" + environment[\"query-timeout\"] + \"ms\", function () {\r",
											"        pm.expect(pm.response.responseTime).to.be.below(parseInt(environment[\"query-timeout\"]));\r",
											"    });\r",
											"\r",
											"    pm.test(\"Test OData context\", function(){\r",
											"        query_string = pm.request.url.getQueryString();\r",
											"        pm.expect( pm.response.json()['@odata.context']).to.include(\"$metadata#Metrics\");\r",
											"    });\r",
											"\r",
											"    var metricName = decodeURIComponent(pm.request.url.getQueryString()).split(\"$filter=Name eq \")[1].replace(\"'\",\"\").split(\".\")[0];\r",
											"    console.log(metricName);\r",
											"\r",
											"    for(var elem of jsonDataElements){\r",
											"        pm.test(\"Test Metrics properties\", function(){\r",
											"\r",
											"            if(elem[\"Name\"]) pm.expect(elem[\"Name\"].split(\".\")[0]).to.be.equal(metricName);\r",
											"            else pm.expect.fail(\"Name not found in element properties\");\r",
											"            \r",
											"            if(elem[\"Timestamp\"]) pm.expect(elem[\"Timestamp\"]).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);\r",
											"            else pm.expect.fail(\"Timestamp not found in element properties\");\r",
											"                        \r",
											"            switch(metricName){\r",
											"                case \"systematic_production\":\r",
											"                case \"on-demand default\":\r",
											"                case \"on-demand non-default\":\r",
											"                case \"Archived\":\r",
											"                case \"Retrieved\":\r",
											"                case \"Download\":\r",
											"                    console.log(\"Expected Counter\");\r",
											"                    if(elem[\"MetricType\"]) pm.expect(elem[\"MetricType\"]).to.be.equal(\"Counter\");\r",
											"                    else pm.expect.fail(\"MetricType not found in element properties\");\r",
											"                    if(elem[\"Counter\"]) pm.expect(elem[\"Counter\"]).to.be.a(\"number\");\r",
											"                    else pm.expect.fail(\"Counter not found in element properties\");\r",
											"                    //pm.expect(elem[\"Gauge\"]).to.be.equal(null);\r",
											"                    break;\r",
											"                case \"SensingToPublication\":\r",
											"                case \"OriginToPublication\":\r",
											"                case \"SubmissionToCompletion\":\r",
											"                case \"Service\":\r",
											"                    console.log(\"Expected Gauge\");\r",
											"                    if(elem[\"MetricType\"]) pm.expect(elem[\"MetricType\"]).to.be.equal(\"Gauge\");\r",
											"                    else pm.expect.fail(\"MetricType not found in element properties\");\r",
											"                    if(elem[\"Gauge\"]){\r",
											"                        pm.expect(elem[\"Gauge\"]).to.be.a(\"string\");\r",
											"                        pm.expect(parseInt(elem[\"Gauge\"])).to.be.a(\"number\");\r",
											"                    } else pm.expect.fail(\"Gauge not found in element properties\");\r",
											"                    //pm.expect(elem[\"Counter\"]).to.be.equal(null);\r",
											"                    break;\r",
											"            }\r",
											"        });\r",
											"    }\r",
											"}\r",
											"\r",
											"catch (err) {\r",
											"    pm.test(request.name, function () {\r",
											"        pm.expect.fail(err.toString());\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript",
										"id": "bfeb6c0c-52dd-40ed-b54b-dfe0a1bac30f"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{service-root-uri}}/odata/v1/Metrics?$filter=Name eq '{{metric_productionType}}.{{metric_productType}}.{{metric_platformShortName}}.{{metric_platformSerialIdentifier}}.size'",
									"host": [
										"{{service-root-uri}}"
									],
									"path": [
										"odata",
										"v1",
										"Metrics"
									],
									"query": [
										{
											"key": "$filter",
											"value": "Name eq '{{metric_productionType}}.{{metric_productType}}.{{metric_platformShortName}}.{{metric_platformSerialIdentifier}}.size'"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "PRIP_productionType_productType_platformShortName_platformSerialIdentifier_count",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {\r",
											"    var jsonDataElements = pm.response.json().value;\r",
											"\r",
											"    pm.test(\"Response time is less than \" + environment[\"query-timeout\"] + \"ms\", function () {\r",
											"        pm.expect(pm.response.responseTime).to.be.below(parseInt(environment[\"query-timeout\"]));\r",
											"    });\r",
											"\r",
											"    pm.test(\"Test OData context\", function(){\r",
											"        query_string = pm.request.url.getQueryString();\r",
											"        pm.expect( pm.response.json()['@odata.context']).to.include(\"$metadata#Metrics\");\r",
											"    });\r",
											"\r",
											"    var metricName = decodeURIComponent(pm.request.url.getQueryString()).split(\"$filter=Name eq \")[1].replace(\"'\",\"\").split(\".\")[0];\r",
											"    console.log(metricName);\r",
											"\r",
											"    for(var elem of jsonDataElements){\r",
											"        pm.test(\"Test Metrics properties\", function(){\r",
											"\r",
											"            if(elem[\"Name\"]) pm.expect(elem[\"Name\"].split(\".\")[0]).to.be.equal(metricName);\r",
											"            else pm.expect.fail(\"Name not found in element properties\");\r",
											"            \r",
											"            if(elem[\"Timestamp\"]) pm.expect(elem[\"Timestamp\"]).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);\r",
											"            else pm.expect.fail(\"Timestamp not found in element properties\");\r",
											"                        \r",
											"            switch(metricName){\r",
											"                case \"systematic_production\":\r",
											"                case \"on-demand default\":\r",
											"                case \"on-demand non-default\":\r",
											"                case \"Archived\":\r",
											"                case \"Retrieved\":\r",
											"                case \"Download\":\r",
											"                    console.log(\"Expected Counter\");\r",
											"                    if(elem[\"MetricType\"]) pm.expect(elem[\"MetricType\"]).to.be.equal(\"Counter\");\r",
											"                    else pm.expect.fail(\"MetricType not found in element properties\");\r",
											"                    if(elem[\"Counter\"]) pm.expect(elem[\"Counter\"]).to.be.a(\"number\");\r",
											"                    else pm.expect.fail(\"Counter not found in element properties\");\r",
											"                    //pm.expect(elem[\"Gauge\"]).to.be.equal(null);\r",
											"                    break;\r",
											"                case \"SensingToPublication\":\r",
											"                case \"OriginToPublication\":\r",
											"                case \"SubmissionToCompletion\":\r",
											"                case \"Service\":\r",
											"                    console.log(\"Expected Gauge\");\r",
											"                    if(elem[\"MetricType\"]) pm.expect(elem[\"MetricType\"]).to.be.equal(\"Gauge\");\r",
											"                    else pm.expect.fail(\"MetricType not found in element properties\");\r",
											"                    if(elem[\"Gauge\"]){\r",
											"                        pm.expect(elem[\"Gauge\"]).to.be.a(\"string\");\r",
											"                        pm.expect(parseInt(elem[\"Gauge\"])).to.be.a(\"number\");\r",
											"                    } else pm.expect.fail(\"Gauge not found in element properties\");\r",
											"                    //pm.expect(elem[\"Counter\"]).to.be.equal(null);\r",
											"                    break;\r",
											"            }\r",
											"        });\r",
											"    }\r",
											"}\r",
											"\r",
											"catch (err) {\r",
											"    pm.test(request.name, function () {\r",
											"        pm.expect.fail(err.toString());\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript",
										"id": "d977fae0-9676-4124-abde-38507a6c8236"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{service-root-uri}}/odata/v1/Metrics?$filter=Name eq '{{metric_productionType}}.{{metric_productType}}.{{metric_platformShortName}}.{{metric_platformSerialIdentifier}}.count'",
									"host": [
										"{{service-root-uri}}"
									],
									"path": [
										"odata",
										"v1",
										"Metrics"
									],
									"query": [
										{
											"key": "$filter",
											"value": "Name eq '{{metric_productionType}}.{{metric_productType}}.{{metric_platformShortName}}.{{metric_platformSerialIdentifier}}.count'"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "PRIP_productionType_platformShortName_platformSerialIdentifier_size",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {\r",
											"    var jsonDataElements = pm.response.json().value;\r",
											"\r",
											"    pm.test(\"Response time is less than \" + environment[\"query-timeout\"] + \"ms\", function () {\r",
											"        pm.expect(pm.response.responseTime).to.be.below(parseInt(environment[\"query-timeout\"]));\r",
											"    });\r",
											"\r",
											"    pm.test(\"Test OData context\", function(){\r",
											"        query_string = pm.request.url.getQueryString();\r",
											"        pm.expect( pm.response.json()['@odata.context']).to.include(\"$metadata#Metrics\");\r",
											"    });\r",
											"\r",
											"    var metricName = decodeURIComponent(pm.request.url.getQueryString()).split(\"$filter=Name eq \")[1].replace(\"'\",\"\").split(\".\")[0];\r",
											"    console.log(metricName);\r",
											"\r",
											"    for(var elem of jsonDataElements){\r",
											"        pm.test(\"Test Metrics properties\", function(){\r",
											"\r",
											"            if(elem[\"Name\"]) pm.expect(elem[\"Name\"].split(\".\")[0]).to.be.equal(metricName);\r",
											"            else pm.expect.fail(\"Name not found in element properties\");\r",
											"            \r",
											"            if(elem[\"Timestamp\"]) pm.expect(elem[\"Timestamp\"]).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);\r",
											"            else pm.expect.fail(\"Timestamp not found in element properties\");\r",
											"                        \r",
											"            switch(metricName){\r",
											"                case \"systematic_production\":\r",
											"                case \"on-demand default\":\r",
											"                case \"on-demand non-default\":\r",
											"                case \"Archived\":\r",
											"                case \"Retrieved\":\r",
											"                case \"Download\":\r",
											"                    console.log(\"Expected Counter\");\r",
											"                    if(elem[\"MetricType\"]) pm.expect(elem[\"MetricType\"]).to.be.equal(\"Counter\");\r",
											"                    else pm.expect.fail(\"MetricType not found in element properties\");\r",
											"                    if(elem[\"Counter\"]) pm.expect(elem[\"Counter\"]).to.be.a(\"number\");\r",
											"                    else pm.expect.fail(\"Counter not found in element properties\");\r",
											"                    //pm.expect(elem[\"Gauge\"]).to.be.equal(null);\r",
											"                    break;\r",
											"                case \"SensingToPublication\":\r",
											"                case \"OriginToPublication\":\r",
											"                case \"SubmissionToCompletion\":\r",
											"                case \"Service\":\r",
											"                    console.log(\"Expected Gauge\");\r",
											"                    if(elem[\"MetricType\"]) pm.expect(elem[\"MetricType\"]).to.be.equal(\"Gauge\");\r",
											"                    else pm.expect.fail(\"MetricType not found in element properties\");\r",
											"                    if(elem[\"Gauge\"]){\r",
											"                        pm.expect(elem[\"Gauge\"]).to.be.a(\"string\");\r",
											"                        pm.expect(parseInt(elem[\"Gauge\"])).to.be.a(\"number\");\r",
											"                    } else pm.expect.fail(\"Gauge not found in element properties\");\r",
											"                    //pm.expect(elem[\"Counter\"]).to.be.equal(null);\r",
											"                    break;\r",
											"            }\r",
											"        });\r",
											"    }\r",
											"}\r",
											"\r",
											"catch (err) {\r",
											"    pm.test(request.name, function () {\r",
											"        pm.expect.fail(err.toString());\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript",
										"id": "e83f9db3-d431-47ab-8992-6fabc178f577"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{service-root-uri}}/odata/v1/Metrics?$filter=Name eq '{{metric_productionType}}.{{metric_platformShortName}}.{{metric_platformSerialIdentifier}}.size'",
									"host": [
										"{{service-root-uri}}"
									],
									"path": [
										"odata",
										"v1",
										"Metrics"
									],
									"query": [
										{
											"key": "$filter",
											"value": "Name eq '{{metric_productionType}}.{{metric_platformShortName}}.{{metric_platformSerialIdentifier}}.size'"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "PRIP_productionType_platformShortName_platformSerialIdentifier_completed",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {\r",
											"    var jsonDataElements = pm.response.json().value;\r",
											"\r",
											"    pm.test(\"Response time is less than \" + environment[\"query-timeout\"] + \"ms\", function () {\r",
											"        pm.expect(pm.response.responseTime).to.be.below(parseInt(environment[\"query-timeout\"]));\r",
											"    });\r",
											"\r",
											"    pm.test(\"Test OData context\", function(){\r",
											"        query_string = pm.request.url.getQueryString();\r",
											"        pm.expect( pm.response.json()['@odata.context']).to.include(\"$metadata#Metrics\");\r",
											"    });\r",
											"\r",
											"    var metricName = decodeURIComponent(pm.request.url.getQueryString()).split(\"$filter=Name eq \")[1].replace(\"'\",\"\").split(\".\")[0];\r",
											"    console.log(metricName);\r",
											"\r",
											"    for(var elem of jsonDataElements){\r",
											"        pm.test(\"Test Metrics properties\", function(){\r",
											"\r",
											"            if(elem[\"Name\"]) pm.expect(elem[\"Name\"].split(\".\")[0]).to.be.equal(metricName);\r",
											"            else pm.expect.fail(\"Name not found in element properties\");\r",
											"            \r",
											"            if(elem[\"Timestamp\"]) pm.expect(elem[\"Timestamp\"]).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);\r",
											"            else pm.expect.fail(\"Timestamp not found in element properties\");\r",
											"                        \r",
											"            switch(metricName){\r",
											"                case \"systematic_production\":\r",
											"                case \"on-demand default\":\r",
											"                case \"on-demand non-default\":\r",
											"                case \"Archived\":\r",
											"                case \"Retrieved\":\r",
											"                case \"Download\":\r",
											"                    console.log(\"Expected Counter\");\r",
											"                    if(elem[\"MetricType\"]) pm.expect(elem[\"MetricType\"]).to.be.equal(\"Counter\");\r",
											"                    else pm.expect.fail(\"MetricType not found in element properties\");\r",
											"                    if(elem[\"Counter\"]) pm.expect(elem[\"Counter\"]).to.be.a(\"number\");\r",
											"                    else pm.expect.fail(\"Counter not found in element properties\");\r",
											"                    //pm.expect(elem[\"Gauge\"]).to.be.equal(null);\r",
											"                    break;\r",
											"                case \"SensingToPublication\":\r",
											"                case \"OriginToPublication\":\r",
											"                case \"SubmissionToCompletion\":\r",
											"                case \"Service\":\r",
											"                    console.log(\"Expected Gauge\");\r",
											"                    if(elem[\"MetricType\"]) pm.expect(elem[\"MetricType\"]).to.be.equal(\"Gauge\");\r",
											"                    else pm.expect.fail(\"MetricType not found in element properties\");\r",
											"                    if(elem[\"Gauge\"]){\r",
											"                        pm.expect(elem[\"Gauge\"]).to.be.a(\"string\");\r",
											"                        pm.expect(parseInt(elem[\"Gauge\"])).to.be.a(\"number\");\r",
											"                    } else pm.expect.fail(\"Gauge not found in element properties\");\r",
											"                    //pm.expect(elem[\"Counter\"]).to.be.equal(null);\r",
											"                    break;\r",
											"            }\r",
											"        });\r",
											"    }\r",
											"}\r",
											"\r",
											"catch (err) {\r",
											"    pm.test(request.name, function () {\r",
											"        pm.expect.fail(err.toString());\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript",
										"id": "b0278480-a4c7-4016-b086-c7e9d4f878cb"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{service-root-uri}}/odata/v1/Metrics?$filter=Name eq '{{metric_productionType}}.{{metric_platformShortName}}.{{metric_platformSerialIdentifier}}.completed'",
									"host": [
										"{{service-root-uri}}"
									],
									"path": [
										"odata",
										"v1",
										"Metrics"
									],
									"query": [
										{
											"key": "$filter",
											"value": "Name eq '{{metric_productionType}}.{{metric_platformShortName}}.{{metric_platformSerialIdentifier}}.completed'"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "PRIP_productionType_platformShortName_platformSerialIdentifier_failed",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {\r",
											"    var jsonDataElements = pm.response.json().value;\r",
											"\r",
											"    pm.test(\"Response time is less than \" + environment[\"query-timeout\"] + \"ms\", function () {\r",
											"        pm.expect(pm.response.responseTime).to.be.below(parseInt(environment[\"query-timeout\"]));\r",
											"    });\r",
											"\r",
											"    pm.test(\"Test OData context\", function(){\r",
											"        query_string = pm.request.url.getQueryString();\r",
											"        pm.expect( pm.response.json()['@odata.context']).to.include(\"$metadata#Metrics\");\r",
											"    });\r",
											"\r",
											"    var metricName = decodeURIComponent(pm.request.url.getQueryString()).split(\"$filter=Name eq \")[1].replace(\"'\",\"\").split(\".\")[0];\r",
											"    console.log(metricName);\r",
											"\r",
											"    for(var elem of jsonDataElements){\r",
											"        pm.test(\"Test Metrics properties\", function(){\r",
											"\r",
											"            if(elem[\"Name\"]) pm.expect(elem[\"Name\"].split(\".\")[0]).to.be.equal(metricName);\r",
											"            else pm.expect.fail(\"Name not found in element properties\");\r",
											"            \r",
											"            if(elem[\"Timestamp\"]) pm.expect(elem[\"Timestamp\"]).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);\r",
											"            else pm.expect.fail(\"Timestamp not found in element properties\");\r",
											"                        \r",
											"            switch(metricName){\r",
											"                case \"systematic_production\":\r",
											"                case \"on-demand default\":\r",
											"                case \"on-demand non-default\":\r",
											"                case \"Archived\":\r",
											"                case \"Retrieved\":\r",
											"                case \"Download\":\r",
											"                    console.log(\"Expected Counter\");\r",
											"                    if(elem[\"MetricType\"]) pm.expect(elem[\"MetricType\"]).to.be.equal(\"Counter\");\r",
											"                    else pm.expect.fail(\"MetricType not found in element properties\");\r",
											"                    if(elem[\"Counter\"]) pm.expect(elem[\"Counter\"]).to.be.a(\"number\");\r",
											"                    else pm.expect.fail(\"Counter not found in element properties\");\r",
											"                    //pm.expect(elem[\"Gauge\"]).to.be.equal(null);\r",
											"                    break;\r",
											"                case \"SensingToPublication\":\r",
											"                case \"OriginToPublication\":\r",
											"                case \"SubmissionToCompletion\":\r",
											"                case \"Service\":\r",
											"                    console.log(\"Expected Gauge\");\r",
											"                    if(elem[\"MetricType\"]) pm.expect(elem[\"MetricType\"]).to.be.equal(\"Gauge\");\r",
											"                    else pm.expect.fail(\"MetricType not found in element properties\");\r",
											"                    if(elem[\"Gauge\"]){\r",
											"                        pm.expect(elem[\"Gauge\"]).to.be.a(\"string\");\r",
											"                        pm.expect(parseInt(elem[\"Gauge\"])).to.be.a(\"number\");\r",
											"                    } else pm.expect.fail(\"Gauge not found in element properties\");\r",
											"                    //pm.expect(elem[\"Counter\"]).to.be.equal(null);\r",
											"                    break;\r",
											"            }\r",
											"        });\r",
											"    }\r",
											"}\r",
											"\r",
											"catch (err) {\r",
											"    pm.test(request.name, function () {\r",
											"        pm.expect.fail(err.toString());\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript",
										"id": "14320fc6-a01c-416b-9156-bb912baa7fa7"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{service-root-uri}}/odata/v1/Metrics?$filter=Name eq '{{metric_productionType}}.{{metric_platformShortName}}.{{metric_platformSerialIdentifier}}.failed'",
									"host": [
										"{{service-root-uri}}"
									],
									"path": [
										"odata",
										"v1",
										"Metrics"
									],
									"query": [
										{
											"key": "$filter",
											"value": "Name eq '{{metric_productionType}}.{{metric_platformShortName}}.{{metric_platformSerialIdentifier}}.failed'"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "PRIP_Download_productType_platformShortName_platformSerialIdentifier_Username_size",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {\r",
											"    var jsonDataElements = pm.response.json().value;\r",
											"\r",
											"    pm.test(\"Response time is less than \" + environment[\"query-timeout\"] + \"ms\", function () {\r",
											"        pm.expect(pm.response.responseTime).to.be.below(parseInt(environment[\"query-timeout\"]));\r",
											"    });\r",
											"\r",
											"    pm.test(\"Test OData context\", function(){\r",
											"        query_string = pm.request.url.getQueryString();\r",
											"        pm.expect( pm.response.json()['@odata.context']).to.include(\"$metadata#Metrics\");\r",
											"    });\r",
											"\r",
											"    var metricName = decodeURIComponent(pm.request.url.getQueryString()).split(\"$filter=Name eq \")[1].replace(\"'\",\"\").split(\".\")[0];\r",
											"    console.log(metricName);\r",
											"\r",
											"    for(var elem of jsonDataElements){\r",
											"        pm.test(\"Test Metrics properties\", function(){\r",
											"\r",
											"            if(elem[\"Name\"]) pm.expect(elem[\"Name\"].split(\".\")[0]).to.be.equal(metricName);\r",
											"            else pm.expect.fail(\"Name not found in element properties\");\r",
											"            \r",
											"            if(elem[\"Timestamp\"]) pm.expect(elem[\"Timestamp\"]).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);\r",
											"            else pm.expect.fail(\"Timestamp not found in element properties\");\r",
											"                        \r",
											"            switch(metricName){\r",
											"                case \"systematic_production\":\r",
											"                case \"on-demand default\":\r",
											"                case \"on-demand non-default\":\r",
											"                case \"Archived\":\r",
											"                case \"Retrieved\":\r",
											"                case \"Download\":\r",
											"                    console.log(\"Expected Counter\");\r",
											"                    if(elem[\"MetricType\"]) pm.expect(elem[\"MetricType\"]).to.be.equal(\"Counter\");\r",
											"                    else pm.expect.fail(\"MetricType not found in element properties\");\r",
											"                    if(elem[\"Counter\"]) pm.expect(elem[\"Counter\"]).to.be.a(\"number\");\r",
											"                    else pm.expect.fail(\"Counter not found in element properties\");\r",
											"                    //pm.expect(elem[\"Gauge\"]).to.be.equal(null);\r",
											"                    break;\r",
											"                case \"SensingToPublication\":\r",
											"                case \"OriginToPublication\":\r",
											"                case \"SubmissionToCompletion\":\r",
											"                case \"Service\":\r",
											"                    console.log(\"Expected Gauge\");\r",
											"                    if(elem[\"MetricType\"]) pm.expect(elem[\"MetricType\"]).to.be.equal(\"Gauge\");\r",
											"                    else pm.expect.fail(\"MetricType not found in element properties\");\r",
											"                    if(elem[\"Gauge\"]){\r",
											"                        pm.expect(elem[\"Gauge\"]).to.be.a(\"string\");\r",
											"                        pm.expect(parseInt(elem[\"Gauge\"])).to.be.a(\"number\");\r",
											"                    } else pm.expect.fail(\"Gauge not found in element properties\");\r",
											"                    //pm.expect(elem[\"Counter\"]).to.be.equal(null);\r",
											"                    break;\r",
											"            }\r",
											"        });\r",
											"    }\r",
											"}\r",
											"\r",
											"catch (err) {\r",
											"    pm.test(request.name, function () {\r",
											"        pm.expect.fail(err.toString());\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript",
										"id": "8406c3f4-1d44-43d0-8a4c-63a3ae97f1e2"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{service-root-uri}}/odata/v1/Metrics?$filter=Name eq 'Download.{{metric_productType}}.{{metric_platformShortName}}.{{metric_platformSerialIdentifier}}.{{metric_Username}}.size'",
									"host": [
										"{{service-root-uri}}"
									],
									"path": [
										"odata",
										"v1",
										"Metrics"
									],
									"query": [
										{
											"key": "$filter",
											"value": "Name eq 'Download.{{metric_productType}}.{{metric_platformShortName}}.{{metric_platformSerialIdentifier}}.{{metric_Username}}.size'"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "PRIP_Download_productionType_productType_platformShortName_platformSerialIdentifier_Username_completed",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {\r",
											"    var jsonDataElements = pm.response.json().value;\r",
											"\r",
											"    pm.test(\"Response time is less than \" + environment[\"query-timeout\"] + \"ms\", function () {\r",
											"        pm.expect(pm.response.responseTime).to.be.below(parseInt(environment[\"query-timeout\"]));\r",
											"    });\r",
											"\r",
											"    pm.test(\"Test OData context\", function(){\r",
											"        query_string = pm.request.url.getQueryString();\r",
											"        pm.expect( pm.response.json()['@odata.context']).to.include(\"$metadata#Metrics\");\r",
											"    });\r",
											"\r",
											"    var metricName = decodeURIComponent(pm.request.url.getQueryString()).split(\"$filter=Name eq \")[1].replace(\"'\",\"\").split(\".\")[0];\r",
											"    console.log(metricName);\r",
											"\r",
											"    for(var elem of jsonDataElements){\r",
											"        pm.test(\"Test Metrics properties\", function(){\r",
											"\r",
											"            if(elem[\"Name\"]) pm.expect(elem[\"Name\"].split(\".\")[0]).to.be.equal(metricName);\r",
											"            else pm.expect.fail(\"Name not found in element properties\");\r",
											"            \r",
											"            if(elem[\"Timestamp\"]) pm.expect(elem[\"Timestamp\"]).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);\r",
											"            else pm.expect.fail(\"Timestamp not found in element properties\");\r",
											"                        \r",
											"            switch(metricName){\r",
											"                case \"systematic_production\":\r",
											"                case \"on-demand default\":\r",
											"                case \"on-demand non-default\":\r",
											"                case \"Archived\":\r",
											"                case \"Retrieved\":\r",
											"                case \"Download\":\r",
											"                    console.log(\"Expected Counter\");\r",
											"                    if(elem[\"MetricType\"]) pm.expect(elem[\"MetricType\"]).to.be.equal(\"Counter\");\r",
											"                    else pm.expect.fail(\"MetricType not found in element properties\");\r",
											"                    if(elem[\"Counter\"]) pm.expect(elem[\"Counter\"]).to.be.a(\"number\");\r",
											"                    else pm.expect.fail(\"Counter not found in element properties\");\r",
											"                    //pm.expect(elem[\"Gauge\"]).to.be.equal(null);\r",
											"                    break;\r",
											"                case \"SensingToPublication\":\r",
											"                case \"OriginToPublication\":\r",
											"                case \"SubmissionToCompletion\":\r",
											"                case \"Service\":\r",
											"                    console.log(\"Expected Gauge\");\r",
											"                    if(elem[\"MetricType\"]) pm.expect(elem[\"MetricType\"]).to.be.equal(\"Gauge\");\r",
											"                    else pm.expect.fail(\"MetricType not found in element properties\");\r",
											"                    if(elem[\"Gauge\"]){\r",
											"                        pm.expect(elem[\"Gauge\"]).to.be.a(\"string\");\r",
											"                        pm.expect(parseInt(elem[\"Gauge\"])).to.be.a(\"number\");\r",
											"                    } else pm.expect.fail(\"Gauge not found in element properties\");\r",
											"                    //pm.expect(elem[\"Counter\"]).to.be.equal(null);\r",
											"                    break;\r",
											"            }\r",
											"        });\r",
											"    }\r",
											"}\r",
											"\r",
											"catch (err) {\r",
											"    pm.test(request.name, function () {\r",
											"        pm.expect.fail(err.toString());\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript",
										"id": "a7fb66ad-65b4-4e09-9f43-ecd9bccf3063"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{service-root-uri}}/odata/v1/Metrics?$filter=Name eq 'Download.{{metric_productionType}}.{{metric_productType}}.{{metric_platformShortName}}.{{metric_platformSerialIdentifier}}.{{metric_Username}}.completed'",
									"host": [
										"{{service-root-uri}}"
									],
									"path": [
										"odata",
										"v1",
										"Metrics"
									],
									"query": [
										{
											"key": "$filter",
											"value": "Name eq 'Download.{{metric_productionType}}.{{metric_productType}}.{{metric_platformShortName}}.{{metric_platformSerialIdentifier}}.{{metric_Username}}.completed'"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "PRIP_Download_productType_platformShortName_platformSerialIdentifier_Username_failed",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {\r",
											"    var jsonDataElements = pm.response.json().value;\r",
											"\r",
											"    pm.test(\"Response time is less than \" + environment[\"query-timeout\"] + \"ms\", function () {\r",
											"        pm.expect(pm.response.responseTime).to.be.below(parseInt(environment[\"query-timeout\"]));\r",
											"    });\r",
											"\r",
											"    pm.test(\"Test OData context\", function(){\r",
											"        query_string = pm.request.url.getQueryString();\r",
											"        pm.expect( pm.response.json()['@odata.context']).to.include(\"$metadata#Metrics\");\r",
											"    });\r",
											"\r",
											"    var metricName = decodeURIComponent(pm.request.url.getQueryString()).split(\"$filter=Name eq \")[1].replace(\"'\",\"\").split(\".\")[0];\r",
											"    console.log(metricName);\r",
											"\r",
											"    for(var elem of jsonDataElements){\r",
											"        pm.test(\"Test Metrics properties\", function(){\r",
											"\r",
											"            if(elem[\"Name\"]) pm.expect(elem[\"Name\"].split(\".\")[0]).to.be.equal(metricName);\r",
											"            else pm.expect.fail(\"Name not found in element properties\");\r",
											"            \r",
											"            if(elem[\"Timestamp\"]) pm.expect(elem[\"Timestamp\"]).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);\r",
											"            else pm.expect.fail(\"Timestamp not found in element properties\");\r",
											"                        \r",
											"            switch(metricName){\r",
											"                case \"systematic_production\":\r",
											"                case \"on-demand default\":\r",
											"                case \"on-demand non-default\":\r",
											"                case \"Archived\":\r",
											"                case \"Retrieved\":\r",
											"                case \"Download\":\r",
											"                    console.log(\"Expected Counter\");\r",
											"                    if(elem[\"MetricType\"]) pm.expect(elem[\"MetricType\"]).to.be.equal(\"Counter\");\r",
											"                    else pm.expect.fail(\"MetricType not found in element properties\");\r",
											"                    if(elem[\"Counter\"]) pm.expect(elem[\"Counter\"]).to.be.a(\"number\");\r",
											"                    else pm.expect.fail(\"Counter not found in element properties\");\r",
											"                    //pm.expect(elem[\"Gauge\"]).to.be.equal(null);\r",
											"                    break;\r",
											"                case \"SensingToPublication\":\r",
											"                case \"OriginToPublication\":\r",
											"                case \"SubmissionToCompletion\":\r",
											"                case \"Service\":\r",
											"                    console.log(\"Expected Gauge\");\r",
											"                    if(elem[\"MetricType\"]) pm.expect(elem[\"MetricType\"]).to.be.equal(\"Gauge\");\r",
											"                    else pm.expect.fail(\"MetricType not found in element properties\");\r",
											"                    if(elem[\"Gauge\"]){\r",
											"                        pm.expect(elem[\"Gauge\"]).to.be.a(\"string\");\r",
											"                        pm.expect(parseInt(elem[\"Gauge\"])).to.be.a(\"number\");\r",
											"                    } else pm.expect.fail(\"Gauge not found in element properties\");\r",
											"                    //pm.expect(elem[\"Counter\"]).to.be.equal(null);\r",
											"                    break;\r",
											"            }\r",
											"        });\r",
											"    }\r",
											"}\r",
											"\r",
											"catch (err) {\r",
											"    pm.test(request.name, function () {\r",
											"        pm.expect.fail(err.toString());\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript",
										"id": "ebce29fd-c9a2-4a5a-8ed4-b9b7679b6a2c"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{service-root-uri}}/odata/v1/Metrics?$filter=Name eq 'Download.{{metric_productType}}.{{metric_platformShortName}}.{{metric_platformSerialIdentifier}}.{{metric_Username}}.failed'",
									"host": [
										"{{service-root-uri}}"
									],
									"path": [
										"odata",
										"v1",
										"Metrics"
									],
									"query": [
										{
											"key": "$filter",
											"value": "Name eq 'Download.{{metric_productType}}.{{metric_platformShortName}}.{{metric_platformSerialIdentifier}}.{{metric_Username}}.failed'"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "PRIP_SensingToPublication_Daily_min_time_productType_platformShortName_platformSerialIdentifier",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {\r",
											"    var jsonDataElements = pm.response.json().value;\r",
											"\r",
											"    pm.test(\"Response time is less than \" + environment[\"query-timeout\"] + \"ms\", function () {\r",
											"        pm.expect(pm.response.responseTime).to.be.below(parseInt(environment[\"query-timeout\"]));\r",
											"    });\r",
											"\r",
											"    pm.test(\"Test OData context\", function(){\r",
											"        query_string = pm.request.url.getQueryString();\r",
											"        pm.expect( pm.response.json()['@odata.context']).to.include(\"$metadata#Metrics\");\r",
											"    });\r",
											"\r",
											"    var metricName = decodeURIComponent(pm.request.url.getQueryString()).split(\"$filter=Name eq \")[1].replace(\"'\",\"\").split(\".\")[0];\r",
											"    console.log(metricName);\r",
											"\r",
											"    for(var elem of jsonDataElements){\r",
											"        pm.test(\"Test Metrics properties\", function(){\r",
											"\r",
											"            if(elem[\"Name\"]) pm.expect(elem[\"Name\"].split(\".\")[0]).to.be.equal(metricName);\r",
											"            else pm.expect.fail(\"Name not found in element properties\");\r",
											"            \r",
											"            if(elem[\"Timestamp\"]) pm.expect(elem[\"Timestamp\"]).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);\r",
											"            else pm.expect.fail(\"Timestamp not found in element properties\");\r",
											"                        \r",
											"            switch(metricName){\r",
											"                case \"systematic_production\":\r",
											"                case \"on-demand default\":\r",
											"                case \"on-demand non-default\":\r",
											"                case \"Archived\":\r",
											"                case \"Retrieved\":\r",
											"                case \"Download\":\r",
											"                    console.log(\"Expected Counter\");\r",
											"                    if(elem[\"MetricType\"]) pm.expect(elem[\"MetricType\"]).to.be.equal(\"Counter\");\r",
											"                    else pm.expect.fail(\"MetricType not found in element properties\");\r",
											"                    if(elem[\"Counter\"]) pm.expect(elem[\"Counter\"]).to.be.a(\"number\");\r",
											"                    else pm.expect.fail(\"Counter not found in element properties\");\r",
											"                    //pm.expect(elem[\"Gauge\"]).to.be.equal(null);\r",
											"                    break;\r",
											"                case \"SensingToPublication\":\r",
											"                case \"OriginToPublication\":\r",
											"                case \"SubmissionToCompletion\":\r",
											"                case \"Service\":\r",
											"                    console.log(\"Expected Gauge\");\r",
											"                    if(elem[\"MetricType\"]) pm.expect(elem[\"MetricType\"]).to.be.equal(\"Gauge\");\r",
											"                    else pm.expect.fail(\"MetricType not found in element properties\");\r",
											"                    if(elem[\"Gauge\"]){\r",
											"                        pm.expect(elem[\"Gauge\"]).to.be.a(\"string\");\r",
											"                        pm.expect(parseInt(elem[\"Gauge\"])).to.be.a(\"number\");\r",
											"                    } else pm.expect.fail(\"Gauge not found in element properties\");\r",
											"                    //pm.expect(elem[\"Counter\"]).to.be.equal(null);\r",
											"                    break;\r",
											"            }\r",
											"        });\r",
											"    }\r",
											"}\r",
											"\r",
											"catch (err) {\r",
											"    pm.test(request.name, function () {\r",
											"        pm.expect.fail(err.toString());\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript",
										"id": "7d165a36-07e5-435a-842d-a3fc14686780"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{service-root-uri}}/odata/v1/Metrics?$filter=Name eq 'SensingToPublication.Daily.min.time.{{metric_productType}}.{{metric_platformShortName}}.{{metric_platformSerialIdentifier}}'",
									"host": [
										"{{service-root-uri}}"
									],
									"path": [
										"odata",
										"v1",
										"Metrics"
									],
									"query": [
										{
											"key": "$filter",
											"value": "Name eq 'SensingToPublication.Daily.min.time.{{metric_productType}}.{{metric_platformShortName}}.{{metric_platformSerialIdentifier}}'"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "PRIP_SensingToPublication_Daily_max_time_productType_platformShortName_platformSerialIdentifier",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {\r",
											"    var jsonDataElements = pm.response.json().value;\r",
											"\r",
											"    pm.test(\"Response time is less than \" + environment[\"query-timeout\"] + \"ms\", function () {\r",
											"        pm.expect(pm.response.responseTime).to.be.below(parseInt(environment[\"query-timeout\"]));\r",
											"    });\r",
											"\r",
											"    pm.test(\"Test OData context\", function(){\r",
											"        query_string = pm.request.url.getQueryString();\r",
											"        pm.expect( pm.response.json()['@odata.context']).to.include(\"$metadata#Metrics\");\r",
											"    });\r",
											"\r",
											"    var metricName = decodeURIComponent(pm.request.url.getQueryString()).split(\"$filter=Name eq \")[1].replace(\"'\",\"\").split(\".\")[0];\r",
											"    console.log(metricName);\r",
											"\r",
											"    for(var elem of jsonDataElements){\r",
											"        pm.test(\"Test Metrics properties\", function(){\r",
											"\r",
											"            if(elem[\"Name\"]) pm.expect(elem[\"Name\"].split(\".\")[0]).to.be.equal(metricName);\r",
											"            else pm.expect.fail(\"Name not found in element properties\");\r",
											"            \r",
											"            if(elem[\"Timestamp\"]) pm.expect(elem[\"Timestamp\"]).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);\r",
											"            else pm.expect.fail(\"Timestamp not found in element properties\");\r",
											"                        \r",
											"            switch(metricName){\r",
											"                case \"systematic_production\":\r",
											"                case \"on-demand default\":\r",
											"                case \"on-demand non-default\":\r",
											"                case \"Archived\":\r",
											"                case \"Retrieved\":\r",
											"                case \"Download\":\r",
											"                    console.log(\"Expected Counter\");\r",
											"                    if(elem[\"MetricType\"]) pm.expect(elem[\"MetricType\"]).to.be.equal(\"Counter\");\r",
											"                    else pm.expect.fail(\"MetricType not found in element properties\");\r",
											"                    if(elem[\"Counter\"]) pm.expect(elem[\"Counter\"]).to.be.a(\"number\");\r",
											"                    else pm.expect.fail(\"Counter not found in element properties\");\r",
											"                    //pm.expect(elem[\"Gauge\"]).to.be.equal(null);\r",
											"                    break;\r",
											"                case \"SensingToPublication\":\r",
											"                case \"OriginToPublication\":\r",
											"                case \"SubmissionToCompletion\":\r",
											"                case \"Service\":\r",
											"                    console.log(\"Expected Gauge\");\r",
											"                    if(elem[\"MetricType\"]) pm.expect(elem[\"MetricType\"]).to.be.equal(\"Gauge\");\r",
											"                    else pm.expect.fail(\"MetricType not found in element properties\");\r",
											"                    if(elem[\"Gauge\"]){\r",
											"                        pm.expect(elem[\"Gauge\"]).to.be.a(\"string\");\r",
											"                        pm.expect(parseInt(elem[\"Gauge\"])).to.be.a(\"number\");\r",
											"                    } else pm.expect.fail(\"Gauge not found in element properties\");\r",
											"                    //pm.expect(elem[\"Counter\"]).to.be.equal(null);\r",
											"                    break;\r",
											"            }\r",
											"        });\r",
											"    }\r",
											"}\r",
											"\r",
											"catch (err) {\r",
											"    pm.test(request.name, function () {\r",
											"        pm.expect.fail(err.toString());\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript",
										"id": "04a3c754-bfa3-4edd-9680-66d8e366db56"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{service-root-uri}}/odata/v1/Metrics?$filter=Name eq 'SensingToPublication.Daily.max.time.{{metric_productType}}.{{metric_platformShortName}}.{{metric_platformSerialIdentifier}}'",
									"host": [
										"{{service-root-uri}}"
									],
									"path": [
										"odata",
										"v1",
										"Metrics"
									],
									"query": [
										{
											"key": "$filter",
											"value": "Name eq 'SensingToPublication.Daily.max.time.{{metric_productType}}.{{metric_platformShortName}}.{{metric_platformSerialIdentifier}}'"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "PRIP_SensingToPublication_Daily_avg_time_productType_platformShortName_platformSerialIdentifier",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {\r",
											"    var jsonDataElements = pm.response.json().value;\r",
											"\r",
											"    pm.test(\"Response time is less than \" + environment[\"query-timeout\"] + \"ms\", function () {\r",
											"        pm.expect(pm.response.responseTime).to.be.below(parseInt(environment[\"query-timeout\"]));\r",
											"    });\r",
											"\r",
											"    pm.test(\"Test OData context\", function(){\r",
											"        query_string = pm.request.url.getQueryString();\r",
											"        pm.expect( pm.response.json()['@odata.context']).to.include(\"$metadata#Metrics\");\r",
											"    });\r",
											"\r",
											"    var metricName = decodeURIComponent(pm.request.url.getQueryString()).split(\"$filter=Name eq \")[1].replace(\"'\",\"\").split(\".\")[0];\r",
											"    console.log(metricName);\r",
											"\r",
											"    for(var elem of jsonDataElements){\r",
											"        pm.test(\"Test Metrics properties\", function(){\r",
											"\r",
											"            if(elem[\"Name\"]) pm.expect(elem[\"Name\"].split(\".\")[0]).to.be.equal(metricName);\r",
											"            else pm.expect.fail(\"Name not found in element properties\");\r",
											"            \r",
											"            if(elem[\"Timestamp\"]) pm.expect(elem[\"Timestamp\"]).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);\r",
											"            else pm.expect.fail(\"Timestamp not found in element properties\");\r",
											"                        \r",
											"            switch(metricName){\r",
											"                case \"systematic_production\":\r",
											"                case \"on-demand default\":\r",
											"                case \"on-demand non-default\":\r",
											"                case \"Archived\":\r",
											"                case \"Retrieved\":\r",
											"                case \"Download\":\r",
											"                    console.log(\"Expected Counter\");\r",
											"                    if(elem[\"MetricType\"]) pm.expect(elem[\"MetricType\"]).to.be.equal(\"Counter\");\r",
											"                    else pm.expect.fail(\"MetricType not found in element properties\");\r",
											"                    if(elem[\"Counter\"]) pm.expect(elem[\"Counter\"]).to.be.a(\"number\");\r",
											"                    else pm.expect.fail(\"Counter not found in element properties\");\r",
											"                    //pm.expect(elem[\"Gauge\"]).to.be.equal(null);\r",
											"                    break;\r",
											"                case \"SensingToPublication\":\r",
											"                case \"OriginToPublication\":\r",
											"                case \"SubmissionToCompletion\":\r",
											"                case \"Service\":\r",
											"                    console.log(\"Expected Gauge\");\r",
											"                    if(elem[\"MetricType\"]) pm.expect(elem[\"MetricType\"]).to.be.equal(\"Gauge\");\r",
											"                    else pm.expect.fail(\"MetricType not found in element properties\");\r",
											"                    if(elem[\"Gauge\"]){\r",
											"                        pm.expect(elem[\"Gauge\"]).to.be.a(\"string\");\r",
											"                        pm.expect(parseInt(elem[\"Gauge\"])).to.be.a(\"number\");\r",
											"                    } else pm.expect.fail(\"Gauge not found in element properties\");\r",
											"                    //pm.expect(elem[\"Counter\"]).to.be.equal(null);\r",
											"                    break;\r",
											"            }\r",
											"        });\r",
											"    }\r",
											"}\r",
											"\r",
											"catch (err) {\r",
											"    pm.test(request.name, function () {\r",
											"        pm.expect.fail(err.toString());\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript",
										"id": "3f79758f-c99b-4e55-909f-fbfd027f95a2"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{service-root-uri}}/odata/v1/Metrics?$filter=Name eq 'SensingToPublication.Daily.avg.time.{{metric_productType}}.{{metric_platformShortName}}.{{metric_platformSerialIdentifier}}'",
									"host": [
										"{{service-root-uri}}"
									],
									"path": [
										"odata",
										"v1",
										"Metrics"
									],
									"query": [
										{
											"key": "$filter",
											"value": "Name eq 'SensingToPublication.Daily.avg.time.{{metric_productType}}.{{metric_platformShortName}}.{{metric_platformSerialIdentifier}}'"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "PRIP_SensingToPublication_Monthly_min_time_productType_platformShortName_platformSerialIdentifier",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {\r",
											"    var jsonDataElements = pm.response.json().value;\r",
											"\r",
											"    pm.test(\"Response time is less than \" + environment[\"query-timeout\"] + \"ms\", function () {\r",
											"        pm.expect(pm.response.responseTime).to.be.below(parseInt(environment[\"query-timeout\"]));\r",
											"    });\r",
											"\r",
											"    pm.test(\"Test OData context\", function(){\r",
											"        query_string = pm.request.url.getQueryString();\r",
											"        pm.expect( pm.response.json()['@odata.context']).to.include(\"$metadata#Metrics\");\r",
											"    });\r",
											"\r",
											"    var metricName = decodeURIComponent(pm.request.url.getQueryString()).split(\"$filter=Name eq \")[1].replace(\"'\",\"\").split(\".\")[0];\r",
											"    console.log(metricName);\r",
											"\r",
											"    for(var elem of jsonDataElements){\r",
											"        pm.test(\"Test Metrics properties\", function(){\r",
											"\r",
											"            if(elem[\"Name\"]) pm.expect(elem[\"Name\"].split(\".\")[0]).to.be.equal(metricName);\r",
											"            else pm.expect.fail(\"Name not found in element properties\");\r",
											"            \r",
											"            if(elem[\"Timestamp\"]) pm.expect(elem[\"Timestamp\"]).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);\r",
											"            else pm.expect.fail(\"Timestamp not found in element properties\");\r",
											"                        \r",
											"            switch(metricName){\r",
											"                case \"systematic_production\":\r",
											"                case \"on-demand default\":\r",
											"                case \"on-demand non-default\":\r",
											"                case \"Archived\":\r",
											"                case \"Retrieved\":\r",
											"                case \"Download\":\r",
											"                    console.log(\"Expected Counter\");\r",
											"                    if(elem[\"MetricType\"]) pm.expect(elem[\"MetricType\"]).to.be.equal(\"Counter\");\r",
											"                    else pm.expect.fail(\"MetricType not found in element properties\");\r",
											"                    if(elem[\"Counter\"]) pm.expect(elem[\"Counter\"]).to.be.a(\"number\");\r",
											"                    else pm.expect.fail(\"Counter not found in element properties\");\r",
											"                    //pm.expect(elem[\"Gauge\"]).to.be.equal(null);\r",
											"                    break;\r",
											"                case \"SensingToPublication\":\r",
											"                case \"OriginToPublication\":\r",
											"                case \"SubmissionToCompletion\":\r",
											"                case \"Service\":\r",
											"                    console.log(\"Expected Gauge\");\r",
											"                    if(elem[\"MetricType\"]) pm.expect(elem[\"MetricType\"]).to.be.equal(\"Gauge\");\r",
											"                    else pm.expect.fail(\"MetricType not found in element properties\");\r",
											"                    if(elem[\"Gauge\"]){\r",
											"                        pm.expect(elem[\"Gauge\"]).to.be.a(\"string\");\r",
											"                        pm.expect(parseInt(elem[\"Gauge\"])).to.be.a(\"number\");\r",
											"                    } else pm.expect.fail(\"Gauge not found in element properties\");\r",
											"                    //pm.expect(elem[\"Counter\"]).to.be.equal(null);\r",
											"                    break;\r",
											"            }\r",
											"        });\r",
											"    }\r",
											"}\r",
											"\r",
											"catch (err) {\r",
											"    pm.test(request.name, function () {\r",
											"        pm.expect.fail(err.toString());\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript",
										"id": "d7b6d4c9-f100-4d01-8418-3cc384842074"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{service-root-uri}}/odata/v1/Metrics?$filter=Name eq 'SensingToPublication.Monthly.min.time.{{metric_productType}}.{{metric_platformShortName}}.{{metric_platformSerialIdentifier}}'",
									"host": [
										"{{service-root-uri}}"
									],
									"path": [
										"odata",
										"v1",
										"Metrics"
									],
									"query": [
										{
											"key": "$filter",
											"value": "Name eq 'SensingToPublication.Monthly.min.time.{{metric_productType}}.{{metric_platformShortName}}.{{metric_platformSerialIdentifier}}'"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "PRIP_SensingToPublication_Monthly_max_time_productType_platformShortName_platformSerialIdentifier",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {\r",
											"    var jsonDataElements = pm.response.json().value;\r",
											"\r",
											"    pm.test(\"Response time is less than \" + environment[\"query-timeout\"] + \"ms\", function () {\r",
											"        pm.expect(pm.response.responseTime).to.be.below(parseInt(environment[\"query-timeout\"]));\r",
											"    });\r",
											"\r",
											"    pm.test(\"Test OData context\", function(){\r",
											"        query_string = pm.request.url.getQueryString();\r",
											"        pm.expect( pm.response.json()['@odata.context']).to.include(\"$metadata#Metrics\");\r",
											"    });\r",
											"\r",
											"    var metricName = decodeURIComponent(pm.request.url.getQueryString()).split(\"$filter=Name eq \")[1].replace(\"'\",\"\").split(\".\")[0];\r",
											"    console.log(metricName);\r",
											"\r",
											"    for(var elem of jsonDataElements){\r",
											"        pm.test(\"Test Metrics properties\", function(){\r",
											"\r",
											"            if(elem[\"Name\"]) pm.expect(elem[\"Name\"].split(\".\")[0]).to.be.equal(metricName);\r",
											"            else pm.expect.fail(\"Name not found in element properties\");\r",
											"            \r",
											"            if(elem[\"Timestamp\"]) pm.expect(elem[\"Timestamp\"]).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);\r",
											"            else pm.expect.fail(\"Timestamp not found in element properties\");\r",
											"                        \r",
											"            switch(metricName){\r",
											"                case \"systematic_production\":\r",
											"                case \"on-demand default\":\r",
											"                case \"on-demand non-default\":\r",
											"                case \"Archived\":\r",
											"                case \"Retrieved\":\r",
											"                case \"Download\":\r",
											"                    console.log(\"Expected Counter\");\r",
											"                    if(elem[\"MetricType\"]) pm.expect(elem[\"MetricType\"]).to.be.equal(\"Counter\");\r",
											"                    else pm.expect.fail(\"MetricType not found in element properties\");\r",
											"                    if(elem[\"Counter\"]) pm.expect(elem[\"Counter\"]).to.be.a(\"number\");\r",
											"                    else pm.expect.fail(\"Counter not found in element properties\");\r",
											"                    //pm.expect(elem[\"Gauge\"]).to.be.equal(null);\r",
											"                    break;\r",
											"                case \"SensingToPublication\":\r",
											"                case \"OriginToPublication\":\r",
											"                case \"SubmissionToCompletion\":\r",
											"                case \"Service\":\r",
											"                    console.log(\"Expected Gauge\");\r",
											"                    if(elem[\"MetricType\"]) pm.expect(elem[\"MetricType\"]).to.be.equal(\"Gauge\");\r",
											"                    else pm.expect.fail(\"MetricType not found in element properties\");\r",
											"                    if(elem[\"Gauge\"]){\r",
											"                        pm.expect(elem[\"Gauge\"]).to.be.a(\"string\");\r",
											"                        pm.expect(parseInt(elem[\"Gauge\"])).to.be.a(\"number\");\r",
											"                    } else pm.expect.fail(\"Gauge not found in element properties\");\r",
											"                    //pm.expect(elem[\"Counter\"]).to.be.equal(null);\r",
											"                    break;\r",
											"            }\r",
											"        });\r",
											"    }\r",
											"}\r",
											"\r",
											"catch (err) {\r",
											"    pm.test(request.name, function () {\r",
											"        pm.expect.fail(err.toString());\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript",
										"id": "37a528ff-043c-46ae-8ffa-df6119afa4c8"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{service-root-uri}}/odata/v1/Metrics?$filter=Name eq 'SensingToPublication.Monthly.max.time.{{metric_productType}}.{{metric_platformShortName}}.{{metric_platformSerialIdentifier}}'",
									"host": [
										"{{service-root-uri}}"
									],
									"path": [
										"odata",
										"v1",
										"Metrics"
									],
									"query": [
										{
											"key": "$filter",
											"value": "Name eq 'SensingToPublication.Monthly.max.time.{{metric_productType}}.{{metric_platformShortName}}.{{metric_platformSerialIdentifier}}'"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "PRIP_SensingToPublication_Monthly_avg_time_productType_platformShortName_platformSerialIdentifier",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {\r",
											"    var jsonDataElements = pm.response.json().value;\r",
											"\r",
											"    pm.test(\"Response time is less than \" + environment[\"query-timeout\"] + \"ms\", function () {\r",
											"        pm.expect(pm.response.responseTime).to.be.below(parseInt(environment[\"query-timeout\"]));\r",
											"    });\r",
											"\r",
											"    pm.test(\"Test OData context\", function(){\r",
											"        query_string = pm.request.url.getQueryString();\r",
											"        pm.expect( pm.response.json()['@odata.context']).to.include(\"$metadata#Metrics\");\r",
											"    });\r",
											"\r",
											"    var metricName = decodeURIComponent(pm.request.url.getQueryString()).split(\"$filter=Name eq \")[1].replace(\"'\",\"\").split(\".\")[0];\r",
											"    console.log(metricName);\r",
											"\r",
											"    for(var elem of jsonDataElements){\r",
											"        pm.test(\"Test Metrics properties\", function(){\r",
											"\r",
											"            if(elem[\"Name\"]) pm.expect(elem[\"Name\"].split(\".\")[0]).to.be.equal(metricName);\r",
											"            else pm.expect.fail(\"Name not found in element properties\");\r",
											"            \r",
											"            if(elem[\"Timestamp\"]) pm.expect(elem[\"Timestamp\"]).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);\r",
											"            else pm.expect.fail(\"Timestamp not found in element properties\");\r",
											"                        \r",
											"            switch(metricName){\r",
											"                case \"systematic_production\":\r",
											"                case \"on-demand default\":\r",
											"                case \"on-demand non-default\":\r",
											"                case \"Archived\":\r",
											"                case \"Retrieved\":\r",
											"                case \"Download\":\r",
											"                    console.log(\"Expected Counter\");\r",
											"                    if(elem[\"MetricType\"]) pm.expect(elem[\"MetricType\"]).to.be.equal(\"Counter\");\r",
											"                    else pm.expect.fail(\"MetricType not found in element properties\");\r",
											"                    if(elem[\"Counter\"]) pm.expect(elem[\"Counter\"]).to.be.a(\"number\");\r",
											"                    else pm.expect.fail(\"Counter not found in element properties\");\r",
											"                    //pm.expect(elem[\"Gauge\"]).to.be.equal(null);\r",
											"                    break;\r",
											"                case \"SensingToPublication\":\r",
											"                case \"OriginToPublication\":\r",
											"                case \"SubmissionToCompletion\":\r",
											"                case \"Service\":\r",
											"                    console.log(\"Expected Gauge\");\r",
											"                    if(elem[\"MetricType\"]) pm.expect(elem[\"MetricType\"]).to.be.equal(\"Gauge\");\r",
											"                    else pm.expect.fail(\"MetricType not found in element properties\");\r",
											"                    if(elem[\"Gauge\"]){\r",
											"                        pm.expect(elem[\"Gauge\"]).to.be.a(\"string\");\r",
											"                        pm.expect(parseInt(elem[\"Gauge\"])).to.be.a(\"number\");\r",
											"                    } else pm.expect.fail(\"Gauge not found in element properties\");\r",
											"                    //pm.expect(elem[\"Counter\"]).to.be.equal(null);\r",
											"                    break;\r",
											"            }\r",
											"        });\r",
											"    }\r",
											"}\r",
											"\r",
											"catch (err) {\r",
											"    pm.test(request.name, function () {\r",
											"        pm.expect.fail(err.toString());\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript",
										"id": "ab6b3102-b0ad-4013-b810-4c409c9ae65b"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{service-root-uri}}/odata/v1/Metrics?$filter=Name eq 'SensingToPublication.Monthly.avg.time.{{metric_productType}}.{{metric_platformShortName}}.{{metric_platformSerialIdentifier}}'",
									"host": [
										"{{service-root-uri}}"
									],
									"path": [
										"odata",
										"v1",
										"Metrics"
									],
									"query": [
										{
											"key": "$filter",
											"value": "Name eq 'SensingToPublication.Monthly.avg.time.{{metric_productType}}.{{metric_platformShortName}}.{{metric_platformSerialIdentifier}}'"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "PRIP_Service_KPI_value",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {\r",
											"    var jsonDataElements = pm.response.json().value;\r",
											"\r",
											"    pm.test(\"Response time is less than \" + environment[\"query-timeout\"] + \"ms\", function () {\r",
											"        pm.expect(pm.response.responseTime).to.be.below(parseInt(environment[\"query-timeout\"]));\r",
											"    });\r",
											"\r",
											"    pm.test(\"Test OData context\", function(){\r",
											"        query_string = pm.request.url.getQueryString();\r",
											"        pm.expect( pm.response.json()['@odata.context']).to.include(\"$metadata#Metrics\");\r",
											"    });\r",
											"\r",
											"    var metricName = decodeURIComponent(pm.request.url.getQueryString()).split(\"$filter=Name eq \")[1].replace(\"'\",\"\").split(\".\")[0];\r",
											"    console.log(metricName);\r",
											"\r",
											"    for(var elem of jsonDataElements){\r",
											"        pm.test(\"Test Metrics properties\", function(){\r",
											"\r",
											"            if(elem[\"Name\"]) pm.expect(elem[\"Name\"].split(\".\")[0]).to.be.equal(metricName);\r",
											"            else pm.expect.fail(\"Name not found in element properties\");\r",
											"            \r",
											"            if(elem[\"Timestamp\"]) pm.expect(elem[\"Timestamp\"]).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);\r",
											"            else pm.expect.fail(\"Timestamp not found in element properties\");\r",
											"                        \r",
											"            switch(metricName){\r",
											"                case \"systematic_production\":\r",
											"                case \"on-demand default\":\r",
											"                case \"on-demand non-default\":\r",
											"                case \"Archived\":\r",
											"                case \"Retrieved\":\r",
											"                case \"Download\":\r",
											"                    console.log(\"Expected Counter\");\r",
											"                    if(elem[\"MetricType\"]) pm.expect(elem[\"MetricType\"]).to.be.equal(\"Counter\");\r",
											"                    else pm.expect.fail(\"MetricType not found in element properties\");\r",
											"                    if(elem[\"Counter\"]) pm.expect(elem[\"Counter\"]).to.be.a(\"number\");\r",
											"                    else pm.expect.fail(\"Counter not found in element properties\");\r",
											"                    //pm.expect(elem[\"Gauge\"]).to.be.equal(null);\r",
											"                    break;\r",
											"                case \"SensingToPublication\":\r",
											"                case \"OriginToPublication\":\r",
											"                case \"SubmissionToCompletion\":\r",
											"                case \"Service\":\r",
											"                    console.log(\"Expected Gauge\");\r",
											"                    if(elem[\"MetricType\"]) pm.expect(elem[\"MetricType\"]).to.be.equal(\"Gauge\");\r",
											"                    else pm.expect.fail(\"MetricType not found in element properties\");\r",
											"                    if(elem[\"Gauge\"]){\r",
											"                        pm.expect(elem[\"Gauge\"]).to.be.a(\"string\");\r",
											"                        pm.expect(parseInt(elem[\"Gauge\"])).to.be.a(\"number\");\r",
											"                    } else pm.expect.fail(\"Gauge not found in element properties\");\r",
											"                    //pm.expect(elem[\"Counter\"]).to.be.equal(null);\r",
											"                    break;\r",
											"            }\r",
											"        });\r",
											"    }\r",
											"}\r",
											"\r",
											"catch (err) {\r",
											"    pm.test(request.name, function () {\r",
											"        pm.expect.fail(err.toString());\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript",
										"id": "c29c04de-e1a9-4509-961d-f1ea04cc15a6"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{service-root-uri}}/odata/v1/Metrics?$filter=Name eq 'Service.{{metric_KPI}}.value'",
									"host": [
										"{{service-root-uri}}"
									],
									"path": [
										"odata",
										"v1",
										"Metrics"
									],
									"query": [
										{
											"key": "$filter",
											"value": "Name eq 'Service.{{metric_KPI}}.value'"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "PRIP_SubmissionToCompletion_Daily_min_time",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {\r",
											"    var jsonDataElements = pm.response.json().value;\r",
											"\r",
											"    pm.test(\"Response time is less than \" + environment[\"query-timeout\"] + \"ms\", function () {\r",
											"        pm.expect(pm.response.responseTime).to.be.below(parseInt(environment[\"query-timeout\"]));\r",
											"    });\r",
											"\r",
											"    pm.test(\"Test OData context\", function(){\r",
											"        query_string = pm.request.url.getQueryString();\r",
											"        pm.expect( pm.response.json()['@odata.context']).to.include(\"$metadata#Metrics\");\r",
											"    });\r",
											"\r",
											"    var metricName = decodeURIComponent(pm.request.url.getQueryString()).split(\"$filter=Name eq \")[1].replace(\"'\",\"\").split(\".\")[0];\r",
											"    console.log(metricName);\r",
											"\r",
											"    for(var elem of jsonDataElements){\r",
											"        pm.test(\"Test Metrics properties\", function(){\r",
											"\r",
											"            if(elem[\"Name\"]) pm.expect(elem[\"Name\"].split(\".\")[0]).to.be.equal(metricName);\r",
											"            else pm.expect.fail(\"Name not found in element properties\");\r",
											"            \r",
											"            if(elem[\"Timestamp\"]) pm.expect(elem[\"Timestamp\"]).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);\r",
											"            else pm.expect.fail(\"Timestamp not found in element properties\");\r",
											"                        \r",
											"            switch(metricName){\r",
											"                case \"systematic_production\":\r",
											"                case \"on-demand default\":\r",
											"                case \"on-demand non-default\":\r",
											"                case \"Archived\":\r",
											"                case \"Retrieved\":\r",
											"                case \"Download\":\r",
											"                    console.log(\"Expected Counter\");\r",
											"                    if(elem[\"MetricType\"]) pm.expect(elem[\"MetricType\"]).to.be.equal(\"Counter\");\r",
											"                    else pm.expect.fail(\"MetricType not found in element properties\");\r",
											"                    if(elem[\"Counter\"]) pm.expect(elem[\"Counter\"]).to.be.a(\"number\");\r",
											"                    else pm.expect.fail(\"Counter not found in element properties\");\r",
											"                    //pm.expect(elem[\"Gauge\"]).to.be.equal(null);\r",
											"                    break;\r",
											"                case \"SensingToPublication\":\r",
											"                case \"OriginToPublication\":\r",
											"                case \"SubmissionToCompletion\":\r",
											"                case \"Service\":\r",
											"                    console.log(\"Expected Gauge\");\r",
											"                    if(elem[\"MetricType\"]) pm.expect(elem[\"MetricType\"]).to.be.equal(\"Gauge\");\r",
											"                    else pm.expect.fail(\"MetricType not found in element properties\");\r",
											"                    if(elem[\"Gauge\"]){\r",
											"                        pm.expect(elem[\"Gauge\"]).to.be.a(\"string\");\r",
											"                        pm.expect(parseInt(elem[\"Gauge\"])).to.be.a(\"number\");\r",
											"                    } else pm.expect.fail(\"Gauge not found in element properties\");\r",
											"                    //pm.expect(elem[\"Counter\"]).to.be.equal(null);\r",
											"                    break;\r",
											"            }\r",
											"        });\r",
											"    }\r",
											"}\r",
											"\r",
											"catch (err) {\r",
											"    pm.test(request.name, function () {\r",
											"        pm.expect.fail(err.toString());\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript",
										"id": "5ad866b6-39aa-4635-8102-2f9cd6e49951"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{service-root-uri}}/odata/v1/Metrics?$filter=Name eq 'SubmissionToCompletion.Daily.min.time'",
									"host": [
										"{{service-root-uri}}"
									],
									"path": [
										"odata",
										"v1",
										"Metrics"
									],
									"query": [
										{
											"key": "$filter",
											"value": "Name eq 'SubmissionToCompletion.Daily.min.time'"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "PRIP_SubmissionToCompletion_Daily_max_time",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {\r",
											"    var jsonDataElements = pm.response.json().value;\r",
											"\r",
											"    pm.test(\"Response time is less than \" + environment[\"query-timeout\"] + \"ms\", function () {\r",
											"        pm.expect(pm.response.responseTime).to.be.below(parseInt(environment[\"query-timeout\"]));\r",
											"    });\r",
											"\r",
											"    pm.test(\"Test OData context\", function(){\r",
											"        query_string = pm.request.url.getQueryString();\r",
											"        pm.expect( pm.response.json()['@odata.context']).to.include(\"$metadata#Metrics\");\r",
											"    });\r",
											"\r",
											"    var metricName = decodeURIComponent(pm.request.url.getQueryString()).split(\"$filter=Name eq \")[1].replace(\"'\",\"\").split(\".\")[0];\r",
											"    console.log(metricName);\r",
											"\r",
											"    for(var elem of jsonDataElements){\r",
											"        pm.test(\"Test Metrics properties\", function(){\r",
											"\r",
											"            if(elem[\"Name\"]) pm.expect(elem[\"Name\"].split(\".\")[0]).to.be.equal(metricName);\r",
											"            else pm.expect.fail(\"Name not found in element properties\");\r",
											"            \r",
											"            if(elem[\"Timestamp\"]) pm.expect(elem[\"Timestamp\"]).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);\r",
											"            else pm.expect.fail(\"Timestamp not found in element properties\");\r",
											"                        \r",
											"            switch(metricName){\r",
											"                case \"systematic_production\":\r",
											"                case \"on-demand default\":\r",
											"                case \"on-demand non-default\":\r",
											"                case \"Archived\":\r",
											"                case \"Retrieved\":\r",
											"                case \"Download\":\r",
											"                    console.log(\"Expected Counter\");\r",
											"                    if(elem[\"MetricType\"]) pm.expect(elem[\"MetricType\"]).to.be.equal(\"Counter\");\r",
											"                    else pm.expect.fail(\"MetricType not found in element properties\");\r",
											"                    if(elem[\"Counter\"]) pm.expect(elem[\"Counter\"]).to.be.a(\"number\");\r",
											"                    else pm.expect.fail(\"Counter not found in element properties\");\r",
											"                    //pm.expect(elem[\"Gauge\"]).to.be.equal(null);\r",
											"                    break;\r",
											"                case \"SensingToPublication\":\r",
											"                case \"OriginToPublication\":\r",
											"                case \"SubmissionToCompletion\":\r",
											"                case \"Service\":\r",
											"                    console.log(\"Expected Gauge\");\r",
											"                    if(elem[\"MetricType\"]) pm.expect(elem[\"MetricType\"]).to.be.equal(\"Gauge\");\r",
											"                    else pm.expect.fail(\"MetricType not found in element properties\");\r",
											"                    if(elem[\"Gauge\"]){\r",
											"                        pm.expect(elem[\"Gauge\"]).to.be.a(\"string\");\r",
											"                        pm.expect(parseInt(elem[\"Gauge\"])).to.be.a(\"number\");\r",
											"                    } else pm.expect.fail(\"Gauge not found in element properties\");\r",
											"                    //pm.expect(elem[\"Counter\"]).to.be.equal(null);\r",
											"                    break;\r",
											"            }\r",
											"        });\r",
											"    }\r",
											"}\r",
											"\r",
											"catch (err) {\r",
											"    pm.test(request.name, function () {\r",
											"        pm.expect.fail(err.toString());\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript",
										"id": "b29202db-ba6a-4248-b77f-5bd0c609f993"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{service-root-uri}}/odata/v1/Metrics?$filter=Name eq 'SubmissionToCompletion.Daily.max.time'",
									"host": [
										"{{service-root-uri}}"
									],
									"path": [
										"odata",
										"v1",
										"Metrics"
									],
									"query": [
										{
											"key": "$filter",
											"value": "Name eq 'SubmissionToCompletion.Daily.max.time'"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "PRIP_SubmissionToCompletion_Daily_avg_time",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {\r",
											"    var jsonDataElements = pm.response.json().value;\r",
											"\r",
											"    pm.test(\"Response time is less than \" + environment[\"query-timeout\"] + \"ms\", function () {\r",
											"        pm.expect(pm.response.responseTime).to.be.below(parseInt(environment[\"query-timeout\"]));\r",
											"    });\r",
											"\r",
											"    pm.test(\"Test OData context\", function(){\r",
											"        query_string = pm.request.url.getQueryString();\r",
											"        pm.expect( pm.response.json()['@odata.context']).to.include(\"$metadata#Metrics\");\r",
											"    });\r",
											"\r",
											"    var metricName = decodeURIComponent(pm.request.url.getQueryString()).split(\"$filter=Name eq \")[1].replace(\"'\",\"\").split(\".\")[0];\r",
											"    console.log(metricName);\r",
											"\r",
											"    for(var elem of jsonDataElements){\r",
											"        pm.test(\"Test Metrics properties\", function(){\r",
											"\r",
											"            if(elem[\"Name\"]) pm.expect(elem[\"Name\"].split(\".\")[0]).to.be.equal(metricName);\r",
											"            else pm.expect.fail(\"Name not found in element properties\");\r",
											"            \r",
											"            if(elem[\"Timestamp\"]) pm.expect(elem[\"Timestamp\"]).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);\r",
											"            else pm.expect.fail(\"Timestamp not found in element properties\");\r",
											"                        \r",
											"            switch(metricName){\r",
											"                case \"systematic_production\":\r",
											"                case \"on-demand default\":\r",
											"                case \"on-demand non-default\":\r",
											"                case \"Archived\":\r",
											"                case \"Retrieved\":\r",
											"                case \"Download\":\r",
											"                    console.log(\"Expected Counter\");\r",
											"                    if(elem[\"MetricType\"]) pm.expect(elem[\"MetricType\"]).to.be.equal(\"Counter\");\r",
											"                    else pm.expect.fail(\"MetricType not found in element properties\");\r",
											"                    if(elem[\"Counter\"]) pm.expect(elem[\"Counter\"]).to.be.a(\"number\");\r",
											"                    else pm.expect.fail(\"Counter not found in element properties\");\r",
											"                    //pm.expect(elem[\"Gauge\"]).to.be.equal(null);\r",
											"                    break;\r",
											"                case \"SensingToPublication\":\r",
											"                case \"OriginToPublication\":\r",
											"                case \"SubmissionToCompletion\":\r",
											"                case \"Service\":\r",
											"                    console.log(\"Expected Gauge\");\r",
											"                    if(elem[\"MetricType\"]) pm.expect(elem[\"MetricType\"]).to.be.equal(\"Gauge\");\r",
											"                    else pm.expect.fail(\"MetricType not found in element properties\");\r",
											"                    if(elem[\"Gauge\"]){\r",
											"                        pm.expect(elem[\"Gauge\"]).to.be.a(\"string\");\r",
											"                        pm.expect(parseInt(elem[\"Gauge\"])).to.be.a(\"number\");\r",
											"                    } else pm.expect.fail(\"Gauge not found in element properties\");\r",
											"                    //pm.expect(elem[\"Counter\"]).to.be.equal(null);\r",
											"                    break;\r",
											"            }\r",
											"        });\r",
											"    }\r",
											"}\r",
											"\r",
											"catch (err) {\r",
											"    pm.test(request.name, function () {\r",
											"        pm.expect.fail(err.toString());\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript",
										"id": "5a02b357-8385-4d75-805e-268791577d5b"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{service-root-uri}}/odata/v1/Metrics?$filter=Name eq 'SubmissionToCompletion.Daily.avg.time'",
									"host": [
										"{{service-root-uri}}"
									],
									"path": [
										"odata",
										"v1",
										"Metrics"
									],
									"query": [
										{
											"key": "$filter",
											"value": "Name eq 'SubmissionToCompletion.Daily.avg.time'"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "PRIP_SubmissionToCompletion_Monthly_min_time",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {\r",
											"    var jsonDataElements = pm.response.json().value;\r",
											"\r",
											"    pm.test(\"Response time is less than \" + environment[\"query-timeout\"] + \"ms\", function () {\r",
											"        pm.expect(pm.response.responseTime).to.be.below(parseInt(environment[\"query-timeout\"]));\r",
											"    });\r",
											"\r",
											"    pm.test(\"Test OData context\", function(){\r",
											"        query_string = pm.request.url.getQueryString();\r",
											"        pm.expect( pm.response.json()['@odata.context']).to.include(\"$metadata#Metrics\");\r",
											"    });\r",
											"\r",
											"    var metricName = decodeURIComponent(pm.request.url.getQueryString()).split(\"$filter=Name eq \")[1].replace(\"'\",\"\").split(\".\")[0];\r",
											"    console.log(metricName);\r",
											"\r",
											"    for(var elem of jsonDataElements){\r",
											"        pm.test(\"Test Metrics properties\", function(){\r",
											"\r",
											"            if(elem[\"Name\"]) pm.expect(elem[\"Name\"].split(\".\")[0]).to.be.equal(metricName);\r",
											"            else pm.expect.fail(\"Name not found in element properties\");\r",
											"            \r",
											"            if(elem[\"Timestamp\"]) pm.expect(elem[\"Timestamp\"]).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);\r",
											"            else pm.expect.fail(\"Timestamp not found in element properties\");\r",
											"                        \r",
											"            switch(metricName){\r",
											"                case \"systematic_production\":\r",
											"                case \"on-demand default\":\r",
											"                case \"on-demand non-default\":\r",
											"                case \"Archived\":\r",
											"                case \"Retrieved\":\r",
											"                case \"Download\":\r",
											"                    console.log(\"Expected Counter\");\r",
											"                    if(elem[\"MetricType\"]) pm.expect(elem[\"MetricType\"]).to.be.equal(\"Counter\");\r",
											"                    else pm.expect.fail(\"MetricType not found in element properties\");\r",
											"                    if(elem[\"Counter\"]) pm.expect(elem[\"Counter\"]).to.be.a(\"number\");\r",
											"                    else pm.expect.fail(\"Counter not found in element properties\");\r",
											"                    //pm.expect(elem[\"Gauge\"]).to.be.equal(null);\r",
											"                    break;\r",
											"                case \"SensingToPublication\":\r",
											"                case \"OriginToPublication\":\r",
											"                case \"SubmissionToCompletion\":\r",
											"                case \"Service\":\r",
											"                    console.log(\"Expected Gauge\");\r",
											"                    if(elem[\"MetricType\"]) pm.expect(elem[\"MetricType\"]).to.be.equal(\"Gauge\");\r",
											"                    else pm.expect.fail(\"MetricType not found in element properties\");\r",
											"                    if(elem[\"Gauge\"]){\r",
											"                        pm.expect(elem[\"Gauge\"]).to.be.a(\"string\");\r",
											"                        pm.expect(parseInt(elem[\"Gauge\"])).to.be.a(\"number\");\r",
											"                    } else pm.expect.fail(\"Gauge not found in element properties\");\r",
											"                    //pm.expect(elem[\"Counter\"]).to.be.equal(null);\r",
											"                    break;\r",
											"            }\r",
											"        });\r",
											"    }\r",
											"}\r",
											"\r",
											"catch (err) {\r",
											"    pm.test(request.name, function () {\r",
											"        pm.expect.fail(err.toString());\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript",
										"id": "cc0deb47-3f7f-4b37-b037-fb917ba5ef9e"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{service-root-uri}}/odata/v1/Metrics?$filter=Name eq 'SubmissionToCompletion.Monthly.min.time'",
									"host": [
										"{{service-root-uri}}"
									],
									"path": [
										"odata",
										"v1",
										"Metrics"
									],
									"query": [
										{
											"key": "$filter",
											"value": "Name eq 'SubmissionToCompletion.Monthly.min.time'"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "PRIP_SubmissionToCompletion_Monthly_max_time",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {\r",
											"    var jsonDataElements = pm.response.json().value;\r",
											"\r",
											"    pm.test(\"Response time is less than \" + environment[\"query-timeout\"] + \"ms\", function () {\r",
											"        pm.expect(pm.response.responseTime).to.be.below(parseInt(environment[\"query-timeout\"]));\r",
											"    });\r",
											"\r",
											"    pm.test(\"Test OData context\", function(){\r",
											"        query_string = pm.request.url.getQueryString();\r",
											"        pm.expect( pm.response.json()['@odata.context']).to.include(\"$metadata#Metrics\");\r",
											"    });\r",
											"\r",
											"    var metricName = decodeURIComponent(pm.request.url.getQueryString()).split(\"$filter=Name eq \")[1].replace(\"'\",\"\").split(\".\")[0];\r",
											"    console.log(metricName);\r",
											"\r",
											"    for(var elem of jsonDataElements){\r",
											"        pm.test(\"Test Metrics properties\", function(){\r",
											"\r",
											"            if(elem[\"Name\"]) pm.expect(elem[\"Name\"].split(\".\")[0]).to.be.equal(metricName);\r",
											"            else pm.expect.fail(\"Name not found in element properties\");\r",
											"            \r",
											"            if(elem[\"Timestamp\"]) pm.expect(elem[\"Timestamp\"]).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);\r",
											"            else pm.expect.fail(\"Timestamp not found in element properties\");\r",
											"                        \r",
											"            switch(metricName){\r",
											"                case \"systematic_production\":\r",
											"                case \"on-demand default\":\r",
											"                case \"on-demand non-default\":\r",
											"                case \"Archived\":\r",
											"                case \"Retrieved\":\r",
											"                case \"Download\":\r",
											"                    console.log(\"Expected Counter\");\r",
											"                    if(elem[\"MetricType\"]) pm.expect(elem[\"MetricType\"]).to.be.equal(\"Counter\");\r",
											"                    else pm.expect.fail(\"MetricType not found in element properties\");\r",
											"                    if(elem[\"Counter\"]) pm.expect(elem[\"Counter\"]).to.be.a(\"number\");\r",
											"                    else pm.expect.fail(\"Counter not found in element properties\");\r",
											"                    //pm.expect(elem[\"Gauge\"]).to.be.equal(null);\r",
											"                    break;\r",
											"                case \"SensingToPublication\":\r",
											"                case \"OriginToPublication\":\r",
											"                case \"SubmissionToCompletion\":\r",
											"                case \"Service\":\r",
											"                    console.log(\"Expected Gauge\");\r",
											"                    if(elem[\"MetricType\"]) pm.expect(elem[\"MetricType\"]).to.be.equal(\"Gauge\");\r",
											"                    else pm.expect.fail(\"MetricType not found in element properties\");\r",
											"                    if(elem[\"Gauge\"]){\r",
											"                        pm.expect(elem[\"Gauge\"]).to.be.a(\"string\");\r",
											"                        pm.expect(parseInt(elem[\"Gauge\"])).to.be.a(\"number\");\r",
											"                    } else pm.expect.fail(\"Gauge not found in element properties\");\r",
											"                    //pm.expect(elem[\"Counter\"]).to.be.equal(null);\r",
											"                    break;\r",
											"            }\r",
											"        });\r",
											"    }\r",
											"}\r",
											"\r",
											"catch (err) {\r",
											"    pm.test(request.name, function () {\r",
											"        pm.expect.fail(err.toString());\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript",
										"id": "62446cdb-67d6-4c7e-aa64-8f51fc41dcf7"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{service-root-uri}}/odata/v1/Metrics?$filter=Name eq 'SubmissionToCompletion.Monthly.max.time'",
									"host": [
										"{{service-root-uri}}"
									],
									"path": [
										"odata",
										"v1",
										"Metrics"
									],
									"query": [
										{
											"key": "$filter",
											"value": "Name eq 'SubmissionToCompletion.Monthly.max.time'"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "PRIP_SubmissionToCompletion_Monthly_avg_time",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {\r",
											"    var jsonDataElements = pm.response.json().value;\r",
											"\r",
											"    pm.test(\"Response time is less than \" + environment[\"query-timeout\"] + \"ms\", function () {\r",
											"        pm.expect(pm.response.responseTime).to.be.below(parseInt(environment[\"query-timeout\"]));\r",
											"    });\r",
											"\r",
											"    pm.test(\"Test OData context\", function(){\r",
											"        query_string = pm.request.url.getQueryString();\r",
											"        pm.expect( pm.response.json()['@odata.context']).to.include(\"$metadata#Metrics\");\r",
											"    });\r",
											"\r",
											"    var metricName = decodeURIComponent(pm.request.url.getQueryString()).split(\"$filter=Name eq \")[1].replace(\"'\",\"\").split(\".\")[0];\r",
											"    console.log(metricName);\r",
											"\r",
											"    for(var elem of jsonDataElements){\r",
											"        pm.test(\"Test Metrics properties\", function(){\r",
											"\r",
											"            if(elem[\"Name\"]) pm.expect(elem[\"Name\"].split(\".\")[0]).to.be.equal(metricName);\r",
											"            else pm.expect.fail(\"Name not found in element properties\");\r",
											"            \r",
											"            if(elem[\"Timestamp\"]) pm.expect(elem[\"Timestamp\"]).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d\\d\\d(\\d*)Z/);\r",
											"            else pm.expect.fail(\"Timestamp not found in element properties\");\r",
											"                        \r",
											"            switch(metricName){\r",
											"                case \"systematic_production\":\r",
											"                case \"on-demand default\":\r",
											"                case \"on-demand non-default\":\r",
											"                case \"Archived\":\r",
											"                case \"Retrieved\":\r",
											"                case \"Download\":\r",
											"                    console.log(\"Expected Counter\");\r",
											"                    if(elem[\"MetricType\"]) pm.expect(elem[\"MetricType\"]).to.be.equal(\"Counter\");\r",
											"                    else pm.expect.fail(\"MetricType not found in element properties\");\r",
											"                    if(elem[\"Counter\"]) pm.expect(elem[\"Counter\"]).to.be.a(\"number\");\r",
											"                    else pm.expect.fail(\"Counter not found in element properties\");\r",
											"                    //pm.expect(elem[\"Gauge\"]).to.be.equal(null);\r",
											"                    break;\r",
											"                case \"SensingToPublication\":\r",
											"                case \"OriginToPublication\":\r",
											"                case \"SubmissionToCompletion\":\r",
											"                case \"Service\":\r",
											"                    console.log(\"Expected Gauge\");\r",
											"                    if(elem[\"MetricType\"]) pm.expect(elem[\"MetricType\"]).to.be.equal(\"Gauge\");\r",
											"                    else pm.expect.fail(\"MetricType not found in element properties\");\r",
											"                    if(elem[\"Gauge\"]){\r",
											"                        pm.expect(elem[\"Gauge\"]).to.be.a(\"string\");\r",
											"                        pm.expect(parseInt(elem[\"Gauge\"])).to.be.a(\"number\");\r",
											"                    } else pm.expect.fail(\"Gauge not found in element properties\");\r",
											"                    //pm.expect(elem[\"Counter\"]).to.be.equal(null);\r",
											"                    break;\r",
											"            }\r",
											"        });\r",
											"    }\r",
											"}\r",
											"\r",
											"catch (err) {\r",
											"    pm.test(request.name, function () {\r",
											"        pm.expect.fail(err.toString());\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript",
										"id": "070d6a8b-d715-48f9-9c33-62d2f14231a9"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{service-root-uri}}/odata/v1/Metrics?$filter=Name eq 'SubmissionToCompletion.Monthly.avg.time'",
									"host": [
										"{{service-root-uri}}"
									],
									"path": [
										"odata",
										"v1",
										"Metrics"
									],
									"query": [
										{
											"key": "$filter",
											"value": "Name eq 'SubmissionToCompletion.Monthly.avg.time'"
										}
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "67349afb-74c9-4abd-889f-79a1f00c87c6",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "9a8e0fe3-c57a-4956-b73c-d732dc5b33a3",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"id": "92b535d3-af39-4c0a-969e-840d18e481c6",
			"key": "resp_min_records",
			"value": "1"
		},
		{
			"id": "cad904bc-c748-484e-88f3-0acfeb1ae5f9",
			"key": "notification_server_url",
			"value": "your_value_here"
		},
		{
			"id": "5fed3dcb-dc90-47c5-af7c-3afc31c00fe6",
			"key": "notification_username",
			"value": "your_value_here"
		},
		{
			"id": "7c6eb621-3098-4ba3-9b31-bb83d9e037fd",
			"key": "notification_password",
			"value": "your_value_here"
		},
		{
			"id": "7ea3dced-e351-4eaa-8666-da6300163b66",
			"key": "lta_path",
			"value": "your_value_here"
		},
		{
			"id": "19d77291-3ce5-4ae8-b12d-81f09e536782",
			"key": "mocklab_api_endpoint",
			"value": "https://api.mocklab.io/proxy/mock-api"
		},
		{
			"id": "36f526c2-23bf-49ad-b4e9-640ed2030855",
			"key": "subscription_auth_token",
			"value": "Token your_value_here"
		},
		{
			"id": "0180c0f3-c2ab-4ad1-9a05-8a8473fe4e4f",
			"key": "metric_productType",
			"value": "your_value_here"
		},
		{
			"id": "34be0a47-4be9-400f-8bab-1393beaff137",
			"key": "metric_platformShortName",
			"value": "your_value_here"
		},
		{
			"id": "b83615d9-3ec3-46ff-bfd8-daf0d6379566",
			"key": "metric_platformSerialIdentifier",
			"value": "your_value_here"
		},
		{
			"id": "ac88bc60-5375-49d5-8fef-60a156f2164f",
			"key": "metric_ServiceAlias",
			"value": "your_value_here"
		},
		{
			"id": "1829bd10-10a0-4258-8ba4-1aa917c48654",
			"key": "metric_KPI",
			"value": "your_value_here"
		},
		{
			"id": "6437e7e4-dc93-4ee4-8bd4-8529b2b53729",
			"key": "metric_productionType",
			"value": "your_value_here"
		},
		{
			"id": "6d29d150-4a48-40d2-9776-877158e06b01",
			"key": "metric_Username",
			"value": "your_value_here"
		}
	],
	"protocolProfileBehavior": {}
}